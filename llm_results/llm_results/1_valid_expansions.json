{
    "0": {
        "generations": [
            [
                "what genre is to the slaughter?",
                -2.1846754809699998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0115t8nf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0115t8nf ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0115t8nf",
            "mid2name": {
                "ns:m.0115t8nf": "To The Slaughter"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) To The Slaughter))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0115t8nf))"
        }
    },
    "1": {
        "generations": [
            [
                "what is the equivalent of the united states district court for the district of alaska?",
                -0.97762936683
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pd6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pd6g ns:government.governmental_body.body_this_is_a_component_of ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.03pd6g",
            "mid2name": {
                "ns:m.03pd6g": "United States District Court for the District of Alaska"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) United States District Court for the District of Alaska))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.03pd6g))"
        }
    },
    "2": {
        "generations": [
            [
                "how do you pronounce jetstar airways?",
                -0.71220887442
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ghcz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ghcz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02ghcz",
            "mid2name": {
                "ns:m.02ghcz": "Jetstar Airways"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Jetstar Airways))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02ghcz))"
        }
    },
    "3": {
        "generations": [
            [
                "which company produces ros\u00e9 wines?",
                -2.92145179609
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040n63)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040n63 ns:wine.wine_color.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.040n63",
            "mid2name": {
                "ns:m.040n63": "Ros\u00e9"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_color.wines) Ros\u00e9))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_color.wines) m.040n63))"
        }
    },
    "4": {
        "generations": [
            [
                "what characters have lived at st. george's college in cairo?",
                -2.772356519934
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c2sx_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c2sx_ ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.05c2sx_",
            "mid2name": {
                "ns:m.05c2sx_": "St. George's College, Cairo"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) St. George's College, Cairo))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.05c2sx_))"
        }
    },
    "5": {
        "generations": [
            [
                "who wrote a book about creativity?",
                -0.8874747458
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hj3lhd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hj3lhd ns:music.music_video_subject.subject_in_these_music_videos ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0hj3lhd",
            "mid2name": {
                "ns:m.0hj3lhd": "Creativity"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R music.music_video_subject.subject_in_these_music_videos) Creativity))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R music.music_video_subject.subject_in_these_music_videos) m.0hj3lhd))"
        }
    },
    "6": {
        "generations": [
            [
                "how is samaritanism pronounced?",
                -1.5093964794599999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06xg1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06xg1 ns:religion.religion.holidays ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.06xg1",
            "mid2name": {
                "ns:m.06xg1": "Samaritanism"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R religion.religion.holidays) Samaritanism))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R religion.religion.holidays) m.06xg1))"
        }
    },
    "7": {
        "generations": [
            [
                "who played harry zakovitch in tv episodes?",
                -2.17440791823
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09nk2n0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09nk2n0 ns:tv.tv_character.appeared_in_tv_episodes ?y .\n?y ns:tv.tv_guest_role.actor ?x .\n}\n",
            "TopicEntityMid": "m.09nk2n0",
            "mid2name": {
                "ns:m.09nk2n0": "Harry Zakovitch"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_guest_role.actor) (JOIN (R tv.tv_character.appeared_in_tv_episodes) Harry Zakovitch))",
            "SExpr": "(JOIN (R tv.tv_guest_role.actor) (JOIN (R tv.tv_character.appeared_in_tv_episodes) m.09nk2n0))"
        }
    },
    "8": {
        "generations": [
            [
                "what are some historical hindu places of worship?",
                -3.4995798025899996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03j6c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03j6c ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.03j6c",
            "mid2name": {
                "ns:m.03j6c": "Hinduism"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Hinduism))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.03j6c))"
        }
    },
    "9": {
        "generations": [
            [
                "what software has zotero developed?",
                -1.498453393708
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026lvy7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026lvy7 ns:computer.software.developer ?y .\n?y ns:computer.software_developer.software ?x .\n}\n",
            "TopicEntityMid": "m.026lvy7",
            "mid2name": {
                "ns:m.026lvy7": "Zotero"
            },
            "SExpr_w_name": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) Zotero))",
            "SExpr": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) m.026lvy7))"
        }
    },
    "10": {
        "generations": [
            [
                "how do you pronounce november 1st?",
                -1.4231755481200001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c_j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c_j ns:time.day_of_year.calendar_system ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05c_j",
            "mid2name": {
                "ns:m.05c_j": "November 1"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.day_of_year.calendar_system) November 1))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.day_of_year.calendar_system) m.05c_j))"
        }
    },
    "11": {
        "generations": [
            [
                "what editions of books has niklaus wirth written?",
                -2.08436500519
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fgl ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.05fgl",
            "mid2name": {
                "ns:m.05fgl": "Niklaus Wirth"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Niklaus Wirth))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05fgl))"
        }
    },
    "12": {
        "generations": [
            [
                "what top level domains are in the root but not taking registrations?",
                -3.0642543778500007
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hsn78)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hsn78 ns:internet.top_level_domain_status.domains ?y .\n?y ns:internet.top_level_domain.registry ?x .\n}\n",
            "TopicEntityMid": "m.02hsn78",
            "mid2name": {
                "ns:m.02hsn78": "In root but not taking registrations"
            },
            "SExpr_w_name": "(JOIN (R internet.top_level_domain.registry) (JOIN (R internet.top_level_domain_status.domains) In root but not taking registrations))",
            "SExpr": "(JOIN (R internet.top_level_domain.registry) (JOIN (R internet.top_level_domain_status.domains) m.02hsn78))"
        }
    },
    "13": {
        "generations": [
            [
                "who proposed the congressional apportionment amendment?",
                -1.33880743829
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vltsv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vltsv ns:law.constitutional_amendment.proposed_by ?y .\n?y ns:base.inaugurations.inauguration_speaker.inauguration ?x .\n}\n",
            "TopicEntityMid": "m.02vltsv",
            "mid2name": {
                "ns:m.02vltsv": "Congressional Apportionment Amendment"
            },
            "SExpr_w_name": "(JOIN (R base.inaugurations.inauguration_speaker.inauguration) (JOIN (R law.constitutional_amendment.proposed_by) Congressional Apportionment Amendment))",
            "SExpr": "(JOIN (R base.inaugurations.inauguration_speaker.inauguration) (JOIN (R law.constitutional_amendment.proposed_by) m.02vltsv))"
        }
    },
    "14": {
        "generations": [
            [
                "what songs did real girl compose?",
                -1.8840849052000002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qd4t3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qd4t3 ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02qd4t3",
            "mid2name": {
                "ns:m.02qd4t3": "Real Girl"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Real Girl))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.02qd4t3))"
        }
    },
    "15": {
        "generations": [
            [
                "who are some math rock artists?",
                -2.6249055333999998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gbcf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gbcf ns:music.genre.artists ?y .\n?y ns:base.database.database_host.database_s ?x .\n}\n",
            "TopicEntityMid": "m.01gbcf",
            "mid2name": {
                "ns:m.01gbcf": "Math rock"
            },
            "SExpr_w_name": "(JOIN (R base.database.database_host.database_s) (JOIN (R music.genre.artists) Math rock))",
            "SExpr": "(JOIN (R base.database.database_host.database_s) (JOIN (R music.genre.artists) m.01gbcf))"
        }
    },
    "16": {
        "generations": [
            [
                "who wrote the works of wolfgang tillmans?",
                -0.879236653
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bl47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bl47 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.01bl47",
            "mid2name": {
                "ns:m.01bl47": "Wolfgang Tillmans"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Wolfgang Tillmans))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.01bl47))"
        }
    },
    "17": {
        "generations": [
            [
                "what is the name of harvest moon estate and winery?",
                -1.36535898275
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ghq7r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ghq7r ns:business.business_operation.industry ?y .\n?y ns:base.descriptive_names.names.descriptive_name ?x .\n}\n",
            "TopicEntityMid": "m.03ghq7r",
            "mid2name": {
                "ns:m.03ghq7r": "Harvest Moon Estate and Winery"
            },
            "SExpr_w_name": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) Harvest Moon Estate and Winery))",
            "SExpr": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) m.03ghq7r))"
        }
    },
    "18": {
        "generations": [
            [
                "what type of spacecrafts did the author of dune messiah design?",
                -4.389989483614
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cxx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cxx ns:book.written_work.author ?y .\n?y ns:base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed ?x .\n}\n",
            "TopicEntityMid": "m.02cxx",
            "mid2name": {
                "ns:m.02cxx": "Dune Messiah"
            },
            "SExpr_w_name": "(JOIN (R base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed) (JOIN (R book.written_work.author) Dune Messiah))",
            "SExpr": "(JOIN (R base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed) (JOIN (R book.written_work.author) m.02cxx))"
        }
    },
    "19": {
        "generations": [
            [
                "what series of art did the author of \"harlem renaissance dialogues (part 6): publishing trends and modern readers\" create?",
                -6.468836645475001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gxq34z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gxq34z ns:book.written_work.author ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.0gxq34z",
            "mid2name": {
                "ns:m.0gxq34z": "Harlem Renaissance Dialogues (Part 6): Publishing Trends and Modern Readers"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R book.written_work.author) Harlem Renaissance Dialogues (Part 6): Publishing Trends and Modern Readers))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R book.written_work.author) m.0gxq34z))"
        }
    },
    "20": {
        "generations": [
            [
                "what type of websites does premiere media group, inc. own?",
                -2.4450097028399997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010bgq9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010bgq9v ns:internet.website_owner.websites_owned ?y .\n?y ns:internet.website.category ?x .\n}\n",
            "TopicEntityMid": "m.010bgq9v",
            "mid2name": {
                "ns:m.010bgq9v": "Premiere Media Group, Inc."
            },
            "SExpr_w_name": "(JOIN (R internet.website.category) (JOIN (R internet.website_owner.websites_owned) Premiere Media Group, Inc.))",
            "SExpr": "(JOIN (R internet.website.category) (JOIN (R internet.website_owner.websites_owned) m.010bgq9v))"
        }
    },
    "21": {
        "generations": [
            [
                "what languages are spoken by paraguayans?",
                -2.0927102945600002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h1q7kc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h1q7kc ns:people.ethnicity.includes_groups ?y .\n?y ns:people.ethnicity.languages_spoken ?x .\n}\n",
            "TopicEntityMid": "m.0h1q7kc",
            "mid2name": {
                "ns:m.0h1q7kc": "Paraguayan"
            },
            "SExpr_w_name": "(JOIN (R people.ethnicity.languages_spoken) (JOIN (R people.ethnicity.includes_groups) Paraguayan))",
            "SExpr": "(JOIN (R people.ethnicity.languages_spoken) (JOIN (R people.ethnicity.includes_groups) m.0h1q7kc))"
        }
    },
    "22": {
        "generations": [
            [
                "what are the internal martial arts?",
                -1.0102468019
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_yl6z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_yl6z ns:martial_arts.martial_art_category.martial_arts ?y .\n?y ns:martial_arts.martial_art.category ?x .\n}\n",
            "TopicEntityMid": "m.02_yl6z",
            "mid2name": {
                "ns:m.02_yl6z": "Internal"
            },
            "SExpr_w_name": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_art_category.martial_arts) Internal))",
            "SExpr": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_art_category.martial_arts) m.02_yl6z))"
        }
    },
    "23": {
        "generations": [
            [
                "who penciled the cover of batman #1?",
                -1.58013124369
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wkbg7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wkbg7 ns:comic_books.comic_book_issue.cover_colors ?y .\n?y ns:comic_books.comic_book_penciler.comic_books_penciled ?x .\n}\n",
            "TopicEntityMid": "m.02wkbg7",
            "mid2name": {
                "ns:m.02wkbg7": "Batman #1"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_issue.cover_colors) Batman #1))",
            "SExpr": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_issue.cover_colors) m.02wkbg7))"
        }
    },
    "24": {
        "generations": [
            [
                "what industry is the bell p-59a aircraft used in?",
                -3.9199925860400002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_w3r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_w3r ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.01_w3r",
            "mid2name": {
                "ns:m.01_w3r": "Bell P-59A"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) Bell P-59A))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.01_w3r))"
        }
    },
    "25": {
        "generations": [
            [
                "who discovered the keck observatory?",
                -0.76199738484
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01cw9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01cw9p ns:astronomy.astronomical_observatory.discoveries ?y .\n?y ns:astronomy.astronomical_discovery.discoverer ?x .\n}\n",
            "TopicEntityMid": "m.01cw9p",
            "mid2name": {
                "ns:m.01cw9p": "W. M. Keck Observatory"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.astronomical_observatory.discoveries) W. M. Keck Observatory))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.astronomical_observatory.discoveries) m.01cw9p))"
        }
    },
    "26": {
        "generations": [
            [
                "what organizations are in the case of the namesake murders?",
                -2.1054757892500002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xkcd6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xkcd6 ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.03xkcd6",
            "mid2name": {
                "ns:m.03xkcd6": "Case of the Namesake Murders"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) Case of the Namesake Murders))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) m.03xkcd6))"
        }
    },
    "27": {
        "generations": [
            [
                "what is the equivalent of gasoline?",
                -2.1185743262
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wy2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wy2 ns:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?y .\n?y ns:base.skosbase.skos_concept.equivalent_topic ?x .\n}\n",
            "TopicEntityMid": "m.05wy2",
            "mid2name": {
                "ns:m.05wy2": "Gasoline"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.skos_concept.equivalent_topic) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) Gasoline))",
            "SExpr": "(JOIN (R base.skosbase.skos_concept.equivalent_topic) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) m.05wy2))"
        }
    },
    "28": {
        "generations": [
            [
                "where is the headquarters of the walking club?",
                -0.8743908961
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083mg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083mg ns:organization.club_interest.clubs ?y .\n?y ns:organization.organization.headquarters ?x .\n}\n",
            "TopicEntityMid": "m.083mg",
            "mid2name": {
                "ns:m.083mg": "Walking"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.headquarters) (JOIN (R organization.club_interest.clubs) Walking))",
            "SExpr": "(JOIN (R organization.organization.headquarters) (JOIN (R organization.club_interest.clubs) m.083mg))"
        }
    },
    "29": {
        "generations": [
            [
                "what type of animals are native to kenya?",
                -3.673885579156
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019rg5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019rg5 ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.019rg5",
            "mid2name": {
                "ns:m.019rg5": "Kenya"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Kenya))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.019rg5))"
        }
    },
    "30": {
        "generations": [
            [
                "who wrote the stories featuring pai mahutanga?",
                -1.65618670482
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j2k3cz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j2k3cz ns:book.book_character.appears_in_stories ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0j2k3cz",
            "mid2name": {
                "ns:m.0j2k3cz": "Pai Mahutanga"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_character.appears_in_stories) Pai Mahutanga))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_character.appears_in_stories) m.0j2k3cz))"
        }
    },
    "31": {
        "generations": [
            [
                "who created the shaped canvas artwork?",
                -1.4487650257
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06t35m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06t35m ns:visual_art.visual_art_support.artworks ?y .\n?y ns:visual_art.artwork.artist ?x .\n}\n",
            "TopicEntityMid": "m.06t35m",
            "mid2name": {
                "ns:m.06t35m": "Shaped canvas"
            },
            "SExpr_w_name": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.visual_art_support.artworks) Shaped canvas))",
            "SExpr": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.visual_art_support.artworks) m.06t35m))"
        }
    },
    "32": {
        "generations": [
            [
                "what organizations is luke skywalker a part of?",
                -1.8958129586869996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1bg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1bg ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.0f1bg",
            "mid2name": {
                "ns:m.0f1bg": "Luke Skywalker"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Luke Skywalker))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.0f1bg))"
        }
    },
    "33": {
        "generations": [
            [
                "what genre is the band to war?",
                -1.3289371638
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rftl5b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rftl5b ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0rftl5b",
            "mid2name": {
                "ns:m.0rftl5b": "To War"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) To War))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0rftl5b))"
        }
    },
    "34": {
        "generations": [
            [
                "how do you pronounce kindergarten?",
                -1.9844592997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ft5b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ft5b ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01ft5b",
            "mid2name": {
                "ns:m.01ft5b": "Kindergarten"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Kindergarten))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01ft5b))"
        }
    },
    "35": {
        "generations": [
            [
                "what is the beaufort scale classification for a category 2 tropical cyclone (bom)?",
                -6.06097110299
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0256dw9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0256dw9 ns:meteorology.tropical_cyclone_category.Beaufort_scale ?y .\n?y ns:meteorology.beaufort_wind_force.tropical_cyclone_categories ?x .\n}\n",
            "TopicEntityMid": "m.0256dw9",
            "mid2name": {
                "ns:m.0256dw9": "Category 2 Tropical Cyclone (BOM)"
            },
            "SExpr_w_name": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) Category 2 Tropical Cyclone (BOM)))",
            "SExpr": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) m.0256dw9))"
        }
    },
    "36": {
        "generations": [
            [
                "what is disopyramide phosphate used to treat?",
                -0.2609403245
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqx75g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqx75g ns:medicine.drug.active_moieties ?y .\n?y ns:medicine.medical_treatment.used_to_treat ?x .\n}\n",
            "TopicEntityMid": "m.0hqx75g",
            "mid2name": {
                "ns:m.0hqx75g": "Disopyramide phosphate"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug.active_moieties) Disopyramide phosphate))",
            "SExpr": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug.active_moieties) m.0hqx75g))"
        }
    },
    "37": {
        "generations": [
            [
                "what is captain america's shield made of?",
                -0.3492599264000001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09vklq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09vklq ns:fictional_universe.fictional_object.composition ?y .\n?y ns:fictional_universe.fictional_substance.appears_in_fictional_universe ?x .\n}\n",
            "TopicEntityMid": "m.09vklq",
            "mid2name": {
                "ns:m.09vklq": "Captain America's shield"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_substance.appears_in_fictional_universe) (JOIN (R fictional_universe.fictional_object.composition) Captain America's shield))",
            "SExpr": "(JOIN (R fictional_universe.fictional_substance.appears_in_fictional_universe) (JOIN (R fictional_universe.fictional_object.composition) m.09vklq))"
        }
    },
    "38": {
        "generations": [
            [
                "what company produces gap's crown vineyard wines?",
                -2.0180851568200002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gdtdk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gdtdk ns:wine.vineyard.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.04gdtdk",
            "mid2name": {
                "ns:m.04gdtdk": "Gap's Crown Vineyard"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.vineyard.wines) Gap's Crown Vineyard))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.vineyard.wines) m.04gdtdk))"
        }
    },
    "39": {
        "generations": [
            [
                "what is the historical place of worship for the belief in premortality?",
                -6.74693710334
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sd44y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sd44y ns:religion.belief.belief_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.02sd44y",
            "mid2name": {
                "ns:m.02sd44y": "Premortality"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.belief.belief_of) Premortality))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.belief.belief_of) m.02sd44y))"
        }
    },
    "40": {
        "generations": [
            [
                "how do you pronounce 'usc trojans football'?",
                -2.43180928026
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07k53y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07k53y ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07k53y",
            "mid2name": {
                "ns:m.07k53y": "USC Trojans football"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) USC Trojans football))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07k53y))"
        }
    },
    "41": {
        "generations": [
            [
                "what city is the leisure deck located in?",
                -0.7299718187400001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05v205j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05v205j ns:business.business_location.address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.05v205j",
            "mid2name": {
                "ns:m.05v205j": "The Leisure Deck"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) The Leisure Deck))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) m.05v205j))"
        }
    },
    "42": {
        "generations": [
            [
                "what clubs are available at the jw marriott hotel mexico city?",
                -3.1597587592249994
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0myy0vz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0myy0vz ns:travel.accommodation.features ?y .\n?y ns:organization.club_interest.clubs ?x .\n}\n",
            "TopicEntityMid": "m.0myy0vz",
            "mid2name": {
                "ns:m.0myy0vz": "JW Marriott Hotel Mexico City"
            },
            "SExpr_w_name": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) JW Marriott Hotel Mexico City))",
            "SExpr": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) m.0myy0vz))"
        }
    },
    "43": {
        "generations": [
            [
                "what brand of medicine contains phenol/diphenhydramine?",
                -4.58609338495
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jxrk_0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jxrk_0 ns:medicine.drug.active_moieties ?y .\n?y ns:medicine.drug.brands ?x .\n}\n",
            "TopicEntityMid": "m.0jxrk_0",
            "mid2name": {
                "ns:m.0jxrk_0": "Phenol/Diphenhydramine"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug.brands) (JOIN (R medicine.drug.active_moieties) Phenol/Diphenhydramine))",
            "SExpr": "(JOIN (R medicine.drug.brands) (JOIN (R medicine.drug.active_moieties) m.0jxrk_0))"
        }
    },
    "44": {
        "generations": [
            [
                "how do you pronounce \"file archiver\"?",
                -1.7164492629000003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0120k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0120k ns:computer.software_genre.software_in_genre ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0120k",
            "mid2name": {
                "ns:m.0120k": "File archiver"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software_genre.software_in_genre) File archiver))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software_genre.software_in_genre) m.0120k))"
        }
    },
    "45": {
        "generations": [
            [
                "who are the characters that have lived at university college in toronto?",
                -4.9909763661
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yh0q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yh0q ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.01yh0q",
            "mid2name": {
                "ns:m.01yh0q": "University College, Toronto"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) University College, Toronto))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.01yh0q))"
        }
    },
    "46": {
        "generations": [
            [
                "what products use the arm architecture processor?",
                -2.797047997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gfzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gfzw ns:computer.computer_processor.manufacturers ?y .\n?y ns:user.robert.mobile_phones.product_brand.products ?x .\n}\n",
            "TopicEntityMid": "m.0gfzw",
            "mid2name": {
                "ns:m.0gfzw": "ARM architecture"
            },
            "SExpr_w_name": "(JOIN (R user.robert.mobile_phones.product_brand.products) (JOIN (R computer.computer_processor.manufacturers) ARM architecture))",
            "SExpr": "(JOIN (R user.robert.mobile_phones.product_brand.products) (JOIN (R computer.computer_processor.manufacturers) m.0gfzw))"
        }
    },
    "47": {
        "generations": [
            [
                "who works at stanford chemical engineering?",
                -1.8738361341999998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bl05x_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bl05x_ ns:business.employer.employees ?y .\n?y ns:business.employment_tenure.person ?x .\n}\n",
            "TopicEntityMid": "m.0bl05x_",
            "mid2name": {
                "ns:m.0bl05x_": "Stanford Chemical Engineering"
            },
            "SExpr_w_name": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) Stanford Chemical Engineering))",
            "SExpr": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) m.0bl05x_))"
        }
    },
    "48": {
        "generations": [
            [
                "what asteroid group was discovered at the sears tower - harvard observatory?",
                -3.388755309660001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047q349)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047q349 ns:astronomy.astronomical_observatory.discoveries ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.047q349",
            "mid2name": {
                "ns:m.047q349": "Sears Tower \u2013 Harvard Observatory"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) Sears Tower \u2013 Harvard Observatory))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) m.047q349))"
        }
    },
    "49": {
        "generations": [
            [
                "what organizations are in chapter seven: the hero's life?",
                -2.58071661769
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04c_fg9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04c_fg9 ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.04c_fg9",
            "mid2name": {
                "ns:m.04c_fg9": "Chapter Seven: The Hero's Life"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) Chapter Seven: The Hero's Life))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) m.04c_fg9))"
        }
    },
    "50": {
        "generations": [
            [
                "how do you pronounce dragon soul?",
                -1.6137533189000002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fr4gk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fr4gk7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0fr4gk7",
            "mid2name": {
                "ns:m.0fr4gk7": "Dragon Soul"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Dragon Soul))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0fr4gk7))"
        }
    },
    "51": {
        "generations": [
            [
                "what was the beaufort scale of typhoon haiyan?",
                -2.2964757672500005
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z2p66v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z2p66v ns:meteorology.tropical_cyclone.category ?y .\n?y ns:meteorology.tropical_cyclone_category.Beaufort_scale ?x .\n}\n",
            "TopicEntityMid": "m.0z2p66v",
            "mid2name": {
                "ns:m.0z2p66v": "Typhoon Haiyan"
            },
            "SExpr_w_name": "(JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) Typhoon Haiyan))",
            "SExpr": "(JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) m.0z2p66v))"
        }
    },
    "52": {
        "generations": [
            [
                "what is the japanese pronunciation of the word \"city\"?",
                -4.5911876257380015
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n32)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n32 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01n32",
            "mid2name": {
                "ns:m.01n32": "City"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) City))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01n32))"
        }
    },
    "53": {
        "generations": [
            [
                "how do you pronounce the word \"war\"?",
                -2.5500084613
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.082cb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.082cb ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.082cb",
            "mid2name": {
                "ns:m.082cb": "War"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) War))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.082cb))"
        }
    },
    "54": {
        "generations": [
            [
                "how do you pronounce kennedy space center launch complex 39?",
                -1.0829409479499998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.062vvj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.062vvj ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.062vvj",
            "mid2name": {
                "ns:m.062vvj": "Kennedy Space Center Launch Complex 39"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Kennedy Space Center Launch Complex 39))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.062vvj))"
        }
    },
    "55": {
        "generations": [
            [
                "who was involved in the development of google maps?",
                -1.1966251212999999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b70yvx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b70yvx ns:projects.project.participants ?y .\n?y ns:projects.project_participation.participant ?x .\n}\n",
            "TopicEntityMid": "m.0b70yvx",
            "mid2name": {
                "ns:m.0b70yvx": "Development of Google Maps"
            },
            "SExpr_w_name": "(JOIN (R projects.project_participation.participant) (JOIN (R projects.project.participants) Development of Google Maps))",
            "SExpr": "(JOIN (R projects.project_participation.participant) (JOIN (R projects.project.participants) m.0b70yvx))"
        }
    },
    "56": {
        "generations": [
            [
                "how do you pronounce lisp?",
                -0.54465565383
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kyw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kyw ns:computer.programming_language.dialects ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04kyw",
            "mid2name": {
                "ns:m.04kyw": "Lisp"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) Lisp))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) m.04kyw))"
        }
    },
    "57": {
        "generations": [
            [
                "what books are written about the cm-1 computer?",
                -2.71760929848
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_3zhw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_3zhw ns:computer.computer.parent_model ?y .\n?y ns:book.book_subject.works ?x .\n}\n",
            "TopicEntityMid": "m.02_3zhw",
            "mid2name": {
                "ns:m.02_3zhw": "CM-1"
            },
            "SExpr_w_name": "(JOIN (R book.book_subject.works) (JOIN (R computer.computer.parent_model) CM-1))",
            "SExpr": "(JOIN (R book.book_subject.works) (JOIN (R computer.computer.parent_model) m.02_3zhw))"
        }
    },
    "58": {
        "generations": [
            [
                "what is the series of conferences about artificial intelligence?",
                -2.9307034122
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mkz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mkz ns:conferences.conference_subject.specific_conferences_about_this ?y .\n?y ns:conferences.conference.series ?x .\n}\n",
            "TopicEntityMid": "m.0mkz",
            "mid2name": {
                "ns:m.0mkz": "Artificial intelligence"
            },
            "SExpr_w_name": "(JOIN (R conferences.conference.series) (JOIN (R conferences.conference_subject.specific_conferences_about_this) Artificial intelligence))",
            "SExpr": "(JOIN (R conferences.conference.series) (JOIN (R conferences.conference_subject.specific_conferences_about_this) m.0mkz))"
        }
    },
    "59": {
        "generations": [
            [
                "what country did jelena jankovi\u0107 represent in the olympics?",
                -2.473751737926
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06148c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06148c ns:olympics.olympic_athlete.country ?y .\n?y ns:olympics.olympic_athlete_affiliation.country ?x .\n}\n",
            "TopicEntityMid": "m.06148c",
            "mid2name": {
                "ns:m.06148c": "Jelena Jankovi\u0107"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) Jelena Jankovi\u0107))",
            "SExpr": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) m.06148c))"
        }
    },
    "60": {
        "generations": [
            [
                "what company manufactures the sony dslr-a100?",
                -3.125521743428601
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.022q2mh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.022q2mh ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.022q2mh",
            "mid2name": {
                "ns:m.022q2mh": "Sony DSLR-A100"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Sony DSLR-A100))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.022q2mh))"
        }
    },
    "61": {
        "generations": [
            [
                "who wrote the collected lute music of john dowland, 2nd edition?",
                -0.6370948776600001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gfnnz2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gfnnz2 ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0gfnnz2",
            "mid2name": {
                "ns:m.0gfnnz2": "The Collected Lute Music of John Dowland, 2nd edition"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) The Collected Lute Music of John Dowland, 2nd edition))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.0gfnnz2))"
        }
    },
    "62": {
        "generations": [
            [
                "what colors are the u.s. division hockey teams?",
                -5.0973913585499995
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05p7twy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05p7twy ns:ice_hockey.hockey_division.teams ?y .\n?y ns:sports.sports_team.colors ?x .\n}\n",
            "TopicEntityMid": "m.05p7twy",
            "mid2name": {
                "ns:m.05p7twy": "U.S. Division"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.colors) (JOIN (R ice_hockey.hockey_division.teams) U.S. Division))",
            "SExpr": "(JOIN (R sports.sports_team.colors) (JOIN (R ice_hockey.hockey_division.teams) m.05p7twy))"
        }
    },
    "63": {
        "generations": [
            [
                "who wrote the book mark buckingham?",
                -1.75414976283
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gs1w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gs1w ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03gs1w",
            "mid2name": {
                "ns:m.03gs1w": "Mark Buckingham"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Mark Buckingham))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.03gs1w))"
        }
    },
    "64": {
        "generations": [
            [
                "what breeds originated at charles university in prague?",
                -2.2529826366880004
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09hgk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09hgk ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.09hgk",
            "mid2name": {
                "ns:m.09hgk": "Charles University in Prague"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Charles University in Prague))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.09hgk))"
        }
    },
    "65": {
        "generations": [
            [
                "what clubs are associated with the civil war comic book series?",
                -3.164151457100001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09gwyd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09gwyd ns:comic_books.comic_book_series.publisher ?y .\n?y ns:organization.club_interest.clubs ?x .\n}\n",
            "TopicEntityMid": "m.09gwyd",
            "mid2name": {
                "ns:m.09gwyd": "Civil War"
            },
            "SExpr_w_name": "(JOIN (R organization.club_interest.clubs) (JOIN (R comic_books.comic_book_series.publisher) Civil War))",
            "SExpr": "(JOIN (R organization.club_interest.clubs) (JOIN (R comic_books.comic_book_series.publisher) m.09gwyd))"
        }
    },
    "66": {
        "generations": [
            [
                "what is the locus of chromosome 11 in humans?",
                -2.79036757167
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.099wcz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.099wcz ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.099wcz",
            "mid2name": {
                "ns:m.099wcz": "Chromosome 11 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 11 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.099wcz))"
        }
    },
    "67": {
        "generations": [
            [
                "what products does united spirits produce?",
                -0.8508885314
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065mzc0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065mzc0 ns:business.business_operation.industry ?y .\n?y ns:business.product_category.products ?x .\n}\n",
            "TopicEntityMid": "m.065mzc0",
            "mid2name": {
                "ns:m.065mzc0": "United Spirits"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.products) (JOIN (R business.business_operation.industry) United Spirits))",
            "SExpr": "(JOIN (R business.product_category.products) (JOIN (R business.business_operation.industry) m.065mzc0))"
        }
    },
    "68": {
        "generations": [
            [
                "how do you pronounce agamemnon?",
                -1.3805778888899998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qrc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qrc ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0qrc",
            "mid2name": {
                "ns:m.0qrc": "Agamemnon"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Agamemnon))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.0qrc))"
        }
    },
    "69": {
        "generations": [
            [
                "who uses the baronial coronet?",
                -3.3354065177399996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0668p87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0668p87 ns:symbols.heraldic_coronet.coat_of_arms ?y .\n?y ns:symbols.coat_of_arms.bearers ?x .\n}\n",
            "TopicEntityMid": "m.0668p87",
            "mid2name": {
                "ns:m.0668p87": "Baronial coronet"
            },
            "SExpr_w_name": "(JOIN (R symbols.coat_of_arms.bearers) (JOIN (R symbols.heraldic_coronet.coat_of_arms) Baronial coronet))",
            "SExpr": "(JOIN (R symbols.coat_of_arms.bearers) (JOIN (R symbols.heraldic_coronet.coat_of_arms) m.0668p87))"
        }
    },
    "70": {
        "generations": [
            [
                "what is the beaufort scale for a category 4 severe tropical cyclone?",
                -3.2421465670200003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0256dv3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0256dv3 ns:meteorology.tropical_cyclone_category.Beaufort_scale ?y .\n?y ns:meteorology.beaufort_wind_force.tropical_cyclone_categories ?x .\n}\n",
            "TopicEntityMid": "m.0256dv3",
            "mid2name": {
                "ns:m.0256dv3": "Category 4 Severe Tropical Cyclone (BOM)"
            },
            "SExpr_w_name": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) Category 4 Severe Tropical Cyclone (BOM)))",
            "SExpr": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) m.0256dv3))"
        }
    },
    "71": {
        "generations": [
            [
                "what company produces the 2005 clos lachance hummingbird series buff-bellied central coast estate zinfandel?",
                -3.2880440887180002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03k02tb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03k02tb ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03k02tb",
            "mid2name": {
                "ns:m.03k02tb": "2005 Clos LaChance \"Hummingbird Series, Buff-Bellied\" Central Coast Estate Zinfandel"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2005 Clos LaChance \"Hummingbird Series, Buff-Bellied\" Central Coast Estate Zinfandel))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03k02tb))"
        }
    },
    "72": {
        "generations": [
            [
                "what is the child industry of miscellaneous structural metal work (fabricated bar joists and concrete reinforcing bars)?",
                -2.761687847585
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qwpnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qwpnz ns:business.industry.parent_industry ?y .\n?y ns:business.industry.child_industry ?x .\n}\n",
            "TopicEntityMid": "m.03qwpnz",
            "mid2name": {
                "ns:m.03qwpnz": "Miscellaneous Structural Metal Work (fabricated bar joists and concrete reinforcing bars)"
            },
            "SExpr_w_name": "(JOIN (R business.industry.child_industry) (JOIN (R business.industry.parent_industry) Miscellaneous Structural Metal Work (fabricated bar joists and concrete reinforcing bars)))",
            "SExpr": "(JOIN (R business.industry.child_industry) (JOIN (R business.industry.parent_industry) m.03qwpnz))"
        }
    },
    "73": {
        "generations": [
            [
                "where is sunnyside ski area located?",
                -1.5646085189899996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kk206)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kk206 ns:skiing.ski_lift.ski_area ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.04kk206",
            "mid2name": {
                "ns:m.04kk206": "Sunnyside"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) Sunnyside))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) m.04kk206))"
        }
    },
    "74": {
        "generations": [
            [
                "how do you pronounce wheat fields?",
                -1.443402366
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0glsrm2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0glsrm2 ns:visual_art.art_series.artworks ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0glsrm2",
            "mid2name": {
                "ns:m.0glsrm2": "Wheat Fields"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.art_series.artworks) Wheat Fields))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.art_series.artworks) m.0glsrm2))"
        }
    },
    "75": {
        "generations": [
            [
                "what dialects use the english alphabet?",
                -1.01765235404
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0217zf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0217zf ns:language.language_writing_system.languages ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0217zf",
            "mid2name": {
                "ns:m.0217zf": "English alphabet"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_writing_system.languages) English alphabet))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_writing_system.languages) m.0217zf))"
        }
    },
    "76": {
        "generations": [
            [
                "where was atwater traverse city cherry wheat beer founded?",
                -1.3007712781900003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lywwl8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lywwl8 ns:food.beer.brewery_brand ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.0lywwl8",
            "mid2name": {
                "ns:m.0lywwl8": "Atwater Traverse City Cherry Wheat"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R food.beer.brewery_brand) Atwater Traverse City Cherry Wheat))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R food.beer.brewery_brand) m.0lywwl8))"
        }
    },
    "77": {
        "generations": [
            [
                "how do you pronounce \"england cricket team\" in japanese?",
                -2.409491401059
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038zh6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038zh6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.038zh6",
            "mid2name": {
                "ns:m.038zh6": "England cricket team"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) England cricket team))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.038zh6))"
        }
    },
    "78": {
        "generations": [
            [
                "what type of engine is the general electric lm2500?",
                -1.7633118184000003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042q9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042q9_ ns:engineering.engine.category ?y .\n?y ns:engineering.engine_category.engines ?x .\n}\n",
            "TopicEntityMid": "m.042q9_",
            "mid2name": {
                "ns:m.042q9_": "General Electric LM2500"
            },
            "SExpr_w_name": "(JOIN (R engineering.engine_category.engines) (JOIN (R engineering.engine.category) General Electric LM2500))",
            "SExpr": "(JOIN (R engineering.engine_category.engines) (JOIN (R engineering.engine.category) m.042q9_))"
        }
    },
    "79": {
        "generations": [
            [
                "what drugs are made by hillestad pharmaceuticals usa?",
                -2.3974751459199997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqz6j0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqz6j0 ns:medicine.drug_manufacturer.drugs_manufactured ?y .\n?y ns:medicine.manufactured_drug_form.available_in ?x .\n}\n",
            "TopicEntityMid": "m.0hqz6j0",
            "mid2name": {
                "ns:m.0hqz6j0": "Hillestad Pharmaceuticals USA"
            },
            "SExpr_w_name": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R medicine.drug_manufacturer.drugs_manufactured) Hillestad Pharmaceuticals USA))",
            "SExpr": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R medicine.drug_manufacturer.drugs_manufactured) m.0hqz6j0))"
        }
    },
    "80": {
        "generations": [
            [
                "what type of product is a game controller?",
                -1.3349542107099999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q56v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q56v ns:business.product_category.products ?y .\n?y ns:business.consumer_product.category ?x .\n}\n",
            "TopicEntityMid": "m.0q56v",
            "mid2name": {
                "ns:m.0q56v": "Game controller"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.category) (JOIN (R business.product_category.products) Game controller))",
            "SExpr": "(JOIN (R business.consumer_product.category) (JOIN (R business.product_category.products) m.0q56v))"
        }
    },
    "81": {
        "generations": [
            [
                "what gender is judy?",
                -1.766267050992
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z7hdmd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z7hdmd ns:book.written_work.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0z7hdmd",
            "mid2name": {
                "ns:m.0z7hdmd": "Judy"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) Judy))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) m.0z7hdmd))"
        }
    },
    "82": {
        "generations": [
            [
                "what awards was the musical sophisticated ladies nominated for?",
                -3.6990487467
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0kfqnwh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0kfqnwh ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0kfqnwh",
            "mid2name": {
                "ns:m.0kfqnwh": "Sophisticated Ladies"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Sophisticated Ladies))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0kfqnwh))"
        }
    },
    "83": {
        "generations": [
            [
                "how often is the duleep trophy cricket tournament held?",
                -2.2830040992
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hr72)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hr72 ns:cricket.cricket_tournament_event.tournament ?y .\n?y ns:time.recurring_event.current_frequency ?x .\n}\n",
            "TopicEntityMid": "m.07hr72",
            "mid2name": {
                "ns:m.07hr72": "Duleep Trophy in 2005\u201306"
            },
            "SExpr_w_name": "(JOIN (R time.recurring_event.current_frequency) (JOIN (R cricket.cricket_tournament_event.tournament) Duleep Trophy in 2005\u201306))",
            "SExpr": "(JOIN (R time.recurring_event.current_frequency) (JOIN (R cricket.cricket_tournament_event.tournament) m.07hr72))"
        }
    },
    "84": {
        "generations": [
            [
                "what industry does avro tudor specialize in?",
                -2.535817416277
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dbzfp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dbzfp ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0dbzfp",
            "mid2name": {
                "ns:m.0dbzfp": "Avro Tudor"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) Avro Tudor))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.0dbzfp))"
        }
    },
    "85": {
        "generations": [
            [
                "what operating systems are compatible with the atari 1040 stf?",
                -0.835369146089
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h870d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h870d ns:computer.computer.parent_model ?y .\n?y ns:computer.computer.compatible_oses ?x .\n}\n",
            "TopicEntityMid": "m.02h870d",
            "mid2name": {
                "ns:m.02h870d": "Atari 1040 STf"
            },
            "SExpr_w_name": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer.parent_model) Atari 1040 STf))",
            "SExpr": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer.parent_model) m.02h870d))"
        }
    },
    "86": {
        "generations": [
            [
                "what is the length of the ships designed by luedtke brothers?",
                -2.6552585356299994
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wh9td)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wh9td ns:boats.ship_designer.ship_classes_designed ?y .\n?y ns:boats.ship_class.length_overall_m ?x .\n}\n",
            "TopicEntityMid": "m.05wh9td",
            "mid2name": {
                "ns:m.05wh9td": "Luedtke Brothers"
            },
            "SExpr_w_name": "(JOIN (R boats.ship_class.length_overall_m) (JOIN (R boats.ship_designer.ship_classes_designed) Luedtke Brothers))",
            "SExpr": "(JOIN (R boats.ship_class.length_overall_m) (JOIN (R boats.ship_designer.ship_classes_designed) m.05wh9td))"
        }
    },
    "87": {
        "generations": [
            [
                "what artists are associated with the oldies genre?",
                -2.85903128384
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03vrjx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03vrjx ns:music.genre.artists ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.03vrjx",
            "mid2name": {
                "ns:m.03vrjx": "Oldies"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) Oldies))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) m.03vrjx))"
        }
    },
    "88": {
        "generations": [
            [
                "how do you pronounce mari language?",
                -1.05182246019
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y_vl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y_vl ns:language.human_language.dialects ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01y_vl",
            "mid2name": {
                "ns:m.01y_vl": "Mari language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R language.human_language.dialects) Mari language))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R language.human_language.dialects) m.01y_vl))"
        }
    },
    "89": {
        "generations": [
            [
                "who endorses tinactin?",
                -0.33019350496
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05sr_fd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05sr_fd ns:business.endorsed_product.endorsements ?y .\n?y ns:business.product_endorsement.endorsee ?x .\n}\n",
            "TopicEntityMid": "m.05sr_fd",
            "mid2name": {
                "ns:m.05sr_fd": "Tinactin"
            },
            "SExpr_w_name": "(JOIN (R business.product_endorsement.endorsee) (JOIN (R business.endorsed_product.endorsements) Tinactin))",
            "SExpr": "(JOIN (R business.product_endorsement.endorsee) (JOIN (R business.endorsed_product.endorsements) m.05sr_fd))"
        }
    },
    "90": {
        "generations": [
            [
                "who wrote the book simms taback?",
                -1.65643215337
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r7yl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r7yl ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05r7yl",
            "mid2name": {
                "ns:m.05r7yl": "Simms Taback"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Simms Taback))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05r7yl))"
        }
    },
    "91": {
        "generations": [
            [
                "how do you pronounce \"photographer\" in japanese?",
                -2.4525263374810002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lgw7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lgw7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0lgw7",
            "mid2name": {
                "ns:m.0lgw7": "Photographer"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Photographer))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0lgw7))"
        }
    },
    "92": {
        "generations": [
            [
                "what farms are located on johnston atoll?",
                -1.351773967035
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03__f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03__f ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.03__f",
            "mid2name": {
                "ns:m.03__f": "Johnston Atoll"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Johnston Atoll))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.03__f))"
        }
    },
    "93": {
        "generations": [
            [
                "what league is the atlantic division in hockey?",
                -2.397698182289
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cpb_yv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cpb_yv ns:ice_hockey.hockey_division.teams ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.0cpb_yv",
            "mid2name": {
                "ns:m.0cpb_yv": "Atlantic Division"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R ice_hockey.hockey_division.teams) Atlantic Division))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R ice_hockey.hockey_division.teams) m.0cpb_yv))"
        }
    },
    "94": {
        "generations": [
            [
                "which panasonic lumix model is the dmc-gh2?",
                -3.980613506104001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gkzs2f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gkzs2f ns:business.consumer_product.brand ?y .\n?y ns:digicams.digital_camera_manufacturer.cameras ?x .\n}\n",
            "TopicEntityMid": "m.0gkzs2f",
            "mid2name": {
                "ns:m.0gkzs2f": "Panasonic Lumix DMC-GH2"
            },
            "SExpr_w_name": "(JOIN (R digicams.digital_camera_manufacturer.cameras) (JOIN (R business.consumer_product.brand) Panasonic Lumix DMC-GH2))",
            "SExpr": "(JOIN (R digicams.digital_camera_manufacturer.cameras) (JOIN (R business.consumer_product.brand) m.0gkzs2f))"
        }
    },
    "95": {
        "generations": [
            [
                "how do you pronounce scott eldridge's name?",
                -0.67452280341
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ztrjdw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ztrjdw ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0ztrjdw",
            "mid2name": {
                "ns:m.0ztrjdw": "Scott Eldridge"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Scott Eldridge))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0ztrjdw))"
        }
    },
    "96": {
        "generations": [
            [
                "what language does eiffel influence?",
                -1.79641528226
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p6w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p6w ns:computer.programming_language.dialects ?y .\n?y ns:computer.programming_language.influenced_by ?x .\n}\n",
            "TopicEntityMid": "m.02p6w",
            "mid2name": {
                "ns:m.02p6w": "Eiffel"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.influenced_by) (JOIN (R computer.programming_language.dialects) Eiffel))",
            "SExpr": "(JOIN (R computer.programming_language.influenced_by) (JOIN (R computer.programming_language.dialects) m.02p6w))"
        }
    },
    "97": {
        "generations": [
            [
                "what are the lighthouses made of wood located in?",
                -6.111615682484999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083vt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083vt ns:architecture.lighthouse_construction_material.used_on_lighthouse ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.083vt",
            "mid2name": {
                "ns:m.083vt": "Wood"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R architecture.lighthouse_construction_material.used_on_lighthouse) Wood))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R architecture.lighthouse_construction_material.used_on_lighthouse) m.083vt))"
        }
    },
    "98": {
        "generations": [
            [
                "what university publishes the chipog\u00f3 newspaper?",
                -2.6387713394
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02s9qg8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02s9qg8 ns:education.school_newspaper.school ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.02s9qg8",
            "mid2name": {
                "ns:m.02s9qg8": "Chipog\u00f3"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.school_newspaper.school) Chipog\u00f3))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.school_newspaper.school) m.02s9qg8))"
        }
    },
    "99": {
        "generations": [
            [
                "how do you pronounce andaman and nicobar islands?",
                -1.08482040829
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cvvc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cvvc ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0cvvc",
            "mid2name": {
                "ns:m.0cvvc": "Andaman and Nicobar Islands"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Andaman and Nicobar Islands))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0cvvc))"
        }
    }
}