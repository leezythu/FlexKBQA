{
    "0": {
        "generations": [
            [
                "what genre of music is crazy (do you know the way to l.a. mix) from london?",
                -2.31025099127
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yhwhq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yhwhq ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n?y ns:music.artist.origin ns:m.04jpl .\n}\n",
            "TopicEntityMid": "m.0yhwhq",
            "mid2name": {
                "ns:m.0yhwhq": "Crazy (Do You Know the Way to L.A. mix)",
                "ns:m.04jpl": "London"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin London) (JOIN (R music.recording.artist) Crazy (Do You Know the Way to L.A. mix))))",
            "SExpr": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin m.04jpl) (JOIN (R music.recording.artist) m.0yhwhq)))"
        }
    },
    "1": {
        "generations": [
            [
                "what genre of music does duchess from godalming make?",
                -3.5522806958
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ljhlc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ljhlc ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n?y ns:music.artist.origin ns:m.01fbq8 .\n}\n",
            "TopicEntityMid": "m.0ljhlc",
            "mid2name": {
                "ns:m.0ljhlc": "Duchess",
                "ns:m.01fbq8": "Godalming"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin Godalming) (JOIN (R music.recording.artist) Duchess)))",
            "SExpr": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin m.01fbq8) (JOIN (R music.recording.artist) m.0ljhlc)))"
        }
    },
    "2": {
        "generations": [
            [
                "how do you pronounce acacia in the fabales context?",
                -3.2422728054999994
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pzy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pzy ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:biology.organism_classification.higher_classification ns:m.02wjh .\n}\n",
            "TopicEntityMid": "m.0pzy",
            "mid2name": {
                "ns:m.0pzy": "Acacia",
                "ns:m.02wjh": "Fabales"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN biology.organism_classification.higher_classification Fabales) (JOIN (R biology.organism_classification.higher_classification) Acacia)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN biology.organism_classification.higher_classification m.02wjh) (JOIN (R biology.organism_classification.higher_classification) m.0pzy)))"
        }
    },
    "3": {
        "generations": [
            [
                "what is the humourous webvideo episode of vote wally panther?",
                -11.957447114153998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09kqc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09kqc ns:base.webvideo.internet_video_genre.internet_video ?y .\n?y ns:base.webvideo.internet_video.performances ?x .\n?y ns:base.webvideo.internet_video_episode.season ns:m.0w48fhr .\n}\n",
            "TopicEntityMid": "m.09kqc",
            "mid2name": {
                "ns:m.09kqc": "Humour",
                "ns:m.0w48fhr": "Vote Wally Panther"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video.performances) (AND (JOIN base.webvideo.internet_video_episode.season Vote Wally Panther) (JOIN (R base.webvideo.internet_video_genre.internet_video) Humour)))",
            "SExpr": "(JOIN (R base.webvideo.internet_video.performances) (AND (JOIN base.webvideo.internet_video_episode.season m.0w48fhr) (JOIN (R base.webvideo.internet_video_genre.internet_video) m.09kqc)))"
        }
    },
    "4": {
        "generations": [
            [
                "what books are about mtv and \u0433\u0440\u0435\u0442\u044c?",
                -4.990199658100001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j_sbs3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j_sbs3 ns:music.music_video.music_video_genre ?y .\n?y ns:book.book_subject.works ?x .\n?y ns:organization.organization_sector.organizations_in_this_sector ns:m.04rqd .\n}\n",
            "TopicEntityMid": "m.0j_sbs3",
            "mid2name": {
                "ns:m.0j_sbs3": "\u0413\u0440\u0435\u0442\u044c",
                "ns:m.04rqd": "MTV"
            },
            "SExpr_w_name": "(JOIN (R book.book_subject.works) (AND (JOIN organization.organization_sector.organizations_in_this_sector MTV) (JOIN (R music.music_video.music_video_genre) \u0413\u0440\u0435\u0442\u044c)))",
            "SExpr": "(JOIN (R book.book_subject.works) (AND (JOIN organization.organization_sector.organizations_in_this_sector m.04rqd) (JOIN (R music.music_video.music_video_genre) m.0j_sbs3)))"
        }
    },
    "5": {
        "generations": [
            [
                "what awards has merry edwards winery been nominated for?",
                -1.008800770904
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hwvzl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hwvzl ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?y ns:award.award_nomination.award_nominee ns:m.0x2xkfq .\n}\n",
            "TopicEntityMid": "m.04hwvzl",
            "mid2name": {
                "ns:m.04hwvzl": "Merry Edwards Winery",
                "ns:m.0x2xkfq": "Merry Edwards"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee Merry Edwards) (JOIN (R award.award_nominated_work.award_nominations) Merry Edwards Winery)))",
            "SExpr": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee m.0x2xkfq) (JOIN (R award.award_nominated_work.award_nominations) m.04hwvzl)))"
        }
    },
    "6": {
        "generations": [
            [
                "what diseases do cats from russia have a higher risk of?",
                -3.7517465980000004
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n?y ns:biology.organism_classification.higher_classification ns:m.01yrx .\n}\n",
            "TopicEntityMid": "m.06bnz",
            "mid2name": {
                "ns:m.06bnz": "Russia",
                "ns:m.01yrx": "Cat"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (AND (JOIN biology.organism_classification.higher_classification Cat) (JOIN (R biology.breed_origin.breeds_originating_here) Russia)))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (AND (JOIN biology.organism_classification.higher_classification m.01yrx) (JOIN (R biology.breed_origin.breeds_originating_here) m.06bnz)))"
        }
    },
    "7": {
        "generations": [
            [
                "what is the organization associated with basilides?",
                -4.275876823800001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zdxc7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zdxc7 ns:religion.religious_organization.associated_with ?y .\n?y ns:religion.religion.organizations ?x .\n?y ns:religion.religion.founding_figures ns:m.02l27n .\n}\n",
            "TopicEntityMid": "m.03zdxc7",
            "mid2name": {
                "ns:m.03zdxc7": "North American College of Gnostic Bishops",
                "ns:m.02l27n": "Basilides"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.organizations) (AND (JOIN religion.religion.founding_figures Basilidesn) (JOIN (R religion.religious_organization.associated_with) North American College of Gnostic Bishops)))",
            "SExpr": "(JOIN (R religion.religion.organizations) (AND (JOIN religion.religion.founding_figures m.02l27n) (JOIN (R religion.religious_organization.associated_with) m.03zdxc7)))"
        }
    },
    "8": {
        "generations": [
            [
                "what grapes are used in 2004 querceto chianti?",
                -1.9416158813199997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05m75th)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05m75th ns:wine.wine.wine_style ?y .\n?y ns:food.wine_style.grape_varieties ?x .\n?y ns:food.wine_style.place_of_origin ns:m.07yf1tb .\n}\n",
            "TopicEntityMid": "m.05m75th",
            "mid2name": {
                "ns:m.05m75th": "2004 Querceto Chianti",
                "ns:m.07yf1tb": "Chianti"
            },
            "SExpr_w_name": "(JOIN (R food.wine_style.grape_varieties) (AND (JOIN food.wine_style.place_of_origin Chianti) (JOIN (R wine.wine.wine_style) 2004 Querceto Chianti)))",
            "SExpr": "(JOIN (R food.wine_style.grape_varieties) (AND (JOIN food.wine_style.place_of_origin m.07yf1tb) (JOIN (R wine.wine.wine_style) m.05m75th)))"
        }
    },
    "9": {
        "generations": [
            [
                "what league is the calgary hockey team in?",
                -2.2438194210800004
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r4sb7j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r4sb7j ns:ice_hockey.hockey_division.teams ?y .\n?y ns:sports.sports_team.league ?x .\n?y ns:sports.sports_team.location ns:m.01r32 .\n}\n",
            "TopicEntityMid": "m.0r4sb7j",
            "mid2name": {
                "ns:m.0r4sb7j": "West Division",
                "ns:m.01r32": "Calgary"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (AND (JOIN sports.sports_team.location Calgary) (JOIN (R ice_hockey.hockey_division.teams) West Division)))",
            "SExpr": "(JOIN (R sports.sports_team.league) (AND (JOIN sports.sports_team.location m.01r32) (JOIN (R ice_hockey.hockey_division.teams) m.0r4sb7j)))"
        }
    },
    "10": {
        "generations": [
            [
                "where is heimlich's chew chew train located in disney california adventure?",
                -1.9111626343754997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bf5kp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bf5kp ns:amusement_parks.ride.area ?y .\n?y ns:location.location.geolocation ?x .\n?y ns:amusement_parks.amusement_park_area.parks ns:m.01zx_2 .\n}\n",
            "TopicEntityMid": "m.0bf5kp",
            "mid2name": {
                "ns:m.0bf5kp": "Heimlich's Chew Chew Train",
                "ns:m.01zx_2": "Disney California Adventure"
            },
            "SExpr_w_name": "(JOIN (R location.location.geolocation) (AND (JOIN amusement_parks.amusement_park_area.parks Disney California Adventure) (JOIN (R amusement_parks.ride.area) Heimlich's Chew Chew Train)))",
            "SExpr": "(JOIN (R location.location.geolocation) (AND (JOIN amusement_parks.amusement_park_area.parks m.01zx_2) (JOIN (R amusement_parks.ride.area) m.0bf5kp)))"
        }
    },
    "11": {
        "generations": [
            [
                "how do you pronounce muay thai and tai chi?",
                -0.878832239183
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07k4r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07k4r ns:martial_arts.martial_art.category ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:martial_arts.martial_art_category.martial_arts ns:m.04xz3 .\n}\n",
            "TopicEntityMid": "m.07k4r",
            "mid2name": {
                "ns:m.07k4r": "Tai chi",
                "ns:m.04xz3": "Muay Thai"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN martial_arts.martial_art_category.martial_arts Muay Thai) (JOIN (R martial_arts.martial_art.category) Tai chi)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN martial_arts.martial_art_category.martial_arts m.04xz3) (JOIN (R martial_arts.martial_art.category) m.07k4r)))"
        }
    },
    "12": {
        "generations": [
            [
                "what video art does aberjhani appear in?",
                -4.1689840692999995
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_r5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_r5 ns:base.webvideo.internet_video_genre.internet_video ?y .\n?y ns:music.music_video_subject.subject_in_these_music_videos ?x .\n?y ns:book.written_work.author ns:m.0gg89tf .\n}\n",
            "TopicEntityMid": "m.07_r5",
            "mid2name": {
                "ns:m.07_r5": "Video art",
                "ns:m.0gg89tf": "Aberjhani"
            },
            "SExpr_w_name": "(JOIN (R music.music_video_subject.subject_in_these_music_videos) (AND (JOIN book.written_work.author Aberjhani) (JOIN (R base.webvideo.internet_video_genre.internet_video) Video art)))",
            "SExpr": "(JOIN (R music.music_video_subject.subject_in_these_music_videos) (AND (JOIN book.written_work.author m.0gg89tf) (JOIN (R base.webvideo.internet_video_genre.internet_video) m.07_r5)))"
        }
    },
    "13": {
        "generations": [
            [
                "what asteroids are in the 1997 sk10 asteroid group?",
                -3.7532445679
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h95xcj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h95xcj ns:astronomy.asteroid.member_of_asteroid_group ?y .\n?y ns:astronomy.asteroid_group.asteroid_group_members ?x .\n?y ns:astronomy.celestial_object.category ns:m.0cpl6 .\n}\n",
            "TopicEntityMid": "m.0h95xcj",
            "mid2name": {
                "ns:m.0h95xcj": "(24955) 1997 SK10",
                "ns:m.0cpl6": "Asteroid Group"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (AND (JOIN astronomy.celestial_object.category Asteroid Group) (JOIN (R astronomy.asteroid.member_of_asteroid_group) (24955) 1997 SK10)))",
            "SExpr": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (AND (JOIN astronomy.celestial_object.category m.0cpl6) (JOIN (R astronomy.asteroid.member_of_asteroid_group) m.0h95xcj)))"
        }
    },
    "14": {
        "generations": [
            [
                "what genre of music do baritenors from dayton sing?",
                -3.71657883932
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06fc7y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06fc7y ns:music.voice.singers ?y .\n?y ns:music.artist.genre ?x .\n?y ns:music.artist.origin ns:m.029cr .\n}\n",
            "TopicEntityMid": "m.06fc7y",
            "mid2name": {
                "ns:m.06fc7y": "Baritenor",
                "ns:m.029cr": "Dayton"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin Dayton) (JOIN (R music.voice.singers) Baritenor)))",
            "SExpr": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin m.029cr) (JOIN (R music.voice.singers) m.06fc7y)))"
        }
    },
    "15": {
        "generations": [
            [
                "what is frederic church's nationality?",
                -1.6061320824507999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059b37r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059b37r ns:exhibitions.exhibition.subjects ?y .\n?y ns:people.person.nationality ?x .\n?y ns:book.book_subject.works ns:m.05_8wym .\n}\n",
            "TopicEntityMid": "m.059b37r",
            "mid2name": {
                "ns:m.059b37r": "The Hudson River School at N-YHS (2008); Nature and the American Vision",
                "ns:m.05_8wym": "Frederic Church"
            },
            "SExpr_w_name": "(JOIN (R people.person.nationality) (AND (JOIN book.book_subject.works Frederic Church) (JOIN (R exhibitions.exhibition.subjects) The Hudson River School at N-YHS (2008); Nature and the American Vision)))",
            "SExpr": "(JOIN (R people.person.nationality) (AND (JOIN book.book_subject.works m.05_8wym) (JOIN (R exhibitions.exhibition.subjects) m.059b37r)))"
        }
    },
    "16": {
        "generations": [
            [
                "how do you pronounce maverick carter's sfx award for best actor?",
                -1.3447082828099997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07zptdt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07zptdt ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:award.award_discipline.awards_in_this_discipline ns:m.09vww_7 .\n}\n",
            "TopicEntityMid": "m.07zptdt",
            "mid2name": {
                "ns:m.07zptdt": "Maverick Carter",
                "ns:m.09vww_7": "SFX Award for Best Actor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN award.award_discipline.awards_in_this_discipline SFX Award for Best Actor) (JOIN (R people.person.gender) Maverick Carter)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN award.award_discipline.awards_in_this_discipline m.09vww_7) (JOIN (R people.person.gender) m.07zptdt)))"
        }
    },
    "17": {
        "generations": [
            [
                "who wrote the book 'why do the wrong people travel?'",
                -2.1422447275899996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043k51g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043k51g ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?y ns:music.artist.track ns:m.0248gh0 .\n}\n",
            "TopicEntityMid": "m.043k51g",
            "mid2name": {
                "ns:m.043k51g": "Pacific 1860",
                "ns:m.0248gh0": "Why Do the Wrong People Travel?"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (AND (JOIN music.artist.track Why Do the Wrong People Travel?) (JOIN (R book.written_work.author) Pacific 1860)))",
            "SExpr": "(JOIN (R book.author.works_written) (AND (JOIN music.artist.track m.0248gh0) (JOIN (R book.written_work.author) m.043k51g)))"
        }
    },
    "18": {
        "generations": [
            [
                "where can alek petrov get stool softener 100 liquid filled capsules?",
                -4.0363368728200015
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqqhlg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqqhlg ns:medicine.manufactured_drug_form.available_in ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ns:m.0h0x_z0 .\n}\n",
            "TopicEntityMid": "m.0hqqhlg",
            "mid2name": {
                "ns:m.0hqqhlg": "Stool Softener 100 liquid filled capsule",
                "ns:m.0h0x_z0": "Alek Petrov"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (AND (JOIN fictional_universe.fictional_setting.characters_that_have_lived_here Alek Petrov) (JOIN (R medicine.manufactured_drug_form.available_in) Stool Softener 100 liquid filled capsule)))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (AND (JOIN fictional_universe.fictional_setting.characters_that_have_lived_here m.0h0x_z0) (JOIN (R medicine.manufactured_drug_form.available_in) m.0hqqhlg)))"
        }
    },
    "19": {
        "generations": [
            [
                "what genre of music does steve blevins play on the album interview?",
                -3.557384250285
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011j6ntg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011j6ntg ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n?y ns:music.genre.albums ns:m.01jp6dq .\n}\n",
            "TopicEntityMid": "m.011j6ntg",
            "mid2name": {
                "ns:m.011j6ntg": "Steve Blevins",
                "ns:m.01jp6dq": "Interview"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (AND (JOIN music.genre.albums Interview) (JOIN (R music.artist.genre) Steve Blevins)))",
            "SExpr": "(JOIN (R music.genre.artists) (AND (JOIN music.genre.albums m.01jp6dq) (JOIN (R music.artist.genre) m.011j6ntg)))"
        }
    },
    "20": {
        "generations": [
            [
                "what award did family living '59 win for nbc?",
                -1.7018316998949996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05swwbf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05swwbf ns:award.award_winning_work.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n?y ns:award.award_honor.award_winner ns:m.05gnf .\n}\n",
            "TopicEntityMid": "m.05swwbf",
            "mid2name": {
                "ns:m.05swwbf": "Family Living '59",
                "ns:m.05gnf": "NBC"
            },
            "SExpr_w_name": "(JOIN (R award.award_honor.award) (AND (JOIN award.award_honor.award_winner NBC) (JOIN (R award.award_winning_work.awards_won) Family Living '59)))",
            "SExpr": "(JOIN (R award.award_honor.award) (AND (JOIN award.award_honor.award_winner m.05gnf) (JOIN (R award.award_winning_work.awards_won) m.05swwbf)))"
        }
    },
    "21": {
        "generations": [
            [
                "how is the rd-170 rocket engine used in the space shuttle main engine cycle pronounced?",
                -5.211750135739999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ffmj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ffmj ns:spaceflight.bipropellant_rocket_engine.engine_cycle ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:spaceflight.rocket_engine_cycle.rocket_engines ns:m.032blg .\n}\n",
            "TopicEntityMid": "m.07ffmj",
            "mid2name": {
                "ns:m.07ffmj": "RD-170",
                "ns:m.032blg": "Space Shuttle main engine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN spaceflight.rocket_engine_cycle.rocket_engines Space Shuttle main engine) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) RD-170)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN spaceflight.rocket_engine_cycle.rocket_engines m.032blg) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) m.07ffmj)))"
        }
    },
    "22": {
        "generations": [
            [
                "how do you pronounce eero simoncelli's field of research in neuroscience?",
                -2.6300645241100002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dv73bm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dv73bm ns:education.academic.research_areas ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:education.field_of_study.subdiscipline_of ns:m.05b6c .\n}\n",
            "TopicEntityMid": "m.0dv73bm",
            "mid2name": {
                "ns:m.0dv73bm": "Eero Simoncelli",
                "ns:m.05b6c": "Neuroscience"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN education.field_of_study.subdiscipline_of Neuroscience) (JOIN (R education.academic.research_areas) Eero Simoncelli)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN education.field_of_study.subdiscipline_of m.05b6c) (JOIN (R education.academic.research_areas) m.0dv73bm)))"
        }
    },
    "23": {
        "generations": [
            [
                "where does the neil gaiman comic book drawn by andy kubert take place?",
                -7.218812061694
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xnkt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xnkt ns:comic_books.comic_book_penciler.comic_books_penciled ?y .\n?y ns:fictional_universe.work_of_fiction.setting ?x .\n?y ns:comic_books.comic_book_story.script ns:m.05jm7 .\n}\n",
            "TopicEntityMid": "m.02xnkt",
            "mid2name": {
                "ns:m.02xnkt": "Andy Kubert",
                "ns:m.05jm7": "Neil Gaiman"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.work_of_fiction.setting) (AND (JOIN comic_books.comic_book_story.script Neil Gaiman) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) Andy Kubert)))",
            "SExpr": "(JOIN (R fictional_universe.work_of_fiction.setting) (AND (JOIN comic_books.comic_book_story.script m.05jm7) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) m.02xnkt)))"
        }
    },
    "24": {
        "generations": [
            [
                "what breeds of animals originated in berlin, germany?",
                -3.4465328140105
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011tyn1d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011tyn1d ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n?y ns:location.country.administrative_divisions ns:m.0156q .\n}\n",
            "TopicEntityMid": "m.011tyn1d",
            "mid2name": {
                "ns:m.011tyn1d": "Fairmont Vier Jahreszeiten Hamburg",
                "ns:m.0156q": "Berlin"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (AND (JOIN location.country.administrative_divisions Berlin) (JOIN (R location.location.containedby) Fairmont Vier Jahreszeiten Hamburg)))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (AND (JOIN location.country.administrative_divisions m.0156q) (JOIN (R location.location.containedby) m.011tyn1d)))"
        }
    },
    "25": {
        "generations": [
            [
                "what beaches have spas?",
                -2.9828096548459997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b3yr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b3yr ns:travel.accommodation_feature.accommodation_with_this_feature ?y .\n?y ns:location.location.primarily_containedby ?x .\n?y ns:travel.accommodation.features ns:m.05jh_c .\n}\n",
            "TopicEntityMid": "m.0b3yr",
            "mid2name": {
                "ns:m.0b3yr": "Beach",
                "ns:m.05jh_c": "Spa"
            },
            "SExpr_w_name": "(JOIN (R location.location.primarily_containedby) (AND (JOIN travel.accommodation.features Spa) (JOIN (R travel.accommodation_feature.accommodation_with_this_feature) Beach)))",
            "SExpr": "(JOIN (R location.location.primarily_containedby) (AND (JOIN travel.accommodation.features m.05jh_c) (JOIN (R travel.accommodation_feature.accommodation_with_this_feature) m.0b3yr)))"
        }
    },
    "26": {
        "generations": [
            [
                "where is the chloes breed of dog popular?",
                -2.4330447478
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v3q ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:base.petbreeds.dog_breed.cities_where_this_dog_is_popular ?x .\n?y ns:biology.animal_breed.examples ns:m.04zkf5s .\n}\n",
            "TopicEntityMid": "m.04v3q",
            "mid2name": {
                "ns:m.04v3q": "Malta",
                "ns:m.04zkf5s": "Chloe"
            },
            "SExpr_w_name": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (AND (JOIN biology.animal_breed.examples Chloes) (JOIN (R biology.breed_origin.breeds_originating_here) Malta)))",
            "SExpr": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (AND (JOIN biology.animal_breed.examples m.04zkf5s) (JOIN (R biology.breed_origin.breeds_originating_here) m.04v3q)))"
        }
    },
    "27": {
        "generations": [
            [
                "how do you pronounce the scientific name for the camellia sinensis plant?",
                -5.132228082429999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039t96)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039t96 ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:biology.organism_classification.higher_classification ns:m.02w_0z .\n}\n",
            "TopicEntityMid": "m.039t96",
            "mid2name": {
                "ns:m.039t96": "Camellia sinensis",
                "ns:m.02w_0z": "Theaceae"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN biology.organism_classification.higher_classification Theaceae) (JOIN (R biology.organism_classification.higher_classification) Camellia sinensis)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN biology.organism_classification.higher_classification m.02w_0z) (JOIN (R biology.organism_classification.higher_classification) m.039t96)))"
        }
    },
    "28": {
        "generations": [
            [
                "who plays charles ii in the film penn of pennsylvania?",
                -3.3734390777340004
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gc_2yb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gc_2yb ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.07kbcdg .\n}\n",
            "TopicEntityMid": "m.0gc_2yb",
            "mid2name": {
                "ns:m.0gc_2yb": "Charles II",
                "ns:m.07kbcdg": "Penn of Pennsylvania"
            },
            "SExpr_w_name": "(JOIN (R film.performance.actor) (AND (JOIN film.performance.film Penn of Pennsylvania) (JOIN (R film.film_character.portrayed_in_films) Charles II)))",
            "SExpr": "(JOIN (R film.performance.actor) (AND (JOIN film.performance.film m.07kbcdg) (JOIN (R film.film_character.portrayed_in_films) m.0gc_2yb)))"
        }
    },
    "29": {
        "generations": [
            [
                "what is the relationship between theistic satanism and laveyan satanism?",
                -3.0790740296383006
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026dlh_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026dlh_ ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.branched_into ?x .\n?y ns:religion.religion.includes ns:m.0blh20 .\n}\n",
            "TopicEntityMid": "m.026dlh_",
            "mid2name": {
                "ns:m.026dlh_": "LaVeyan Satanism",
                "ns:m.0blh20": "Theistic Satanism"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.branched_into) (AND (JOIN religion.religion.includes Theistic Satanism) (JOIN (R religion.religion.is_part_of) LaVeyan Satanism)))",
            "SExpr": "(JOIN (R religion.religion.branched_into) (AND (JOIN religion.religion.includes m.0blh20) (JOIN (R religion.religion.is_part_of) m.026dlh_)))"
        }
    },
    "30": {
        "generations": [
            [
                "what military force did john w. clark serve in with the 6th vermont infantry?",
                -2.8645982928850002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gdr9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gdr9v ns:military.military_unit.servicemembers ?y .\n?y ns:military.military_service.military_force ?x .\n?y ns:military.military_service.military_person ns:m.0zmxv7_ .\n}\n",
            "TopicEntityMid": "m.0gdr9v",
            "mid2name": {
                "ns:m.0gdr9v": "6th Vermont Infantry",
                "ns:m.0zmxv7_": "John W. Clark"
            },
            "SExpr_w_name": "(JOIN (R military.military_service.military_force) (AND (JOIN military.military_service.military_person John W. Clark) (JOIN (R military.military_unit.servicemembers) 6th Vermont Infantry)))",
            "SExpr": "(JOIN (R military.military_service.military_force) (AND (JOIN military.military_service.military_person m.0zmxv7_) (JOIN (R military.military_unit.servicemembers) m.0gdr9v)))"
        }
    },
    "31": {
        "generations": [
            [
                "what brand of book won the theakston's old peculier crime novel of the year award?",
                -4.950540564630001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vdgk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vdgk6 ns:book.book_edition.binding ?y .\n?y ns:business.consumer_product.brand ?x .\n?y ns:award.award_discipline.awards_in_this_discipline ns:m.02w7bx_ .\n}\n",
            "TopicEntityMid": "m.04vdgk6",
            "mid2name": {
                "ns:m.04vdgk6": "Peony",
                "ns:m.02w7bx_": "Theakston's Old Peculier Crime Novel of the Year Award"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (AND (JOIN award.award_discipline.awards_in_this_discipline Theakston's Old Peculier Crime Novel of the Year Award) (JOIN (R book.book_edition.binding) Peony)))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (AND (JOIN award.award_discipline.awards_in_this_discipline m.02w7bx_) (JOIN (R book.book_edition.binding) m.04vdgk6)))"
        }
    },
    "32": {
        "generations": [
            [
                "what international organization provides a spreadsheet upload about iso 3166-1 alpha 3 codes and numeric codes?",
                -4.585430347220002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z430m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z430m ns:organization.organization_scope.organizations_with_this_scope ?y .\n?y ns:dataworld.data_provider.datasets_provided ?x .\n?y ns:dataworld.information_source.data_operations ns:m.0b4cwfp .\n}\n",
            "TopicEntityMid": "m.01z430m",
            "mid2name": {
                "ns:m.01z430m": "International",
                "ns:m.0b4cwfp": "Spreadsheet Upload about ISO 3166-1 Alpha 3 codes and Numeric Codes"
            },
            "SExpr_w_name": "(JOIN (R dataworld.data_provider.datasets_provided) (AND (JOIN dataworld.information_source.data_operations Spreadsheet Upload about ISO 3166-1 Alpha 3 codes and Numeric Codes) (JOIN (R organization.organization_scope.organizations_with_this_scope) International)))",
            "SExpr": "(JOIN (R dataworld.data_provider.datasets_provided) (AND (JOIN dataworld.information_source.data_operations m.0b4cwfp) (JOIN (R organization.organization_scope.organizations_with_this_scope) m.01z430m)))"
        }
    },
    "33": {
        "generations": [
            [
                "what genre is the anime lupin iii?",
                -1.912984465953
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05p553)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05p553 ns:base.animemanga.anime_manga_genre.anime_manga_franchises ?y .\n?y ns:base.animemanga.anime_manga_franchise.genre ?x .\n?y ns:base.animemanga.anime_manga_franchise.anime_title ns:m.03cybtt .\n}\n",
            "TopicEntityMid": "m.05p553",
            "mid2name": {
                "ns:m.05p553": "Comedy",
                "ns:m.03cybtt": "Lupin III"
            },
            "SExpr_w_name": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (AND (JOIN base.animemanga.anime_manga_franchise.anime_title Lupin III) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) Comedy)))",
            "SExpr": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (AND (JOIN base.animemanga.anime_manga_franchise.anime_title m.03cybtt) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) m.05p553)))"
        }
    },
    "34": {
        "generations": [
            [
                "who is the south african freestyle wrestler in the olympics?",
                -2.9344348537
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0486tv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0486tv ns:olympics.olympic_sport.athletes ?y .\n?y ns:olympics.olympic_athlete_affiliation.athlete ?x .\n?y ns:olympics.olympic_athlete_affiliation.country ns:m.0hzlz .\n}\n",
            "TopicEntityMid": "m.0486tv",
            "mid2name": {
                "ns:m.0486tv": "Freestyle wrestling",
                "ns:m.0hzlz": "South Africa"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_athlete_affiliation.athlete) (AND (JOIN olympics.olympic_athlete_affiliation.country South Africa) (JOIN (R olympics.olympic_sport.athletes) Freestyle wrestling)))",
            "SExpr": "(JOIN (R olympics.olympic_athlete_affiliation.athlete) (AND (JOIN olympics.olympic_athlete_affiliation.country m.0hzlz) (JOIN (R olympics.olympic_sport.athletes) m.0486tv)))"
        }
    },
    "35": {
        "generations": [
            [
                "what organization does raiden belong to in the solid snake universe?",
                -1.4079815228000003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.020mlc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.020mlc ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n?y ns:fictional_universe.fictional_universe.characters ns:m.035fq4 .\n}\n",
            "TopicEntityMid": "m.020mlc",
            "mid2name": {
                "ns:m.020mlc": "Solid Snake",
                "ns:m.035fq4": "Raiden"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (AND (JOIN fictional_universe.fictional_universe.characters Raiden) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Solid Snake)))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (AND (JOIN fictional_universe.fictional_universe.characters m.035fq4) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.020mlc)))"
        }
    },
    "36": {
        "generations": [
            [
                "what mythology is the roxane, nisibisi witch from in the tempus unbound universe?",
                -4.812045846671
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c09_k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c09_k8 ns:fictional_universe.fictional_universe.species ?y .\n?y ns:base.folklore.mythical_creature.mythology ?x .\n?y ns:fictional_universe.character_species.characters_of_this_species ns:m.0bxtyd0 .\n}\n",
            "TopicEntityMid": "m.0c09_k8",
            "mid2name": {
                "ns:m.0c09_k8": "Tempus Unbound",
                "ns:m.0bxtyd0": "Roxane, Nisibisi witch"
            },
            "SExpr_w_name": "(JOIN (R base.folklore.mythical_creature.mythology) (AND (JOIN fictional_universe.character_species.characters_of_this_species Roxane, Nisibisi witch) (JOIN (R fictional_universe.fictional_universe.species) Tempus Unbound)))",
            "SExpr": "(JOIN (R base.folklore.mythical_creature.mythology) (AND (JOIN fictional_universe.character_species.characters_of_this_species m.0bxtyd0) (JOIN (R fictional_universe.fictional_universe.species) m.0c09_k8)))"
        }
    },
    "37": {
        "generations": [
            [
                "what award was kevin adams nominated for for his role in henry vi part 2?",
                -4.022036806818001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_xlw9m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_xlw9m ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?y ns:award.award_nomination.award_nominee ns:m.02rwyst .\n}\n",
            "TopicEntityMid": "m.0_xlw9m",
            "mid2name": {
                "ns:m.0_xlw9m": "Henry VI Part 2",
                "ns:m.02rwyst": "Kevin Adams"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee Kevin Adams) (JOIN (R award.award_nominated_work.award_nominations) Henry VI Part 2)))",
            "SExpr": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee m.02rwyst) (JOIN (R award.award_nominated_work.award_nominations) m.0_xlw9m)))"
        }
    },
    "38": {
        "generations": [
            [
                "what industry does the original handle video company belong to?",
                -2.7993621758000002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z4p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z4p ns:business.industry.companies ?y .\n?y ns:business.business_operation.industry ?x .\n?y ns:business.brand.products ns:m.012n8cj_ .\n}\n",
            "TopicEntityMid": "m.07z4p",
            "mid2name": {
                "ns:m.07z4p": "Video",
                "ns:m.012n8cj_": "The Original Handle"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (AND (JOIN business.brand.products The Original Handle) (JOIN (R business.industry.companies) Video)))",
            "SExpr": "(JOIN (R business.business_operation.industry) (AND (JOIN business.brand.products m.012n8cj_) (JOIN (R business.industry.companies) m.07z4p)))"
        }
    },
    "39": {
        "generations": [
            [
                "what military force did harry davis serve in the 46th ohio infantry?",
                -2.718228613495499
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwhmj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwhmj3 ns:military.military_unit.servicemembers ?y .\n?y ns:military.military_service.military_force ?x .\n?y ns:military.military_service.military_person ns:m.0zmzj0h .\n}\n",
            "TopicEntityMid": "m.0bwhmj3",
            "mid2name": {
                "ns:m.0bwhmj3": "46th Ohio Infantry",
                "ns:m.0zmzj0h": "Harry Davis"
            },
            "SExpr_w_name": "(JOIN (R military.military_service.military_force) (AND (JOIN military.military_service.military_person Harry Davis) (JOIN (R military.military_unit.servicemembers) 46th Ohio Infantry)))",
            "SExpr": "(JOIN (R military.military_service.military_force) (AND (JOIN military.military_service.military_person m.0zmzj0h) (JOIN (R military.military_unit.servicemembers) m.0bwhmj3)))"
        }
    },
    "40": {
        "generations": [
            [
                "who created the recipe for gumbo using a ladle?",
                -2.8875097074963
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rl48)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rl48 ns:food.culinary_tool.used_in_recipes ?y .\n?y ns:food.recipe.author ?x .\n?y ns:food.recipe.dish ns:m.01qf88 .\n}\n",
            "TopicEntityMid": "m.027rl48",
            "mid2name": {
                "ns:m.027rl48": "Ladle",
                "ns:m.01qf88": "Gumbo"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.author) (AND (JOIN food.recipe.dish Gumbo) (JOIN (R food.culinary_tool.used_in_recipes) Ladle)))",
            "SExpr": "(JOIN (R food.recipe.author) (AND (JOIN food.recipe.dish m.01qf88) (JOIN (R food.culinary_tool.used_in_recipes) m.027rl48)))"
        }
    },
    "41": {
        "generations": [
            [
                "what is the climate like near the fairmont peace hotel in shanghai?",
                -1.5767691001310002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n9y0g7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n9y0g7 ns:location.location.containedby ?y .\n?y ns:travel.travel_destination.climate ?x .\n?y ns:travel.travel_destination.local_transportation ns:m.036tw1 .\n}\n",
            "TopicEntityMid": "m.0n9y0g7",
            "mid2name": {
                "ns:m.0n9y0g7": "Fairmont Peace Hotel",
                "ns:m.036tw1": "Shanghai Metro"
            },
            "SExpr_w_name": "(JOIN (R travel.travel_destination.climate) (AND (JOIN travel.travel_destination.local_transportation Shanghai Metro) (JOIN (R location.location.containedby) Fairmont Peace Hotel)))",
            "SExpr": "(JOIN (R travel.travel_destination.climate) (AND (JOIN travel.travel_destination.local_transportation m.036tw1) (JOIN (R location.location.containedby) m.0n9y0g7)))"
        }
    },
    "42": {
        "generations": [
            [
                "what is the active ingredient in lipiodol intralymphatic formulation?",
                -6.145633926785
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqy785)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqy785 ns:medicine.drug_administration_route.drug_formulations ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n?y ns:medicine.drug_formulation.active_ingredients ns:m.0bj5rc .\n}\n",
            "TopicEntityMid": "m.0hqy785",
            "mid2name": {
                "ns:m.0hqy785": "Intralymphatic",
                "ns:m.0bj5rc": "Lipiodol"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (AND (JOIN medicine.drug_formulation.active_ingredients Lipiodol) (JOIN (R medicine.drug_administration_route.drug_formulations) Intralymphatic)))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (AND (JOIN medicine.drug_formulation.active_ingredients m.0bj5rc) (JOIN (R medicine.drug_administration_route.drug_formulations) m.0hqy785)))"
        }
    },
    "43": {
        "generations": [
            [
                "what diseases are associated with anna sergeyovna, the winner of the sfx award for best actress?",
                -4.924455560530001
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0x2nwpx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0x2nwpx ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n?y ns:award.award_discipline.awards_in_this_discipline ns:m.03wntn3 .\n}\n",
            "TopicEntityMid": "m.0x2nwpx",
            "mid2name": {
                "ns:m.0x2nwpx": "Anna Sergeyovna",
                "ns:m.03wntn3": "SFX Award for Best Actress"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (AND (JOIN award.award_discipline.awards_in_this_discipline SFX Award for Best Actress) (JOIN (R fictional_universe.fictional_character.gender) Anna Sergeyovna)))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (AND (JOIN award.award_discipline.awards_in_this_discipline m.03wntn3) (JOIN (R fictional_universe.fictional_character.gender) m.0x2nwpx)))"
        }
    },
    "44": {
        "generations": [
            [
                "what books has vladimir putin written in russian?",
                -1.071438854381
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08193)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08193 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n?y ns:book.written_work.original_language ns:m.06b_j .\n}\n",
            "TopicEntityMid": "m.08193",
            "mid2name": {
                "ns:m.08193": "Vladimir Putin",
                "ns:m.06b_j": "Russian Language"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (AND (JOIN book.written_work.original_language Russian Language) (JOIN (R book.author.works_written) Vladimir Putin)))",
            "SExpr": "(JOIN (R book.written_work.author) (AND (JOIN book.written_work.original_language m.06b_j) (JOIN (R book.author.works_written) m.08193)))"
        }
    },
    "45": {
        "generations": [
            [
                "what is the higher classification of bulgarian dog breeds?",
                -2.936747557158
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015qh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015qh ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n?y ns:biology.animal_breed.breed_of ns:m.0bt9lr .\n}\n",
            "TopicEntityMid": "m.015qh",
            "mid2name": {
                "ns:m.015qh": "Bulgaria",
                "ns:m.0bt9lr": "Dog"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (AND (JOIN biology.animal_breed.breed_of Dog) (JOIN (R biology.breed_origin.breeds_originating_here) Bulgaria)))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (AND (JOIN biology.animal_breed.breed_of m.0bt9lr) (JOIN (R biology.breed_origin.breeds_originating_here) m.015qh)))"
        }
    },
    "46": {
        "generations": [
            [
                "what organization do droids belong to in the star wars universe?",
                -2.3396410343249996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1bg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1bg ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n?y ns:fictional_universe.fictional_universe.species ns:m.0kv98 .\n}\n",
            "TopicEntityMid": "m.0f1bg",
            "mid2name": {
                "ns:m.0f1bg": "Luke Skywalker",
                "ns:m.0kv98": "Droid"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (AND (JOIN fictional_universe.fictional_universe.species Droid) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Luke Skywalker)))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (AND (JOIN fictional_universe.fictional_universe.species m.0kv98) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.0f1bg)))"
        }
    },
    "47": {
        "generations": [
            [
                "where was nino born in death enters the city?",
                -1.6759871079299997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c2fhn_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c2fhn_ ns:base.militaryinfiction.event_in_fiction.location ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n?y ns:fictional_universe.fictional_setting.fictional_characters_born_here ns:m.0c3vjqr .\n}\n",
            "TopicEntityMid": "m.0c2fhn_",
            "mid2name": {
                "ns:m.0c2fhn_": "Death enters the City",
                "ns:m.0c3vjqr": "Nino"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (AND (JOIN fictional_universe.fictional_setting.fictional_characters_born_here Nino) (JOIN (R base.militaryinfiction.event_in_fiction.location) Death enters the City)))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (AND (JOIN fictional_universe.fictional_setting.fictional_characters_born_here m.0c3vjqr) (JOIN (R base.militaryinfiction.event_in_fiction.location) m.0c2fhn_)))"
        }
    },
    "48": {
        "generations": [
            [
                "where was the locus issue #445 february 1998 published?",
                -4.481232345802999
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j1dwbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j1dwbz ns:book.magazine_issue.magazine ?y .\n?y ns:book.magazine.place_of_publication ?x .\n?y ns:book.periodical.language ns:m.02h40lc .\n}\n",
            "TopicEntityMid": "m.0j1dwbz",
            "mid2name": {
                "ns:m.0j1dwbz": "Locus, #445 February 1998",
                "ns:m.02h40lc": "English Language"
            },
            "SExpr_w_name": "(JOIN (R book.magazine.place_of_publication) (AND (JOIN book.periodical.language English Language) (JOIN (R book.magazine_issue.magazine) Locus, #445 February 1998)))",
            "SExpr": "(JOIN (R book.magazine.place_of_publication) (AND (JOIN book.periodical.language m.02h40lc) (JOIN (R book.magazine_issue.magazine) m.0j1dwbz)))"
        }
    },
    "49": {
        "generations": [
            [
                "what installation art series did the author of history of masculinity create?",
                -4.2447301217
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012z_m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012z_m ns:visual_art.visual_art_form.artists ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n?y ns:book.author.works_written ns:m.0vzf1kc .\n}\n",
            "TopicEntityMid": "m.012z_m",
            "mid2name": {
                "ns:m.012z_m": "Installation art",
                "ns:m.0vzf1kc": "History of Masculinity"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (AND (JOIN book.author.works_written History of Masculinity) (JOIN (R visual_art.visual_art_form.artists) Installation art)))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (AND (JOIN book.author.works_written m.0vzf1kc) (JOIN (R visual_art.visual_art_form.artists) m.012z_m)))"
        }
    },
    "50": {
        "generations": [
            [
                "who plays sister mary lazarus in sister act?",
                -1.411062695034
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h6j954)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h6j954 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.03q05j .\n}\n",
            "TopicEntityMid": "m.0h6j954",
            "mid2name": {
                "ns:m.0h6j954": "Sister Mary Lazarus",
                "ns:m.03q05j": "Sister Act"
            },
            "SExpr_w_name": "(JOIN (R film.performance.actor) (AND (JOIN film.performance.film Sister Act) (JOIN (R film.film_character.portrayed_in_films) Sister Mary Lazarus)))",
            "SExpr": "(JOIN (R film.performance.actor) (AND (JOIN film.performance.film m.03q05j) (JOIN (R film.film_character.portrayed_in_films) m.0h6j954)))"
        }
    },
    "51": {
        "generations": [
            [
                "what art series is the angel of remembrance known for creating?",
                -5.82725577883
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h3grm9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h3grm9 ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n?y ns:book.author.works_written ns:m.0zrk0dy .\n}\n",
            "TopicEntityMid": "m.0h3grm9",
            "mid2name": {
                "ns:m.0h3grm9": "Angel of Remembrance",
                "ns:m.0zrk0dy": "New Orleans' Bayou Maharajah Arrives in Savannah"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (AND (JOIN book.author.works_written New Orleans' Bayou Maharajah Arrives in Savannah) (JOIN (R fictional_universe.fictional_character.character_created_by) Angel of Remembrance)))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (AND (JOIN book.author.works_written m.0zrk0dy) (JOIN (R fictional_universe.fictional_character.character_created_by) m.0h3grm9)))"
        }
    },
    "52": {
        "generations": [
            [
                "how do you pronounce the languages created by paul r. frommer?",
                -3.9973844163059997
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07k6sdr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07k6sdr ns:language.language_creator.languages_created ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:language.human_language.language_family ns:m.01m2b .\n}\n",
            "TopicEntityMid": "m.07k6sdr",
            "mid2name": {
                "ns:m.07k6sdr": "Paul R. Frommer",
                "ns:m.01m2b": "Constructed language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN language.human_language.language_family Constructed language) (JOIN (R language.language_creator.languages_created) Paul R. Frommer)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN language.human_language.language_family m.01m2b) (JOIN (R language.language_creator.languages_created) m.07k6sdr)))"
        }
    },
    "53": {
        "generations": [
            [
                "what is the criticism of java's dialect j#?",
                -3.1074350004999993
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0268yl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0268yl ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n?y ns:base.argumentmaps.thing_of_disputed_value.disparagement ns:m.0dqdx5 .\n}\n",
            "TopicEntityMid": "m.0268yl",
            "mid2name": {
                "ns:m.0268yl": "J#",
                "ns:m.0dqdx5": "Criticism of Java"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (AND (JOIN base.argumentmaps.thing_of_disputed_value.disparagement Criticism of Java) (JOIN (R computer.programming_language.influenced_by) J#)))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (AND (JOIN base.argumentmaps.thing_of_disputed_value.disparagement m.0dqdx5) (JOIN (R computer.programming_language.influenced_by) m.0268yl)))"
        }
    },
    "54": {
        "generations": [
            [
                "who is the artist of the album honolulu city lights?",
                -2.6230693483999996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pq2cl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pq2cl ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n?y ns:music.genre.albums ns:m.01pp0w2 .\n}\n",
            "TopicEntityMid": "m.01pq2cl",
            "mid2name": {
                "ns:m.01pq2cl": "Gabby Pahinui",
                "ns:m.01pp0w2": "Honolulu City Lights"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (AND (JOIN music.genre.albums Honolulu City Lights) (JOIN (R music.artist.genre) Gabby Pahinui)))",
            "SExpr": "(JOIN (R music.genre.artists) (AND (JOIN music.genre.albums m.01pp0w2) (JOIN (R music.artist.genre) m.01pq2cl)))"
        }
    },
    "55": {
        "generations": [
            [
                "how do you pronounce the national colored base ball league in the book crazy '08?",
                -3.3416358605000003
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025xp3c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025xp3c ns:sports.sports_league.sport ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:book.book_subject.works ns:m.05z38zr .\n}\n",
            "TopicEntityMid": "m.025xp3c",
            "mid2name": {
                "ns:m.025xp3c": "National Colored Base Ball League",
                "ns:m.05z38zr": "Crazy '08: How a Cast of Cranks, Rogues, Boneheads, and Magnates Created the Greatest Year in Baseball History"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN book.book_subject.works Crazy '08: How a Cast of Cranks, Rogues, Boneheads, and Magnates Created the Greatest Year in Baseball History) (JOIN (R sports.sports_league.sport) National Colored Base Ball League)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN book.book_subject.works m.05z38zr) (JOIN (R sports.sports_league.sport) m.025xp3c)))"
        }
    },
    "56": {
        "generations": [
            [
                "what small solar system body is soho-620?",
                -2.0275848425799996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_wqk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_wqk7 ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n?y ns:astronomy.celestial_object_category.subcategory_of ns:m.0gggxt .\n}\n",
            "TopicEntityMid": "m.02_wqk7",
            "mid2name": {
                "ns:m.02_wqk7": "SOHO-620",
                "ns:m.0gggxt": "Small Solar System body"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (AND (JOIN astronomy.celestial_object_category.subcategory_of Small Solar System body) (JOIN (R astronomy.celestial_object.category) SOHO-620)))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (AND (JOIN astronomy.celestial_object_category.subcategory_of m.0gggxt) (JOIN (R astronomy.celestial_object.category) m.02_wqk7)))"
        }
    },
    "57": {
        "generations": [
            [
                "what award did pete brooks get nominated for soul sister?",
                -2.7517887103049996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k71p5g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k71p5g ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?y ns:award.award_nomination.award_nominee ns:m.0k71lgv .\n}\n",
            "TopicEntityMid": "m.0k71p5g",
            "mid2name": {
                "ns:m.0k71p5g": "Soul Sister",
                "ns:m.0k71lgv": "Pete Brooks"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee Pete Brooks) (JOIN (R award.award_nominated_work.award_nominations) Soul Sister)))",
            "SExpr": "(JOIN (R award.award_nomination.award) (AND (JOIN award.award_nomination.award_nominee m.0k71lgv) (JOIN (R award.award_nominated_work.award_nominations) m.0k71p5g)))"
        }
    },
    "58": {
        "generations": [
            [
                "who was barack obama's running mate in the 2008 democratic primary?",
                -1.25469399
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0282m15)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0282m15 ns:government.us_presidential_campaign.running_mate ?y .\n?y ns:government.election_campaign.candidate ?x .\n?y ns:government.election_campaign.party ns:m.0d075m .\n}\n",
            "TopicEntityMid": "m.0282m15",
            "mid2name": {
                "ns:m.0282m15": "Barack Obama presidential primary campaign, 2008",
                "ns:m.0d075m": "Democratic Party"
            },
            "SExpr_w_name": "(JOIN (R government.election_campaign.candidate) (AND (JOIN government.election_campaign.party Democratic Party) (JOIN (R government.us_presidential_campaign.running_mate) Barack Obama presidential primary campaign, 2008)))",
            "SExpr": "(JOIN (R government.election_campaign.candidate) (AND (JOIN government.election_campaign.party m.0d075m) (JOIN (R government.us_presidential_campaign.running_mate) m.0282m15)))"
        }
    },
    "59": {
        "generations": [
            [
                "what is the active ingredient in cotton 0.05 injectable solution?",
                -0.9693912420599998
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqt1gl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqt1gl ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:medicine.drug_ingredient.active_ingredient_of_formulation ?x .\n?y ns:medicine.drug_ingredient.active_moiety_of_drug ns:m.0j4hvhg .\n}\n",
            "TopicEntityMid": "m.0hqt1gl",
            "mid2name": {
                "ns:m.0hqt1gl": "Cotton 0.05 injectable solution",
                "ns:m.0j4hvhg": "Gossypium hirsutum leaf extract"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (AND (JOIN medicine.drug_ingredient.active_moiety_of_drug Gossypium hirsutum leaf extract) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Cotton 0.05 injectable solution)))",
            "SExpr": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (AND (JOIN medicine.drug_ingredient.active_moiety_of_drug m.0j4hvhg) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqt1gl)))"
        }
    },
    "60": {
        "generations": [
            [
                "what genre of music is can't leave 'em alone by?",
                -3.4834543125300006
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rmp4x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rmp4x ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n?y ns:music.artist.origin ns:m.010cmt .\n}\n",
            "TopicEntityMid": "m.02rmp4x",
            "mid2name": {
                "ns:m.02rmp4x": "Can't Leave 'em Alone",
                "ns:m.010cmt": "Pleasantville"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin Pleasantville) (JOIN (R music.composition.composer) Can't Leave 'em Alone)))",
            "SExpr": "(JOIN (R music.artist.genre) (AND (JOIN music.artist.origin m.010cmt) (JOIN (R music.composition.composer) m.02rmp4x)))"
        }
    },
    "61": {
        "generations": [
            [
                "what musicals have been composed in buenos aires?",
                -3.7655219388399996
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_j99cl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_j99cl ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n?y ns:music.artist.genre ns:m.0557q .\n}\n",
            "TopicEntityMid": "m.0_j99cl",
            "mid2name": {
                "ns:m.0_j99cl": "Buenos Aires",
                "ns:m.0557q": "Musical theatre"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (AND (JOIN music.artist.genre Musical theatre) (JOIN (R music.composition.composer) Buenos Aires)))",
            "SExpr": "(JOIN (R book.author.works_written) (AND (JOIN music.artist.genre m.0557q) (JOIN (R music.composition.composer) m.0_j99cl)))"
        }
    },
    "62": {
        "generations": [
            [
                "what evidence supports phosphatidylserine synthase 2 being involved in phosphatidylserine biosynthetic process?",
                -3.9668919475
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l3d4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l3d4w ns:biology.gene_group.gene ?y .\n?y ns:biology.gene_group_membership.evidence ?x .\n?y ns:biology.gene_group_membership.gene ns:m.02lq6cq .\n}\n",
            "TopicEntityMid": "m.02l3d4w",
            "mid2name": {
                "ns:m.02l3d4w": "phosphatidylserine biosynthetic process",
                "ns:m.02lq6cq": "phosphatidylserine synthase 2"
            },
            "SExpr_w_name": "(JOIN (R biology.gene_group_membership.evidence) (AND (JOIN biology.gene_group_membership.gene phosphatidylserine synthase 2) (JOIN (R biology.gene_group.gene) phosphatidylserine biosynthetic process)))",
            "SExpr": "(JOIN (R biology.gene_group_membership.evidence) (AND (JOIN biology.gene_group_membership.gene m.02lq6cq) (JOIN (R biology.gene_group.gene) m.02l3d4w)))"
        }
    },
    "63": {
        "generations": [
            [
                "what religion did george fox found?",
                -2.603867716476
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0603p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0603p ns:religion.religion.branched_into ?y .\n?y ns:religion.religion.is_part_of ?x .\n?y ns:religion.religion.founding_figures ns:m.03fxs .\n}\n",
            "TopicEntityMid": "m.0603p",
            "mid2name": {
                "ns:m.0603p": "Puritan",
                "ns:m.03fxs": "George Fox"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.is_part_of) (AND (JOIN religion.religion.founding_figures George Foxs) (JOIN (R religion.religion.branched_into) Puritan)))",
            "SExpr": "(JOIN (R religion.religion.is_part_of) (AND (JOIN religion.religion.founding_figures m.03fxs) (JOIN (R religion.religion.branched_into) m.0603p)))"
        }
    },
    "64": {
        "generations": [
            [
                "what is jim watson's current role in the ottawa city council?",
                -7.135987358201
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cgq93c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cgq93c ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.governmental_body ?x .\n?y ns:government.government_position_held.office_holder ns:m.02fm6k .\n}\n",
            "TopicEntityMid": "m.0cgq93c",
            "mid2name": {
                "ns:m.0cgq93c": "Ottawa City Councilor",
                "ns:m.02fm6k": "Jim Watson"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.governmental_body) (AND (JOIN government.government_position_held.office_holder Jim Watson) (JOIN (R government.government_office_or_title.office_holders) Ottawa City Councilor)))",
            "SExpr": "(JOIN (R government.government_position_held.governmental_body) (AND (JOIN government.government_position_held.office_holder m.02fm6k) (JOIN (R government.government_office_or_title.office_holders) m.0cgq93c)))"
        }
    },
    "65": {
        "generations": [
            [
                "what is the generation of the chevrolet corvette (c5)?",
                -3.8570303742300007
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xm0m9r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xm0m9r ns:automotive.make.model_s ?y .\n?y ns:automotive.model.generations ?x .\n?y ns:base.cars_refactor.model.generations ns:m.0bqjgj .\n}\n",
            "TopicEntityMid": "m.0xm0m9r",
            "mid2name": {
                "ns:m.0xm0m9r": "Chevrolet",
                "ns:m.0bqjgj": "Chevrolet Corvette (C5)"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (AND (JOIN base.cars_refactor.model.generations Chevrolet Corvette (C5)) (JOIN (R automotive.make.model_s) Chevrolet)))",
            "SExpr": "(JOIN (R automotive.model.generations) (AND (JOIN base.cars_refactor.model.generations m.0bqjgj) (JOIN (R automotive.make.model_s) m.0xm0m9r)))"
        }
    },
    "66": {
        "generations": [
            [
                "how is the programming in haskell book pronounced in the context of algebraic logic functional programming language?",
                -6.074325713780002
            ]
        ],
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03r9j8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03r9j8 ns:computer.programming_language.language_paradigms ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n?y ns:book.book_subject.works ns:m.04gd69g .\n}\n",
            "TopicEntityMid": "m.03r9j8",
            "mid2name": {
                "ns:m.03r9j8": "Algebraic Logic Functional programming language",
                "ns:m.04gd69g": "Programming in Haskell"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN book.book_subject.works Programming in Haskell) (JOIN (R computer.programming_language.language_paradigms) Algebraic Logic Functional programming language)))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (AND (JOIN book.book_subject.works m.04gd69g) (JOIN (R computer.programming_language.language_paradigms) m.03r9j8)))"
        }
    }
}