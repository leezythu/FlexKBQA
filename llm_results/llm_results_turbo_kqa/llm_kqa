{
    "0": {
        "generations": "What was the population of the metropolitan area whose population was 2.71049e+06 on 2014-01-01?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 2.71049e+06 </V> </ES> whose <A> population </A> is text <V> 2.71049e+06 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.71049e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv_1 . ?qpv_1 <pred:date> \"2014-01-01\"^^xsd:date . ?e <population> ?pv . ?pv <pred:value> \"2.71049e+06\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "1": {
        "generations": "When did the film with an attendance of 8446.0 end its attendance (the attendance is the same for both instances)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> end time </Q> of <ES> <C> film </C> whose <A> attendance </A> is number <V> 8446.0 </V> </ES> whose <A> attendance </A> is text <V> 8446.0 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8446.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv_1 ] <end time> ?qpv_1 . ?qpv_1 <pred:date> \"2018-05-30\"^^xsd:date . ?e <attendance> ?pv . ?pv <pred:value> \"8446.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv ] <end time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "2": {
        "generations": "What is the connection between James Stewart and the Academy Award for Best Actor?",
        "ori_data_item": {
            "question": "what is the relation from <E> James Stewart </E> to <E> Academy Award for Best Actor </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"James Stewart\" . ?e_2 <pred:name> \"Academy Award for Best Actor\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "3": {
        "generations": "What is the connection between Somerset and Sigourney Weaver?",
        "ori_data_item": {
            "question": "what is the relation from <E> Somerset </E> to <E> Sigourney Weaver </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Somerset\" . ?e_2 <pred:name> \"Sigourney Weaver\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "4": {
        "generations": "What is the connection between Inyo County and Independence?",
        "ori_data_item": {
            "question": "what is the relation from <E> Inyo County </E> to <E> Independence </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Inyo County\" . ?e_2 <pred:name> \"Independence\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "5": {
        "generations": "What is the connection between two instances of A Midsummer Night's Dream?",
        "ori_data_item": {
            "question": "what is the relation from <E> A Midsummer Night's Dream </E> to <E> A Midsummer Night's Dream </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"A Midsummer Night's Dream\" . ?e_2 <pred:name> \"A Midsummer Night's Dream\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "6": {
        "generations": "What is the connection between Abidjan and Ivory Coast?",
        "ori_data_item": {
            "question": "what is the relation from <E> Abidjan </E> to <E> Ivory Coast </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Abidjan\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "7": {
        "generations": "What is the connection between Lady Sings the Blues and Billie Holiday?",
        "ori_data_item": {
            "question": "what is the relation from <E> Lady Sings the Blues </E> to <E> Billie Holiday </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Lady Sings the Blues\" . ?e_2 <pred:name> \"Billie Holiday\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "8": {
        "generations": "What is the connection between Cleveland Institute of Music and Case Western Reserve University?",
        "ori_data_item": {
            "question": "what is the relation from <E> Cleveland Institute of Music </E> to <E> Case Western Reserve University </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cleveland Institute of Music\" . ?e_2 <pred:name> \"Case Western Reserve University\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "9": {
        "generations": "What is the connection between Sigourney Weaver and Sarah Lawrence College?",
        "ori_data_item": {
            "question": "what is the relation from <E> Sigourney Weaver </E> to <E> Sarah Lawrence College </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Sigourney Weaver\" . ?e_2 <pred:name> \"Sarah Lawrence College\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "10": {
        "generations": "What is the connection between Real Zaragoza and Zaragoza?",
        "ori_data_item": {
            "question": "what is the relation from <E> Real Zaragoza </E> to <E> Zaragoza </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Real Zaragoza\" . ?e_2 <pred:name> \"Zaragoza\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "11": {
        "generations": "What is the connection between Buster Keaton and Harold Lloyd?",
        "ori_data_item": {
            "question": "what is the relation from <E> Buster Keaton </E> to <E> Harold Lloyd </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Buster Keaton\" . ?e_2 <pred:name> \"Harold Lloyd\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "12": {
        "generations": "What is the connection between bebop and Charlie Parker?",
        "ori_data_item": {
            "question": "what is the relation from <E> bebop </E> to <E> Charlie Parker </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"bebop\" . ?e_2 <pred:name> \"Charlie Parker\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "13": {
        "generations": "What is the connection between evolution and Charles Darwin?",
        "ori_data_item": {
            "question": "what is the relation from <E> evolution </E> to <E> Charles Darwin </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"evolution\" . ?e_2 <pred:name> \"Charles Darwin\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "14": {
        "generations": "What is the connection between Andrzej Wajda and Poles?",
        "ori_data_item": {
            "question": "what is the relation from <E> Andrzej Wajda </E> to <E> Poles </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Andrzej Wajda\" . ?e_2 <pred:name> \"Poles\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "15": {
        "generations": "What is the connection between Rajesh Khanna and the Indian National Congress?",
        "ori_data_item": {
            "question": "what is the relation from <E> Rajesh Khanna </E> to <E> Indian National Congress </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Rajesh Khanna\" . ?e_2 <pred:name> \"Indian National Congress\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "16": {
        "generations": "What is the connection between Dwayne Johnson and the Calgary Stampeders?",
        "ori_data_item": {
            "question": "what is the relation from <E> Dwayne Johnson </E> to <E> Calgary Stampeders </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Dwayne Johnson\" . ?e_2 <pred:name> \"Calgary Stampeders\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "17": {
        "generations": "What is the connection between Cleopatra and Julius Caesar?",
        "ori_data_item": {
            "question": "what is the relation from <E> Cleopatra </E> to <E> Julius Caesar </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cleopatra\" . ?e_2 <pred:name> \"Julius Caesar\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "18": {
        "generations": "What is the connection between Jonah Hex and Apache?",
        "ori_data_item": {
            "question": "what is the relation from <E> Jonah Hex </E> to <E> Apache </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Jonah Hex\" . ?e_2 <pred:name> \"Apache\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "19": {
        "generations": "What is the connection between Get Smart and Mel Brooks?",
        "ori_data_item": {
            "question": "what is the relation from <E> Get Smart </E> to <E> Mel Brooks </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Get Smart\" . ?e_2 <pred:name> \"Mel Brooks\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "20": {
        "generations": "What is the connection between the University of Chicago and the University of Chicago Law School?",
        "ori_data_item": {
            "question": "what is the relation from <E> University of Chicago </E> to <E> University of Chicago Law School </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"University of Chicago\" . ?e_2 <pred:name> \"University of Chicago Law School\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "21": {
        "generations": "What is the connection between homelessness and poverty?",
        "ori_data_item": {
            "question": "what is the relation from <E> homelessness </E> to <E> poverty </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"homelessness\" . ?e_2 <pred:name> \"poverty\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "22": {
        "generations": "What is the connection between two instances of Roger Moore?",
        "ori_data_item": {
            "question": "what is the relation from <E> Roger Moore </E> to <E> Roger Moore </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Roger Moore\" . ?e_2 <pred:name> \"Roger Moore\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "23": {
        "generations": "What is the connection between Lil Wayne and Cash Money Records?",
        "ori_data_item": {
            "question": "what is the relation from <E> Lil Wayne </E> to <E> Cash Money Records </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Lil Wayne\" . ?e_2 <pred:name> \"Cash Money Records\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "24": {
        "generations": "What is the connection between Philadelphia Flyers and Keith Allen?",
        "ori_data_item": {
            "question": "what is the relation from <E> Philadelphia Flyers </E> to <E> Keith Allen </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Philadelphia Flyers\" . ?e_2 <pred:name> \"Keith Allen\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "25": {
        "generations": "What is the title of Buzz Aldrin's rank in relation to the word \"colonel\"?",
        "ori_data_item": {
            "question": "what is the relation from <E> Buzz Aldrin </E> to <E> colonel </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Buzz Aldrin\" . ?e_2 <pred:name> \"colonel\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "26": {
        "generations": "What is the connection between two instances of The Sum of All Fears?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Sum of All Fears </E> to <E> The Sum of All Fears </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Sum of All Fears\" . ?e_2 <pred:name> \"The Sum of All Fears\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "27": {
        "generations": "What is the connection between The Messenger and Canal+?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Messenger </E> to <E> Canal+ </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Messenger\" . ?e_2 <pred:name> \"Canal+\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "28": {
        "generations": "What is the connection between Shortbus and heterosexuality?",
        "ori_data_item": {
            "question": "what is the relation from <E> Shortbus </E> to <E> heterosexuality </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Shortbus\" . ?e_2 <pred:name> \"heterosexuality\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "29": {
        "generations": "What is the connection between congregational church and Calvinism?",
        "ori_data_item": {
            "question": "what is the relation from <E> congregational church </E> to <E> Calvinism </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"congregational church\" . ?e_2 <pred:name> \"Calvinism\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "30": {
        "generations": "What is the connection between Thelonious Monk and Rocky Mount?",
        "ori_data_item": {
            "question": "what is the relation from <E> Thelonious Monk </E> to <E> Rocky Mount </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Thelonious Monk\" . ?e_2 <pred:name> \"Rocky Mount\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "31": {
        "generations": "What is the connection between John Bailey and Dorchester?",
        "ori_data_item": {
            "question": "what is the relation from <E> John Bailey </E> to <E> Dorchester </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"John Bailey\" . ?e_2 <pred:name> \"Dorchester\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "32": {
        "generations": "What is the connection between The Fifth Element and Hudson Soft?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Fifth Element </E> to <E> Hudson Soft </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Fifth Element\" . ?e_2 <pred:name> \"Hudson Soft\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "33": {
        "generations": "What is the connection between two entities both named \"blue\"?",
        "ori_data_item": {
            "question": "what is the relation from <E> blue </E> to <E> blue </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"blue\" . ?e_2 <pred:name> \"blue\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "34": {
        "generations": "What is the connection between Ernest Hemingway and the Spanish Civil War?",
        "ori_data_item": {
            "question": "what is the relation from <E> Ernest Hemingway </E> to <E> Spanish Civil War </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ernest Hemingway\" . ?e_2 <pred:name> \"Spanish Civil War\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "35": {
        "generations": "What is the connection between A Great Day in Harlem and Charles Mingus Jr.?",
        "ori_data_item": {
            "question": "what is the relation from <E> A Great Day in Harlem </E> to <E> Charles Mingus Jr. </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"A Great Day in Harlem\" . ?e_2 <pred:name> \"Charles Mingus Jr.\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "36": {
        "generations": "What is the connection between a teacher and Lake Superior?",
        "ori_data_item": {
            "question": "what is the relation from <E> teacher </E> to <E> Lake Superior </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"teacher\" . ?e_2 <pred:name> \"Lake Superior\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "37": {
        "generations": "What is the connection between two instances of Gujarat?",
        "ori_data_item": {
            "question": "what is the relation from <E> Gujarat </E> to <E> Gujarat </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Gujarat\" . ?e_2 <pred:name> \"Gujarat\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "38": {
        "generations": "What is the connection between the World Fantasy Award for Best Anthology and an anthology?",
        "ori_data_item": {
            "question": "what is the relation from <E> World Fantasy Award for Best Anthology </E> to <E> anthology </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"World Fantasy Award for Best Anthology\" . ?e_2 <pred:name> \"anthology\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "39": {
        "generations": "What is the connection between Vince Gill and Dobro?",
        "ori_data_item": {
            "question": "what is the relation from <E> Vince Gill </E> to <E> Dobro </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Vince Gill\" . ?e_2 <pred:name> \"Dobro\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "40": {
        "generations": "What is the connection between Georgy Zhukov and the Imperial Russian Army?",
        "ori_data_item": {
            "question": "what is the relation from <E> Georgy Zhukov </E> to <E> Imperial Russian Army </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Georgy Zhukov\" . ?e_2 <pred:name> \"Imperial Russian Army\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "41": {
        "generations": "What is the connection between Harold Lloyd and the executive producer?",
        "ori_data_item": {
            "question": "what is the relation from <E> Harold Lloyd </E> to <E> executive producer </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harold Lloyd\" . ?e_2 <pred:name> \"executive producer\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "42": {
        "generations": "What is the connection between ESPN and Hearst?",
        "ori_data_item": {
            "question": "what is the relation from <E> ESPN </E> to <E> Hearst </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"ESPN\" . ?e_2 <pred:name> \"Hearst\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "43": {
        "generations": "What is the relationship between Christianity and being a Christian?",
        "ori_data_item": {
            "question": "what is the relation from <E> Christianity </E> to <E> Christian </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Christianity\" . ?e_2 <pred:name> \"Christian\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "44": {
        "generations": "What is the connection between FC Erzgebirge Aue and archery?",
        "ori_data_item": {
            "question": "what is the relation from <E> FC Erzgebirge Aue </E> to <E> archery </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"FC Erzgebirge Aue\" . ?e_2 <pred:name> \"archery\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "45": {
        "generations": "What is the connection between the National Gallery and Georgian architecture?",
        "ori_data_item": {
            "question": "what is the relation from <E> National Gallery </E> to <E> Georgian architecture </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"National Gallery\" . ?e_2 <pred:name> \"Georgian architecture\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "46": {
        "generations": "What is the connection between the Sun and Mars?",
        "ori_data_item": {
            "question": "what is the relation from <E> Sun </E> to <E> Mars </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Sun\" . ?e_2 <pred:name> \"Mars\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "47": {
        "generations": "What is the population and area of the U.S. city whose population is 25514.0 and area is 37.5618?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact t </Q> of <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> whose <A> area </A> is text <V> 37.5618 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:unit> \"1\" . ?qpv_1 <pred:value> \"25514.0\"^^xsd:double . ?e <area> ?pv . ?pv <pred:value> \"37.5618\" . [ <pred:fact_h> ?e ; <pred:fact_r> <area> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "48": {
        "generations": "What is the number of representatives in an organization/legislature for Bharatiya Janata Party (the one founded in 1980-01-01)?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of representatives in an organization/legislature </A> of <ES> <E> Bharatiya Janata Party </E> whose <A> inception </A> is date <V> 1980-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1980-01-01\"^^xsd:date . ?e <number of representatives in an organization/legislature> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "49": {
        "generations": "What is the position played on team/speciality of Chris Carter (the one born on 1982-09-16)?",
        "ori_data_item": {
            "question": "what is the attribute <A> position played on team / speciality </A> of <ES> <E> Chris Carter </E> whose <A> date of birth </A> is date <V> 1982-09-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Chris Carter\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1982-09-16\"^^xsd:date . ?e <position played on team / speciality> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "50": {
        "generations": "What is the British Museum person-institution of Fred Astaire (the one who died on 1987-06-22)?",
        "ori_data_item": {
            "question": "what is the attribute <A> British Museum person-institution </A> of <ES> <E> Fred Astaire </E> whose <A> date of death </A> is date <V> 1987-06-22 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Fred Astaire\" . ?e <date of death> ?pv_1 . ?pv_1 <pred:date> \"1987-06-22\"^^xsd:date . ?e <British Museum person-institution> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "51": {
        "generations": "What is the connection between Utah (the one with a population of 1.72285e+06) and the subreddit snowboarding?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Utah </E> whose <A> population </A> is number <V> 1.72285e+06 </V> </ES> to <ES> <E> snowboarding </E> whose <A> subreddit </A> is text <V> snowboarding </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Utah\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.72285e+06\"^^xsd:double . ?e_2 <pred:name> \"snowboarding\" . ?e_2 <subreddit> ?pv_1 . ?pv_1 <pred:value> \"snowboarding\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "52": {
        "generations": "What is the connection between The Ultimate Fighter (the one with 1 season and a value of 27.0) to Spike TV (the one with an official name of Spike TV)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> The Ultimate Fighter </E> whose <A> number of seasons </A> is number <V> 27.0 </V> </ES> to <ES> <E> Spike TV </E> whose <A> official name </A> is text <V> Spike TV </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Ultimate Fighter\" . ?e_1 <number of seasons> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"27.0\"^^xsd:double . ?e_2 <pred:name> \"Spike TV\" . ?e_2 <official name> ?pv_1 . ?pv_1 <pred:value> \"Spike TV\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "53": {
        "generations": "What is the connection between Iron Man 2 (the one with an attendance of 918409) and the title \"Iron Man 2\"?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Iron Man 2 </E> whose <A> attendance </A> is number <V> 918409.0 </V> </ES> to <ES> <E> Iron Man 2 </E> whose <A> title </A> is text <V> Iron Man 2 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Iron Man 2\" . ?e_1 <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"918409.0\"^^xsd:double . ?e_2 <pred:name> \"Iron Man 2\" . ?e_2 <title> ?pv_1 . ?pv_1 <pred:value> \"Iron Man 2\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "54": {
        "generations": "What is the connection between NBCUniversal (the one with an Alexa rank of 134355.0) and Telemundo (the one with a Twitter username of Telemundo)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> NBCUniversal </E> whose <A> Alexa rank </A> is number <V> 134355.0 </V> </ES> to <ES> <E> Telemundo </E> whose <A> Twitter username </A> is text <V> Telemundo </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"NBCUniversal\" . ?e_1 <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"134355.0\"^^xsd:double . ?e_2 <pred:name> \"Telemundo\" . ?e_2 <Twitter username> ?pv_1 . ?pv_1 <pred:value> \"Telemundo\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "55": {
        "generations": "When did Boston become a part of the United States of America (whose inception date is 1776-07-04)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Boston </E> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> inception </A> is date <V> 1776-07-04 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_2 <pred:name> \"United States of America\" . ?e_2 <inception> ?pv . ?pv <pred:date> \"1776-07-04\"^^xsd:date . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "56": {
        "generations": "Who is the author of the book that Harry Potter and the Goblet of Fire is based on, which was published on 2000-07-08?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> author </Q> of <E> Harry Potter and the Goblet of Fire </E> that <R> based on </R> backward to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2000-07-08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <publication date> ?pv . ?pv <pred:date> \"2000-07-08\"^^xsd:date . ?e_1 <based on> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <based on> ; <pred:fact_t> ?e_2 ] <author> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "57": {
        "generations": "What is the language of work or name for the city of Boston (whose inception date is 1630-09-07) and has an official website of http://www.cityofboston.gov/?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> official website </A> is text <V> http://www.cityofboston.gov/ </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Boston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <official website> ?pv . ?pv <pred:value> \"http://www.cityofboston.gov/\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "58": {
        "generations": "Does Cameroon have a Human Development Index of 0.436 and a Dewey Decimal Classification of 2--6711?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "59": {
        "generations": "Is the Bharatiya Janata Party's member count 1.1e+08 and is it associated with the British Museum person-institution with ID 8433?",
        "ori_data_item": {
            "question": "whether <ES> <E> Bharatiya Janata Party </E> whose <A> member count </A> is number <V> 1.1e+08 </V> </ES> whose <A> British Museum person-institution </A> is text <V> 8433 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <member count> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.1e+08\"^^xsd:double . ?e <British Museum person-institution> ?pv . ?pv <pred:value> \"8433\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "60": {
        "generations": "Did Harry Potter and the Goblet of Fire have a box office of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> box office </A> is text <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <box office> ?pv . ?pv <pred:value> \"8.96911e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "61": {
        "generations": "How many type of business entities have an ISNI of 0000 0004 0502 5178?",
        "ori_data_item": {
            "question": "how many <ES> <C> type of business entity </C> whose <A> ISNI </A> is text <V> 0000 0004 0502 5178 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"type of business entity\" . ?e <ISNI> ?pv . ?pv <pred:value> \"0000 0004 0502 5178\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "62": {
        "generations": "How many national association football teams have a ranking of 136.0?",
        "ori_data_item": {
            "question": "how many <ES> <C> national association football team </C> whose <A> ranking </A> is text <V> 136.0 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"national association football team\" . ?e <ranking> ?pv . ?pv <pred:value> \"136.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "63": {
        "generations": "How many visual artworks have the title \"Malcolm X\"?",
        "ori_data_item": {
            "question": "how many <ES> <C> visual artwork </C> whose <A> title </A> is text <V> Malcolm X </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"visual artwork\" . ?e <title> ?pv . ?pv <pred:value> \"Malcolm X\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "64": {
        "generations": "How many science awards have a review score of 0.8?",
        "ori_data_item": {
            "question": "how many <ES> <C> science award </C> whose <A> review score </A> is text <V> 0.8 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"science award\" . ?e <review score> ?pv . ?pv <pred:value> \"0.8\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "65": {
        "generations": "What is the agent with less than arg1 seats and exactly 59 seats?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> number of seats </A> smaller than number <V> arg1 </V> </ES> whose <A> number of seats </A> is text <V> 59.0 </V> ( <Q> pred:fact t </Q> is text <V> 59.0 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 < \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <number of seats> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"59.0\" . ?e <number of seats> ?pv . ?pv <pred:value> \"59.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "66": {
        "generations": "Which city of the United States has an area of 37.5618 and a population of 25514.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 37.5618 </V> </ES> and <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 1 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv . ?pv <pred:value> \"37.5618\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "67": {
        "generations": "Is there a city in the United States that was founded on 1630-09-07 and has an elevation above sea level of 43.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> elevation above sea level </A> is text <V> 43.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"43.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "68": {
        "generations": "Does the person born on 1931-09-21 with Munzinger IBA 00000016518 exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1931-09-21 </V> </ES> whose <A> Munzinger IBA </A> is text <V> 00000016518 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1931-09-21\"^^xsd:date . ?e <Munzinger IBA> ?pv . ?pv <pred:value> \"00000016518\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "69": {
        "generations": "Does the film with a publication date of 2008-01-01 and a duration of 160.0 exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2008-01-01 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2008-01-01\"^^xsd:date . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "70": {
        "generations": "Does the theatrical genre with an end time of 1968-03-25 and 58.0 number of episodes exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES> whose <A> number of episodes </A> is text <V> 58.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1968-03-25\"^^xsd:date . ?e <number of episodes> ?pv . ?pv <pred:value> \"58.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "71": {
        "generations": "Did the 40th Academy Awards ceremony take place on April 10th, 1968?",
        "ori_data_item": {
            "question": "whether <ES> <C> Academy Awards ceremony </C> whose <A> point in time </A> is date <V> 1968-04-10 </V> </ES> whose <A> edition number </A> is text <V> 40 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <point in time> ?pv_1 . ?pv_1 <pred:date> \"1968-04-10\"^^xsd:date . ?e <edition number> ?pv . ?pv <pred:value> \"40\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "72": {
        "generations": "Was the video game console model discontinued on January 4th, 2013 and priced at 299.99?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game console model </C> whose <A> discontinued date </A> is date <V> 2013-01-04 </V> </ES> whose <A> price </A> is text <V> 299.99 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <discontinued date> ?pv_1 . ?pv_1 <pred:date> \"2013-01-04\"^^xsd:date . ?e <price> ?pv . ?pv <pred:value> \"299.99\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "73": {
        "generations": "Is the capital with the LAU code CZ554782 first mentioned in written records on 0965-01-17?",
        "ori_data_item": {
            "question": "whether <ES> <C> capital </C> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V> </ES> whose <A> LAU </A> is text <V> CZ554782 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <time of earliest written record> ?pv_1 . ?pv_1 <pred:date> \"0965-01-17\"^^xsd:date . ?e <LAU> ?pv . ?pv <pred:value> \"CZ554782\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "74": {
        "generations": "What form of government had a nominal GDP of 2.77008e+09 on January 1st, 2004 and a Human Development Index of 0.473?",
        "ori_data_item": {
            "question": "whether <ES> <C> form of government </C> whose <A> nominal GDP </A> is text <V> 2.77008e+09 </V> </ES> whose <A> Human Development Index </A> is number <V> 0.473 </V> ( <Q> point in time </Q> is date <V> 2004-01-01 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"form of government\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"2.77008e+09\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2004-01-01\"^^xsd:date . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.473\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "75": {
        "generations": "What is the name of the agent with an IPv4 routing prefix of 204.123.0.0/16, whose start time is 1994-08-16, and has an employee with a salary of 66000.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> IPv4 routing prefix </A> is text <V> 204.123.0.0/16 </V> </ES> whose <A> employees </A> is number <V> 66000.0 </V> ( <Q> start time </Q> is date <V> 1994-08-16 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <IPv4 routing prefix> ?pv_1 . ?pv_1 <pred:value> \"204.123.0.0/16\" . [ <pred:fact_h> ?e ; <pred:fact_r> <IPv4 routing prefix> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"1994-08-16\"^^xsd:date . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"66000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "76": {
        "generations": "Is there a U.S. city with a population of 40 and a population less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is number <V> 40.0 </V> </ES> whose <A> population </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"40.0\"^^xsd:double . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "77": {
        "generations": "Is there an anime with 13 episodes and less than arg3 total number of episodes?",
        "ori_data_item": {
            "question": "whether <ES> <C> anime </C> whose <A> number of episodes </A> is number <V> 13.0 </V> </ES> whose <A> number of episodes </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"anime\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"13.0\"^^xsd:double . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "78": {
        "generations": "Is there a business school with an admission rate of 0.26 and another admission rate less than \"arg3\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> business school </C> whose <A> admission rate </A> is number <V> 0.26 </V> </ES> whose <A> admission rate </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"business school\" . ?e <admission rate> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.26\"^^xsd:double . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "79": {
        "generations": "Is there a single with a beats per minute of 72.0 and a beats per minute less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> single </C> whose <A> beats per minute </A> is number <V> 72.0 </V> </ES> whose <A> beats per minute </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"single\" . ?e <beats per minute> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"72.0\"^^xsd:double . ?e <beats per minute> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "80": {
        "generations": "Does the agent with 59.0 seats have less than arg3 seats?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> number of seats </A> is number <V> 59.0 </V> </ES> whose <A> number of seats </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"59.0\"^^xsd:double . ?e <number of seats> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "81": {
        "generations": "Is there an award with a quantity of 1 and a value less than \"arg3\" and a quantity of 1 and a value of 84.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> award </C> whose <A> quantity </A> is number <V> 84.0 </V> </ES> whose <A> quantity </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"award\" . ?e <quantity> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"84.0\"^^xsd:double . ?e <quantity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "82": {
        "generations": "Is there a first-level administrative country subdivision with a Human Development Index of 0.761 and another Human Development Index value less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> first-level administrative country subdivision </C> whose <A> Human Development Index </A> is number <V> 0.761 </V> </ES> whose <A> Human Development Index </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.761\"^^xsd:double . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "83": {
        "generations": "Is there a natural satellite with an albedo of 0.136 and another albedo less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> natural satellite </C> whose <A> albedo </A> is number <V> 0.136 </V> </ES> whose <A> albedo </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"natural satellite\" . ?e <albedo> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.136\"^^xsd:double . ?e <albedo> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "84": {
        "generations": "Is there a chemical compound with two pKa values, one of which is 4.752 and the other is less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> chemical compound </C> whose <A> pKa </A> is number <V> 4.752 </V> </ES> whose <A> pKa </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"chemical compound\" . ?e <pKa> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"4.752\"^^xsd:double . ?e <pKa> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "85": {
        "generations": "Is there a disease with 881730.0 cases and less than arg3 cases?",
        "ori_data_item": {
            "question": "whether <ES> <C> disease </C> whose <A> number of cases </A> is number <V> 881730.0 </V> </ES> whose <A> number of cases </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <number of cases> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"881730.0\"^^xsd:double . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "86": {
        "generations": "Is there an astronomical object type with an absolute magnitude of 4.83 and another absolute magnitude less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> astronomical object type </C> whose <A> absolute magnitude </A> is number <V> 4.83 </V> </ES> whose <A> absolute magnitude </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"astronomical object type\" . ?e <absolute magnitude> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"4.83\"^^xsd:double . ?e <absolute magnitude> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "87": {
        "generations": "Is there a geographic region with a total fertility rate of 2.3 and another total fertility rate less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <C> geographic region </C> whose <A> total fertility rate </A> is number <V> 2.3 </V> </ES> whose <A> total fertility rate </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"geographic region\" . ?e <total fertility rate> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.3\"^^xsd:double . ?e <total fertility rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "88": {
        "generations": "Is there a dead language with 100% of its speakers having less than arg3 speakers?",
        "ori_data_item": {
            "question": "whether <ES> <C> dead language </C> whose <A> number of speakers </A> is number <V> 100.0 </V> </ES> whose <A> number of speakers </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"dead language\" . ?e <number of speakers> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"100.0\"^^xsd:double . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "89": {
        "generations": "What is the British Museum person-institution of Fred Astaire (whose name in native language is also Fred Astaire)?",
        "ori_data_item": {
            "question": "what is the attribute <A> British Museum person-institution </A> of <ES> <E> Fred Astaire </E> whose <A> name in native language </A> is text <V> Fred Astaire </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Fred Astaire\" . ?e <name in native language> ?pv_1 . ?pv_1 <pred:value> \"Fred Astaire\" . ?e <British Museum person-institution> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "90": {
        "generations": "What is the Dewey Decimal Classification of Stuttgart and what is its Twitter hashtag?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Stuttgart\" . ?e <Twitter hashtag> ?pv_1 . ?pv_1 <pred:value> \"Stuttgart\" . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "91": {
        "generations": "What is the PhilPapers topic for heterosexuality?",
        "ori_data_item": {
            "question": "what is the attribute <A> PhilPapers topic </A> of <ES> <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "92": {
        "generations": "What is the country of the metropolitan area with a population of 2.71049e+06 as of 2014-01-01?",
        "ori_data_item": {
            "question": "what is the attribute <A> country </A> of <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 2.71049e+06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.71049e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date . ?e <country> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "93": {
        "generations": "What was the attendance for the film that ended on 2018-05-30 and had an attendance of 8446.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> attendance </A> of <ES> <C> film </C> whose <A> attendance </A> is number <V> 8446.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8446.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv_1 ] <end time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date . ?e <attendance> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "94": {
        "generations": "Which city of the United States has an area of 9.244e+07?",
        "ori_data_item": {
            "question": "what is <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 9.244e+07 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv . ?pv <pred:value> \"9.244e+07\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "95": {
        "generations": "Which entity is related to engineering and has an IPTC Newscode of mediatopic/20000716?",
        "ori_data_item": {
            "question": "what is <ES> <C> engineering </C> whose <A> IPTC Newscode </A> is text <V> mediatopic/20000716 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"engineering\" . ?e <IPTC Newscode> ?pv . ?pv <pred:value> \"mediatopic/20000716\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "96": {
        "generations": "Which film has a duration of 98.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> film </C> whose <A> duration </A> is text <V> 98.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv . ?pv <pred:value> \"98.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "97": {
        "generations": "Which class of instruments has a Hornbostel-Sachs classification of 111.242?",
        "ori_data_item": {
            "question": "what is <ES> <C> class of instruments </C> whose <A> Hornbostel-Sachs classification </A> is text <V> 111.242 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <Hornbostel-Sachs classification> ?pv . ?pv <pred:value> \"111.242\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "98": {
        "generations": "Which form of government has a British Museum person-institution value of 180889?",
        "ori_data_item": {
            "question": "what is <ES> <C> form of government </C> whose <A> British Museum person-institution </A> is text <V> 180889 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"form of government\" . ?e <British Museum person-institution> ?pv . ?pv <pred:value> \"180889\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "99": {
        "generations": "Which town is a market town and has an OS grid reference of SE455215?",
        "ori_data_item": {
            "question": "what is <ES> <C> market town </C> whose <A> OS grid reference </A> is text <V> SE455215 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"market town\" . ?e <OS grid reference> ?pv . ?pv <pred:value> \"SE455215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "100": {
        "generations": "Which human has a height of 183.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> human </C> whose <A> height </A> is text <V> 183.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <height> ?pv . ?pv <pred:value> \"183.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "101": {
        "generations": "Which real property has an OSM tag or key of \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "what is <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "102": {
        "generations": "Which Golden Globe Award ceremony has an edition number of 60?",
        "ori_data_item": {
            "question": "what is <ES> <C> Golden Globe Award ceremony </C> whose <A> edition number </A> is text <V> 60 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Golden Globe Award ceremony\" . ?e <edition number> ?pv . ?pv <pred:value> \"60\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "103": {
        "generations": "What activity is associated with the PhilPapers topic of heterosexuality?",
        "ori_data_item": {
            "question": "what is <ES> <C> activity </C> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "104": {
        "generations": "Which cruise ship has an IMO ship number of 5059953?",
        "ori_data_item": {
            "question": "what is <ES> <C> cruise ship </C> whose <A> IMO ship number </A> is text <V> 5059953 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"cruise ship\" . ?e <IMO ship number> ?pv . ?pv <pred:value> \"5059953\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "105": {
        "generations": "Which theatrical genre has 58 episodes?",
        "ori_data_item": {
            "question": "what is <ES> <C> theatrical genre </C> whose <A> number of episodes </A> is text <V> 58.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <number of episodes> ?pv . ?pv <pred:value> \"58.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "106": {
        "generations": "Which entertainment has a Nintendo GameID of RGHJ52?",
        "ori_data_item": {
            "question": "what is <ES> <C> entertainment </C> whose <A> Nintendo GameID </A> is text <V> RGHJ52 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"entertainment\" . ?e <Nintendo GameID> ?pv . ?pv <pred:value> \"RGHJ52\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "107": {
        "generations": "Which video game developer has a Corporate Number (Japan) of 6120901008215?",
        "ori_data_item": {
            "question": "what is <ES> <C> video game developer </C> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game developer\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"6120901008215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "108": {
        "generations": "Which metropolitan area has a nighttime view of \"Long Beach, CA at night.jpg\"?",
        "ori_data_item": {
            "question": "what is <ES> <C> metropolitan area </C> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <nighttime view> ?pv . ?pv <pred:value> \"Long Beach, CA at night.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "109": {
        "generations": "Which female given name has a Caverphone code of ARR111?",
        "ori_data_item": {
            "question": "what is <ES> <C> female given name </C> whose <A> Caverphone </A> is text <V> ARR111 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"female given name\" . ?e <Caverphone> ?pv . ?pv <pred:value> \"ARR111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "110": {
        "generations": "Which biological process has a spoken text audio named \"Simple en Evolution.oga\"?",
        "ori_data_item": {
            "question": "what is <ES> <C> biological process </C> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"biological process\" . ?e <spoken text audio> ?pv . ?pv <pred:value> \"Simple en Evolution.oga\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "111": {
        "generations": "Which television series episode has a production code of 111?",
        "ori_data_item": {
            "question": "what is <ES> <C> television series episode </C> whose <A> production code </A> is text <V> 111 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series episode\" . ?e <production code> ?pv . ?pv <pred:value> \"111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "112": {
        "generations": "Which body fluid has a UMLS CUI of C0229671?",
        "ori_data_item": {
            "question": "what is <ES> <C> body fluid </C> whose <A> UMLS CUI </A> is text <V> C0229671 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"body fluid\" . ?e <UMLS CUI> ?pv . ?pv <pred:value> \"C0229671\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "113": {
        "generations": "Which disease has a DiseasesDB ID of 9651?",
        "ori_data_item": {
            "question": "what is <ES> <C> disease </C> whose <A> DiseasesDB </A> is text <V> 9651 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <DiseasesDB> ?pv . ?pv <pred:value> \"9651\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "114": {
        "generations": "Which currency has an ISO 4217 code of CAD?",
        "ori_data_item": {
            "question": "what is <ES> <C> currency </C> whose <A> ISO 4217 code </A> is text <V> CAD </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"currency\" . ?e <ISO 4217 code> ?pv . ?pv <pred:value> \"CAD\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "115": {
        "generations": "Is there a U.S. city with an area of 15.661?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 15.661 </V> </ES> whose <A> area </A> is text <V> 15.661 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" . ?e <area> ?pv . ?pv <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "116": {
        "generations": "Does the film have a duration of 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "117": {
        "generations": "Does the town with OS grid reference SK245225 have another OS grid reference of SK245225?",
        "ori_data_item": {
            "question": "whether <ES> <C> town </C> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> whose <A> OS grid reference </A> is text <V> SK245225 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"town\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <OS grid reference> ?pv . ?pv <pred:value> \"SK245225\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "118": {
        "generations": "Is there a real property with OSM tag or key \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "119": {
        "generations": "Will the comics character with ISNI 0000 0003 5932 6542 be in the public domain in the United States of America by 2024-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <C> comics character </C> whose <A> ISNI </A> is text <V> 0000 0003 5932 6542 </V> </ES> whose <A> public domain date </A> is date <V> 2024-01-01 </V> ( <Q> applies to jurisdiction </Q> is text <V> United States of America </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"comics character\" . ?e <ISNI> ?pv_1 . ?pv_1 <pred:value> \"0000 0003 5932 6542\" . ?e <public domain date> ?pv . ?pv <pred:date> \"2024-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <public domain date> ; <pred:fact_t> ?pv ] <applies to jurisdiction> ?qpv . ?qpv <pred:value> \"United States of America\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "120": {
        "generations": "Was Pan Am the operator of the aircraft functional class that had a total production of 1527 and entered service on 1970-01-22?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> total produced </A> is text <V> 1527.0 </V> </ES> whose <A> service entry </A> is date <V> 1970-01-22 </V> ( <Q> operator </Q> is text <V> Pan Am </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <total produced> ?pv_1 . ?pv_1 <pred:value> \"1527.0\" . ?e <service entry> ?pv . ?pv <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "121": {
        "generations": "What is the connection between Ivory Coast and Ivory Coast (the one whose Human Development Index is 0.415)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Ivory Coast </E> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.415 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.415\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "122": {
        "generations": "What is the connection between Vinod Khanna and Bharatiya Janata Party (the one with 117 representatives in an organization/legislature)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Vinod Khanna </E> to <ES> <E> Bharatiya Janata Party </E> whose <A> number of representatives in an organization/legislature </A> is number <V> 117.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Vinod Khanna\" . ?e_2 <pred:name> \"Bharatiya Janata Party\" . ?e_2 <number of representatives in an organization/legislature> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"117.0\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "123": {
        "generations": "What is the connection between Emma Watson and Harry Potter and the Goblet of Fire (the one whose box office is 8.96911e+08)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Emma Watson </E> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Emma Watson\" . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "124": {
        "generations": "What is the connection between Top Hat and Fred Astaire (the one who has 2 children)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Top Hat </E> to <ES> <E> Fred Astaire </E> whose <A> number of children </A> is number <V> 2.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Top Hat\" . ?e_2 <pred:name> \"Fred Astaire\" . ?e_2 <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "125": {
        "generations": "What is the language of work or name for the city of the United States with a WOEID of 2475403 and a subreddit of PortHuron?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <C> city of the United States </C> whose <A> WOEID </A> is text <V> 2475403 </V> </ES> whose <A> subreddit </A> is text <V> PortHuron </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"2475403\" . ?e <subreddit> ?pv . ?pv <pred:value> \"PortHuron\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "126": {
        "generations": "What is the subject's role for the town with an OS grid reference of SK245225 and a TOID of 4000000074552364?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> subject has role </Q> of <ES> <C> town </C> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> whose <A> TOID </A> is text <V> 4000000074552364 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"town\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <TOID> ?pv . ?pv <pred:value> \"4000000074552364\" . [ <pred:fact_h> ?e ; <pred:fact_r> <TOID> ; <pred:fact_t> ?pv ] <subject has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "127": {
        "generations": "Is there a metropolitan area with a population greater than 6.155e+06 and with two population facts, one of which has a value of \"6.155e+06\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 6.155e+06 </V> </ES> whose <A> population </A> larger than number <V> arg6 </V> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"6.155e+06\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "128": {
        "generations": "Is the city of the United States, whose elevation above sea level is 114.0 and area is 15.661, the same as the one whose elevation above sea level is 114.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 114.0 </V> </ES> whose <A> area </A> is text <V> 15.661 </V> ( <Q> pred:fact t </Q> is text <V> 114.0 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"114.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"114.0\" . ?e <area> ?pv . ?pv <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "129": {
        "generations": "Is the population of Summit 21457 and its area 15.661?",
        "ori_data_item": {
            "question": "whether <ES> <E> Summit </E> whose <A> area </A> is text <V> 15.661 </V> </ES> whose <A> population </A> is number <V> 21457.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Summit\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"21457.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "130": {
        "generations": "What is the connection between Ivory Coast (the one whose inception is 1960-01-01) and Ivory Coast (the one whose Dewey Decimal Classification is 2--6668)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--6668\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "131": {
        "generations": "What is the connection between Harry Potter and the Goblet of Fire (published on 2000-07-08) and Harry Potter and the Goblet of Fire (with a duration of 151.0)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2000-07-08 </V> </ES> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> duration </A> is text <V> 151.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <publication date> ?pv . ?pv <pred:date> \"2000-07-08\"^^xsd:date . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <duration> ?pv_1 . ?pv_1 <pred:value> \"151.0\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "132": {
        "generations": "What is the connection between Max Weber (the one born on 1864-04-21) and Max Weber senior (the one with name in native language)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Max Weber </E> whose <A> date of birth </A> is date <V> 1864-04-21 </V> </ES> to <ES> <E> Max Weber </E> whose <A> name in native language </A> is text <V> Max Weber senior </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Max Weber\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1864-04-21\"^^xsd:date . ?e_2 <pred:name> \"Max Weber\" . ?e_2 <name in native language> ?pv_1 . ?pv_1 <pred:value> \"Max Weber senior\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "133": {
        "generations": "What is the connection between John Adams (the one whose end time is 2008-04-20) and John Adams (the one with Biografisch Portaal number 57767253)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> John Adams </E> whose <A> end time </A> is date <V> 2008-04-20 </V> </ES> to <ES> <E> John Adams </E> whose <A> Biografisch Portaal number </A> is text <V> 57767253 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"John Adams\" . ?e_1 <end time> ?pv . ?pv <pred:date> \"2008-04-20\"^^xsd:date . ?e_2 <pred:name> \"John Adams\" . ?e_2 <Biografisch Portaal number> ?pv_1 . ?pv_1 <pred:value> \"57767253\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "134": {
        "generations": "What is the connection between Cameroon (the one with a Human Development Index of 0.436) and Cameroon (the one with a Human Development Index of 0.486)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.486 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.486\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "135": {
        "generations": "Who said \"I love you, too\" as their last words to George W. Bush and had 6 children?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> number of children </A> is number <V> 6.0 </V> </ES> whose <A> last words </A> is text <V> I love you, too. </V> ( <Q> addressee </Q> is text <V> George W. Bush </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.0\"^^xsd:double . ?e <last words> ?pv . ?pv <pred:value> \"I love you, too.\" . [ <pred:fact_h> ?e ; <pred:fact_r> <last words> ; <pred:fact_t> ?pv ] <addressee> ?qpv . ?qpv <pred:value> \"George W. Bush\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "136": {
        "generations": "During which period did the state of the United States with a population of 3.26674e+06 and the nickname \"The Yellowhammer State\" start using that nickname?",
        "ori_data_item": {
            "question": "whether <ES> <C> state of the United States </C> whose <A> population </A> is number <V> 3.26674e+06 </V> </ES> whose <A> nickname </A> is text <V> The Yellowhammer State </V> ( <Q> start period </Q> is text <V> American Civil War </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"state of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"3.26674e+06\"^^xsd:double . ?e <nickname> ?pv . ?pv <pred:value> \"The Yellowhammer State\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nickname> ; <pred:fact_t> ?pv ] <start period> ?qpv . ?qpv <pred:value> \"American Civil War\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "137": {
        "generations": "Is the sovereign state with an official name of \uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d (the language of this statement is not specified) and a Gini coefficient of 31.0 (unit is 1) also known as Chos\u014fn Minjuju\u016di Inmin Konghwaguk (in McCune-Reischauer romanization)?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> Gini coefficient </A> is number <V> 31.0 </V> </ES> whose <A> official name </A> is text <V> \uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d </V> ( <Q> McCune-Reischauer romanization </Q> is text <V> Chos\u014fn Minjuju\u016di Inmin Konghwaguk </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Gini coefficient> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"31.0\"^^xsd:double . ?e <official name> ?pv . ?pv <pred:value> \"\uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official name> ; <pred:fact_t> ?pv ] <McCune-Reischauer romanization> ?qpv . ?qpv <pred:value> \"Chos\u014fn Minjuju\u016di Inmin Konghwaguk\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "138": {
        "generations": "Does the agent with an official website of https://www.vodafone.co.uk/ (which applies to the jurisdiction of United Kingdom) have 1 employee with a value of 107667.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> employees </A> is number <V> 107667.0 </V> </ES> whose <A> official website </A> is text <V> https://www.vodafone.co.uk/ </V> ( <Q> applies to jurisdiction </Q> is text <V> United Kingdom </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <employees> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"107667.0\"^^xsd:double . ?e <official website> ?pv . ?pv <pred:value> \"https://www.vodafone.co.uk/\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <applies to jurisdiction> ?qpv . ?qpv <pred:value> \"United Kingdom\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "139": {
        "generations": "Does Bharatiya Janata Party have a member count of 1.1e+08?",
        "ori_data_item": {
            "question": "whether <E> Bharatiya Janata Party </E> whose <A> member count </A> is number <V> 1.1e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.1e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "140": {
        "generations": "Did Harry Potter and the Goblet of Fire have a box office revenue of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "141": {
        "generations": "Does Liberia have a Human Development Index of 0.424?",
        "ori_data_item": {
            "question": "whether <E> Liberia </E> whose <A> Human Development Index </A> is number <V> 0.424 </V>",
            "sparql": "ASK { ?e <pred:name> \"Liberia\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.424\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "142": {
        "generations": "Does Ipswich have a population of 163,000?",
        "ori_data_item": {
            "question": "whether <E> Ipswich </E> whose <A> population </A> is number <V> 163000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ipswich\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"163000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "143": {
        "generations": "Does Fred Astaire have 2 children?",
        "ori_data_item": {
            "question": "whether <E> Fred Astaire </E> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "144": {
        "generations": "Does Butler University have a student count of 4512?",
        "ori_data_item": {
            "question": "whether <E> Butler University </E> whose <A> students count </A> is number <V> 4512.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Butler University\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"4512.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "145": {
        "generations": "Does California College of the Arts have 500 employees?",
        "ori_data_item": {
            "question": "whether <E> California College of the Arts </E> whose <A> employees </A> is number <V> 500.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"California College of the Arts\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"500.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "146": {
        "generations": "Does the California State Assembly have 80 seats?",
        "ori_data_item": {
            "question": "whether <E> California State Assembly </E> whose <A> number of seats </A> is number <V> 80.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"California State Assembly\" . ?e <number of seats> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"80.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "147": {
        "generations": "Does Somerset have 1710.0 episodes?",
        "ori_data_item": {
            "question": "whether <E> Somerset </E> whose <A> number of episodes </A> is number <V> 1710.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1710.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "148": {
        "generations": "Does Target Corporation have an Alexa rank of 380.0 (unit: 1)?",
        "ori_data_item": {
            "question": "whether <E> Target Corporation </E> whose <A> Alexa rank </A> is number <V> 380.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Target Corporation\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"380.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "149": {
        "generations": "Does Gujarat have a female population of 2.89484e+07?",
        "ori_data_item": {
            "question": "whether <E> Gujarat </E> whose <A> female population </A> is number <V> 2.89484e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"Gujarat\" . ?e <female population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.89484e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "150": {
        "generations": "Has PlayStation 3 sold 87 million units?",
        "ori_data_item": {
            "question": "whether <E> PlayStation 3 </E> whose <A> units sold </A> is number <V> 8.7e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"PlayStation 3\" . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.7e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "151": {
        "generations": "Does Limburg have an annual number of weddings equal to 3568.0?",
        "ori_data_item": {
            "question": "whether <E> Limburg </E> whose <A> annual number of weddings </A> is number <V> 3568.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Limburg\" . ?e <annual number of weddings> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"3568.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "152": {
        "generations": "Does Carlisle have 50429 households?",
        "ori_data_item": {
            "question": "whether <E> Carlisle </E> whose <A> number of households </A> is number <V> 50429.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Carlisle\" . ?e <number of households> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"50429.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "153": {
        "generations": "Does Mars have a flattening of 0.00589?",
        "ori_data_item": {
            "question": "whether <E> Mars </E> whose <A> flattening </A> is number <V> 0.00589 </V>",
            "sparql": "ASK { ?e <pred:name> \"Mars\" . ?e <flattening> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.00589\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "154": {
        "generations": "Did cholera cause 143,000 deaths?",
        "ori_data_item": {
            "question": "whether <E> cholera </E> whose <A> number of deaths </A> is number <V> 143000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"cholera\" . ?e <number of deaths> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"143000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "155": {
        "generations": "Does malaria have 881730 cases?",
        "ori_data_item": {
            "question": "whether <E> malaria </E> whose <A> number of cases </A> is number <V> 881730.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"malaria\" . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"881730.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "156": {
        "generations": "Does Forest Lawn Memorial Park have 119216 graves?",
        "ori_data_item": {
            "question": "whether <E> Forest Lawn Memorial Park </E> whose <A> number of graves </A> is number <V> 119216.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Forest Lawn Memorial Park\" . ?e <number of graves> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"119216.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "157": {
        "generations": "Does Cebu have an electorate of 1.90374e+06?",
        "ori_data_item": {
            "question": "whether <E> Cebu </E> whose <A> electorate </A> is number <V> 1.90374e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cebu\" . ?e <electorate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.90374e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "158": {
        "generations": "Does Queen's University have an admission rate of 0.42?",
        "ori_data_item": {
            "question": "whether <E> Queen's University </E> whose <A> admission rate </A> is number <V> 0.42 </V>",
            "sparql": "ASK { ?e <pred:name> \"Queen's University\" . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.42\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "159": {
        "generations": "Did Cinderella have an attendance of 1.35985e+06?",
        "ori_data_item": {
            "question": "whether <E> Cinderella </E> whose <A> attendance </A> is number <V> 1.35985e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cinderella\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.35985e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "160": {
        "generations": "Does the Metropolitan Museum of Art have 5.24 million visitors per year?",
        "ori_data_item": {
            "question": "whether <E> Metropolitan Museum of Art </E> whose <A> visitors per year </A> is number <V> 5.24e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Metropolitan Museum of Art\" . ?e <visitors per year> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"5.24e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "161": {
        "generations": "Does For Your Eyes Only have 218 pages?",
        "ori_data_item": {
            "question": "whether <E> For Your Eyes Only </E> whose <A> number of pages </A> is number <V> 218.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"For Your Eyes Only\" . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"218.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "162": {
        "generations": "Does Sydney Airport have a patronage of 2.71981e+07?",
        "ori_data_item": {
            "question": "whether <E> Sydney Airport </E> whose <A> patronage </A> is number <V> 2.71981e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"Sydney Airport\" . ?e <patronage> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.71981e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "163": {
        "generations": "Was 1527.0 the total number of Boeing 747s produced?",
        "ori_data_item": {
            "question": "whether <E> Boeing 747 </E> whose <A> total produced </A> is number <V> 1527.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "164": {
        "generations": "Does Selangor FA have a maximum capacity of 80000.0?",
        "ori_data_item": {
            "question": "whether <E> Selangor FA </E> whose <A> maximum capacity </A> is number <V> 80000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Selangor FA\" . ?e <maximum capacity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"80000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "165": {
        "generations": "What is the Dewey Decimal Classification of Ivory Coast, which has a Human Development Index of 0.39?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Ivory Coast\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.39\"^^xsd:double . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "166": {
        "generations": "How many representatives does the Bharatiya Janata Party have in an organization/legislature and what is their member count?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of representatives in an organization/legislature </A> of <ES> <E> Bharatiya Janata Party </E> whose <A> member count </A> is number <V> 1.1e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <member count> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.1e+08\"^^xsd:double . ?e <number of representatives in an organization/legislature> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "167": {
        "generations": "What work was Harry Potter and the Goblet of Fire based on and what was its box office revenue?",
        "ori_data_item": {
            "question": "what is the attribute <A> after a work by </A> of <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <after a work by> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "168": {
        "generations": "Does the California State Assembly have 80 seats and less than arg4 seats?",
        "ori_data_item": {
            "question": "whether <ES> <E> California State Assembly </E> whose <A> number of seats </A> is number <V> 80.0 </V> </ES> whose <A> number of seats </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"California State Assembly\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"80.0\"^^xsd:double . ?e <number of seats> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "169": {
        "generations": "Does Street Fighter II V have less than arg4 episodes, where the first episode is 29.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Street Fighter II V </E> whose <A> number of episodes </A> is number <V> 29.0 </V> </ES> whose <A> number of episodes </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Street Fighter II V\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"29.0\"^^xsd:double . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "170": {
        "generations": "Does Queen's University have an admission rate less than 0.42 and another admission rate less than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Queen's University </E> whose <A> admission rate </A> is number <V> 0.42 </V> </ES> whose <A> admission rate </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Queen's University\" . ?e <admission rate> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.42\"^^xsd:double . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "171": {
        "generations": "Does SkyTeam have a member count of 20.0 (unit: 1) and another member count less than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> SkyTeam </E> whose <A> member count </A> is number <V> 20.0 </V> </ES> whose <A> member count </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"SkyTeam\" . ?e <member count> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"20.0\"^^xsd:double . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "172": {
        "generations": "Is the Royal Victorian Chain awarded in a quantity of 84.0 and is the value of its quantity less than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> Royal Victorian Chain </E> whose <A> quantity </A> is number <V> 84.0 </V> </ES> whose <A> quantity </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Royal Victorian Chain\" . ?e <quantity> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"84.0\"^^xsd:double . ?e <quantity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "173": {
        "generations": "Does the South Australian House of Assembly have 47 constituencies?",
        "ori_data_item": {
            "question": "whether <ES> <E> South Australian House of Assembly </E> whose <A> number of constituencies </A> is number <V> 47.0 </V> </ES> whose <A> number of constituencies </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"South Australian House of Assembly\" . ?e <number of constituencies> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"47.0\"^^xsd:double . ?e <number of constituencies> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "174": {
        "generations": "Does the Empire State Building have less than arg4 elevators and 102 floors above ground?",
        "ori_data_item": {
            "question": "whether <ES> <E> Empire State Building </E> whose <A> floors above ground </A> is number <V> 102.0 </V> </ES> whose <A> number of elevators </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Empire State Building\" . ?e <floors above ground> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"102.0\"^^xsd:double . ?e <number of elevators> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "175": {
        "generations": "Does Rio de Janeiro have a Human Development Index less than 0.761 and another Human Development Index less than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> Rio de Janeiro </E> whose <A> Human Development Index </A> is number <V> 0.761 </V> </ES> whose <A> Human Development Index </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Rio de Janeiro\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.761\"^^xsd:double . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "176": {
        "generations": "Does the Moon have an albedo less than arg4 and equal to 0.136?",
        "ori_data_item": {
            "question": "whether <ES> <E> Moon </E> whose <A> albedo </A> is number <V> 0.136 </V> </ES> whose <A> albedo </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Moon\" . ?e <albedo> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.136\"^^xsd:double . ?e <albedo> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "177": {
        "generations": "Does malaria have a number of cases less than arg4 (which is not specified in the query)?",
        "ori_data_item": {
            "question": "whether <ES> <E> malaria </E> whose <A> number of cases </A> is number <V> 881730.0 </V> </ES> whose <A> number of cases </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"malaria\" . ?e <number of cases> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"881730.0\"^^xsd:double . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "178": {
        "generations": "Does Southeast Asia have a total fertility rate less than arg4 and a number of out-of-school children equal to 1.8579e+07?",
        "ori_data_item": {
            "question": "whether <ES> <E> Southeast Asia </E> whose <A> number of out-of-school children </A> is number <V> 1.8579e+07 </V> </ES> whose <A> total fertility rate </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Southeast Asia\" . ?e <number of out-of-school children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.8579e+07\"^^xsd:double . ?e <total fertility rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "179": {
        "generations": "Does arachidonic acid have a pKa value less than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> arachidonic acid </E> whose <A> pKa </A> is number <V> 4.752 </V> </ES> whose <A> pKa </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"arachidonic acid\" . ?e <pKa> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"4.752\"^^xsd:double . ?e <pKa> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "180": {
        "generations": "Is the city of the United States with a Twitter username of CityOfBoston founded on 1630-09-07?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> Twitter username </A> is text <V> CityOfBoston </V> </ES> whose <A> inception </A> is date <V> 1630-09-07 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <Twitter username> ?pv_1 . ?pv_1 <pred:value> \"CityOfBoston\" . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "181": {
        "generations": "Was the person with ISNI 0000 0000 5930 3891 born on September 21, 1931?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> ISNI </A> is text <V> 0000 0000 5930 3891 </V> </ES> whose <A> date of birth </A> is date <V> 1931-09-21 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <ISNI> ?pv_1 . ?pv_1 <pred:value> \"0000 0000 5930 3891\" . ?e <date of birth> ?pv . ?pv <pred:date> \"1931-09-21\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "182": {
        "generations": "Is there a film with a duration of 160.0 and a publication date of 2008-09-07?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> publication date </A> is date <V> 2008-09-07 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <publication date> ?pv . ?pv <pred:date> \"2008-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "183": {
        "generations": "Did the 51st Academy Awards ceremony take place on April 9th, 1979?",
        "ori_data_item": {
            "question": "whether <ES> <C> Academy Awards ceremony </C> whose <A> edition number </A> is text <V> 51 </V> </ES> whose <A> point in time </A> is date <V> 1979-04-09 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"51\" . ?e <point in time> ?pv . ?pv <pred:date> \"1979-04-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "184": {
        "generations": "Which comics character, with an ISNI of 0000 0003 5932 6542, will enter the public domain on 2024-01-01 and is applicable to the jurisdiction of the United States of America?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> comics character </C> whose <A> ISNI </A> is text <V> 0000 0003 5932 6542 </V> </ES> and <ES> <C> comics character </C> whose <A> public domain date </A> is date <V> 2024-01-01 </V> </ES> ( <Q> applies to jurisdiction </Q> is text <V> United States of America </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"comics character\" . ?e <ISNI> ?pv . ?pv <pred:value> \"0000 0003 5932 6542\" . ?e <public domain date> ?pv_1 . ?pv_1 <pred:date> \"2024-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <public domain date> ; <pred:fact_t> ?pv_1 ] <applies to jurisdiction> ?qpv . ?qpv <pred:value> \"United States of America\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "185": {
        "generations": "Which aircraft functional class has a total produced of 1527 and a service entry date of 1970-01-22 with Pan Am as the operator?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> aircraft functional class </C> whose <A> total produced </A> is text <V> 1527.0 </V> </ES> and <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> </ES> ( <Q> operator </Q> is text <V> Pan Am </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <total produced> ?pv . ?pv <pred:value> \"1527.0\" . ?e <service entry> ?pv_1 . ?pv_1 <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv_1 ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "186": {
        "generations": "Is there a U.S. city with an area of 37.5618 and a population greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 37.5618 </V> </ES> whose <A> population </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"37.5618\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "187": {
        "generations": "Is there an anime television series with 224 episodes and at least one episode number greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> anime television series </C> whose <A> number of episodes </A> is text <V> 224.0 </V> </ES> whose <A> number of episodes </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"anime television series\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"224.0\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "188": {
        "generations": "Does the liberal arts college with ISNI 0000 0001 0657 7781 have a student count greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> liberal arts college </C> whose <A> ISNI </A> is text <V> 0000 0001 0657 7781 </V> </ES> whose <A> students count </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"liberal arts college\" . ?e <ISNI> ?pv_1 . ?pv_1 <pred:value> \"0000 0001 0657 7781\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "189": {
        "generations": "Is HAL Laboratory a video game developer with more than arg4 employees and a Twitter username of \"HAL Laboratory\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game developer </C> whose <A> Twitter username </A> is text <V> HAL Laboratory </V> </ES> whose <A> employees </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game developer\" . ?e <Twitter username> ?pv_1 . ?pv_1 <pred:value> \"HAL Laboratory\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "190": {
        "generations": "Is there a manifestation with a number of constituencies equal to 107.0 and at least one constituency with a value greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> manifestation </C> whose <A> number of constituencies </A> is text <V> 107.0 </V> </ES> whose <A> number of constituencies </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"manifestation\" . ?e <number of constituencies> ?pv_1 . ?pv_1 <pred:value> \"107.0\" . ?e <number of constituencies> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "191": {
        "generations": "Is there a cemetery with a National Heritage List for England number of 1080633 and more than one person buried?",
        "ori_data_item": {
            "question": "whether <ES> <C> cemetery </C> whose <A> National Heritage List for England number </A> is text <V> 1080633 </V> </ES> whose <A> quantity buried </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"cemetery\" . ?e <National Heritage List for England number> ?pv_1 . ?pv_1 <pred:value> \"1080633\" . ?e <quantity buried> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "192": {
        "generations": "Is there an aircraft functional class with a stall speed of 250.0 and a total production number greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> stall speed </A> is text <V> 250.0 </V> </ES> whose <A> total produced </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <stall speed> ?pv_1 . ?pv_1 <pred:value> \"250.0\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "193": {
        "generations": "Does the written work with ISBN-13 978-4-488-63201-4 have more than one page with a unit of \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> written work </C> whose <A> ISBN-13 </A> is text <V> 978-4-488-63201-4 </V> </ES> whose <A> number of pages </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"written work\" . ?e <ISBN-13> ?pv_1 . ?pv_1 <pred:value> \"978-4-488-63201-4\" . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "194": {
        "generations": "Is there a television series episode with an attendance of 1.43e+07 and a unit of 1, where the attendance value is greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> television series episode </C> whose <A> attendance </A> is text <V> 1.43e+07 </V> </ES> whose <A> attendance </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series episode\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:value> \"1.43e+07\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "195": {
        "generations": "Is there a recurring event with eligible voters greater than 2.13314e+08 and a unit of 1 with a value greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> recurring event </C> whose <A> eligible voters </A> is text <V> 2.13314e+08 </V> </ES> whose <A> eligible voters </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"recurring event\" . ?e <eligible voters> ?pv_1 . ?pv_1 <pred:value> \"2.13314e+08\" . ?e <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "196": {
        "generations": "Is there a language with an Ethnologue.com language code of \"sin\" and more than \"arg4\" speakers?",
        "ori_data_item": {
            "question": "whether <ES> <C> language </C> whose <A> Ethnologue.com language code </A> is text <V> sin </V> </ES> whose <A> number of speakers </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"language\" . ?e <Ethnologue.com language code> ?pv_1 . ?pv_1 <pred:value> \"sin\" . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "197": {
        "generations": "Was Get Carter published in Germany on August 16, 2001?",
        "ori_data_item": {
            "question": "whether <E> Get Carter </E> whose <A> publication date </A> is date <V> 2001-08-16 </V> ( <Q> place of publication </Q> is text <V> Germany </V> )",
            "sparql": "ASK { ?e <pred:name> \"Get Carter\" . ?e <publication date> ?pv . ?pv <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "198": {
        "generations": "Was the House of Plantagenet dissolved, abolished or demolished before 1485 (according to a statement with Gregorian date earlier than 1584)?",
        "ori_data_item": {
            "question": "whether <E> House of Plantagenet </E> whose <A> dissolved, abolished or demolished </A> is date <V> 1485-01-01 </V> ( <Q> instance of </Q> is text <V> statement with Gregorian date earlier than 1584 </V> )",
            "sparql": "ASK { ?e <pred:name> \"House of Plantagenet\" . ?e <dissolved, abolished or demolished> ?pv . ?pv <pred:date> \"1485-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <dissolved, abolished or demolished> ; <pred:fact_t> ?pv ] <instance of> ?qpv . ?qpv <pred:value> \"statement with Gregorian date earlier than 1584\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "199": {
        "generations": "Did Gil Kane die at the age of 73 on January 31, 2000?",
        "ori_data_item": {
            "question": "whether <E> Gil Kane </E> whose <A> date of death </A> is date <V> 2000-01-31 </V> ( <Q> stated age at event </Q> is text <V> 73.0 </V> )",
            "sparql": "ASK { ?e <pred:name> \"Gil Kane\" . ?e <date of death> ?pv . ?pv <pred:date> \"2000-01-31\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <date of death> ; <pred:fact_t> ?pv ] <stated age at event> ?qpv . ?qpv <pred:value> \"73.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "200": {
        "generations": "Is \"forum apud Munichen\" the stated source for the time of earliest written record of Munich (which is 1158-06-14)?",
        "ori_data_item": {
            "question": "whether <E> Munich </E> whose <A> time of earliest written record </A> is date <V> 1158-06-14 </V> ( <Q> stated as </Q> is text <V> forum apud Munichen </V> )",
            "sparql": "ASK { ?e <pred:name> \"Munich\" . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"1158-06-14\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <time of earliest written record> ; <pred:fact_t> ?pv ] <stated as> ?qpv . ?qpv <pred:value> \"forum apud Munichen\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "201": {
        "generations": "Was Pan Am the operator of the Boeing 747 when it entered service on 1970-01-22?",
        "ori_data_item": {
            "question": "whether <E> Boeing 747 </E> whose <A> service entry </A> is date <V> 1970-01-22 </V> ( <Q> operator </Q> is text <V> Pan Am </V> )",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <service entry> ?pv . ?pv <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "202": {
        "generations": "Was Rudyard Kipling buried or cremated on 1936-01-23 at Westminster Abbey?",
        "ori_data_item": {
            "question": "whether <E> Rudyard Kipling </E> whose <A> date of burial or cremation </A> is date <V> 1936-01-23 </V> ( <Q> location </Q> is text <V> Westminster Abbey </V> )",
            "sparql": "ASK { ?e <pred:name> \"Rudyard Kipling\" . ?e <date of burial or cremation> ?pv . ?pv <pred:date> \"1936-01-23\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <date of burial or cremation> ; <pred:fact_t> ?pv ] <location> ?qpv . ?qpv <pred:value> \"Westminster Abbey\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "203": {
        "generations": "Which metropolitan area has a population greater than 6.155e+06?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan area </C> whose <A> population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 6.155e+06 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "204": {
        "generations": "What is the administrative territorial entity that Dorchester is located in, and what is its native label?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <E> Dorchester </E> that <R> located in the administrative territorial entity </R> backward to <ES> <E> Boston </E> whose <A> native label </A> is text <V> Boston </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Dorchester\" . ?e_2 <pred:name> \"Boston\" . ?e_2 <native label> ?pv . ?pv <pred:value> \"Boston\" . ?e_1 <located in the administrative territorial entity> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <located in the administrative territorial entity> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "205": {
        "generations": "When did Cameroon become a member of the United Nations (the one with an official name of United Nations)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Cameroon </E> that <R> member of </R> backward to <ES> <E> United Nations </E> whose <A> official name </A> is text <V> United Nations </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_2 <pred:name> \"United Nations\" . ?e_2 <official name> ?pv . ?pv <pred:value> \"United Nations\" . ?e_1 <member of> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <member of> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "206": {
        "generations": "Is Boston's inception date 1630-09-07 and population 617594.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> population </A> is number <V> 617594.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "207": {
        "generations": "Did Fred Astaire have 2 children (the one born on 1899-05-10)?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1899-05-10\"^^xsd:date . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "208": {
        "generations": "Was Harry Potter and the Goblet of Fire published on 2005-11-06 and had a box office of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2005-11-06 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-06\"^^xsd:date . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "209": {
        "generations": "Did Somerset end on December 31st, 1976 and have 1710.0 episodes?",
        "ori_data_item": {
            "question": "whether <ES> <E> Somerset </E> whose <A> end time </A> is date <V> 1976-12-31 </V> </ES> whose <A> number of episodes </A> is number <V> 1710.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1976-12-31\"^^xsd:date . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1710.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "210": {
        "generations": "Did Hudson Soft dissolve on 2012-03-01 and have 500 employees?",
        "ori_data_item": {
            "question": "whether <ES> <E> Hudson Soft </E> whose <A> dissolved, abolished or demolished </A> is date <V> 2012-03-01 </V> </ES> whose <A> employees </A> is number <V> 500.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Hudson Soft\" . ?e <dissolved, abolished or demolished> ?pv_1 . ?pv_1 <pred:date> \"2012-03-01\"^^xsd:date . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"500.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "211": {
        "generations": "Did the Boeing 747 have its first flight on 1969-02-09 and a total production of 1527.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boeing 747 </E> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES> whose <A> total produced </A> is number <V> 1527.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <first flight> ?pv_1 . ?pv_1 <pred:date> \"1969-02-09\"^^xsd:date . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "212": {
        "generations": "Did the United States presidential election in 2008 have 2.13314e+08 eligible voters on November 4th?",
        "ori_data_item": {
            "question": "whether <ES> <E> United States presidential election, 2008 </E> whose <A> point in time </A> is date <V> 2008-11-04 </V> </ES> whose <A> eligible voters </A> is number <V> 2.13314e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"United States presidential election, 2008\" . ?e <point in time> ?pv_1 . ?pv_1 <pred:date> \"2008-11-04\"^^xsd:date . ?e <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.13314e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "213": {
        "generations": "Does the sovereign state have a Human Development Index of 0.436?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> whose <A> Human Development Index </A> is number <V> 0.436 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "214": {
        "generations": "Does the film have a box office of 8.96911e+08 with unit 1?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "215": {
        "generations": "What is the date of birth of the person born on 1971-07-13?",
        "ori_data_item": {
            "question": "what is the attribute <A> date of birth </A> of <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1971-07-13 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1971-07-13\"^^xsd:date . ?e <date of birth> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "216": {
        "generations": "When was the first performance of the film that had its first performance on 1982-02-04?",
        "ori_data_item": {
            "question": "what is the attribute <A> date of first performance </A> of <ES> <C> film </C> whose <A> date of first performance </A> is date <V> 1982-02-04 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <date of first performance> ?pv_1 . ?pv_1 <pred:date> \"1982-02-04\"^^xsd:date . ?e <date of first performance> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "217": {
        "generations": "What is the date of official opening for the television network that opened on 1970-10-05?",
        "ori_data_item": {
            "question": "what is the attribute <A> date of official opening </A> of <ES> <C> television network </C> whose <A> date of official opening </A> is date <V> 1970-10-05 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"television network\" . ?e <date of official opening> ?pv_1 . ?pv_1 <pred:date> \"1970-10-05\"^^xsd:date . ?e <date of official opening> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "218": {
        "generations": "What is the date of dissolution, abolition or demolition for the first-level administrative country subdivision that was dissolved on 1803-01-01?",
        "ori_data_item": {
            "question": "what is the attribute <A> dissolved, abolished or demolished </A> of <ES> <C> first-level administrative country subdivision </C> whose <A> dissolved, abolished or demolished </A> is date <V> 1803-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <dissolved, abolished or demolished> ?pv_1 . ?pv_1 <pred:date> \"1803-01-01\"^^xsd:date . ?e <dissolved, abolished or demolished> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "219": {
        "generations": "What is the end time of the anthology that ended on 1964-06-19?",
        "ori_data_item": {
            "question": "what is the attribute <A> end time </A> of <ES> <C> anthology </C> whose <A> end time </A> is date <V> 1964-06-19 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"anthology\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1964-06-19\"^^xsd:date . ?e <end time> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "220": {
        "generations": "When did the aircraft functional class have its first flight?",
        "ori_data_item": {
            "question": "what is the attribute <A> first flight </A> of <ES> <C> aircraft functional class </C> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <first flight> ?pv_1 . ?pv_1 <pred:date> \"1969-02-09\"^^xsd:date . ?e <first flight> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "221": {
        "generations": "What is the connection between Top Hat and Fred Astaire (whose name in native language is Fred Astaire)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Top Hat </E> to <ES> <E> Fred Astaire </E> whose <A> name in native language </A> is text <V> Fred Astaire </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Top Hat\" . ?e_2 <pred:name> \"Fred Astaire\" . ?e_2 <name in native language> ?pv . ?pv <pred:value> \"Fred Astaire\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "222": {
        "generations": "What is the connection between Stuttgarter Kickers and Stuttgart (the one with the Twitter hashtag \"Stuttgart\")?",
        "ori_data_item": {
            "question": "what is the relation from <E> Stuttgarter Kickers </E> to <ES> <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Stuttgarter Kickers\" . ?e_2 <pred:name> \"Stuttgart\" . ?e_2 <Twitter hashtag> ?pv . ?pv <pred:value> \"Stuttgart\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "223": {
        "generations": "What is the connection between NBCUniversal and CNBC (the one with Twitter username CNBC)?",
        "ori_data_item": {
            "question": "what is the relation from <E> NBCUniversal </E> to <ES> <E> CNBC </E> whose <A> Twitter username </A> is text <V> CNBC </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"NBCUniversal\" . ?e_2 <pred:name> \"CNBC\" . ?e_2 <Twitter username> ?pv . ?pv <pred:value> \"CNBC\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "224": {
        "generations": "What is the connection between Suffolk County and Boston (the one whose native label is \"Boston\")?",
        "ori_data_item": {
            "question": "what is the relation from <E> Suffolk County </E> to <ES> <E> Boston </E> whose <A> native label </A> is text <V> Boston </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Suffolk County\" . ?e_2 <pred:name> \"Boston\" . ?e_2 <native label> ?pv . ?pv <pred:value> \"Boston\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "225": {
        "generations": "What is the connection between Cameroon and Cameroon (the one with subreddit \"Cameroon\")?",
        "ori_data_item": {
            "question": "what is the relation from <E> Cameroon </E> to <ES> <E> Cameroon </E> whose <A> subreddit </A> is text <V> Cameroon </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <subreddit> ?pv . ?pv <pred:value> \"Cameroon\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "226": {
        "generations": "What is the connection between two instances of \"Harry Potter and the Order of the Phoenix\" with the title \"Harry Potter and the Order of the Phoenix\"?",
        "ori_data_item": {
            "question": "what is the relation from <E> Harry Potter and the Order of the Phoenix </E> to <ES> <E> Harry Potter and the Order of the Phoenix </E> whose <A> title </A> is text <V> Harry Potter and the Order of the Phoenix </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_2 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_2 <title> ?pv . ?pv <pred:value> \"Harry Potter and the Order of the Phoenix\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "227": {
        "generations": "What is the connection between Vladimir Lenin and the PhilPapers topic of heterosexuality?",
        "ori_data_item": {
            "question": "what is the relation from <E> Vladimir Lenin </E> to <ES> <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Vladimir Lenin\" . ?e_2 <pred:name> \"heterosexuality\" . ?e_2 <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "228": {
        "generations": "What is the nickname of Lawrence, who is the given name of Larry David?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> nickname </Q> of <E> Larry David </E> that <R> given name </R> backward to <ES> <E> Lawrence </E> whose <A> nickname </A> is text <V> Larry </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Larry David\" . ?e_2 <pred:name> \"Lawrence\" . ?e_2 <nickname> ?pv . ?pv <pred:value> \"Larry\" . ?e_1 <given name> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <given name> ; <pred:fact_t> ?e_2 ] <nickname> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "229": {
        "generations": "How many episodes of Angel was the person with the name Angel present in?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> number of episodes </Q> of <E> Angel </E> that <R> present in work </R> backward to <ES> <E> Angel </E> whose <A> number of episodes </A> is text <V> 110.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Angel\" . ?e_2 <pred:name> \"Angel\" . ?e_2 <number of episodes> ?pv . ?pv <pred:value> \"110.0\" . ?e_1 <present in work> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <present in work> ; <pred:fact_t> ?e_2 ] <number of episodes> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "230": {
        "generations": "How many Spanish speakers are there in Australia (the one with 4.37e+08 speakers)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> number of speakers </Q> of <E> Australia </E> that <R> language used </R> backward to <ES> <E> Spanish </E> whose <A> number of speakers </A> is text <V> 4.37e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Australia\" . ?e_2 <pred:name> \"Spanish\" . ?e_2 <number of speakers> ?pv . ?pv <pred:value> \"4.37e+08\" . ?e_1 <language used> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <language used> ; <pred:fact_t> ?e_2 ] <number of speakers> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "231": {
        "generations": "What is the official website of the Museum of Modern Art where Walter Benjamin's archives are located?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> official website </Q> of <E> Walter Benjamin </E> that <R> archives at </R> backward to <ES> <E> Museum of Modern Art </E> whose <A> official website </A> is text <V> http://moma.org/ </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Walter Benjamin\" . ?e_2 <pred:name> \"Museum of Modern Art\" . ?e_2 <official website> ?pv . ?pv <pred:value> \"http://moma.org/\" . ?e_1 <archives at> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <archives at> ; <pred:fact_t> ?e_2 ] <official website> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "232": {
        "generations": "What is the population of Russians living in Morocco (the one whose population is 2.51281e+07)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> population </Q> of <E> Russians </E> that <R> country </R> backward to <ES> <E> Morocco </E> whose <A> population </A> is text <V> 2.51281e+07 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Russians\" . ?e_2 <pred:name> \"Morocco\" . ?e_2 <population> ?pv . ?pv <pred:value> \"2.51281e+07\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <population> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "233": {
        "generations": "What is the postal code of the headquarters location of Harvard Business School in Boston (the one whose postal code is 02150)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> postal code </Q> of <E> Harvard Business School </E> that <R> headquarters location </R> backward to <ES> <E> Boston </E> whose <A> postal code </A> is text <V> 02150 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Harvard Business School\" . ?e_2 <pred:name> \"Boston\" . ?e_2 <postal code> ?pv . ?pv <pred:value> \"02150\" . ?e_1 <headquarters location> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <headquarters location> ; <pred:fact_t> ?e_2 ] <postal code> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "234": {
        "generations": "What is the timezone offset between Eastern European Time and the location of the European Union?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> timezone offset </Q> of <E> European Union </E> that <R> located in time zone </R> backward to <ES> <E> Eastern European Time </E> whose <A> timezone offset </A> is text <V> 2.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"European Union\" . ?e_2 <pred:name> \"Eastern European Time\" . ?e_2 <timezone offset> ?pv . ?pv <pred:value> \"2.0\" . ?e_1 <located in time zone> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <located in time zone> ; <pred:fact_t> ?e_2 ] <timezone offset> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "235": {
        "generations": "What is the object role of snowboarding in Utah, which has a population of 890627 and has snowboarding as an official symbol with subreddit \"snowboarding\"?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> object has role </Q> of <ES> <E> Utah </E> whose <A> population </A> is text <V> 890627.0 </V> </ES> that <R> official symbol </R> backward to <ES> <E> snowboarding </E> whose <A> subreddit </A> is text <V> snowboarding </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Utah\" . ?e_1 <population> ?pv . ?pv <pred:value> \"890627.0\" . ?e_2 <pred:name> \"snowboarding\" . ?e_2 <subreddit> ?pv_1 . ?pv_1 <pred:value> \"snowboarding\" . ?e_1 <official symbol> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <official symbol> ; <pred:fact_t> ?e_2 ] <object has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "236": {
        "generations": "When did Theofanis Gekas start being a member of FC Sion (the one with a native label of \"FC Sion\") and has a height of 179.0?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <ES> <E> Theofanis Gekas </E> whose <A> height </A> is text <V> 179.0 </V> </ES> that <R> member of sports team </R> backward to <ES> <E> FC Sion </E> whose <A> native label </A> is text <V> FC Sion </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Theofanis Gekas\" . ?e_1 <height> ?pv . ?pv <pred:value> \"179.0\" . ?e_2 <pred:name> \"FC Sion\" . ?e_2 <native label> ?pv_1 . ?pv_1 <pred:value> \"FC Sion\" . ?e_1 <member of sports team> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <member of sports team> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "237": {
        "generations": "How many big cities have a population greater than arg1 and a detail map named \"Map Toulouse.jpg\"?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> big city </C> whose <A> population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> big city </C> whose <A> detail map </A> is text <V> Map Toulouse.jpg </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"big city\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <detail map> ?pv_1 . ?pv_1 <pred:value> \"Map Toulouse.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "238": {
        "generations": "What is the connection between Ivory Coast (the one whose Human Development Index is 0.39) and Africa (the one whose British Museum person-institution is 148397)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> to <ES> <E> Africa </E> whose <A> British Museum person-institution </A> is text <V> 148397 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.39\"^^xsd:double . ?e_2 <pred:name> \"Africa\" . ?e_2 <British Museum person-institution> ?pv_1 . ?pv_1 <pred:value> \"148397\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "239": {
        "generations": "What is the number of seats for an agent whose number of seats is less than arg1 and has a seat with a value of 59.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of seats </A> of <ES> <C> agent </C> whose <A> number of seats </A> smaller than number <V> arg1 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 < \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <number of seats> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"59.0\"^^xsd:double . ?e <number of seats> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "240": {
        "generations": "When did Boston (the one whose inception is 1630-09-07) twin with Barcelona (the one with 6166.0 households)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> that <R> twinned administrative body </R> backward to <ES> <E> Barcelona </E> whose <A> number of households </A> is number <V> 6166.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date . ?e_2 <pred:name> \"Barcelona\" . ?e_2 <number of households> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6166.0\"^^xsd:double . ?e_1 <twinned administrative body> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <twinned administrative body> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "241": {
        "generations": "What is the Dewey Decimal Classification of Boston?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <E> Boston </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Boston\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--74461\" . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "242": {
        "generations": "What is the OSM tag or key for a commercial art gallery with the value \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "what is the attribute <A> OSM tag or key </A> of <ES> <E> commercial art gallery </E> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"commercial art gallery\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "243": {
        "generations": "What is the OS grid reference for Burton upon Trent?",
        "ori_data_item": {
            "question": "what is the attribute <A> OS grid reference </A> of <ES> <E> Burton upon Trent </E> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Burton upon Trent\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <OS grid reference> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "244": {
        "generations": "Who is a cast member in the movie Miracle at St. Anna and what is the duration of the movie?",
        "ori_data_item": {
            "question": "what is the attribute <A> cast member </A> of <ES> <E> Miracle at St. Anna </E> whose <A> duration </A> is text <V> 160.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Miracle at St. Anna\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <cast member> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "245": {
        "generations": "Is the city of the United States whose native label is Boston and whose inception date is 1630-09-07 also named Boston?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> native label </A> is text <V> Boston </V> </ES> whose <A> inception </A> is date <V> 1630-09-07 </V> ( <Q> pred:fact t </Q> is text <V> Boston </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <native label> ?pv_1 . ?pv_1 <pred:value> \"Boston\" . [ <pred:fact_h> ?e ; <pred:fact_r> <native label> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"Boston\" . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "246": {
        "generations": "Is the city of the United States, whose inception date is 1630-09-07 and population is 617594, in the knowledge graph?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> population </A> is number <V> 617594.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "247": {
        "generations": "Did the person born on 1899-05-10 have 2 children?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1899-05-10\"^^xsd:date . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "248": {
        "generations": "Did the film with a publication date of 2005-11-06 and a box office of 8.96911e+08 belong to the film category?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2005-11-06 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-06\"^^xsd:date . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "249": {
        "generations": "Does the theatrical genre with an end time of 1968-03-25 and one episode lasting 58.0 units exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES> whose <A> number of episodes </A> is number <V> 58.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1968-03-25\"^^xsd:date . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"58.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "250": {
        "generations": "Was the video game console model that sold 1.5368e+08 units and was discontinued on 2013-01-04?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game console model </C> whose <A> discontinued date </A> is date <V> 2013-01-04 </V> </ES> whose <A> units sold </A> is number <V> 1.5368e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <discontinued date> ?pv_1 . ?pv_1 <pred:date> \"2013-01-04\"^^xsd:date . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.5368e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "251": {
        "generations": "Is the aircraft functional class with a first flight on 1969-02-09 and a total production of 1527.0 units?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES> whose <A> total produced </A> is number <V> 1527.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <first flight> ?pv_1 . ?pv_1 <pred:date> \"1969-02-09\"^^xsd:date . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "252": {
        "generations": "Which metropolitan area has a population of 6.155e+06?",
        "ori_data_item": {
            "question": "what is <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 6.155e+06 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"6.155e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "253": {
        "generations": "Was the city of the United States that was founded on 1630-09-07 founded only once?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> inception </A> is date <V> 1630-09-07 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "254": {
        "generations": "Does the person born on 1931-09-21 have a date of birth equal to 1931-09-21?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1931-09-21 </V> </ES> whose <A> date of birth </A> is date <V> 1931-09-21 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1931-09-21\"^^xsd:date . ?e <date of birth> ?pv . ?pv <pred:date> \"1931-09-21\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "255": {
        "generations": "Was the film published on 2008-09-07 if its publication date is 2008-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2008-01-01 </V> </ES> whose <A> publication date </A> is date <V> 2008-09-07 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2008-01-01\"^^xsd:date . ?e <publication date> ?pv . ?pv <pred:date> \"2008-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "256": {
        "generations": "Was the play's date of first performance on November 16, 1959?",
        "ori_data_item": {
            "question": "whether <ES> <C> play </C> whose <A> date of first performance </A> is date <V> 1959-11-16 </V> </ES> whose <A> date of first performance </A> is date <V> 1959-11-16 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"play\" . ?e <date of first performance> ?pv_1 . ?pv_1 <pred:date> \"1959-11-16\"^^xsd:date . ?e <date of first performance> ?pv . ?pv <pred:date> \"1959-11-16\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "257": {
        "generations": "Did the theatrical genre that ended on 1968-03-25 also have an end time on 1968-03-25?",
        "ori_data_item": {
            "question": "whether <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES> whose <A> end time </A> is date <V> 1968-03-25 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1968-03-25\"^^xsd:date . ?e <end time> ?pv . ?pv <pred:date> \"1968-03-25\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "258": {
        "generations": "Did the 1968-04-10 Academy Awards ceremony take place on April 10, 1968?",
        "ori_data_item": {
            "question": "whether <ES> <C> Academy Awards ceremony </C> whose <A> point in time </A> is date <V> 1968-04-10 </V> </ES> whose <A> point in time </A> is date <V> 1968-04-10 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <point in time> ?pv_1 . ?pv_1 <pred:date> \"1968-04-10\"^^xsd:date . ?e <point in time> ?pv . ?pv <pred:date> \"1968-04-10\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "259": {
        "generations": "Is the capital city whose earliest written record is on 0965-01-17 the same as the one whose time of earliest written record is also on 0965-01-17?",
        "ori_data_item": {
            "question": "whether <ES> <C> capital </C> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V> </ES> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <time of earliest written record> ?pv_1 . ?pv_1 <pred:date> \"0965-01-17\"^^xsd:date . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"0965-01-17\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "260": {
        "generations": "Did the aircraft functional class with the first flight on 1969-02-09 have another first flight on the same date?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES> whose <A> first flight </A> is date <V> 1969-02-09 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <first flight> ?pv_1 . ?pv_1 <pred:date> \"1969-02-09\"^^xsd:date . ?e <first flight> ?pv . ?pv <pred:date> \"1969-02-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "261": {
        "generations": "Which city of the United States was founded on 1630-09-07 and has an elevation above sea level of 43.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> and <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 43.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"43.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "262": {
        "generations": "Who is the human born on 1931-09-21 and has a Munzinger IBA value of 00000016518?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1931-09-21 </V> </ES> and <ES> <C> human </C> whose <A> Munzinger IBA </A> is text <V> 00000016518 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv . ?pv <pred:date> \"1931-09-21\"^^xsd:date . ?e <Munzinger IBA> ?pv_1 . ?pv_1 <pred:value> \"00000016518\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "263": {
        "generations": "Which film was published on 2008-01-01 and has a duration of 160.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> publication date </A> is date <V> 2008-01-01 </V> </ES> and <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv . ?pv <pred:date> \"2008-01-01\"^^xsd:date . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "264": {
        "generations": "What theatrical genre ended on 1968-03-25 and had 58 episodes?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES> and <ES> <C> theatrical genre </C> whose <A> number of episodes </A> is text <V> 58.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv . ?pv <pred:date> \"1968-03-25\"^^xsd:date . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"58.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "265": {
        "generations": "Which Academy Awards ceremony had an edition number of 40 and took place on April 10th, 1968?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> Academy Awards ceremony </C> whose <A> point in time </A> is date <V> 1968-04-10 </V> </ES> and <ES> <C> Academy Awards ceremony </C> whose <A> edition number </A> is text <V> 40 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <point in time> ?pv . ?pv <pred:date> \"1968-04-10\"^^xsd:date . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"40\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "266": {
        "generations": "Which video game console model was discontinued on 2013-01-04 and had a price of 299.99?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> video game console model </C> whose <A> discontinued date </A> is date <V> 2013-01-04 </V> </ES> and <ES> <C> video game console model </C> whose <A> price </A> is text <V> 299.99 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <discontinued date> ?pv . ?pv <pred:date> \"2013-01-04\"^^xsd:date . ?e <price> ?pv_1 . ?pv_1 <pred:value> \"299.99\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "267": {
        "generations": "What is the capital city with a time of earliest written record of 0965-01-17 and a LAU code of CZ554782?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> capital </C> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V> </ES> and <ES> <C> capital </C> whose <A> LAU </A> is text <V> CZ554782 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"0965-01-17\"^^xsd:date . ?e <LAU> ?pv_1 . ?pv_1 <pred:value> \"CZ554782\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "268": {
        "generations": "What is the language of work or name for the U.S. city with a population of 31302.0 and a subreddit of PortHuron?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <C> city of the United States </C> whose <A> population </A> is number <V> 31302.0 </V> </ES> whose <A> subreddit </A> is text <V> PortHuron </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"31302.0\"^^xsd:double . ?e <subreddit> ?pv . ?pv <pred:value> \"PortHuron\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "269": {
        "generations": "Who is the human who died on 1849-06-15 and had less than 4 children?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> date of death </A> is date <V> 1849-06-15 </V> </ES> and <ES> <C> human </C> whose <A> number of children </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of death> ?pv . ?pv <pred:date> \"1849-06-15\"^^xsd:date . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "270": {
        "generations": "What is the capital city whose inception date is 1911-01-01 and has a rural population less than arg4?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> capital </C> whose <A> inception </A> is date <V> 1911-01-01 </V> </ES> and <ES> <C> capital </C> whose <A> rural population </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <inception> ?pv . ?pv <pred:date> \"1911-01-01\"^^xsd:date . ?e <rural population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "271": {
        "generations": "What miniseries ended on 2002-12-13 and had less than 4 seasons?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> miniseries </C> whose <A> end time </A> is date <V> 2002-12-13 </V> </ES> and <ES> <C> miniseries </C> whose <A> number of seasons </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"miniseries\" . ?e <end time> ?pv . ?pv <pred:date> \"2002-12-13\"^^xsd:date . ?e <number of seasons> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "272": {
        "generations": "Which suspension bridge has an official opening date of 1937-05-27 and less than one span?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> suspension bridge </C> whose <A> date of official opening </A> is date <V> 1937-05-27 </V> </ES> and <ES> <C> suspension bridge </C> whose <A> number of spans </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"suspension bridge\" . ?e <date of official opening> ?pv . ?pv <pred:date> \"1937-05-27\"^^xsd:date . ?e <number of spans> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "273": {
        "generations": "What is the connection between Ivory Coast (the one whose inception is 1960-01-01) and Ivory Coast (the one whose Human Development Index is 0.458)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.458 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.458\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "274": {
        "generations": "What metropolitan area had a population greater than arg1 on January 1st, 2014?",
        "ori_data_item": {
            "question": "what is <ES> <C> metropolitan area </C> whose <A> population </A> larger than number <V> arg1 </V> ( <Q> point in time </Q> is date <V> 2014-01-01 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "275": {
        "generations": "Which film had an attendance greater than arg1 and ended on 2018-05-30?",
        "ori_data_item": {
            "question": "what is <ES> <C> film </C> whose <A> attendance </A> larger than number <V> arg1 </V> ( <Q> end time </Q> is date <V> 2018-05-30 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv ] <end time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "276": {
        "generations": "Is the population of the metropolitan area equal to 6.155e+06 and is this also the value of the population?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 6.155e+06 </V> </ES> whose <A> population </A> is number <V> 6.155e+06 </V> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"6.155e+06\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "277": {
        "generations": "Is there a city in the United States with an elevation above sea level of 184.0 and a population greater than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 184.0 </V> </ES> whose <A> population </A> larger than number <V> arg6 </V> ( <Q> pred:fact t </Q> is text <V> 184.0 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"184.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"184.0\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "278": {
        "generations": "What is the British Museum person-institution fact for the Orkney Islands (with FIPS 10-4 code UKV9) in relation to the United Kingdom?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Orkney Islands </E> whose <A> FIPS 10-4 (countries and regions) </A> is text <V> UKV9 </V> </ES> that <R> country </R> backward to <ES> <E> United Kingdom </E> whose <A> British Museum person-institution </A> is text <V> 104611 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Orkney Islands\" . ?e_1 <FIPS 10-4 (countries and regions)> ?pv . ?pv <pred:value> \"UKV9\" . ?e_2 <pred:name> \"United Kingdom\" . ?e_2 <British Museum person-institution> ?pv_1 . ?pv_1 <pred:value> \"104611\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "279": {
        "generations": "When did Boston (the one whose inception is 1630-09-07) twin with Barcelona (the one whose Dewey Decimal Classification is 2--4672)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> that <R> twinned administrative body </R> backward to <ES> <E> Barcelona </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--4672 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date . ?e_2 <pred:name> \"Barcelona\" . ?e_2 <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--4672\" . ?e_1 <twinned administrative body> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <twinned administrative body> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "280": {
        "generations": "What is the connection between Utah (the one with Dewey Decimal Classification of 2--792) and the subreddit snowboarding?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Utah </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--792 </V> </ES> to <ES> <E> snowboarding </E> whose <A> subreddit </A> is text <V> snowboarding </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Utah\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--792\" . ?e_2 <pred:name> \"snowboarding\" . ?e_2 <subreddit> ?pv_1 . ?pv_1 <pred:value> \"snowboarding\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "281": {
        "generations": "What is the connection between The Ultimate Fighter (which has 27 seasons) and Spike TV (whose official name is Spike TV)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> The Ultimate Fighter </E> whose <A> number of seasons </A> is text <V> 27.0 </V> </ES> to <ES> <E> Spike TV </E> whose <A> official name </A> is text <V> Spike TV </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Ultimate Fighter\" . ?e_1 <number of seasons> ?pv . ?pv <pred:value> \"27.0\" . ?e_2 <pred:name> \"Spike TV\" . ?e_2 <official name> ?pv_1 . ?pv_1 <pred:value> \"Spike TV\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "282": {
        "generations": "What is the connection between Theofanis Gekas (whose height is 179.0) and FC Sion (the one with a native label of \"FC Sion\")?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Theofanis Gekas </E> whose <A> height </A> is text <V> 179.0 </V> </ES> to <ES> <E> FC Sion </E> whose <A> native label </A> is text <V> FC Sion </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Theofanis Gekas\" . ?e_1 <height> ?pv . ?pv <pred:value> \"179.0\" . ?e_2 <pred:name> \"FC Sion\" . ?e_2 <native label> ?pv_1 . ?pv_1 <pred:value> \"FC Sion\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "283": {
        "generations": "What is the connection between The Little Mermaid (the one with a cost of 4e+07) and The Little Mermaid (the one with a title of \"The Little Mermaid\")?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> The Little Mermaid </E> whose <A> cost </A> is text <V> 4e+07 </V> </ES> to <ES> <E> The Little Mermaid </E> whose <A> title </A> is text <V> The Little Mermaid </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Little Mermaid\" . ?e_1 <cost> ?pv . ?pv <pred:value> \"4e+07\" . ?e_2 <pred:name> \"The Little Mermaid\" . ?e_2 <title> ?pv_1 . ?pv_1 <pred:value> \"The Little Mermaid\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "284": {
        "generations": "What is the connection between NBCUniversal (with an Alexa rank of 134355.0) and Telemundo (with a Twitter username of Telemundo)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> NBCUniversal </E> whose <A> Alexa rank </A> is text <V> 134355.0 </V> </ES> to <ES> <E> Telemundo </E> whose <A> Twitter username </A> is text <V> Telemundo </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"NBCUniversal\" . ?e_1 <Alexa rank> ?pv . ?pv <pred:value> \"134355.0\" . ?e_2 <pred:name> \"Telemundo\" . ?e_2 <Twitter username> ?pv_1 . ?pv_1 <pred:value> \"Telemundo\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "285": {
        "generations": "Which sovereign state has a Human Development Index less than arg1 and a value of 0.39?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> Human Development Index </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.39\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "286": {
        "generations": "Who is a human with less than arg1 children and also has 2 children?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> number of children </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> human </C> whose <A> number of children </A> is number <V> 2.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "287": {
        "generations": "Which theatrical genre has less than arg1 seasons and 58.0 episodes?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> theatrical genre </C> whose <A> number of seasons </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> theatrical genre </C> whose <A> number of episodes </A> is number <V> 58.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <number of seasons> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"58.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "288": {
        "generations": "Which inner planet has a flattening less than arg1 and an orbital eccentricity of 0.0933941?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> inner planet </C> whose <A> flattening </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> inner planet </C> whose <A> orbital eccentricity </A> is number <V> 0.0933941 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"inner planet\" . ?e <flattening> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <orbital eccentricity> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.0933941\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "289": {
        "generations": "Which disease has less than arg1 number of cases and 5e+08 cases?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> disease </C> whose <A> number of cases </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> disease </C> whose <A> number of cases </A> is number <V> 5e+08 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <number of cases> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"5e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "290": {
        "generations": "Which higher education institution has an admission rate less than arg1 and an admission rate of 0.42?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> higher education institution </C> whose <A> admission rate </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> higher education institution </C> whose <A> admission rate </A> is number <V> 0.42 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"higher education institution\" . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <admission rate> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.42\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "291": {
        "generations": "What character did Larry Hagman play in Dallas (the one that ended on 1991-05-03)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> character role </Q> of <ES> <E> Dallas </E> whose <A> end time </A> is date <V> 1991-05-03 </V> </ES> that <R> cast member </R> backward to <E> Larry Hagman </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Dallas\" . ?e_1 <end time> ?pv . ?pv <pred:date> \"1991-05-03\"^^xsd:date . ?e_2 <pred:name> \"Larry Hagman\" . ?e_1 <cast member> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <cast member> ; <pred:fact_t> ?e_2 ] <character role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "292": {
        "generations": "What political party was John McCain a member of during the United States presidential election in 2008 (which took place on November 4th)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> member of political party </Q> of <ES> <E> United States presidential election, 2008 </E> whose <A> point in time </A> is date <V> 2008-11-04 </V> </ES> that <R> candidate </R> backward to <E> John McCain </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"United States presidential election, 2008\" . ?e_1 <point in time> ?pv . ?pv <pred:date> \"2008-11-04\"^^xsd:date . ?e_2 <pred:name> \"John McCain\" . ?e_1 <candidate> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <candidate> ; <pred:fact_t> ?e_2 ] <member of political party> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "293": {
        "generations": "What is the source material for the movie V for Vendetta?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <E> V for Vendetta </E> that <R> based on </R> backward to <E> V for Vendetta </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"V for Vendetta\" . ?e_2 <pred:name> \"V for Vendetta\" . ?e_1 <based on> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <based on> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "294": {
        "generations": "Does Fred Astaire have a name in native language equal to Fred Astaire and two children?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> name in native language </A> is text <V> Fred Astaire </V> </ES> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <name in native language> ?pv_1 . ?pv_1 <pred:value> \"Fred Astaire\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "295": {
        "generations": "Does Stuttgart have a Twitter hashtag of \"Stuttgart\" and a population of 592569.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V> </ES> whose <A> population </A> is number <V> 592569.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Stuttgart\" . ?e <Twitter hashtag> ?pv_1 . ?pv_1 <pred:value> \"Stuttgart\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"592569.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "296": {
        "generations": "Does Cameroon have a subreddit named Cameroon and a Human Development Index of 0.436?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cameroon </E> whose <A> subreddit </A> is text <V> Cameroon </V> </ES> whose <A> Human Development Index </A> is number <V> 0.436 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <subreddit> ?pv_1 . ?pv_1 <pred:value> \"Cameroon\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "297": {
        "generations": "Did Harry Potter and the Goblet of Fire earn 896,911,000 dollars at the box office?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> title </A> is text <V> Harry Potter and the Goblet of Fire </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <title> ?pv_1 . ?pv_1 <pred:value> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "298": {
        "generations": "Does CNBC have a Twitter username equal to \"CNBC\"?",
        "ori_data_item": {
            "question": "whether <E> CNBC </E> whose <A> Twitter username </A> is text <V> CNBC </V>",
            "sparql": "ASK { ?e <pred:name> \"CNBC\" . ?e <Twitter username> ?pv . ?pv <pred:value> \"CNBC\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "299": {
        "generations": "Is \"Fred Astaire\" the name in native language of Fred Astaire?",
        "ori_data_item": {
            "question": "whether <E> Fred Astaire </E> whose <A> name in native language </A> is text <V> Fred Astaire </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <name in native language> ?pv . ?pv <pred:value> \"Fred Astaire\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "300": {
        "generations": "Does Stuttgart have a Twitter hashtag of #Stuttgart?",
        "ori_data_item": {
            "question": "whether <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V>",
            "sparql": "ASK { ?e <pred:name> \"Stuttgart\" . ?e <Twitter hashtag> ?pv . ?pv <pred:value> \"Stuttgart\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "301": {
        "generations": "Is the native label of Aachen equal to \"Aachen\"?",
        "ori_data_item": {
            "question": "whether <E> Aachen </E> whose <A> native label </A> is text <V> Aachen </V>",
            "sparql": "ASK { ?e <pred:name> \"Aachen\" . ?e <native label> ?pv . ?pv <pred:value> \"Aachen\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "302": {
        "generations": "Is the title of \"Get Carter\" equal to \"Get Carter\"?",
        "ori_data_item": {
            "question": "whether <E> Get Carter </E> whose <A> title </A> is text <V> Get Carter </V>",
            "sparql": "ASK { ?e <pred:name> \"Get Carter\" . ?e <title> ?pv . ?pv <pred:value> \"Get Carter\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "303": {
        "generations": "Does Cameroon have a subreddit with the same name?",
        "ori_data_item": {
            "question": "whether <E> Cameroon </E> whose <A> subreddit </A> is text <V> Cameroon </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <subreddit> ?pv . ?pv <pred:value> \"Cameroon\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "304": {
        "generations": "Is the name of Real Sociedad \"Real Sociedad\"?",
        "ori_data_item": {
            "question": "whether <E> Real Sociedad </E> whose <A> name </A> is text <V> Real Sociedad </V>",
            "sparql": "ASK { ?e <pred:name> \"Real Sociedad\" . ?e <name> ?pv . ?pv <pred:value> \"Real Sociedad\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "305": {
        "generations": "Does the topic \"heterosexuality\" have a PhilPapers topic equal to \"heterosexuality\"?",
        "ori_data_item": {
            "question": "whether <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "306": {
        "generations": "Is the short name of Nigeria \"Nigeria\"?",
        "ori_data_item": {
            "question": "whether <E> Nigeria </E> whose <A> short name </A> is text <V> Nigeria </V>",
            "sparql": "ASK { ?e <pred:name> \"Nigeria\" . ?e <short name> ?pv . ?pv <pred:value> \"Nigeria\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "307": {
        "generations": "Is John Quincy Adams's birth name also John Quincy Adams?",
        "ori_data_item": {
            "question": "whether <E> John Quincy Adams </E> whose <A> birth name </A> is text <V> John Quincy Adams </V>",
            "sparql": "ASK { ?e <pred:name> \"John Quincy Adams\" . ?e <birth name> ?pv . ?pv <pred:value> \"John Quincy Adams\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "308": {
        "generations": "Does the name \"Norman\" have an entry in the Dictionary of Medieval Names from European Sources?",
        "ori_data_item": {
            "question": "whether <E> Norman </E> whose <A> Dictionary of Medieval Names from European Sources entry </A> is text <V> Norman </V>",
            "sparql": "ASK { ?e <pred:name> \"Norman\" . ?e <Dictionary of Medieval Names from European Sources entry> ?pv . ?pv <pred:value> \"Norman\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "309": {
        "generations": "Does the artwork named \"portrait\" have an Artsy gene value of \"portrait\"?",
        "ori_data_item": {
            "question": "whether <E> portrait </E> whose <A> Artsy gene </A> is text <V> portrait </V>",
            "sparql": "ASK { ?e <pred:name> \"portrait\" . ?e <Artsy gene> ?pv . ?pv <pred:value> \"portrait\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "310": {
        "generations": "Does Grey DeLisle have a married name that is the same as her original name?",
        "ori_data_item": {
            "question": "whether <E> Grey DeLisle </E> whose <A> married name </A> is text <V> Grey DeLisle </V>",
            "sparql": "ASK { ?e <pred:name> \"Grey DeLisle\" . ?e <married name> ?pv . ?pv <pred:value> \"Grey DeLisle\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "311": {
        "generations": "Is alcoholism's DiseasesDB value equal to \"alcoholism\"?",
        "ori_data_item": {
            "question": "whether <E> alcoholism </E> whose <A> DiseasesDB </A> is text <V> alcoholism </V>",
            "sparql": "ASK { ?e <pred:name> \"alcoholism\" . ?e <DiseasesDB> ?pv . ?pv <pred:value> \"alcoholism\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "312": {
        "generations": "Is \"espionage\" a Wikitribune category for espionage?",
        "ori_data_item": {
            "question": "whether <E> espionage </E> whose <A> Wikitribune category </A> is text <V> espionage </V>",
            "sparql": "ASK { ?e <pred:name> \"espionage\" . ?e <Wikitribune category> ?pv . ?pv <pred:value> \"espionage\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "313": {
        "generations": "Is Tarzan's nickname also Tarzan?",
        "ori_data_item": {
            "question": "whether <E> Tarzan </E> whose <A> nickname </A> is text <V> Tarzan </V>",
            "sparql": "ASK { ?e <pred:name> \"Tarzan\" . ?e <nickname> ?pv . ?pv <pred:value> \"Tarzan\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "314": {
        "generations": "Does KLM have an ICAO airline designator of KLM?",
        "ori_data_item": {
            "question": "whether <E> KLM </E> whose <A> ICAO airline designator </A> is text <V> KLM </V>",
            "sparql": "ASK { ?e <pred:name> \"KLM\" . ?e <ICAO airline designator> ?pv . ?pv <pred:value> \"KLM\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "315": {
        "generations": "Does Microsoft have a GitHub username equal to \"Microsoft\"?",
        "ori_data_item": {
            "question": "whether <E> Microsoft </E> whose <A> GitHub username </A> is text <V> Microsoft </V>",
            "sparql": "ASK { ?e <pred:name> \"Microsoft\" . ?e <GitHub username> ?pv . ?pv <pred:value> \"Microsoft\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "316": {
        "generations": "Does Freeform have a Pinterest username of \"Freeform\"?",
        "ori_data_item": {
            "question": "whether <E> Freeform </E> whose <A> Pinterest username </A> is text <V> Freeform </V>",
            "sparql": "ASK { ?e <pred:name> \"Freeform\" . ?e <Pinterest username> ?pv . ?pv <pred:value> \"Freeform\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "317": {
        "generations": "Does Cichlidae have a taxon name equal to \"Cichlidae\"?",
        "ori_data_item": {
            "question": "whether <E> Cichlidae </E> whose <A> taxon name </A> is text <V> Cichlidae </V>",
            "sparql": "ASK { ?e <pred:name> \"Cichlidae\" . ?e <taxon name> ?pv . ?pv <pred:value> \"Cichlidae\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "318": {
        "generations": "Is there a Debian stable package named anarchism related to anarchism?",
        "ori_data_item": {
            "question": "whether <E> anarchism </E> whose <A> Debian stable package </A> is text <V> anarchism </V>",
            "sparql": "ASK { ?e <pred:name> \"anarchism\" . ?e <Debian stable package> ?pv . ?pv <pred:value> \"anarchism\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "319": {
        "generations": "Is Caribbean the demonym for the region named Caribbean?",
        "ori_data_item": {
            "question": "whether <E> Caribbean </E> whose <A> demonym </A> is text <V> Caribbean </V>",
            "sparql": "ASK { ?e <pred:name> \"Caribbean\" . ?e <demonym> ?pv . ?pv <pred:value> \"Caribbean\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "320": {
        "generations": "Is riboflavin the World Health Organisation International Nonproprietary Name for riboflavin?",
        "ori_data_item": {
            "question": "whether <E> riboflavin </E> whose <A> World Health Organisation International Nonproprietary Name </A> is text <V> riboflavin </V>",
            "sparql": "ASK { ?e <pred:name> \"riboflavin\" . ?e <World Health Organisation International Nonproprietary Name> ?pv . ?pv <pred:value> \"riboflavin\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "321": {
        "generations": "How many subscribers does CNBC's Twitter account (@CNBC) have?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> number of subscribers </Q> of <E> CNBC </E> whose <A> Twitter username </A> is text <V> CNBC </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"CNBC\" . ?e <Twitter username> ?pv . ?pv <pred:value> \"CNBC\" . [ <pred:fact_h> ?e ; <pred:fact_r> <Twitter username> ; <pred:fact_t> ?pv ] <number of subscribers> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "322": {
        "generations": "What is the fact associated with the Twitter hashtag \"Stuttgart\" for the city of Stuttgart?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Stuttgart\" . ?e <Twitter hashtag> ?pv . ?pv <pred:value> \"Stuttgart\" . [ <pred:fact_h> ?e ; <pred:fact_r> <Twitter hashtag> ; <pred:fact_t> ?pv ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "323": {
        "generations": "What is the language of work or name for the subreddit of Liberia?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <E> Liberia </E> whose <A> subreddit </A> is text <V> Liberia </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Liberia\" . ?e <subreddit> ?pv . ?pv <pred:value> \"Liberia\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "324": {
        "generations": "Who was a cast member in the film published on 2001-08-16 in Germany?",
        "ori_data_item": {
            "question": "what is the attribute <A> cast member </A> of <ES> <C> film </C> whose <A> publication date </A> is date <V> 2001-08-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" . ?e <cast member> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "325": {
        "generations": "What is the inception time of the dynasty that has a statement with a Gregorian date earlier than 1584 and was dissolved, abolished or demolished in 1485?",
        "ori_data_item": {
            "question": "what is the attribute <A> inception </A> of <ES> <C> dynasty </C> whose <A> dissolved, abolished or demolished </A> is date <V> 1485-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"dynasty\" . ?e <dissolved, abolished or demolished> ?pv_1 . ?pv_1 <pred:date> \"1485-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <dissolved, abolished or demolished> ; <pred:fact_t> ?pv_1 ] <instance of> ?qpv . ?qpv <pred:value> \"statement with Gregorian date earlier than 1584\" . ?e <inception> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "326": {
        "generations": "Is Fred Astaire associated with the British Museum person-institution with ID 17780 and has a name in native language of Fred Astaire?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> name in native language </A> is text <V> Fred Astaire </V> </ES> whose <A> British Museum person-institution </A> is text <V> 17780 </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <name in native language> ?pv_1 . ?pv_1 <pred:value> \"Fred Astaire\" . ?e <British Museum person-institution> ?pv . ?pv <pred:value> \"17780\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "327": {
        "generations": "Does Stuttgart have a Twitter hashtag of \"Stuttgart\" and a Dewey Decimal Classification of \"2--434715\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Stuttgart </E> whose <A> Twitter hashtag </A> is text <V> Stuttgart </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--434715 </V>",
            "sparql": "ASK { ?e <pred:name> \"Stuttgart\" . ?e <Twitter hashtag> ?pv_1 . ?pv_1 <pred:value> \"Stuttgart\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--434715\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "328": {
        "generations": "Is the duration of the movie Miracle at St. Anna 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> title </A> is text <V> Miracle at St. Anna </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <title> ?pv_1 . ?pv_1 <pred:value> \"Miracle at St. Anna\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "329": {
        "generations": "Does the topic \"heterosexuality\" have a PhilPapers topic of \"heterosexuality\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "330": {
        "generations": "Is there a portrait with the Artsy gene \"portrait\" for both its name and value?",
        "ori_data_item": {
            "question": "whether <ES> <E> portrait </E> whose <A> Artsy gene </A> is text <V> portrait </V> </ES> whose <A> Artsy gene </A> is text <V> portrait </V>",
            "sparql": "ASK { ?e <pred:name> \"portrait\" . ?e <Artsy gene> ?pv_1 . ?pv_1 <pred:value> \"portrait\" . ?e <Artsy gene> ?pv . ?pv <pred:value> \"portrait\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "331": {
        "generations": "What is the start time for the geographic region with NUTS code UKM65?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <ES> <C> geographic region </C> whose <A> NUTS code </A> is text <V> UKM65 </V> </ES> whose <A> NUTS code </A> is text <V> UKM65 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"geographic region\" . ?e <NUTS code> ?pv_1 . ?pv_1 <pred:value> \"UKM65\" . ?e <NUTS code> ?pv . ?pv <pred:value> \"UKM65\" . [ <pred:fact_h> ?e ; <pred:fact_r> <NUTS code> ; <pred:fact_t> ?pv ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "332": {
        "generations": "What is the subject's role for the town with TOID 4000000074552364?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> subject has role </Q> of <ES> <C> town </C> whose <A> TOID </A> is text <V> 4000000074552364 </V> </ES> whose <A> TOID </A> is text <V> 4000000074552364 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"town\" . ?e <TOID> ?pv_1 . ?pv_1 <pred:value> \"4000000074552364\" . ?e <TOID> ?pv . ?pv <pred:value> \"4000000074552364\" . [ <pred:fact_h> ?e ; <pred:fact_r> <TOID> ; <pred:fact_t> ?pv ] <subject has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "333": {
        "generations": "What is the predicate of the fact that states the area of the U.S. city whose area is 2.32141e+08?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 2.32141e+08 </V> </ES> whose <A> area </A> is text <V> 2.32141e+08 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"2.32141e+08\" . ?e <area> ?pv . ?pv <pred:value> \"2.32141e+08\" . [ <pred:fact_h> ?e ; <pred:fact_r> <area> ; <pred:fact_t> ?pv ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "334": {
        "generations": "What is the point in time for the sovereign state with a Human Development Index of 0.444?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is text <V> 0.444 </V> </ES> whose <A> Human Development Index </A> is text <V> 0.444 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.444\" . ?e <Human Development Index> ?pv . ?pv <pred:value> \"0.444\" . [ <pred:fact_h> ?e ; <pred:fact_r> <Human Development Index> ; <pred:fact_t> ?pv ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "335": {
        "generations": "What is the legislative body of the political party that has 117 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> legislative body </Q> of <ES> <C> political party </C> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:value> \"117.0\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"117.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <number of representatives in an organization/legislature> ; <pred:fact_t> ?pv ] <legislative body> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "336": {
        "generations": "What is the number of representatives in an organization/legislature for the first-level administrative country subdivision that has 135.0 as its value?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of representatives in an organization/legislature </A> of <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> is text <V> 135.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:value> \"135.0\" . ?e <number of representatives in an organization/legislature> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "337": {
        "generations": "What is the UN/LOCODE of the city of the United States that has a UN/LOCODE of USURB?",
        "ori_data_item": {
            "question": "what is the attribute <A> UN/LOCODE </A> of <ES> <C> city of the United States </C> whose <A> UN/LOCODE </A> is text <V> USURB </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <UN/LOCODE> ?pv_1 . ?pv_1 <pred:value> \"USURB\" . ?e <UN/LOCODE> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "338": {
        "generations": "What is the NIS/INS code for the big city that has a code of 24062?",
        "ori_data_item": {
            "question": "what is the attribute <A> NIS/INS code </A> of <ES> <C> big city </C> whose <A> NIS/INS code </A> is text <V> 24062 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"big city\" . ?e <NIS/INS code> ?pv_1 . ?pv_1 <pred:value> \"24062\" . ?e <NIS/INS code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "339": {
        "generations": "What is the ISO 9362 SWIFT/BIC code for the agent with the code BOFAUS6S?",
        "ori_data_item": {
            "question": "what is the attribute <A> ISO 9362 SWIFT/BIC code </A> of <ES> <C> agent </C> whose <A> ISO 9362 SWIFT/BIC code </A> is text <V> BOFAUS6S </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <ISO 9362 SWIFT/BIC code> ?pv_1 . ?pv_1 <pred:value> \"BOFAUS6S\" . ?e <ISO 9362 SWIFT/BIC code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "340": {
        "generations": "What is the Alexa rank of the Primetime Emmy Award?",
        "ori_data_item": {
            "question": "what is the attribute <A> Alexa rank </A> of <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> is text <V> 126668.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"126668.0\" . ?e <Alexa rank> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "341": {
        "generations": "What is the ARCHON code for the college of the University of Cambridge with an ARCHON code of 2938?",
        "ori_data_item": {
            "question": "what is the attribute <A> ARCHON code </A> of <ES> <C> college of the University of Cambridge </C> whose <A> ARCHON code </A> is text <V> 2938 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"college of the University of Cambridge\" . ?e <ARCHON code> ?pv_1 . ?pv_1 <pred:value> \"2938\" . ?e <ARCHON code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "342": {
        "generations": "What is the ATC code for a chemical compound that has the code B03BB01?",
        "ori_data_item": {
            "question": "what is the attribute <A> ATC code </A> of <ES> <C> chemical compound </C> whose <A> ATC code </A> is text <V> B03BB01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"chemical compound\" . ?e <ATC code> ?pv_1 . ?pv_1 <pred:value> \"B03BB01\" . ?e <ATC code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "343": {
        "generations": "What is the ACM Classification Code (2012) for the academic discipline that has a code of 10003633?",
        "ori_data_item": {
            "question": "what is the attribute <A> ACM Classification Code (2012) </A> of <ES> <C> academic discipline </C> whose <A> ACM Classification Code (2012) </A> is text <V> 10003633 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"academic discipline\" . ?e <ACM Classification Code (2012)> ?pv_1 . ?pv_1 <pred:value> \"10003633\" . ?e <ACM Classification Code (2012)> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "344": {
        "generations": "What is the Australian Business Number of the television network with ABN 52429278345?",
        "ori_data_item": {
            "question": "what is the attribute <A> Australian Business Number </A> of <ES> <C> television network </C> whose <A> Australian Business Number </A> is text <V> 52429278345 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"television network\" . ?e <Australian Business Number> ?pv_1 . ?pv_1 <pred:value> \"52429278345\" . ?e <Australian Business Number> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "345": {
        "generations": "What is the Artsy gene associated with the activity that involves portraits?",
        "ori_data_item": {
            "question": "what is the attribute <A> Artsy gene </A> of <ES> <C> activity </C> whose <A> Artsy gene </A> is text <V> portrait </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <Artsy gene> ?pv_1 . ?pv_1 <pred:value> \"portrait\" . ?e <Artsy gene> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "346": {
        "generations": "What is the Amsterdam code for the municipality of the Netherlands that has an Amsterdam code of 11157?",
        "ori_data_item": {
            "question": "what is the attribute <A> Amsterdam code </A> of <ES> <C> municipality of the Netherlands </C> whose <A> Amsterdam code </A> is text <V> 11157 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"municipality of the Netherlands\" . ?e <Amsterdam code> ?pv_1 . ?pv_1 <pred:value> \"11157\" . ?e <Amsterdam code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "347": {
        "generations": "What is the Amtrak station code for the railway station that has an Amtrak station code of \"brl\"?",
        "ori_data_item": {
            "question": "what is the attribute <A> Amtrak station code </A> of <ES> <C> railway station </C> whose <A> Amtrak station code </A> is text <V> brl </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"railway station\" . ?e <Amtrak station code> ?pv_1 . ?pv_1 <pred:value> \"brl\" . ?e <Amtrak station code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "348": {
        "generations": "Which software has Arch Linux packages for both \"mesa\"?",
        "ori_data_item": {
            "question": "what is the attribute <A> Arch\u00a0Linux package </A> of <ES> <C> software </C> whose <A> Arch\u00a0Linux package </A> is text <V> mesa </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"software\" . ?e <Arch\u00a0Linux package> ?pv_1 . ?pv_1 <pred:value> \"mesa\" . ?e <Arch\u00a0Linux package> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "349": {
        "generations": "What is the Bulbapedia article for the entertainment instance related to Super Smash Bros. Brawl?",
        "ori_data_item": {
            "question": "what is the attribute <A> Bulbapedia article </A> of <ES> <C> entertainment </C> whose <A> Bulbapedia article </A> is text <V> Super Smash Bros. Brawl </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"entertainment\" . ?e <Bulbapedia article> ?pv_1 . ?pv_1 <pred:value> \"Super Smash Bros. Brawl\" . ?e <Bulbapedia article> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "350": {
        "generations": "What is the Caverphone code for the family name that has a NSN111 Caverphone code?",
        "ori_data_item": {
            "question": "what is the attribute <A> Caverphone </A> of <ES> <C> family name </C> whose <A> Caverphone </A> is text <V> NSN111 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"family name\" . ?e <Caverphone> ?pv_1 . ?pv_1 <pred:value> \"NSN111\" . ?e <Caverphone> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "351": {
        "generations": "What is the Classification of Instructional Programs code for a technology instance that has a code of 11.0103?",
        "ori_data_item": {
            "question": "what is the attribute <A> Classification of Instructional Programs code </A> of <ES> <C> technology </C> whose <A> Classification of Instructional Programs code </A> is text <V> 11.0103 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"technology\" . ?e <Classification of Instructional Programs code> ?pv_1 . ?pv_1 <pred:value> \"11.0103\" . ?e <Classification of Instructional Programs code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "352": {
        "generations": "What is the Corporate Number (Japan) of the video game publisher with a value of 1011001060972?",
        "ori_data_item": {
            "question": "what is the attribute <A> Corporate Number (Japan) </A> of <ES> <C> video game publisher </C> whose <A> Corporate Number (Japan) </A> is text <V> 1011001060972 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game publisher\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"1011001060972\" . ?e <Corporate Number (Japan)> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "353": {
        "generations": "What is the Common Procurement Vocabulary code for the class of instruments that has a Common Procurement Vocabulary value of 37316600?",
        "ori_data_item": {
            "question": "what is the attribute <A> Common Procurement Vocabulary </A> of <ES> <C> class of instruments </C> whose <A> Common Procurement Vocabulary </A> is text <V> 37316600 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <Common Procurement Vocabulary> ?pv_1 . ?pv_1 <pred:value> \"37316600\" . ?e <Common Procurement Vocabulary> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "354": {
        "generations": "What is the Debian stable package for the political ideology of anarchism?",
        "ori_data_item": {
            "question": "what is the attribute <A> Debian stable package </A> of <ES> <C> political ideology </C> whose <A> Debian stable package </A> is text <V> anarchism </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"political ideology\" . ?e <Debian stable package> ?pv_1 . ?pv_1 <pred:value> \"anarchism\" . ?e <Debian stable package> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "355": {
        "generations": "What is the Dewey Decimal Classification of the metropolitan borough that has a classification of 2--42817?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <C> metropolitan borough </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--42817 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan borough\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--42817\" . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "356": {
        "generations": "What is the EPPO Code for the taxon that has an EPPO Code of 1CICHF?",
        "ori_data_item": {
            "question": "what is the attribute <A> EPPO Code </A> of <ES> <C> taxon </C> whose <A> EPPO Code </A> is text <V> 1CICHF </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"taxon\" . ?e <EPPO Code> ?pv_1 . ?pv_1 <pred:value> \"1CICHF\" . ?e <EPPO Code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "357": {
        "generations": "What is the FIFA country code for the national association football team whose FIFA country code is GPE?",
        "ori_data_item": {
            "question": "what is the attribute <A> FIFA country code </A> of <ES> <C> national association football team </C> whose <A> FIFA country code </A> is text <V> GPE </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"national association football team\" . ?e <FIFA country code> ?pv_1 . ?pv_1 <pred:value> \"GPE\" . ?e <FIFA country code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "358": {
        "generations": "What is the Hornbostel-Sachs classification of a drum that has a classification of 211.212.11?",
        "ori_data_item": {
            "question": "what is the attribute <A> Hornbostel-Sachs classification </A> of <ES> <C> drum </C> whose <A> Hornbostel-Sachs classification </A> is text <V> 211.212.11 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"drum\" . ?e <Hornbostel-Sachs classification> ?pv_1 . ?pv_1 <pred:value> \"211.212.11\" . ?e <Hornbostel-Sachs classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "359": {
        "generations": "What is the HTML entity for the currency whose name is euro?",
        "ori_data_item": {
            "question": "what is the attribute <A> HTML entity </A> of <ES> <C> currency </C> whose <A> HTML entity </A> is text <V> &euro; </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"currency\" . ?e <HTML entity> ?pv_1 . ?pv_1 <pred:value> \"&euro;\" . ?e <HTML entity> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "360": {
        "generations": "Does the first-level administrative country subdivision have 135 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "whether <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> is text <V> 135.0 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is text <V> 135.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:value> \"135.0\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"135.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "361": {
        "generations": "Is there a city in the United States with a UN/LOCODE of USURB?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> UN/LOCODE </A> is text <V> USURB </V> </ES> whose <A> UN/LOCODE </A> is text <V> USURB </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <UN/LOCODE> ?pv_1 . ?pv_1 <pred:value> \"USURB\" . ?e <UN/LOCODE> ?pv . ?pv <pred:value> \"USURB\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "362": {
        "generations": "Is there a big city with NIS/INS code 24062?",
        "ori_data_item": {
            "question": "whether <ES> <C> big city </C> whose <A> NIS/INS code </A> is text <V> 24062 </V> </ES> whose <A> NIS/INS code </A> is text <V> 24062 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"big city\" . ?e <NIS/INS code> ?pv_1 . ?pv_1 <pred:value> \"24062\" . ?e <NIS/INS code> ?pv . ?pv <pred:value> \"24062\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "363": {
        "generations": "Does the agent with ISO 9362 SWIFT/BIC code BOFAUS6S have the same code as its own ISO 9362 SWIFT/BIC code?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> ISO 9362 SWIFT/BIC code </A> is text <V> BOFAUS6S </V> </ES> whose <A> ISO 9362 SWIFT/BIC code </A> is text <V> BOFAUS6S </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <ISO 9362 SWIFT/BIC code> ?pv_1 . ?pv_1 <pred:value> \"BOFAUS6S\" . ?e <ISO 9362 SWIFT/BIC code> ?pv . ?pv <pred:value> \"BOFAUS6S\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "364": {
        "generations": "Does the Primetime Emmy Award have an Alexa rank of 126668.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> is text <V> 126668.0 </V> </ES> whose <A> Alexa rank </A> is text <V> 126668.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"126668.0\" . ?e <Alexa rank> ?pv . ?pv <pred:value> \"126668.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "365": {
        "generations": "Is the college of the University of Cambridge with an ARCHON code of 2938 also the one with an ARCHON code of 2938?",
        "ori_data_item": {
            "question": "whether <ES> <C> college of the University of Cambridge </C> whose <A> ARCHON code </A> is text <V> 2938 </V> </ES> whose <A> ARCHON code </A> is text <V> 2938 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"college of the University of Cambridge\" . ?e <ARCHON code> ?pv_1 . ?pv_1 <pred:value> \"2938\" . ?e <ARCHON code> ?pv . ?pv <pred:value> \"2938\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "366": {
        "generations": "Does the chemical compound have an ATC code of B03BB01?",
        "ori_data_item": {
            "question": "whether <ES> <C> chemical compound </C> whose <A> ATC code </A> is text <V> B03BB01 </V> </ES> whose <A> ATC code </A> is text <V> B03BB01 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"chemical compound\" . ?e <ATC code> ?pv_1 . ?pv_1 <pred:value> \"B03BB01\" . ?e <ATC code> ?pv . ?pv <pred:value> \"B03BB01\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "367": {
        "generations": "Is there an academic discipline with an ACM Classification Code (2012) of 10003633?",
        "ori_data_item": {
            "question": "whether <ES> <C> academic discipline </C> whose <A> ACM Classification Code (2012) </A> is text <V> 10003633 </V> </ES> whose <A> ACM Classification Code (2012) </A> is text <V> 10003633 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"academic discipline\" . ?e <ACM Classification Code (2012)> ?pv_1 . ?pv_1 <pred:value> \"10003633\" . ?e <ACM Classification Code (2012)> ?pv . ?pv <pred:value> \"10003633\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "368": {
        "generations": "Does the television network with an Australian Business Number of 52429278345 also have an Australian Business Number of 52429278345?",
        "ori_data_item": {
            "question": "whether <ES> <C> television network </C> whose <A> Australian Business Number </A> is text <V> 52429278345 </V> </ES> whose <A> Australian Business Number </A> is text <V> 52429278345 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television network\" . ?e <Australian Business Number> ?pv_1 . ?pv_1 <pred:value> \"52429278345\" . ?e <Australian Business Number> ?pv . ?pv <pred:value> \"52429278345\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "369": {
        "generations": "Is there an activity that has both \"portrait\" values for the Artsy gene?",
        "ori_data_item": {
            "question": "whether <ES> <C> activity </C> whose <A> Artsy gene </A> is text <V> portrait </V> </ES> whose <A> Artsy gene </A> is text <V> portrait </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <Artsy gene> ?pv_1 . ?pv_1 <pred:value> \"portrait\" . ?e <Artsy gene> ?pv . ?pv <pred:value> \"portrait\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "370": {
        "generations": "Is the municipality of the Netherlands with Amsterdam code 11157 the same as the one with Amsterdam code 11157?",
        "ori_data_item": {
            "question": "whether <ES> <C> municipality of the Netherlands </C> whose <A> Amsterdam code </A> is text <V> 11157 </V> </ES> whose <A> Amsterdam code </A> is text <V> 11157 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"municipality of the Netherlands\" . ?e <Amsterdam code> ?pv_1 . ?pv_1 <pred:value> \"11157\" . ?e <Amsterdam code> ?pv . ?pv <pred:value> \"11157\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "371": {
        "generations": "Is there a railway station with an Amtrak station code of \"brl\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> railway station </C> whose <A> Amtrak station code </A> is text <V> brl </V> </ES> whose <A> Amtrak station code </A> is text <V> brl </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"railway station\" . ?e <Amtrak station code> ?pv_1 . ?pv_1 <pred:value> \"brl\" . ?e <Amtrak station code> ?pv . ?pv <pred:value> \"brl\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "372": {
        "generations": "Is there a software that has an Arch Linux package named \"mesa\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> software </C> whose <A> Arch\u00a0Linux package </A> is text <V> mesa </V> </ES> whose <A> Arch\u00a0Linux package </A> is text <V> mesa </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"software\" . ?e <Arch\u00a0Linux package> ?pv_1 . ?pv_1 <pred:value> \"mesa\" . ?e <Arch\u00a0Linux package> ?pv . ?pv <pred:value> \"mesa\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "373": {
        "generations": "Is Super Smash Bros. Brawl an entertainment with a Bulbapedia article that matches its name?",
        "ori_data_item": {
            "question": "whether <ES> <C> entertainment </C> whose <A> Bulbapedia article </A> is text <V> Super Smash Bros. Brawl </V> </ES> whose <A> Bulbapedia article </A> is text <V> Super Smash Bros. Brawl </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"entertainment\" . ?e <Bulbapedia article> ?pv_1 . ?pv_1 <pred:value> \"Super Smash Bros. Brawl\" . ?e <Bulbapedia article> ?pv . ?pv <pred:value> \"Super Smash Bros. Brawl\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "374": {
        "generations": "Is there a family name with a Caverphone code of NSN111?",
        "ori_data_item": {
            "question": "whether <ES> <C> family name </C> whose <A> Caverphone </A> is text <V> NSN111 </V> </ES> whose <A> Caverphone </A> is text <V> NSN111 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"family name\" . ?e <Caverphone> ?pv_1 . ?pv_1 <pred:value> \"NSN111\" . ?e <Caverphone> ?pv . ?pv <pred:value> \"NSN111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "375": {
        "generations": "Is there a technology with a Classification of Instructional Programs code of 11.0103?",
        "ori_data_item": {
            "question": "whether <ES> <C> technology </C> whose <A> Classification of Instructional Programs code </A> is text <V> 11.0103 </V> </ES> whose <A> Classification of Instructional Programs code </A> is text <V> 11.0103 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"technology\" . ?e <Classification of Instructional Programs code> ?pv_1 . ?pv_1 <pred:value> \"11.0103\" . ?e <Classification of Instructional Programs code> ?pv . ?pv <pred:value> \"11.0103\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "376": {
        "generations": "Is the video game publisher with Corporate Number (Japan) 1011001060972 the same as the one with Corporate Number (Japan) 1011001060972?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game publisher </C> whose <A> Corporate Number (Japan) </A> is text <V> 1011001060972 </V> </ES> whose <A> Corporate Number (Japan) </A> is text <V> 1011001060972 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game publisher\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"1011001060972\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"1011001060972\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "377": {
        "generations": "Does the class of instruments with Common Procurement Vocabulary 37316600 have Common Procurement Vocabulary 37316600?",
        "ori_data_item": {
            "question": "whether <ES> <C> class of instruments </C> whose <A> Common Procurement Vocabulary </A> is text <V> 37316600 </V> </ES> whose <A> Common Procurement Vocabulary </A> is text <V> 37316600 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <Common Procurement Vocabulary> ?pv_1 . ?pv_1 <pred:value> \"37316600\" . ?e <Common Procurement Vocabulary> ?pv . ?pv <pred:value> \"37316600\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "378": {
        "generations": "Does the political ideology with a Debian stable package of anarchism have another Debian stable package of anarchism?",
        "ori_data_item": {
            "question": "whether <ES> <C> political ideology </C> whose <A> Debian stable package </A> is text <V> anarchism </V> </ES> whose <A> Debian stable package </A> is text <V> anarchism </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"political ideology\" . ?e <Debian stable package> ?pv_1 . ?pv_1 <pred:value> \"anarchism\" . ?e <Debian stable package> ?pv . ?pv <pred:value> \"anarchism\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "379": {
        "generations": "Is the metropolitan borough's Dewey Decimal Classification equal to \"2--42817\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan borough </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--42817 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--42817 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan borough\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--42817\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--42817\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "380": {
        "generations": "Is there a taxon with an EPPO Code of 1CICHF?",
        "ori_data_item": {
            "question": "whether <ES> <C> taxon </C> whose <A> EPPO Code </A> is text <V> 1CICHF </V> </ES> whose <A> EPPO Code </A> is text <V> 1CICHF </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"taxon\" . ?e <EPPO Code> ?pv_1 . ?pv_1 <pred:value> \"1CICHF\" . ?e <EPPO Code> ?pv . ?pv <pred:value> \"1CICHF\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "381": {
        "generations": "Is there a national association football team with a FIFA country code of GPE?",
        "ori_data_item": {
            "question": "whether <ES> <C> national association football team </C> whose <A> FIFA country code </A> is text <V> GPE </V> </ES> whose <A> FIFA country code </A> is text <V> GPE </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"national association football team\" . ?e <FIFA country code> ?pv_1 . ?pv_1 <pred:value> \"GPE\" . ?e <FIFA country code> ?pv . ?pv <pred:value> \"GPE\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "382": {
        "generations": "Is the drum with Hornbostel-Sachs classification 211.212.11 the same as the one with Hornbostel-Sachs classification 211.212.11?",
        "ori_data_item": {
            "question": "whether <ES> <C> drum </C> whose <A> Hornbostel-Sachs classification </A> is text <V> 211.212.11 </V> </ES> whose <A> Hornbostel-Sachs classification </A> is text <V> 211.212.11 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"drum\" . ?e <Hornbostel-Sachs classification> ?pv_1 . ?pv_1 <pred:value> \"211.212.11\" . ?e <Hornbostel-Sachs classification> ?pv . ?pv <pred:value> \"211.212.11\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "383": {
        "generations": "Is the currency with the HTML entity \"&euro;\" also represented by \"&euro;\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> currency </C> whose <A> HTML entity </A> is text <V> &euro; </V> </ES> whose <A> HTML entity </A> is text <V> &euro; </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"currency\" . ?e <HTML entity> ?pv_1 . ?pv_1 <pred:value> \"&euro;\" . ?e <HTML entity> ?pv . ?pv <pred:value> \"&euro;\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "384": {
        "generations": "What is the Human Development Index of Ivory Coast and when did it become a country? Also, what is the connection between Ivory Coast and the fact in the statement?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.376 </V> </ES> that <R> country </R> backward to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:value> \"0.376\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "385": {
        "generations": "What is the connection between Ivory Coast (the one with a Human Development Index of 0.39) and Ivory Coast (the one whose inception date is 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.39\"^^xsd:double . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "386": {
        "generations": "What is the connection between the number of pages and publication date of Harry Potter and the Philosopher's Stone?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Philosopher's Stone </E> whose <A> number of pages </A> is number <V> 309.0 </V> </ES> to <ES> <E> Harry Potter and the Philosopher's Stone </E> whose <A> publication date </A> is date <V> 2001-11-22 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Philosopher's Stone\" . ?e_1 <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"309.0\"^^xsd:double . ?e_2 <pred:name> \"Harry Potter and the Philosopher's Stone\" . ?e_2 <publication date> ?pv_1 . ?pv_1 <pred:date> \"2001-11-22\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "387": {
        "generations": "Is there a metropolitan area with a population of 6.155e+06 and a fact with a value of 6.155e+06, and also has a population greater than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 6.155e+06 </V> </ES> whose <A> population </A> larger than number <V> arg6 </V> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "388": {
        "generations": "Who said \"I love you, too\" as their last words to George W. Bush and has a CANTIC-ID of a10808231?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> CANTIC-ID </A> is text <V> a10808231 </V> </ES> and <ES> <C> human </C> whose <A> last words </A> is text <V> I love you, too. </V> </ES> ( <Q> addressee </Q> is text <V> George W. Bush </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <CANTIC-ID> ?pv . ?pv <pred:value> \"a10808231\" . ?e <last words> ?pv_1 . ?pv_1 <pred:value> \"I love you, too.\" . [ <pred:fact_h> ?e ; <pred:fact_r> <last words> ; <pred:fact_t> ?pv_1 ] <addressee> ?qpv . ?qpv <pred:value> \"George W. Bush\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "389": {
        "generations": "What state of the United States has the British Museum person-institution ID of 102550, a nickname of \"The Yellowhammer State\", and a start period during the American Civil War?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> state of the United States </C> whose <A> British Museum person-institution </A> is text <V> 102550 </V> </ES> and <ES> <C> state of the United States </C> whose <A> nickname </A> is text <V> The Yellowhammer State </V> </ES> ( <Q> start period </Q> is text <V> American Civil War </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"state of the United States\" . ?e <British Museum person-institution> ?pv . ?pv <pred:value> \"102550\" . ?e <nickname> ?pv_1 . ?pv_1 <pred:value> \"The Yellowhammer State\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nickname> ; <pred:fact_t> ?pv_1 ] <start period> ?qpv . ?qpv <pred:value> \"American Civil War\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "390": {
        "generations": "What is the McCune-Reischauer romanization of the Korean martial art, whose IPTC Newscode is mediatopic/20001084 and native label is \ud0dc\uad8c\ub3c4, and is also known as t\u2019aekwondo?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> martial arts </C> whose <A> IPTC Newscode </A> is text <V> mediatopic/20001084 </V> </ES> and <ES> <C> martial arts </C> whose <A> native label </A> is text <V> \ud0dc\uad8c\ub3c4 </V> </ES> ( <Q> McCune-Reischauer romanization </Q> is text <V> t\u2019aekwondo </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"martial arts\" . ?e <IPTC Newscode> ?pv . ?pv <pred:value> \"mediatopic/20001084\" . ?e <native label> ?pv_1 . ?pv_1 <pred:value> \"\ud0dc\uad8c\ub3c4\" . [ <pred:fact_h> ?e ; <pred:fact_r> <native label> ; <pred:fact_t> ?pv_1 ] <McCune-Reischauer romanization> ?qpv . ?qpv <pred:value> \"t\u2019aekwondo\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "391": {
        "generations": "What is the academic discipline that has an Instagram username of morningmusume official and a name in kana of \u30e2\u30fc\u30cb\u30f3\u30b0\u3080\u3059\u3081, with a Revised Hepburn romanization of M\u014dningu Musume?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> academic discipline </C> whose <A> Instagram username </A> is text <V> morningmusume official </V> </ES> and <ES> <C> academic discipline </C> whose <A> name in kana </A> is text <V> \u30e2\u30fc\u30cb\u30f3\u30b0\u3080\u3059\u3081 </V> </ES> ( <Q> Revised Hepburn romanization </Q> is text <V> M\u014dningu Musume </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"academic discipline\" . ?e <Instagram username> ?pv . ?pv <pred:value> \"morningmusume official\" . ?e <name in kana> ?pv_1 . ?pv_1 <pred:value> \"\u30e2\u30fc\u30cb\u30f3\u30b0\u3080\u3059\u3081\" . [ <pred:fact_h> ?e ; <pred:fact_r> <name in kana> ; <pred:fact_t> ?pv_1 ] <Revised Hepburn romanization> ?qpv . ?qpv <pred:value> \"M\u014dningu Musume\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "392": {
        "generations": "What is the fact about Boston's elevation above sea level and native label?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Boston </E> whose <A> elevation above sea level </A> is text <V> 43.0 </V> </ES> whose <A> native label </A> is text <V> Boston </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Boston\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"43.0\" . ?e <native label> ?pv . ?pv <pred:value> \"Boston\" . [ <pred:fact_h> ?e ; <pred:fact_r> <native label> ; <pred:fact_t> ?pv ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "393": {
        "generations": "What is the language of work or name for the subreddit of Cameroon, which has a Human Development Index of 0.507?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is text <V> 0.507 </V> </ES> whose <A> subreddit </A> is text <V> Cameroon </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Cameroon\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.507\" . ?e <subreddit> ?pv . ?pv <pred:value> \"Cameroon\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "394": {
        "generations": "What is the connection between Thunder Bay (the one whose duration is 103.0) to James Stewart?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Thunder Bay </E> whose <A> duration </A> is text <V> 103.0 </V> </ES> to <E> James Stewart </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Thunder Bay\" . ?e_1 <duration> ?pv . ?pv <pred:value> \"103.0\" . ?e_2 <pred:name> \"James Stewart\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "395": {
        "generations": "What is the connection between Newport (the one with FIPS 10-4 code UKY6) and Newport?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Newport </E> whose <A> FIPS 10-4 (countries and regions) </A> is text <V> UKY6 </V> </ES> to <E> Newport </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Newport\" . ?e_1 <FIPS 10-4 (countries and regions)> ?pv . ?pv <pred:value> \"UKY6\" . ?e_2 <pred:name> \"Newport\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "396": {
        "generations": "What is the connection between Kevin Clash (the one with ISNI 0000 0000 7779 2799) and the Primetime Emmy Award?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Kevin Clash </E> whose <A> ISNI </A> is text <V> 0000 0000 7779 2799 </V> </ES> to <E> Primetime Emmy Award </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Kevin Clash\" . ?e_1 <ISNI> ?pv . ?pv <pred:value> \"0000 0000 7779 2799\" . ?e_2 <pred:name> \"Primetime Emmy Award\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "397": {
        "generations": "Is the native label of Boston equal to \"Boston\" and was it founded on 1630-09-07?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> native label </A> is text <V> Boston </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <native label> ?pv . ?pv <pred:value> \"Boston\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "398": {
        "generations": "Is Fred Astaire's name in native language Fred Astaire and was he born on May 10th, 1899?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES> whose <A> name in native language </A> is text <V> Fred Astaire </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1899-05-10\"^^xsd:date . ?e <name in native language> ?pv . ?pv <pred:value> \"Fred Astaire\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "399": {
        "generations": "Was the publication date of the movie \"Miracle at St. Anna\" on January 1, 2008 and its title \"Miracle at St. Anna\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> publication date </A> is date <V> 2008-01-01 </V> </ES> whose <A> title </A> is text <V> Miracle at St. Anna </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2008-01-01\"^^xsd:date . ?e <title> ?pv . ?pv <pred:value> \"Miracle at St. Anna\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "400": {
        "generations": "What film was published in Germany on August 16, 2001, has a duration of 98.0, and is of the instance_of \"film\"?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> publication date </A> is date <V> 2001-08-16 </V> </ES> and <ES> <C> film </C> whose <A> duration </A> is text <V> 98.0 </V> </ES> ( <Q> place of publication </Q> is text <V> Germany </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv . ?pv <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"98.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "401": {
        "generations": "Which dynasty was dissolved, abolished or demolished before 1485 and has a native label of Plantagen\u00eat?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> dynasty </C> whose <A> dissolved, abolished or demolished </A> is date <V> 1485-01-01 </V> </ES> and <ES> <C> dynasty </C> whose <A> native label </A> is text <V> Plantagen\u00eat </V> </ES> ( <Q> instance of </Q> is text <V> statement with Gregorian date earlier than 1584 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"dynasty\" . ?e <dissolved, abolished or demolished> ?pv . ?pv <pred:date> \"1485-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <dissolved, abolished or demolished> ; <pred:fact_t> ?pv ] <instance of> ?qpv . ?qpv <pred:value> \"statement with Gregorian date earlier than 1584\" . ?e <native label> ?pv_1 . ?pv_1 <pred:value> \"Plantagen\u00eat\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "402": {
        "generations": "Which aircraft functional class, with a service entry date of 1970-01-22 and an operator of Pan Am, has a total production of 1527.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> </ES> and <ES> <C> aircraft functional class </C> whose <A> total produced </A> is text <V> 1527.0 </V> </ES> ( <Q> operator </Q> is text <V> Pan Am </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <service entry> ?pv . ?pv <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" . ?e <total produced> ?pv_1 . ?pv_1 <pred:value> \"1527.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "403": {
        "generations": "When did Boston (whose population is 617594.0) become a part of the United States of America (whose Human Development Index is 0.92)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <ES> <E> Boston </E> whose <A> population </A> is number <V> 617594.0 </V> </ES> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> Human Development Index </A> is number <V> 0.92 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double . ?e_2 <pred:name> \"United States of America\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.92\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "404": {
        "generations": "What is the connection between Ivory Coast and Ivory Coast (the one with Dewey Decimal Classification 2--6668)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Ivory Coast </E> to <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "405": {
        "generations": "What is the connection between St. Clair County and Port Huron (the one whose WOEID is 2475403)?",
        "ori_data_item": {
            "question": "what is the relation from <E> St. Clair County </E> to <ES> <E> Port Huron </E> whose <A> WOEID </A> is text <V> 2475403 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"St. Clair County\" . ?e_2 <pred:name> \"Port Huron\" . ?e_2 <WOEID> ?pv . ?pv <pred:value> \"2475403\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "406": {
        "generations": "What is the connection between Kurt Vonnegut and Butler University (the one located at 4600 Sunset Ave, Indianapolis, IN, 46208)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Kurt Vonnegut </E> to <ES> <E> Butler University </E> whose <A> located at street address (DEPRECATED) </A> is text <V> 4600 Sunset Ave, Indianapolis, IN, 46208 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Kurt Vonnegut\" . ?e_2 <pred:name> \"Butler University\" . ?e_2 <located at street address (DEPRECATED)> ?pv . ?pv <pred:value> \"4600 Sunset Ave, Indianapolis, IN, 46208\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "407": {
        "generations": "What is the connection between Michael Redgrave and the knight with Iconclass notation 46A124?",
        "ori_data_item": {
            "question": "what is the relation from <E> Michael Redgrave </E> to <ES> <E> knight </E> whose <A> Iconclass notation </A> is text <V> 46A124 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Michael Redgrave\" . ?e_2 <pred:name> \"knight\" . ?e_2 <Iconclass notation> ?pv . ?pv <pred:value> \"46A124\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "408": {
        "generations": "What is the connection between two instances of Harry Potter and the Order of the Phoenix, where one has a box office value of 9.39886e+08?",
        "ori_data_item": {
            "question": "what is the relation from <E> Harry Potter and the Order of the Phoenix </E> to <ES> <E> Harry Potter and the Order of the Phoenix </E> whose <A> box office </A> is text <V> 9.39886e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_2 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_2 <box office> ?pv . ?pv <pred:value> \"9.39886e+08\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "409": {
        "generations": "What is the connection between Ivory Coast (the one whose inception is 1960-01-01) and Ivory Coast (the one whose inception is also 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "410": {
        "generations": "What is the connection between the publication of Harry Potter and the Goblet of Fire on July 8, 2000 and November 16, 2005?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2000-07-08 </V> </ES> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2005-11-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <publication date> ?pv . ?pv <pred:date> \"2000-07-08\"^^xsd:date . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-16\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "411": {
        "generations": "What is the connection between Roger Moore (born on 1927-10-14) and Roger Moore (born on 1900-09-21)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Roger Moore </E> whose <A> date of birth </A> is date <V> 1927-10-14 </V> </ES> to <ES> <E> Roger Moore </E> whose <A> date of birth </A> is date <V> 1900-09-21 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Roger Moore\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1927-10-14\"^^xsd:date . ?e_2 <pred:name> \"Roger Moore\" . ?e_2 <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1900-09-21\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "412": {
        "generations": "What is the connection between two instances of Brno (the ones with the earliest written record date of 1091-01-17)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Brno </E> whose <A> time of earliest written record </A> is date <V> 1091-01-17 </V> </ES> to <ES> <E> Brno </E> whose <A> time of earliest written record </A> is date <V> 1091-01-17 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Brno\" . ?e_1 <time of earliest written record> ?pv . ?pv <pred:date> \"1091-01-17\"^^xsd:date . ?e_2 <pred:name> \"Brno\" . ?e_2 <time of earliest written record> ?pv_1 . ?pv_1 <pred:date> \"1091-01-17\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "413": {
        "generations": "Does MegaMan NT Warrior have 56 episodes and is there another episode count less than \"arg6\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> MegaMan NT Warrior </E> whose <A> number of episodes </A> is number <V> 56.0 </V> </ES> whose <A> number of episodes </A> smaller than number <V> arg6 </V> ( <Q> pred:fact t </Q> is text <V> 56.0 </V> )",
            "sparql": "ASK { ?e <pred:name> \"MegaMan NT Warrior\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"56.0\"^^xsd:double . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg6\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <number of episodes> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"56.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "414": {
        "generations": "What conflict is associated with both Richard Nixon and World War II?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> conflict </Q> of <E> Richard Nixon </E> that <R> conflict </R> backward to <E> World War II </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Richard Nixon\" . ?e_2 <pred:name> \"World War II\" . ?e_1 <conflict> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <conflict> ; <pred:fact_t> ?e_2 ] <conflict> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "415": {
        "generations": "What is the country of citizenship of Giovani dos Santos who is related to Brazil?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> country of citizenship </Q> of <E> Giovani dos Santos </E> that <R> country of citizenship </R> backward to <E> Brazil </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Giovani dos Santos\" . ?e_2 <pred:name> \"Brazil\" . ?e_1 <country of citizenship> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country of citizenship> ; <pred:fact_t> ?e_2 ] <country of citizenship> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "416": {
        "generations": "What administrative territorial entity is Manhattan located in, which is also the location of Fordham University School of Law?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> located in the administrative territorial entity </Q> of <E> Fordham University School of Law </E> that <R> located in the administrative territorial entity </R> backward to <E> Manhattan </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Fordham University School of Law\" . ?e_2 <pred:name> \"Manhattan\" . ?e_1 <located in the administrative territorial entity> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <located in the administrative territorial entity> ; <pred:fact_t> ?e_2 ] <located in the administrative territorial entity> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "417": {
        "generations": "Which administrative body is twinned with both Seoul and New York City?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> twinned administrative body </Q> of <E> Seoul </E> that <R> twinned administrative body </R> backward to <E> New York City </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Seoul\" . ?e_2 <pred:name> \"New York City\" . ?e_1 <twinned administrative body> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <twinned administrative body> ; <pred:fact_t> ?e_2 ] <twinned administrative body> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "418": {
        "generations": "How many human settlements have a male population greater than a certain value? (Note: the specific value is not provided in the query)",
        "ori_data_item": {
            "question": "how many <ES> <C> human settlement </C> whose <A> male population </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human settlement\" . ?e <male population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "419": {
        "generations": "How many capitals have a rural population greater than a certain value (arg1)?",
        "ori_data_item": {
            "question": "how many <ES> <C> capital </C> whose <A> rural population </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <rural population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "420": {
        "generations": "How many republics have more than arg1 out-of-school children?",
        "ori_data_item": {
            "question": "how many <ES> <C> republic </C> whose <A> number of out-of-school children </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"republic\" . ?e <number of out-of-school children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "421": {
        "generations": "How many businesses have an Alexa rank greater than arg1?",
        "ori_data_item": {
            "question": "how many <ES> <C> business </C> whose <A> Alexa rank </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"business\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "422": {
        "generations": "How many agents have more than one employee?",
        "ori_data_item": {
            "question": "how many <ES> <C> agent </C> whose <A> employees </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "423": {
        "generations": "How many organizations have more than arg1 subscribers?",
        "ori_data_item": {
            "question": "how many <ES> <C> organization </C> whose <A> number of subscribers </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"organization\" . ?e <number of subscribers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "424": {
        "generations": "How many universities have more than arg1 students?",
        "ori_data_item": {
            "question": "how many <ES> <C> university </C> whose <A> students count </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"university\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "425": {
        "generations": "How many political parties have a member count greater than a certain value (arg1)?",
        "ori_data_item": {
            "question": "how many <ES> <C> political party </C> whose <A> member count </A> larger than number <V> arg1 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "426": {
        "generations": "What is the connection between Cameroon (the one with Dewey Decimal Classification of 2--6711) and Cameroon (the one with a Human Development Index of 0.436)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "427": {
        "generations": "What is the connection between the book and the movie titled Harry Potter and the Goblet of Fire (the book has an ISBN-10 of 0-7475-4624-X and the movie's box office revenue is 8.96911e+08)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> ISBN-10 </A> is text <V> 0-7475-4624-X </V> </ES> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <ISBN-10> ?pv . ?pv <pred:value> \"0-7475-4624-X\" . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "428": {
        "generations": "Which city of the United States has a population of 25514 and an area of 37.5618?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> and <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 37.5618 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 1 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv . ?pv <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"37.5618\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "429": {
        "generations": "What is the point in time when the metropolitan area with a population of 6.155e+06 had that population?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 6.155e+06 </V> </ES> whose <A> population </A> is text <V> 6.155e+06 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:value> \"6.155e+06\" . ?e <population> ?pv . ?pv <pred:value> \"6.155e+06\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "430": {
        "generations": "Which city of the United States has a population greater than arg1 and a population of 25514.0, and what is the fact t value for this population?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 1 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "431": {
        "generations": "Did Ayn Rand have less than three children and use the pseudonym Ayn Rand?",
        "ori_data_item": {
            "question": "whether <ES> <E> Ayn Rand </E> whose <A> pseudonym </A> is text <V> Ayn Rand </V> </ES> whose <A> number of children </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ayn Rand\" . ?e <pseudonym> ?pv_1 . ?pv_1 <pred:value> \"Ayn Rand\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "432": {
        "generations": "What is the population of Erlangen, whose official name is also Erlangen and is less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <E> Erlangen </E> whose <A> official name </A> is text <V> Erlangen </V> </ES> whose <A> population </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"Erlangen\" . ?e <official name> ?pv_1 . ?pv_1 <pred:value> \"Erlangen\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "433": {
        "generations": "Does Latin have a short name of Latin and less than arg3 speakers?",
        "ori_data_item": {
            "question": "whether <ES> <E> Latin </E> whose <A> short name </A> is text <V> Latin </V> </ES> whose <A> number of speakers </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"Latin\" . ?e <short name> ?pv_1 . ?pv_1 <pred:value> \"Latin\" . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "434": {
        "generations": "Does Cameroon have a subreddit named Cameroon and a Human Development Index value less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cameroon </E> whose <A> subreddit </A> is text <V> Cameroon </V> </ES> whose <A> Human Development Index </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <subreddit> ?pv_1 . ?pv_1 <pred:value> \"Cameroon\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "435": {
        "generations": "Does Mars have a Twitter hashtag of \"Mars\" and an orbital eccentricity less than \"arg3\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Mars </E> whose <A> Twitter hashtag </A> is text <V> Mars </V> </ES> whose <A> orbital eccentricity </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"Mars\" . ?e <Twitter hashtag> ?pv_1 . ?pv_1 <pred:value> \"Mars\" . ?e <orbital eccentricity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "436": {
        "generations": "Does McGill University have a native label equal to \"McGill University\" and an admission rate less than arg3?",
        "ori_data_item": {
            "question": "whether <ES> <E> McGill University </E> whose <A> native label </A> is text <V> McGill University </V> </ES> whose <A> admission rate </A> smaller than number <V> arg3 </V>",
            "sparql": "ASK { ?e <pred:name> \"McGill University\" . ?e <native label> ?pv_1 . ?pv_1 <pred:value> \"McGill University\" . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "437": {
        "generations": "Did the film, published on 2005-11-16 in Germany and with a box office greater than arg6, exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2005-11-16 </V> </ES> whose <A> box office </A> larger than number <V> arg6 </V> ( <Q> place of publication </Q> is text <V> Germany </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "438": {
        "generations": "Is there an administrative territorial entity whose inception date is 1917-03-31, whose criterion used is the Treaty of the Danish West Indies, and whose population is greater than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> administrative territorial entity </C> whose <A> inception </A> is date <V> 1917-03-31 </V> </ES> whose <A> population </A> larger than number <V> arg6 </V> ( <Q> criterion used </Q> is text <V> Treaty of the Danish West Indies </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"administrative territorial entity\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1917-03-31\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <inception> ; <pred:fact_t> ?pv_1 ] <criterion used> ?qpv . ?qpv <pred:value> \"Treaty of the Danish West Indies\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "439": {
        "generations": "Was Pan Am the operator of the aircraft functional class that entered service on 1970-01-22 and had a total production number greater than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> </ES> whose <A> total produced </A> larger than number <V> arg6 </V> ( <Q> operator </Q> is text <V> Pan Am </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <service entry> ?pv_1 . ?pv_1 <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv_1 ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "440": {
        "generations": "Which film was published on 2001-08-16 in Germany?",
        "ori_data_item": {
            "question": "what is <ES> <C> film </C> whose <A> publication date </A> is date <V> 2001-08-16 </V> ( <Q> place of publication </Q> is text <V> Germany </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv . ?pv <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "441": {
        "generations": "Which dynasty was dissolved, abolished or demolished before 1485 (according to a statement with Gregorian date earlier than 1584)?",
        "ori_data_item": {
            "question": "what is <ES> <C> dynasty </C> whose <A> dissolved, abolished or demolished </A> is date <V> 1485-01-01 </V> ( <Q> instance of </Q> is text <V> statement with Gregorian date earlier than 1584 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"dynasty\" . ?e <dissolved, abolished or demolished> ?pv . ?pv <pred:date> \"1485-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <dissolved, abolished or demolished> ; <pred:fact_t> ?pv ] <instance of> ?qpv . ?qpv <pred:value> \"statement with Gregorian date earlier than 1584\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "442": {
        "generations": "Who died on January 31, 2000 at the age of 73.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> human </C> whose <A> date of death </A> is date <V> 2000-01-31 </V> ( <Q> stated age at event </Q> is text <V> 73.0 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of death> ?pv . ?pv <pred:date> \"2000-01-31\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <date of death> ; <pred:fact_t> ?pv ] <stated age at event> ?qpv . ?qpv <pred:value> \"73.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "443": {
        "generations": "Which aircraft functional class was operated by Pan Am and entered service on 1970-01-22?",
        "ori_data_item": {
            "question": "what is <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> ( <Q> operator </Q> is text <V> Pan Am </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <service entry> ?pv . ?pv <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "444": {
        "generations": "What character did Larry Hagman play in the Dallas series with 357.0 episodes?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> character role </Q> of <ES> <E> Dallas </E> whose <A> number of episodes </A> is number <V> 357.0 </V> </ES> that <R> cast member </R> backward to <E> Larry Hagman </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Dallas\" . ?e_1 <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"357.0\"^^xsd:double . ?e_2 <pred:name> \"Larry Hagman\" . ?e_1 <cast member> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <cast member> ; <pred:fact_t> ?e_2 ] <character role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "445": {
        "generations": "What is the pred:fact h of Monrovia, the capital of Liberia, whose population is 1.02176e+06?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Monrovia </E> whose <A> population </A> is number <V> 1.02176e+06 </V> </ES> that <R> capital of </R> backward to <E> Liberia </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Monrovia\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.02176e+06\"^^xsd:double . ?e_2 <pred:name> \"Liberia\" . ?e_1 <capital of> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <capital of> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "446": {
        "generations": "When did Brad Pitt receive an Academy Award for Best Picture (he has 6 children)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <E> Brad Pitt </E> whose <A> number of children </A> is number <V> 6.0 </V> </ES> that <R> award received </R> backward to <E> Academy Award for Best Picture </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Brad Pitt\" . ?e_1 <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.0\"^^xsd:double . ?e_2 <pred:name> \"Academy Award for Best Picture\" . ?e_1 <award received> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <award received> ; <pred:fact_t> ?e_2 ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "447": {
        "generations": "Which political party was John McCain a member of during the United States presidential election in 2008, where the eligible voters were 2.13314e+08?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> member of political party </Q> of <ES> <E> United States presidential election, 2008 </E> whose <A> eligible voters </A> is number <V> 2.13314e+08 </V> </ES> that <R> candidate </R> backward to <E> John McCain </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"United States presidential election, 2008\" . ?e_1 <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.13314e+08\"^^xsd:double . ?e_2 <pred:name> \"John McCain\" . ?e_1 <candidate> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <candidate> ; <pred:fact_t> ?e_2 ] <member of political party> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "448": {
        "generations": "Where was the visual artwork titled \"Get Carter\" published on August 16, 2001?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <C> visual artwork </C> whose <A> publication date </A> is date <V> 2001-08-16 </V> </ES> whose <A> title </A> is text <V> Get Carter </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"visual artwork\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <place of publication> ?qpv_1 . ?qpv_1 <pred:value> \"Germany\" . ?e <title> ?pv . ?pv <pred:value> \"Get Carter\" . [ <pred:fact_h> ?e ; <pred:fact_r> <title> ; <pred:fact_t> ?pv ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "449": {
        "generations": "What is the connection between Cameroon (the one whose inception is 1960-01-01) and Cameroon (the one whose Human Development Index is 0.486)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.486 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.486\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "450": {
        "generations": "What is the connection between Vinod Khanna (the one born on 1946-10-06) and Bharatiya Janata Party (the one with 117.0 representatives in an organization/legislature)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Vinod Khanna </E> whose <A> date of birth </A> is date <V> 1946-10-06 </V> </ES> to <ES> <E> Bharatiya Janata Party </E> whose <A> number of representatives in an organization/legislature </A> is number <V> 117.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Vinod Khanna\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1946-10-06\"^^xsd:date . ?e_2 <pred:name> \"Bharatiya Janata Party\" . ?e_2 <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"117.0\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "451": {
        "generations": "What is the FIPS 10-4 code for Orkney Islands and what is the Human Development Index of the United Kingdom (whose country is Orkney Islands)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Orkney Islands </E> whose <A> FIPS 10-4 (countries and regions) </A> is text <V> UKV9 </V> </ES> that <R> country </R> backward to <ES> <E> United Kingdom </E> whose <A> Human Development Index </A> is number <V> 0.901 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Orkney Islands\" . ?e_1 <FIPS 10-4 (countries and regions)> ?pv . ?pv <pred:value> \"UKV9\" . ?e_2 <pred:name> \"United Kingdom\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.901\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "452": {
        "generations": "What is the connection between Ivory Coast (the one with Dewey Decimal Classification of 2--6668) and Ivory Coast (also with Dewey Decimal Classification of 2--6668)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--6668\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "453": {
        "generations": "Which first-level administrative country subdivision has one representative in an organization/legislature with a value of 135.0 and another representative with a value greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> is number <V> 135.0 </V> </ES> and <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"135.0\"^^xsd:double . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "454": {
        "generations": "Which Primetime Emmy Award has an Alexa rank greater than arg3 and a rank of 126668.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> is number <V> 126668.0 </V> </ES> and <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"126668.0\"^^xsd:double . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "455": {
        "generations": "Which film has an attendance of 2.39375e+06 and a higher attendance than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> attendance </A> is number <V> 2.39375e+06 </V> </ES> and <ES> <C> film </C> whose <A> attendance </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.39375e+06\"^^xsd:double . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "456": {
        "generations": "Which facility has a collection or exhibition size of 460000.0 and another collection or exhibition size greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> facility </C> whose <A> collection or exhibition size </A> is number <V> 460000.0 </V> </ES> and <ES> <C> facility </C> whose <A> collection or exhibition size </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"facility\" . ?e <collection or exhibition size> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"460000.0\"^^xsd:double . ?e <collection or exhibition size> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "457": {
        "generations": "Which video game publisher has 848 employees and more employees than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> video game publisher </C> whose <A> employees </A> is number <V> 848.0 </V> </ES> and <ES> <C> video game publisher </C> whose <A> employees </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game publisher\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"848.0\"^^xsd:double . ?e <employees> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "458": {
        "generations": "What recurring event has eligible voters of 2.13314e+08 and another eligible voters value greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> recurring event </C> whose <A> eligible voters </A> is number <V> 2.13314e+08 </V> </ES> and <ES> <C> recurring event </C> whose <A> eligible voters </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"recurring event\" . ?e <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.13314e+08\"^^xsd:double . ?e <eligible voters> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "459": {
        "generations": "Which city in the United States has a female population of 31869 and a female population greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> female population </A> is number <V> 31869.0 </V> </ES> and <ES> <C> city of the United States </C> whose <A> female population </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <female population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"31869.0\"^^xsd:double . ?e <female population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "460": {
        "generations": "Which real property has 102.0 floors above ground and more than arg3 floors above ground?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> real property </C> whose <A> floors above ground </A> is number <V> 102.0 </V> </ES> and <ES> <C> real property </C> whose <A> floors above ground </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <floors above ground> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"102.0\"^^xsd:double . ?e <floors above ground> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "461": {
        "generations": "Which disease has more than 2e+07 cases and has a number of cases greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> disease </C> whose <A> number of cases </A> is number <V> 2e+07 </V> </ES> and <ES> <C> disease </C> whose <A> number of cases </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2e+07\"^^xsd:double . ?e <number of cases> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "462": {
        "generations": "Which metropolitan borough has 88250 households and a number of households greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan borough </C> whose <A> number of households </A> is number <V> 88250.0 </V> </ES> and <ES> <C> metropolitan borough </C> whose <A> number of households </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan borough\" . ?e <number of households> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"88250.0\"^^xsd:double . ?e <number of households> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "463": {
        "generations": "Which anthology has 156 episodes and more than arg3 episodes?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> anthology </C> whose <A> number of episodes </A> is number <V> 156.0 </V> </ES> and <ES> <C> anthology </C> whose <A> number of episodes </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"anthology\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"156.0\"^^xsd:double . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "464": {
        "generations": "Which Summer Olympic Games had more than arg3 participants (where arg3 is a variable that needs to be replaced with a specific number)?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> Summer Olympic Games </C> whose <A> number of participants </A> is number <V> 10768.0 </V> </ES> and <ES> <C> Summer Olympic Games </C> whose <A> number of participants </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Summer Olympic Games\" . ?e <number of participants> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"10768.0\"^^xsd:double . ?e <number of participants> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "465": {
        "generations": "Which modern language has more than 1.10441e+08 speakers and has a number of speakers greater than arg3?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> modern language </C> whose <A> number of speakers </A> is number <V> 1.10441e+08 </V> </ES> and <ES> <C> modern language </C> whose <A> number of speakers </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"modern language\" . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.10441e+08\"^^xsd:double . ?e <number of speakers> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "466": {
        "generations": "What is the Twitter username of Trabzonspor and what is the maximum number of players for the association football sport (whose maximum number of players is 22.0) that Trabzonspor is involved in?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Trabzonspor </E> whose <A> Twitter username </A> is text <V> Trabzonspor </V> </ES> that <R> sport </R> backward to <ES> <E> association football </E> whose <A> maximum number of players </A> is number <V> 22.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Trabzonspor\" . ?e_1 <Twitter username> ?pv . ?pv <pred:value> \"Trabzonspor\" . ?e_2 <pred:name> \"association football\" . ?e_2 <maximum number of players> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"22.0\"^^xsd:double . ?e_1 <sport> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <sport> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "467": {
        "generations": "What form of government had a nominal GDP of 2.77008e+09 on January 1st, 2004, and a Human Development Index value less than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> form of government </C> whose <A> nominal GDP </A> is text <V> 2.77008e+09 </V> </ES> whose <A> Human Development Index </A> smaller than number <V> arg6 </V> ( <Q> point in time </Q> is date <V> 2004-01-01 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"form of government\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"2.77008e+09\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2004-01-01\"^^xsd:date . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "468": {
        "generations": "What is the city of the United States that has a Twitter username of CityOfBoston and was founded on 1630-09-07?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> Twitter username </A> is text <V> CityOfBoston </V> </ES> and <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <Twitter username> ?pv . ?pv <pred:value> \"CityOfBoston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "469": {
        "generations": "Who is the human born on 1931-09-21 and has an ISNI of 0000 0000 5930 3891?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> ISNI </A> is text <V> 0000 0000 5930 3891 </V> </ES> and <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1931-09-21 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <ISNI> ?pv . ?pv <pred:value> \"0000 0000 5930 3891\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1931-09-21\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "470": {
        "generations": "What film has a duration of 160.0 and was published on 2008-09-07?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> and <ES> <C> film </C> whose <A> publication date </A> is date <V> 2008-09-07 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2008-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "471": {
        "generations": "Which Academy Awards ceremony had an edition number of 51 and took place on April 9th, 1979?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> Academy Awards ceremony </C> whose <A> edition number </A> is text <V> 51 </V> </ES> and <ES> <C> Academy Awards ceremony </C> whose <A> point in time </A> is date <V> 1979-04-09 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <edition number> ?pv . ?pv <pred:value> \"51\" . ?e <point in time> ?pv_1 . ?pv_1 <pred:date> \"1979-04-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "472": {
        "generations": "Which sovereign state has a Dewey Decimal Classification of 2--6711, a nominal GDP of 1.13963e+10, and a point in time of 1992-01-01?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> </ES> and <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 1.13963e+10 </V> </ES> ( <Q> point in time </Q> is date <V> 1992-01-01 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"1.13963e+10\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"1992-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "473": {
        "generations": "What film has a duration of 120.0 and an exploitation visa number of 54231, with a start time of 1981-05-20?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> duration </A> is text <V> 120.0 </V> </ES> and <ES> <C> film </C> whose <A> exploitation visa number </A> is text <V> 54231 </V> </ES> ( <Q> start time </Q> is date <V> 1981-05-20 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv . ?pv <pred:value> \"120.0\" . ?e <exploitation visa number> ?pv_1 . ?pv_1 <pred:value> \"54231\" . [ <pred:fact_h> ?e ; <pred:fact_r> <exploitation visa number> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"1981-05-20\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "474": {
        "generations": "What is the UN/LOCODE of Lower Hutt?",
        "ori_data_item": {
            "question": "what is the attribute <A> UN/LOCODE </A> of <E> Lower Hutt </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Lower Hutt\" . ?e <UN/LOCODE> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "475": {
        "generations": "What is the number of representatives in an organization/legislature for Bharatiya Janata Party?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of representatives in an organization/legislature </A> of <E> Bharatiya Janata Party </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <number of representatives in an organization/legislature> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "476": {
        "generations": "What is the position played on team/speciality of Chris Carter?",
        "ori_data_item": {
            "question": "what is the attribute <A> position played on team / speciality </A> of <E> Chris Carter </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Chris Carter\" . ?e <position played on team / speciality> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "477": {
        "generations": "What is the British Museum person-institution of Fred Astaire?",
        "ori_data_item": {
            "question": "what is the attribute <A> British Museum person-institution </A> of <E> Fred Astaire </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Fred Astaire\" . ?e <British Museum person-institution> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "478": {
        "generations": "What is the Dewey Decimal Classification for Boston?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <E> Boston </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Boston\" . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "479": {
        "generations": "What is the Hornbostel-Sachs classification of a bell?",
        "ori_data_item": {
            "question": "what is the attribute <A> Hornbostel-Sachs classification </A> of <E> bell </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"bell\" . ?e <Hornbostel-Sachs classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "480": {
        "generations": "What is the IPTC Newscode for mechanical engineering?",
        "ori_data_item": {
            "question": "what is the attribute <A> IPTC Newscode </A> of <E> mechanical engineering </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"mechanical engineering\" . ?e <IPTC Newscode> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "481": {
        "generations": "What is the OSM tag or key for a commercial art gallery?",
        "ori_data_item": {
            "question": "what is the attribute <A> OSM tag or key </A> of <E> commercial art gallery </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"commercial art gallery\" . ?e <OSM tag or key> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "482": {
        "generations": "What is the OS grid reference for Burton upon Trent?",
        "ori_data_item": {
            "question": "what is the attribute <A> OS grid reference </A> of <E> Burton upon Trent </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Burton upon Trent\" . ?e <OS grid reference> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "483": {
        "generations": "What is the WOEID of Port Huron?",
        "ori_data_item": {
            "question": "what is the attribute <A> WOEID </A> of <E> Port Huron </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Port Huron\" . ?e <WOEID> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "484": {
        "generations": "What work is Harry Potter and the Goblet of Fire based on?",
        "ori_data_item": {
            "question": "what is the attribute <A> after a work by </A> of <E> Harry Potter and the Goblet of Fire </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <after a work by> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "485": {
        "generations": "Who is a cast member in the movie Miracle at St. Anna?",
        "ori_data_item": {
            "question": "what is the attribute <A> cast member </A> of <E> Miracle at St. Anna </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Miracle at St. Anna\" . ?e <cast member> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "486": {
        "generations": "Who confers the Academy Award for Best Picture?",
        "ori_data_item": {
            "question": "what is the attribute <A> conferred by </A> of <E> Academy Award for Best Picture </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Academy Award for Best Picture\" . ?e <conferred by> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "487": {
        "generations": "What is the ARCHON code for California State University, Northridge?",
        "ori_data_item": {
            "question": "what is the attribute <A> ARCHON code </A> of <E> California State University, Northridge </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"California State University, Northridge\" . ?e <ARCHON code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "488": {
        "generations": "What is the Giphy username for Hertha BSC?",
        "ori_data_item": {
            "question": "what is the attribute <A> Giphy username </A> of <E> Hertha BSC </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Hertha BSC\" . ?e <Giphy username> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "489": {
        "generations": "What is the IMO ship number of Canberra?",
        "ori_data_item": {
            "question": "what is the attribute <A> IMO ship number </A> of <E> Canberra </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Canberra\" . ?e <IMO ship number> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "490": {
        "generations": "What is the IPv4 routing prefix for California State University, Long Beach?",
        "ori_data_item": {
            "question": "what is the attribute <A> IPv4 routing prefix </A> of <E> California State University, Long Beach </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"California State University, Long Beach\" . ?e <IPv4 routing prefix> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "491": {
        "generations": "What is the PhilPapers topic of heterosexuality?",
        "ori_data_item": {
            "question": "what is the attribute <A> PhilPapers topic </A> of <E> heterosexuality </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "492": {
        "generations": "What are the award disciplines or subjects of the Caldecott Medal?",
        "ori_data_item": {
            "question": "what is the attribute <A> award disciplines or subjects </A> of <E> Caldecott Medal </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Caldecott Medal\" . ?e <award disciplines or subjects> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "493": {
        "generations": "What is the edition number of the 60th Golden Globe Awards?",
        "ori_data_item": {
            "question": "what is the attribute <A> edition number </A> of <E> 60th Golden Globe Awards </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"60th Golden Globe Awards\" . ?e <edition number> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "494": {
        "generations": "What is the Corporate Number (Japan) of SNK?",
        "ori_data_item": {
            "question": "what is the attribute <A> Corporate Number (Japan) </A> of <E> SNK </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"SNK\" . ?e <Corporate Number (Japan)> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "495": {
        "generations": "What is the DOI prefix for Carleton University?",
        "ori_data_item": {
            "question": "what is the attribute <A> DOI prefix </A> of <E> Carleton University </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Carleton University\" . ?e <DOI prefix> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "496": {
        "generations": "What is the Alexa rank of Target Corporation?",
        "ori_data_item": {
            "question": "what is the attribute <A> Alexa rank </A> of <E> Target Corporation </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Target Corporation\" . ?e <Alexa rank> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "497": {
        "generations": "What is the NSDAP membership number (1925-1945) of Franz Schubert?",
        "ori_data_item": {
            "question": "what is the attribute <A> NSDAP membership number (1925\u20131945 </A> of <E> Franz Schubert </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Franz Schubert\" . ?e <NSDAP membership number (1925\u20131945> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "498": {
        "generations": "What is the Nintendo GameID for Guitar Hero III: Legends of Rock?",
        "ori_data_item": {
            "question": "what is the attribute <A> Nintendo GameID </A> of <E> Guitar Hero III: Legends of Rock </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Guitar Hero III: Legends of Rock\" . ?e <Nintendo GameID> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "499": {
        "generations": "What is the field of occupation for an executive producer?",
        "ori_data_item": {
            "question": "what is the attribute <A> field of this occupation </A> of <E> executive producer </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"executive producer\" . ?e <field of this occupation> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "500": {
        "generations": "What is the Amazon author page for John Grisham?",
        "ori_data_item": {
            "question": "what is the attribute <A> Amazon author page </A> of <E> John Grisham </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"John Grisham\" . ?e <Amazon author page> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "501": {
        "generations": "What is the Statistics Canada Geographic code for Saskatoon?",
        "ori_data_item": {
            "question": "what is the attribute <A> Statistics Canada Geographic code </A> of <E> Saskatoon </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"Saskatoon\" . ?e <Statistics Canada Geographic code> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "502": {
        "generations": "Who discovered or invented evolution?",
        "ori_data_item": {
            "question": "what is the attribute <A> discoverer or inventor </A> of <E> evolution </E>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:name> \"evolution\" . ?e <discoverer or inventor> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "503": {
        "generations": "Does the first-level administrative country subdivision have 135 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "whether <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> is text <V> 135.0 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is text <V> 135.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:value> \"135.0\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"135.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "504": {
        "generations": "Is the city of the United States with UN/LOCODE USCHI the same as the one with UN/LOCODE USCHI?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> UN/LOCODE </A> is text <V> USCHI </V> </ES> whose <A> UN/LOCODE </A> is text <V> USCHI </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <UN/LOCODE> ?pv_1 . ?pv_1 <pred:value> \"USCHI\" . ?e <UN/LOCODE> ?pv . ?pv <pred:value> \"USCHI\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "505": {
        "generations": "Is there a big city with NIS/INS code 24062?",
        "ori_data_item": {
            "question": "whether <ES> <C> big city </C> whose <A> NIS/INS code </A> is text <V> 24062 </V> </ES> whose <A> NIS/INS code </A> is text <V> 24062 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"big city\" . ?e <NIS/INS code> ?pv_1 . ?pv_1 <pred:value> \"24062\" . ?e <NIS/INS code> ?pv . ?pv <pred:value> \"24062\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "506": {
        "generations": "Does the agent with ISO 9362 SWIFT/BIC code BOFAUS3N have the same code as its own ISO 9362 SWIFT/BIC code?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> ISO 9362 SWIFT/BIC code </A> is text <V> BOFAUS3N </V> </ES> whose <A> ISO 9362 SWIFT/BIC code </A> is text <V> BOFAUS3N </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <ISO 9362 SWIFT/BIC code> ?pv_1 . ?pv_1 <pred:value> \"BOFAUS3N\" . ?e <ISO 9362 SWIFT/BIC code> ?pv . ?pv <pred:value> \"BOFAUS3N\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "507": {
        "generations": "Does the Primetime Emmy Award have an Alexa rank of 126668.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> is text <V> 126668.0 </V> </ES> whose <A> Alexa rank </A> is text <V> 126668.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"126668.0\" . ?e <Alexa rank> ?pv . ?pv <pred:value> \"126668.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "508": {
        "generations": "Is the college of the University of Cambridge with an ARCHON code of 2703 also associated with an ARCHON code of 2703?",
        "ori_data_item": {
            "question": "whether <ES> <C> college of the University of Cambridge </C> whose <A> ARCHON code </A> is text <V> 2703 </V> </ES> whose <A> ARCHON code </A> is text <V> 2703 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"college of the University of Cambridge\" . ?e <ARCHON code> ?pv_1 . ?pv_1 <pred:value> \"2703\" . ?e <ARCHON code> ?pv . ?pv <pred:value> \"2703\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "509": {
        "generations": "Does the chemical compound have an ATC code of B03BB01?",
        "ori_data_item": {
            "question": "whether <ES> <C> chemical compound </C> whose <A> ATC code </A> is text <V> B03BB01 </V> </ES> whose <A> ATC code </A> is text <V> B03BB01 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"chemical compound\" . ?e <ATC code> ?pv_1 . ?pv_1 <pred:value> \"B03BB01\" . ?e <ATC code> ?pv . ?pv <pred:value> \"B03BB01\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "510": {
        "generations": "Is there an academic discipline with an ACM Classification Code (2012) of 10010178?",
        "ori_data_item": {
            "question": "whether <ES> <C> academic discipline </C> whose <A> ACM Classification Code (2012) </A> is text <V> 10010178 </V> </ES> whose <A> ACM Classification Code (2012) </A> is text <V> 10010178 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"academic discipline\" . ?e <ACM Classification Code (2012)> ?pv_1 . ?pv_1 <pred:value> \"10010178\" . ?e <ACM Classification Code (2012)> ?pv . ?pv <pred:value> \"10010178\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "511": {
        "generations": "Does the television network with an Australian Business Number of 52429278345 also have an Australian Business Number of 52429278345?",
        "ori_data_item": {
            "question": "whether <ES> <C> television network </C> whose <A> Australian Business Number </A> is text <V> 52429278345 </V> </ES> whose <A> Australian Business Number </A> is text <V> 52429278345 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television network\" . ?e <Australian Business Number> ?pv_1 . ?pv_1 <pred:value> \"52429278345\" . ?e <Australian Business Number> ?pv . ?pv <pred:value> \"52429278345\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "512": {
        "generations": "Is there an activity that has both \"portrait\" values for the Artsy gene?",
        "ori_data_item": {
            "question": "whether <ES> <C> activity </C> whose <A> Artsy gene </A> is text <V> portrait </V> </ES> whose <A> Artsy gene </A> is text <V> portrait </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <Artsy gene> ?pv_1 . ?pv_1 <pred:value> \"portrait\" . ?e <Artsy gene> ?pv . ?pv <pred:value> \"portrait\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "513": {
        "generations": "Is the municipality of the Netherlands with Amsterdam code 11157 the same as the one with Amsterdam code 11157?",
        "ori_data_item": {
            "question": "whether <ES> <C> municipality of the Netherlands </C> whose <A> Amsterdam code </A> is text <V> 11157 </V> </ES> whose <A> Amsterdam code </A> is text <V> 11157 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"municipality of the Netherlands\" . ?e <Amsterdam code> ?pv_1 . ?pv_1 <pred:value> \"11157\" . ?e <Amsterdam code> ?pv . ?pv <pred:value> \"11157\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "514": {
        "generations": "Is there a railway station with an Amtrak station code of \"brl\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> railway station </C> whose <A> Amtrak station code </A> is text <V> brl </V> </ES> whose <A> Amtrak station code </A> is text <V> brl </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"railway station\" . ?e <Amtrak station code> ?pv_1 . ?pv_1 <pred:value> \"brl\" . ?e <Amtrak station code> ?pv . ?pv <pred:value> \"brl\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "515": {
        "generations": "Is there a software that has an Arch Linux package named \"mesa\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> software </C> whose <A> Arch\u00a0Linux package </A> is text <V> mesa </V> </ES> whose <A> Arch\u00a0Linux package </A> is text <V> mesa </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"software\" . ?e <Arch\u00a0Linux package> ?pv_1 . ?pv_1 <pred:value> \"mesa\" . ?e <Arch\u00a0Linux package> ?pv . ?pv <pred:value> \"mesa\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "516": {
        "generations": "Is Super Smash Bros. Brawl an entertainment with a Bulbapedia article that matches its name?",
        "ori_data_item": {
            "question": "whether <ES> <C> entertainment </C> whose <A> Bulbapedia article </A> is text <V> Super Smash Bros. Brawl </V> </ES> whose <A> Bulbapedia article </A> is text <V> Super Smash Bros. Brawl </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"entertainment\" . ?e <Bulbapedia article> ?pv_1 . ?pv_1 <pred:value> \"Super Smash Bros. Brawl\" . ?e <Bulbapedia article> ?pv . ?pv <pred:value> \"Super Smash Bros. Brawl\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "517": {
        "generations": "Is there a family name with a Caverphone code of TFS111?",
        "ori_data_item": {
            "question": "whether <ES> <C> family name </C> whose <A> Caverphone </A> is text <V> TFS111 </V> </ES> whose <A> Caverphone </A> is text <V> TFS111 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"family name\" . ?e <Caverphone> ?pv_1 . ?pv_1 <pred:value> \"TFS111\" . ?e <Caverphone> ?pv . ?pv <pred:value> \"TFS111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "518": {
        "generations": "Is there a technology with a Classification of Instructional Programs code of 11.0103?",
        "ori_data_item": {
            "question": "whether <ES> <C> technology </C> whose <A> Classification of Instructional Programs code </A> is text <V> 11.0103 </V> </ES> whose <A> Classification of Instructional Programs code </A> is text <V> 11.0103 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"technology\" . ?e <Classification of Instructional Programs code> ?pv_1 . ?pv_1 <pred:value> \"11.0103\" . ?e <Classification of Instructional Programs code> ?pv . ?pv <pred:value> \"11.0103\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "519": {
        "generations": "Is the video game publisher with Corporate Number (Japan) 1011001060972 the same as the one with Corporate Number (Japan) 1011001060972?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game publisher </C> whose <A> Corporate Number (Japan) </A> is text <V> 1011001060972 </V> </ES> whose <A> Corporate Number (Japan) </A> is text <V> 1011001060972 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game publisher\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"1011001060972\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"1011001060972\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "520": {
        "generations": "Does the class of instruments with Common Procurement Vocabulary 37316600 have Common Procurement Vocabulary 37316600?",
        "ori_data_item": {
            "question": "whether <ES> <C> class of instruments </C> whose <A> Common Procurement Vocabulary </A> is text <V> 37316600 </V> </ES> whose <A> Common Procurement Vocabulary </A> is text <V> 37316600 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <Common Procurement Vocabulary> ?pv_1 . ?pv_1 <pred:value> \"37316600\" . ?e <Common Procurement Vocabulary> ?pv . ?pv <pred:value> \"37316600\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "521": {
        "generations": "Does the political ideology with a Debian stable package of anarchism have another Debian stable package of anarchism?",
        "ori_data_item": {
            "question": "whether <ES> <C> political ideology </C> whose <A> Debian stable package </A> is text <V> anarchism </V> </ES> whose <A> Debian stable package </A> is text <V> anarchism </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"political ideology\" . ?e <Debian stable package> ?pv_1 . ?pv_1 <pred:value> \"anarchism\" . ?e <Debian stable package> ?pv . ?pv <pred:value> \"anarchism\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "522": {
        "generations": "Is the metropolitan borough's Dewey Decimal Classification equal to \"2--42817\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan borough </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--42817 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--42817 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan borough\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--42817\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--42817\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "523": {
        "generations": "Does the taxon with EPPO Code 1CICHF have the same EPPO Code as its own identifier?",
        "ori_data_item": {
            "question": "whether <ES> <C> taxon </C> whose <A> EPPO Code </A> is text <V> 1CICHF </V> </ES> whose <A> EPPO Code </A> is text <V> 1CICHF </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"taxon\" . ?e <EPPO Code> ?pv_1 . ?pv_1 <pred:value> \"1CICHF\" . ?e <EPPO Code> ?pv . ?pv <pred:value> \"1CICHF\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "524": {
        "generations": "Is there a national association football team with a FIFA country code of DEN?",
        "ori_data_item": {
            "question": "whether <ES> <C> national association football team </C> whose <A> FIFA country code </A> is text <V> DEN </V> </ES> whose <A> FIFA country code </A> is text <V> DEN </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"national association football team\" . ?e <FIFA country code> ?pv_1 . ?pv_1 <pred:value> \"DEN\" . ?e <FIFA country code> ?pv . ?pv <pred:value> \"DEN\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "525": {
        "generations": "Is the TV production company with a Giphy username of \"fx\" also named \"fx\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> TV production company </C> whose <A> Giphy username </A> is text <V> fx </V> </ES> whose <A> Giphy username </A> is text <V> fx </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"TV production company\" . ?e <Giphy username> ?pv_1 . ?pv_1 <pred:value> \"fx\" . ?e <Giphy username> ?pv . ?pv <pred:value> \"fx\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "526": {
        "generations": "Is the electric piano classified as Hornbostel-Sachs 511?",
        "ori_data_item": {
            "question": "whether <ES> <C> electric piano </C> whose <A> Hornbostel-Sachs classification </A> is text <V> 511 </V> </ES> whose <A> Hornbostel-Sachs classification </A> is text <V> 511 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"electric piano\" . ?e <Hornbostel-Sachs classification> ?pv_1 . ?pv_1 <pred:value> \"511\" . ?e <Hornbostel-Sachs classification> ?pv . ?pv <pred:value> \"511\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "527": {
        "generations": "Is the currency with the HTML entity \"&euro;\" also represented by \"&euro;\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> currency </C> whose <A> HTML entity </A> is text <V> &euro; </V> </ES> whose <A> HTML entity </A> is text <V> &euro; </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"currency\" . ?e <HTML entity> ?pv_1 . ?pv_1 <pred:value> \"&euro;\" . ?e <HTML entity> ?pv . ?pv <pred:value> \"&euro;\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "528": {
        "generations": "When did Boston (the one with a population of 617594.0) become a part of the United States of America (which was founded on 1776-07-04)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <ES> <E> Boston </E> whose <A> population </A> is number <V> 617594.0 </V> </ES> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> inception </A> is date <V> 1776-07-04 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double . ?e_2 <pred:name> \"United States of America\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1776-07-04\"^^xsd:date . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "529": {
        "generations": "Who was the voice actor for Fred Astaire in Top Hat?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> voice actor </Q> of <E> Top Hat </E> that <R> cast member </R> backward to <E> Fred Astaire </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Top Hat\" . ?e_2 <pred:name> \"Fred Astaire\" . ?e_1 <cast member> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <cast member> ; <pred:fact_t> ?e_2 ] <voice actor> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "530": {
        "generations": "When did Unforgiven win the Academy Award for Best Picture?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <E> Unforgiven </E> that <R> award received </R> backward to <E> Academy Award for Best Picture </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Unforgiven\" . ?e_2 <pred:name> \"Academy Award for Best Picture\" . ?e_1 <award received> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <award received> ; <pred:fact_t> ?e_2 ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "531": {
        "generations": "What political party was John McCain a member of during the United States presidential election in 2008?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> member of political party </Q> of <E> United States presidential election, 2008 </E> that <R> candidate </R> backward to <E> John McCain </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"United States presidential election, 2008\" . ?e_2 <pred:name> \"John McCain\" . ?e_1 <candidate> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <candidate> ; <pred:fact_t> ?e_2 ] <member of political party> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "532": {
        "generations": "What is the instance of the Orkney Islands, which is a part of the North Sea?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> instance of </Q> of <E> North Sea </E> that <R> has part </R> backward to <E> Orkney Islands </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"North Sea\" . ?e_2 <pred:name> \"Orkney Islands\" . ?e_1 <has part> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <has part> ; <pred:fact_t> ?e_2 ] <instance of> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "533": {
        "generations": "What were the last words of George H. W. Bush and who was the addressee (the one whose number of children is 6.0)?",
        "ori_data_item": {
            "question": "whether <ES> <E> George H. W. Bush </E> whose <A> number of children </A> is number <V> 6.0 </V> </ES> whose <A> last words </A> is text <V> I love you, too. </V> ( <Q> addressee </Q> is text <V> George W. Bush </V> )",
            "sparql": "ASK { ?e <pred:name> \"George H. W. Bush\" . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.0\"^^xsd:double . ?e <last words> ?pv . ?pv <pred:value> \"I love you, too.\" . [ <pred:fact_h> ?e ; <pred:fact_r> <last words> ; <pred:fact_t> ?pv ] <addressee> ?qpv . ?qpv <pred:value> \"George W. Bush\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "534": {
        "generations": "During which period did Alabama have a population of 2.64625e+06 and was nicknamed \"The Yellowhammer State\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Alabama </E> whose <A> population </A> is number <V> 2.64625e+06 </V> </ES> whose <A> nickname </A> is text <V> The Yellowhammer State </V> ( <Q> start period </Q> is text <V> American Civil War </V> )",
            "sparql": "ASK { ?e <pred:name> \"Alabama\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.64625e+06\"^^xsd:double . ?e <nickname> ?pv . ?pv <pred:value> \"The Yellowhammer State\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nickname> ; <pred:fact_t> ?pv ] <start period> ?qpv . ?qpv <pred:value> \"American Civil War\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "535": {
        "generations": "Is the population of Rio de Janeiro 6.52027e+06 and does it have a Human Development Index of 0.799 (with a unit of 1) and a Brazilian municipality code of 2017?",
        "ori_data_item": {
            "question": "whether <ES> <E> Rio de Janeiro </E> whose <A> Human Development Index </A> is number <V> 0.799 </V> </ES> whose <A> population </A> is text <V> 6.52027e+06 </V> ( <Q> Brazilian municipality code </Q> is text <V> 2017 </V> )",
            "sparql": "ASK { ?e <pred:name> \"Rio de Janeiro\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.799\"^^xsd:double . ?e <population> ?pv . ?pv <pred:value> \"6.52027e+06\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <Brazilian municipality code> ?qpv . ?qpv <pred:value> \"2017\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "536": {
        "generations": "What is the official website of Vodafone and how many employees does it have in the United Kingdom?",
        "ori_data_item": {
            "question": "whether <ES> <E> Vodafone </E> whose <A> employees </A> is number <V> 107667.0 </V> </ES> whose <A> official website </A> is text <V> https://www.vodafone.co.uk/ </V> ( <Q> applies to jurisdiction </Q> is text <V> United Kingdom </V> )",
            "sparql": "ASK { ?e <pred:name> \"Vodafone\" . ?e <employees> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"107667.0\"^^xsd:double . ?e <official website> ?pv . ?pv <pred:value> \"https://www.vodafone.co.uk/\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <applies to jurisdiction> ?qpv . ?qpv <pred:value> \"United Kingdom\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "537": {
        "generations": "What is the language of work or name for the higher education institution with an official website of http://www.louisiana.edu and a student count of 17075.0?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <C> higher education institution </C> whose <A> students count </A> is text <V> 17075.0 </V> </ES> whose <A> official website </A> is text <V> http://www.louisiana.edu </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"higher education institution\" . ?e <students count> ?pv_1 . ?pv_1 <pred:value> \"17075.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <students count> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:unit> \"1\" . ?qpv_1 <pred:value> \"17075.0\"^^xsd:double . ?e <official website> ?pv . ?pv <pred:value> \"http://www.louisiana.edu\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "538": {
        "generations": "What is the number of representatives in an organization/legislature for the first-level administrative country subdivision whose number of representatives is 135.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> number of representatives in an organization/legislature </A> of <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> is number <V> 135.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"135.0\"^^xsd:double . ?e <number of representatives in an organization/legislature> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "539": {
        "generations": "What is the Alexa rank of the Primetime Emmy Award?",
        "ori_data_item": {
            "question": "what is the attribute <A> Alexa rank </A> of <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> is number <V> 126668.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"126668.0\"^^xsd:double . ?e <Alexa rank> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "540": {
        "generations": "What is the Human Development Index of the form of government that has an HDI of 0.424?",
        "ori_data_item": {
            "question": "what is the attribute <A> Human Development Index </A> of <ES> <C> form of government </C> whose <A> Human Development Index </A> is number <V> 0.424 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"form of government\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.424\"^^xsd:double . ?e <Human Development Index> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "541": {
        "generations": "Is there a subreddit named \"VHS\" that is related to the entity named \"VHS\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> VHS </E> whose <A> subreddit </A> is text <V> VHS </V> </ES> whose <A> subreddit </A> is text <V> VHS </V> ( <Q> pred:fact t </Q> is text <V> VHS </V> )",
            "sparql": "ASK { ?e <pred:name> \"VHS\" . ?e <subreddit> ?pv_1 . ?pv_1 <pred:value> \"VHS\" . ?e <subreddit> ?pv . ?pv <pred:value> \"VHS\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"VHS\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "542": {
        "generations": "Which city of the United States has an area of 15.661?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 15.661 </V> </ES> and <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 15.661 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv . ?pv <pred:value> \"15.661\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "543": {
        "generations": "Which film has a duration of 160.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> and <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "544": {
        "generations": "Which town has an OS grid reference of SK245225?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> town </C> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> and <ES> <C> town </C> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"town\" . ?e <OS grid reference> ?pv . ?pv <pred:value> \"SK245225\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "545": {
        "generations": "Which real property has OSM tag or key \"Tag:shop=art\" twice?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> and <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "546": {
        "generations": "Which film has a box office of 8.96911e+08?",
        "ori_data_item": {
            "question": "what is <ES> <C> film </C> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "547": {
        "generations": "Which form of government has a Human Development Index of 0.424?",
        "ori_data_item": {
            "question": "what is <ES> <C> form of government </C> whose <A> Human Development Index </A> is number <V> 0.424 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"form of government\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.424\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "548": {
        "generations": "Which city of the United States has a population of 41863.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> city of the United States </C> whose <A> population </A> is number <V> 41863.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"41863.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "549": {
        "generations": "Who is the human with 2 children?",
        "ori_data_item": {
            "question": "what is <ES> <C> human </C> whose <A> number of children </A> is number <V> 2.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "550": {
        "generations": "Which higher education institution has 4512 students?",
        "ori_data_item": {
            "question": "what is <ES> <C> higher education institution </C> whose <A> students count </A> is number <V> 4512.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"higher education institution\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"4512.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "551": {
        "generations": "Which association football club has a member count of 34750.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> association football club </C> whose <A> member count </A> is number <V> 34750.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"association football club\" . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"34750.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "552": {
        "generations": "Which theatrical genre has only one episode with a duration of 58.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> theatrical genre </C> whose <A> number of episodes </A> is number <V> 58.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"58.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "553": {
        "generations": "Which state of India has a female population of 2.89484e+07?",
        "ori_data_item": {
            "question": "what is <ES> <C> state of India </C> whose <A> female population </A> is number <V> 2.89484e+07 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"state of India\" . ?e <female population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.89484e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "554": {
        "generations": "Which video game console model has sold 1.5368e+08 units?",
        "ori_data_item": {
            "question": "what is <ES> <C> video game console model </C> whose <A> units sold </A> is number <V> 1.5368e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.5368e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "555": {
        "generations": "Which planet is considered an inner planet and has an orbital eccentricity of 0.0933941?",
        "ori_data_item": {
            "question": "what is <ES> <C> inner planet </C> whose <A> orbital eccentricity </A> is number <V> 0.0933941 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"inner planet\" . ?e <orbital eccentricity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.0933941\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "556": {
        "generations": "Which disease has caused 143,000 deaths?",
        "ori_data_item": {
            "question": "what is <ES> <C> disease </C> whose <A> number of deaths </A> is number <V> 143000.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <number of deaths> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"143000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "557": {
        "generations": "Which cemetery has 119216 graves?",
        "ori_data_item": {
            "question": "what is <ES> <C> cemetery </C> whose <A> number of graves </A> is number <V> 119216.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"cemetery\" . ?e <number of graves> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"119216.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "558": {
        "generations": "Which language has 7.06069e+07 speakers?",
        "ori_data_item": {
            "question": "what is <ES> <C> language </C> whose <A> number of speakers </A> is number <V> 7.06069e+07 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"language\" . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"7.06069e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "559": {
        "generations": "Which feature film has an attendance of 1.35985e+06?",
        "ori_data_item": {
            "question": "what is <ES> <C> feature film </C> whose <A> attendance </A> is number <V> 1.35985e+06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"feature film\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.35985e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "560": {
        "generations": "Which facility has 5.24 million visitors per year?",
        "ori_data_item": {
            "question": "what is <ES> <C> facility </C> whose <A> visitors per year </A> is number <V> 5.24e+06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"facility\" . ?e <visitors per year> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"5.24e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "561": {
        "generations": "Which anthology has 218.0 pages?",
        "ori_data_item": {
            "question": "what is <ES> <C> anthology </C> whose <A> number of pages </A> is number <V> 218.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"anthology\" . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"218.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "562": {
        "generations": "Which aircraft functional class has a total production of 1527.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> aircraft functional class </C> whose <A> total produced </A> is number <V> 1527.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "563": {
        "generations": "Which medal has a quantity of 1 and a value of 3493.0?",
        "ori_data_item": {
            "question": "what is <ES> <C> medal </C> whose <A> quantity </A> is number <V> 3493.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"medal\" . ?e <quantity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"3493.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "564": {
        "generations": "What is the Dewey Decimal Classification of the sovereign state whose nominal GDP was 1.13963e+10 on 1992-01-01?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 1.13963e+10 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"1.13963e+10\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"1992-01-01\"^^xsd:date . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "565": {
        "generations": "What is the work that the film with exploitation visa number 54231 is based on and when did the exploitation visa start?",
        "ori_data_item": {
            "question": "what is the attribute <A> based on </A> of <ES> <C> film </C> whose <A> exploitation visa number </A> is text <V> 54231 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <exploitation visa number> ?pv_1 . ?pv_1 <pred:value> \"54231\" . [ <pred:fact_h> ?e ; <pred:fact_r> <exploitation visa number> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"1981-05-20\"^^xsd:date . ?e <based on> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "566": {
        "generations": "What is the connection between Liberia (the one with a Human Development Index of 0.424) to Liberia (the one with a Human Development Index of 0.424)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Liberia </E> whose <A> Human Development Index </A> is number <V> 0.424 </V> </ES> to <ES> <E> Liberia </E> whose <A> Human Development Index </A> is number <V> 0.424 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Liberia\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.424\"^^xsd:double . ?e_2 <pred:name> \"Liberia\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.424\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "567": {
        "generations": "Which city of the United States has an area of 2.32141e+08?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 2.32141e+08 </V> </ES> and <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 2.32141e+08 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv . ?pv <pred:value> \"2.32141e+08\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"2.32141e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "568": {
        "generations": "Which film has a duration of 160.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> and <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "569": {
        "generations": "Which sovereign state has a Human Development Index of 0.452?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is text <V> 0.452 </V> </ES> and <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is text <V> 0.452 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv . ?pv <pred:value> \"0.452\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.452\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "570": {
        "generations": "Which real property has OSM tag or key \"Tag:shop=art\" twice?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> and <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "571": {
        "generations": "Which entity is related to the Stack Exchange tag \"https://engineering.stackexchange.com/tags/mechanical-engineering\" in two different ways under the instance of \"engineering\"?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> engineering </C> whose <A> Stack Exchange tag </A> is text <V> https://engineering.stackexchange.com/tags/mechanical-engineering </V> </ES> and <ES> <C> engineering </C> whose <A> Stack Exchange tag </A> is text <V> https://engineering.stackexchange.com/tags/mechanical-engineering </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"engineering\" . ?e <Stack Exchange tag> ?pv . ?pv <pred:value> \"https://engineering.stackexchange.com/tags/mechanical-engineering\" . ?e <Stack Exchange tag> ?pv_1 . ?pv_1 <pred:value> \"https://engineering.stackexchange.com/tags/mechanical-engineering\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "572": {
        "generations": "Which class of instruments has an MCN code of 8306.10.00?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> class of instruments </C> whose <A> MCN code </A> is text <V> 8306.10.00 </V> </ES> and <ES> <C> class of instruments </C> whose <A> MCN code </A> is text <V> 8306.10.00 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <MCN code> ?pv . ?pv <pred:value> \"8306.10.00\" . ?e <MCN code> ?pv_1 . ?pv_1 <pred:value> \"8306.10.00\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "573": {
        "generations": "Which political party has a member count of 1.1e+08?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> political party </C> whose <A> member count </A> is text <V> 1.1e+08 </V> </ES> and <ES> <C> political party </C> whose <A> member count </A> is text <V> 1.1e+08 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <member count> ?pv . ?pv <pred:value> \"1.1e+08\" . ?e <member count> ?pv_1 . ?pv_1 <pred:value> \"1.1e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "574": {
        "generations": "Which Golden Globe Award ceremony has an edition number of 60?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> Golden Globe Award ceremony </C> whose <A> edition number </A> is text <V> 60 </V> </ES> and <ES> <C> Golden Globe Award ceremony </C> whose <A> edition number </A> is text <V> 60 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Golden Globe Award ceremony\" . ?e <edition number> ?pv . ?pv <pred:value> \"60\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"60\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "575": {
        "generations": "Which cruise ship has an IMO ship number of 5059953?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> cruise ship </C> whose <A> IMO ship number </A> is text <V> 5059953 </V> </ES> and <ES> <C> cruise ship </C> whose <A> IMO ship number </A> is text <V> 5059953 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"cruise ship\" . ?e <IMO ship number> ?pv . ?pv <pred:value> \"5059953\" . ?e <IMO ship number> ?pv_1 . ?pv_1 <pred:value> \"5059953\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "576": {
        "generations": "What activity is associated with the PhilPapers topic of heterosexuality?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> activity </C> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> and <ES> <C> activity </C> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "577": {
        "generations": "Which video game developer has a Corporate Number (Japan) of 6120901008215?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> video game developer </C> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V> </ES> and <ES> <C> video game developer </C> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game developer\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"6120901008215\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"6120901008215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "578": {
        "generations": "Which metropolitan area has a nighttime view of \"Long Beach, CA at night.jpg\"?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan area </C> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V> </ES> and <ES> <C> metropolitan area </C> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <nighttime view> ?pv . ?pv <pred:value> \"Long Beach, CA at night.jpg\" . ?e <nighttime view> ?pv_1 . ?pv_1 <pred:value> \"Long Beach, CA at night.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "579": {
        "generations": "Which boarding school has a Charity Commission number of 1139000?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> boarding school </C> whose <A> Charity Commission no. </A> is text <V> 1139000 </V> </ES> and <ES> <C> boarding school </C> whose <A> Charity Commission no. </A> is text <V> 1139000 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"boarding school\" . ?e <Charity Commission no.> ?pv . ?pv <pred:value> \"1139000\" . ?e <Charity Commission no.> ?pv_1 . ?pv_1 <pred:value> \"1139000\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "580": {
        "generations": "Which female given name has a Soundex code of A660?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> female given name </C> whose <A> Soundex </A> is text <V> A660 </V> </ES> and <ES> <C> female given name </C> whose <A> Soundex </A> is text <V> A660 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"female given name\" . ?e <Soundex> ?pv . ?pv <pred:value> \"A660\" . ?e <Soundex> ?pv_1 . ?pv_1 <pred:value> \"A660\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "581": {
        "generations": "Which biological process has a spoken text audio with the value \"Simple en Evolution.oga\"?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> biological process </C> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V> </ES> and <ES> <C> biological process </C> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"biological process\" . ?e <spoken text audio> ?pv . ?pv <pred:value> \"Simple en Evolution.oga\" . ?e <spoken text audio> ?pv_1 . ?pv_1 <pred:value> \"Simple en Evolution.oga\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "582": {
        "generations": "Which television series episode has a production code of 111 twice?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> television series episode </C> whose <A> production code </A> is text <V> 111 </V> </ES> and <ES> <C> television series episode </C> whose <A> production code </A> is text <V> 111 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series episode\" . ?e <production code> ?pv . ?pv <pred:value> \"111\" . ?e <production code> ?pv_1 . ?pv_1 <pred:value> \"111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "583": {
        "generations": "Which body fluid has a UMLS CUI of C0229671?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> body fluid </C> whose <A> UMLS CUI </A> is text <V> C0229671 </V> </ES> and <ES> <C> body fluid </C> whose <A> UMLS CUI </A> is text <V> C0229671 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"body fluid\" . ?e <UMLS CUI> ?pv . ?pv <pred:value> \"C0229671\" . ?e <UMLS CUI> ?pv_1 . ?pv_1 <pred:value> \"C0229671\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "584": {
        "generations": "Which currency has an ISO 4217 code of CAD?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> currency </C> whose <A> ISO 4217 code </A> is text <V> CAD </V> </ES> and <ES> <C> currency </C> whose <A> ISO 4217 code </A> is text <V> CAD </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"currency\" . ?e <ISO 4217 code> ?pv . ?pv <pred:value> \"CAD\" . ?e <ISO 4217 code> ?pv_1 . ?pv_1 <pred:value> \"CAD\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "585": {
        "generations": "Which disease has an ICD-9-CM code of 332?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> disease </C> whose <A> ICD-9-CM </A> is text <V> 332 </V> </ES> and <ES> <C> disease </C> whose <A> ICD-9-CM </A> is text <V> 332 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <ICD-9-CM> ?pv . ?pv <pred:value> \"332\" . ?e <ICD-9-CM> ?pv_1 . ?pv_1 <pred:value> \"332\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "586": {
        "generations": "Which inner planet is 4.01e+08 distance from Earth?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> inner planet </C> whose <A> distance from Earth </A> is text <V> 4.01e+08 </V> </ES> and <ES> <C> inner planet </C> whose <A> distance from Earth </A> is text <V> 4.01e+08 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"inner planet\" . ?e <distance from Earth> ?pv . ?pv <pred:value> \"4.01e+08\" . ?e <distance from Earth> ?pv_1 . ?pv_1 <pred:value> \"4.01e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "587": {
        "generations": "Does Cameroon have a subreddit with the value \"Cameroon\" and a Human Development Index of 0.436?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> whose <A> subreddit </A> is text <V> Cameroon </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e <subreddit> ?pv . ?pv <pred:value> \"Cameroon\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "588": {
        "generations": "Did Harry Potter and the Goblet of Fire earn 8.96911e+08 in box office revenue and have a title of \"Harry Potter and the Goblet of Fire\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> title </A> is text <V> Harry Potter and the Goblet of Fire </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <title> ?pv . ?pv <pred:value> \"Harry Potter and the Goblet of Fire\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "589": {
        "generations": "Is the population of Boston 617,594 and does it have a native label of Boston?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> population </A> is number <V> 617594.0 </V> </ES> whose <A> native label </A> is text <V> Boston </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"617594.0\"^^xsd:double . ?e <native label> ?pv . ?pv <pred:value> \"Boston\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "590": {
        "generations": "Does Fred Astaire have 2 children and is Fred Astaire his name in native language?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> number of children </A> is number <V> 2.0 </V> </ES> whose <A> name in native language </A> is text <V> Fred Astaire </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.0\"^^xsd:double . ?e <name in native language> ?pv . ?pv <pred:value> \"Fred Astaire\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "591": {
        "generations": "Is the city of the United States, whose inception date is 1630-09-07 and population is 617594, in the knowledge graph?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> population </A> is number <V> 617594.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "592": {
        "generations": "Did the person born on 1899-05-10 have 2 children?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1899-05-10\"^^xsd:date . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "593": {
        "generations": "Did the film with a publication date of 2005-11-06 and a box office of 8.96911e+08 belong to the \"film\" category?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2005-11-06 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-06\"^^xsd:date . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "594": {
        "generations": "Does the theatrical genre with an end time of 1968-03-25 and one episode lasting 58.0 units exist?",
        "ori_data_item": {
            "question": "whether <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES> whose <A> number of episodes </A> is number <V> 58.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1968-03-25\"^^xsd:date . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"58.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "595": {
        "generations": "Was the video game console model that was discontinued on 2013-01-04 and sold 1.5368e+08 units?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game console model </C> whose <A> discontinued date </A> is date <V> 2013-01-04 </V> </ES> whose <A> units sold </A> is number <V> 1.5368e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <discontinued date> ?pv_1 . ?pv_1 <pred:date> \"2013-01-04\"^^xsd:date . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.5368e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "596": {
        "generations": "Is the aircraft functional class with a first flight on 1969-02-09 and a total production of 1527.0 units?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES> whose <A> total produced </A> is number <V> 1527.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <first flight> ?pv_1 . ?pv_1 <pred:date> \"1969-02-09\"^^xsd:date . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "597": {
        "generations": "When did Boston (whose population is 617594) become a part of the United States of America (the one whose CANTIC-ID is a11444253)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <ES> <E> Boston </E> whose <A> population </A> is number <V> 617594.0 </V> </ES> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> CANTIC-ID </A> is text <V> a11444253 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double . ?e_2 <pred:name> \"United States of America\" . ?e_2 <CANTIC-ID> ?pv_1 . ?pv_1 <pred:value> \"a11444253\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "598": {
        "generations": "What is the position played on team/speciality of the human born on 1982-09-16?",
        "ori_data_item": {
            "question": "what is the attribute <A> position played on team / speciality </A> of <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1982-09-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1982-09-16\"^^xsd:date . ?e <position played on team / speciality> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "599": {
        "generations": "What is the work that was created after another work and has a publication date of 2005-11-16, and what is the name of the original work?",
        "ori_data_item": {
            "question": "what is the attribute <A> after a work by </A> of <ES> <C> visual artwork </C> whose <A> publication date </A> is date <V> 2005-11-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"visual artwork\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-16\"^^xsd:date . ?e <after a work by> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "600": {
        "generations": "What is the Human Development Index of Cameroon (the one whose inception is 1960-01-01) and what is the predicate of the fact connecting it to Cameroon as a country?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Cameroon </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> that <R> country </R> backward to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.486 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.486\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "601": {
        "generations": "Does Ipswich have a population greater than arg4 and an elevation above sea level of 50.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Ipswich </E> whose <A> elevation above sea level </A> is text <V> 50.0 </V> </ES> whose <A> population </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ipswich\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"50.0\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "602": {
        "generations": "Does the University of Santo Tomas, whose ISNI is 0000 0004 1937 1119, have a student count greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> University of Santo Tomas </E> whose <A> ISNI </A> is text <V> 0000 0004 1937 1119 </V> </ES> whose <A> students count </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"University of Santo Tomas\" . ?e <ISNI> ?pv_1 . ?pv_1 <pred:value> \"0000 0004 1937 1119\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "603": {
        "generations": "Does Yu-Gi-Oh! Duel Monsters have more than 224 episodes and a unit of 1 with a value greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> Yu-Gi-Oh! Duel Monsters </E> whose <A> number of episodes </A> is text <V> 224.0 </V> </ES> whose <A> number of episodes </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Yu-Gi-Oh! Duel Monsters\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"224.0\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "604": {
        "generations": "Does the Legislative Assembly of Ontario have more than 107 constituencies, where each constituency has a value greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Legislative Assembly of Ontario </E> whose <A> number of constituencies </A> is text <V> 107.0 </V> </ES> whose <A> number of constituencies </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Legislative Assembly of Ontario\" . ?e <number of constituencies> ?pv_1 . ?pv_1 <pred:value> \"107.0\" . ?e <number of constituencies> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "605": {
        "generations": "Does Kensal Green Cemetery have more than one burial (the one with National Heritage List for England number 1080633)?",
        "ori_data_item": {
            "question": "whether <ES> <E> Kensal Green Cemetery </E> whose <A> National Heritage List for England number </A> is text <V> 1080633 </V> </ES> whose <A> quantity buried </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Kensal Green Cemetery\" . ?e <National Heritage List for England number> ?pv_1 . ?pv_1 <pred:value> \"1080633\" . ?e <quantity buried> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "606": {
        "generations": "Does the Boeing 747 have a stall speed of 250.0 and has produced more than arg4 units?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boeing 747 </E> whose <A> stall speed </A> is text <V> 250.0 </V> </ES> whose <A> total produced </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <stall speed> ?pv_1 . ?pv_1 <pred:value> \"250.0\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "607": {
        "generations": "Does The New York Times Company have an Alexa rank greater than 143242.0 and a unit of 1 with a value greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> The New York Times Company </E> whose <A> Alexa rank </A> is text <V> 143242.0 </V> </ES> whose <A> Alexa rank </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"The New York Times Company\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"143242.0\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "608": {
        "generations": "Does the book \"Planet of the Apes\" with ISBN-13 978-4-488-63201-4 have more than arg4 pages?",
        "ori_data_item": {
            "question": "whether <ES> <E> Planet of the Apes </E> whose <A> ISBN-13 </A> is text <V> 978-4-488-63201-4 </V> </ES> whose <A> number of pages </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Planet of the Apes\" . ?e <ISBN-13> ?pv_1 . ?pv_1 <pred:value> \"978-4-488-63201-4\" . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "609": {
        "generations": "Does Genesis have an attendance greater than 1.43e+07 and another attendance greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> Genesis </E> whose <A> attendance </A> is text <V> 1.43e+07 </V> </ES> whose <A> attendance </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Genesis\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:value> \"1.43e+07\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "610": {
        "generations": "Did the United States presidential election in 2008 have more than 2.13314e+08 eligible voters with a unit of 1 and a value greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <E> United States presidential election, 2008 </E> whose <A> eligible voters </A> is text <V> 2.13314e+08 </V> </ES> whose <A> eligible voters </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"United States presidential election, 2008\" . ?e <eligible voters> ?pv_1 . ?pv_1 <pred:value> \"2.13314e+08\" . ?e <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "611": {
        "generations": "Did the 2008 Tour de France have more than arg4 participants and an edition number of 95?",
        "ori_data_item": {
            "question": "whether <ES> <E> 2008 Tour de France </E> whose <A> edition number </A> is text <V> 95 </V> </ES> whose <A> number of participants </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"2008 Tour de France\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"95\" . ?e <number of participants> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "612": {
        "generations": "Does Sinhala have more than arg4 speakers and an Ethnologue.com language code of sin?",
        "ori_data_item": {
            "question": "whether <ES> <E> Sinhala </E> whose <A> Ethnologue.com language code </A> is text <V> sin </V> </ES> whose <A> number of speakers </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Sinhala\" . ?e <Ethnologue.com language code> ?pv_1 . ?pv_1 <pred:value> \"sin\" . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "613": {
        "generations": "Does Logan International Airport have a patronage greater than arg4 and an FAA airport code of BOS?",
        "ori_data_item": {
            "question": "whether <ES> <E> Logan International Airport </E> whose <A> FAA airport code </A> is text <V> BOS </V> </ES> whose <A> patronage </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Logan International Airport\" . ?e <FAA airport code> ?pv_1 . ?pv_1 <pred:value> \"BOS\" . ?e <patronage> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "614": {
        "generations": "What is the connection between Ivory Coast (the one with Dewey Decimal Classification of 2--6668) and Ivory Coast (the one with a Human Development Index of 0.444)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.444 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.444\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "615": {
        "generations": "What is the area of the U.S. city whose population is 25514.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> area </A> of <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <area> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "616": {
        "generations": "Which sovereign state has a Human Development Index less than arg1, was founded on 1931-12-09, has a basic form of government as a republic, and what is its name?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> Human Development Index </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> sovereign state </C> whose <A> inception </A> is date <V> 1931-12-09 </V> </ES> ( <Q> basic form of government </Q> is text <V> republic </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1931-12-09\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <inception> ; <pred:fact_t> ?pv_1 ] <basic form of government> ?qpv . ?qpv <pred:value> \"republic\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "617": {
        "generations": "What miniseries was published on 1990-11-18 in the United States of America, has only one season, and has a number of seasons less than arg1?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> miniseries </C> whose <A> number of seasons </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> miniseries </C> whose <A> publication date </A> is date <V> 1990-11-18 </V> </ES> ( <Q> country </Q> is text <V> United States of America </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"miniseries\" . ?e <number of seasons> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"1990-11-18\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <country> ?qpv . ?qpv <pred:value> \"United States of America\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "618": {
        "generations": "Who died on 2018-11-30, had less than arg1 children, and was located in the Central Time Zone?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> number of children </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> human </C> whose <A> date of death </A> is date <V> 2018-11-30 </V> </ES> ( <Q> located in time zone </Q> is text <V> Central Time Zone </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <date of death> ?pv_1 . ?pv_1 <pred:date> \"2018-11-30\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <date of death> ; <pred:fact_t> ?pv_1 ] <located in time zone> ?qpv . ?qpv <pred:value> \"Central Time Zone\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "619": {
        "generations": "What is the area of the U.S. city whose population is 25514.0 and has an area of 37.5618?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> whose <A> area </A> is text <V> 37.5618 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <area> ?pv . ?pv <pred:value> \"37.5618\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "620": {
        "generations": "Which film has a box office greater than arg1 and a cost of 1.5e+08?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> box office </A> larger than number <V> arg1 </V> </ES> and <ES> <C> film </C> whose <A> cost </A> is text <V> 1.5e+08 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <cost> ?pv_1 . ?pv_1 <pred:value> \"1.5e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "621": {
        "generations": "Which city of the United States has a population greater than arg1 and a WOEID of 2475403?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> city of the United States </C> whose <A> WOEID </A> is text <V> 2475403 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"2475403\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "622": {
        "generations": "Which television series has more than arg1 episodes and exactly 1710 episodes?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> television series </C> whose <A> number of episodes </A> larger than number <V> arg1 </V> </ES> and <ES> <C> television series </C> whose <A> number of episodes </A> is text <V> 1710.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"1710.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "623": {
        "generations": "Which agent has an Alexa rank greater than arg1 and a second Alexa rank of 380.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> agent </C> whose <A> Alexa rank </A> larger than number <V> arg1 </V> </ES> and <ES> <C> agent </C> whose <A> Alexa rank </A> is text <V> 380.0 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"380.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "624": {
        "generations": "Which video game console model has sold more than arg1 units and has a price of 299.99?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> video game console model </C> whose <A> units sold </A> larger than number <V> arg1 </V> </ES> and <ES> <C> video game console model </C> whose <A> price </A> is text <V> 299.99 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <price> ?pv_1 . ?pv_1 <pred:value> \"299.99\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "625": {
        "generations": "Which metropolitan area has a population of 6.155e+06 and a population greater than arg4?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 6.155e+06 </V> </ES> and <ES> <C> metropolitan area </C> whose <A> population </A> larger than number <V> arg4 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:value> \"6.155e+06\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "626": {
        "generations": "What is the language of work or name for the city of Summit's official website, which is http://www.cityofsummit.org/?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <E> Summit </E> whose <A> official website </A> is text <V> http://www.cityofsummit.org/ </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Summit\" . ?e <official website> ?pv . ?pv <pred:value> \"http://www.cityofsummit.org/\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "627": {
        "generations": "When did the Orkney Islands start having the NUTS code UKM65?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Orkney Islands </E> whose <A> NUTS code </A> is text <V> UKM65 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Orkney Islands\" . ?e <NUTS code> ?pv . ?pv <pred:value> \"UKM65\" . [ <pred:fact_h> ?e ; <pred:fact_r> <NUTS code> ; <pred:fact_t> ?pv ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "628": {
        "generations": "What is the subject's role for the TOID 4000000074552364 of Burton upon Trent?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> subject has role </Q> of <E> Burton upon Trent </E> whose <A> TOID </A> is text <V> 4000000074552364 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Burton upon Trent\" . ?e <TOID> ?pv . ?pv <pred:value> \"4000000074552364\" . [ <pred:fact_h> ?e ; <pred:fact_r> <TOID> ; <pred:fact_t> ?pv ] <subject has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "629": {
        "generations": "What is the legislative body for Bharatiya Janata Party, which has 117 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> legislative body </Q> of <E> Bharatiya Janata Party </E> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"117.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <number of representatives in an organization/legislature> ; <pred:fact_t> ?pv ] <legislative body> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "630": {
        "generations": "Was the film published in Germany on August 16, 2001 and has a duration of 98.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2001-08-16 </V> </ES> whose <A> duration </A> is text <V> 98.0 </V> ( <Q> place of publication </Q> is text <V> Germany </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2001-08-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" . ?e <duration> ?pv . ?pv <pred:value> \"98.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "631": {
        "generations": "Did the dynasty with a native label of Plantagen\u00eat end before January 1st, 1485 (according to a statement with Gregorian date earlier than 1584)?",
        "ori_data_item": {
            "question": "whether <ES> <C> dynasty </C> whose <A> dissolved, abolished or demolished </A> is date <V> 1485-01-01 </V> </ES> whose <A> native label </A> is text <V> Plantagen\u00eat </V> ( <Q> instance of </Q> is text <V> statement with Gregorian date earlier than 1584 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"dynasty\" . ?e <dissolved, abolished or demolished> ?pv_1 . ?pv_1 <pred:date> \"1485-01-01\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <dissolved, abolished or demolished> ; <pred:fact_t> ?pv_1 ] <instance of> ?qpv . ?qpv <pred:value> \"statement with Gregorian date earlier than 1584\" . ?e <native label> ?pv . ?pv <pred:value> \"Plantagen\u00eat\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "632": {
        "generations": "Did Pan Am operate the aircraft functional class that entered service on 1970-01-22 and had a total production of 1527.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> </ES> whose <A> total produced </A> is text <V> 1527.0 </V> ( <Q> operator </Q> is text <V> Pan Am </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <service entry> ?pv_1 . ?pv_1 <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv_1 ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" . ?e <total produced> ?pv . ?pv <pred:value> \"1527.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "633": {
        "generations": "What metropolitan area had a population of 2.71049e+06 on January 1st, 2014 and had a population greater than arg1?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan area </C> whose <A> population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 2.71049e+06 </V> </ES> ( <Q> point in time </Q> is date <V> 2014-01-01 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"2.71049e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "634": {
        "generations": "What film had an attendance greater than arg1 on 2018-05-30 and had an attendance of 8446.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> attendance </A> larger than number <V> arg1 </V> </ES> and <ES> <C> film </C> whose <A> attendance </A> is text <V> 8446.0 </V> </ES> ( <Q> start time </Q> is date <V> 2018-05-30 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv ] <start time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date . ?e <attendance> ?pv_1 . ?pv_1 <pred:value> \"8446.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "635": {
        "generations": "What is the country of the metropolitan area with a population of 6.155e+06?",
        "ori_data_item": {
            "question": "what is the attribute <A> country </A> of <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 6.155e+06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" . ?e <country> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "636": {
        "generations": "What is the connection between Ivory Coast (the one with Dewey Decimal Classification of 2--6668) and Ivory Coast (the one whose inception date is 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "637": {
        "generations": "What is the connection between The Sound of Music (the one with a duration of 174.0) and The Sound of Music (the one with a date of first performance of 1959-11-16)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> The Sound of Music </E> whose <A> duration </A> is text <V> 174.0 </V> </ES> to <ES> <E> The Sound of Music </E> whose <A> date of first performance </A> is date <V> 1959-11-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Sound of Music\" . ?e_1 <duration> ?pv . ?pv <pred:value> \"174.0\" . ?e_2 <pred:name> \"The Sound of Music\" . ?e_2 <date of first performance> ?pv_1 . ?pv_1 <pred:date> \"1959-11-16\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "638": {
        "generations": "What is the connection between the book Harry Potter and the Goblet of Fire (with ISBN-10 0-7475-4624-X) and the publication date of November 6, 2005?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> ISBN-10 </A> is text <V> 0-7475-4624-X </V> </ES> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2005-11-06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <ISBN-10> ?pv . ?pv <pred:value> \"0-7475-4624-X\" . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-06\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "639": {
        "generations": "What is the connection between Roger Moore (the one whose CANTIC-ID is a11858722) and Roger Moore (the one born on 1900-09-21)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Roger Moore </E> whose <A> CANTIC-ID </A> is text <V> a11858722 </V> </ES> to <ES> <E> Roger Moore </E> whose <A> date of birth </A> is date <V> 1900-09-21 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Roger Moore\" . ?e_1 <CANTIC-ID> ?pv . ?pv <pred:value> \"a11858722\" . ?e_2 <pred:name> \"Roger Moore\" . ?e_2 <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1900-09-21\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "640": {
        "generations": "Is there a U.S. city whose area is 2.32141e+08?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 2.32141e+08 </V> </ES> whose <A> area </A> is text <V> 2.32141e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"2.32141e+08\" . ?e <area> ?pv . ?pv <pred:value> \"2.32141e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "641": {
        "generations": "Does the film have a duration of 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "642": {
        "generations": "Does the sovereign state have a Human Development Index of 0.452?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is text <V> 0.452 </V> </ES> whose <A> Human Development Index </A> is text <V> 0.452 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.452\" . ?e <Human Development Index> ?pv . ?pv <pred:value> \"0.452\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "643": {
        "generations": "Is there a real property with OSM tag or key \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "644": {
        "generations": "Is there an engineering entity with an IPTC Newscode of \"mediatopic/20000716\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> engineering </C> whose <A> IPTC Newscode </A> is text <V> mediatopic/20000716 </V> </ES> whose <A> IPTC Newscode </A> is text <V> mediatopic/20000716 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"engineering\" . ?e <IPTC Newscode> ?pv_1 . ?pv_1 <pred:value> \"mediatopic/20000716\" . ?e <IPTC Newscode> ?pv . ?pv <pred:value> \"mediatopic/20000716\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "645": {
        "generations": "Is there a class of instruments with MCN code 8306.10.00?",
        "ori_data_item": {
            "question": "whether <ES> <C> class of instruments </C> whose <A> MCN code </A> is text <V> 8306.10.00 </V> </ES> whose <A> MCN code </A> is text <V> 8306.10.00 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"class of instruments\" . ?e <MCN code> ?pv_1 . ?pv_1 <pred:value> \"8306.10.00\" . ?e <MCN code> ?pv . ?pv <pred:value> \"8306.10.00\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "646": {
        "generations": "Does the political party have a member count of 1.1e+08?",
        "ori_data_item": {
            "question": "whether <ES> <C> political party </C> whose <A> member count </A> is text <V> 1.1e+08 </V> </ES> whose <A> member count </A> is text <V> 1.1e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <member count> ?pv_1 . ?pv_1 <pred:value> \"1.1e+08\" . ?e <member count> ?pv . ?pv <pred:value> \"1.1e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "647": {
        "generations": "Does the Golden Globe Award ceremony have an edition number of 60?",
        "ori_data_item": {
            "question": "whether <ES> <C> Golden Globe Award ceremony </C> whose <A> edition number </A> is text <V> 60 </V> </ES> whose <A> edition number </A> is text <V> 60 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Golden Globe Award ceremony\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"60\" . ?e <edition number> ?pv . ?pv <pred:value> \"60\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "648": {
        "generations": "Does the cruise ship with an IMO ship number of 5059953 have the same IMO ship number as its identifier?",
        "ori_data_item": {
            "question": "whether <ES> <C> cruise ship </C> whose <A> IMO ship number </A> is text <V> 5059953 </V> </ES> whose <A> IMO ship number </A> is text <V> 5059953 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"cruise ship\" . ?e <IMO ship number> ?pv_1 . ?pv_1 <pred:value> \"5059953\" . ?e <IMO ship number> ?pv . ?pv <pred:value> \"5059953\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "649": {
        "generations": "Is there an activity that has the PhilPapers topic \"heterosexuality\" twice?",
        "ori_data_item": {
            "question": "whether <ES> <C> activity </C> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"activity\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "650": {
        "generations": "Does the television series have exactly 39 episodes?",
        "ori_data_item": {
            "question": "whether <ES> <C> television series </C> whose <A> number of episodes </A> is text <V> 39.0 </V> </ES> whose <A> number of episodes </A> is text <V> 39.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"39.0\" . ?e <number of episodes> ?pv . ?pv <pred:value> \"39.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "651": {
        "generations": "Does the video game developer with Corporate Number (Japan) 6120901008215 have the same Corporate Number (Japan)?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game developer </C> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V> </ES> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game developer\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"6120901008215\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"6120901008215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "652": {
        "generations": "Does the metropolitan area with a nighttime view of \"Long Beach, CA at night.jpg\" have another nighttime view of the same image?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V> </ES> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <nighttime view> ?pv_1 . ?pv_1 <pred:value> \"Long Beach, CA at night.jpg\" . ?e <nighttime view> ?pv . ?pv <pred:value> \"Long Beach, CA at night.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "653": {
        "generations": "Does the boarding school with Charity Commission no. 1139000 have the same Charity Commission no. as its own?",
        "ori_data_item": {
            "question": "whether <ES> <C> boarding school </C> whose <A> Charity Commission no. </A> is text <V> 1139000 </V> </ES> whose <A> Charity Commission no. </A> is text <V> 1139000 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"boarding school\" . ?e <Charity Commission no.> ?pv_1 . ?pv_1 <pred:value> \"1139000\" . ?e <Charity Commission no.> ?pv . ?pv <pred:value> \"1139000\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "654": {
        "generations": "Is there a female given name that has a Soundex code of A660?",
        "ori_data_item": {
            "question": "whether <ES> <C> female given name </C> whose <A> Soundex </A> is text <V> A660 </V> </ES> whose <A> Soundex </A> is text <V> A660 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"female given name\" . ?e <Soundex> ?pv_1 . ?pv_1 <pred:value> \"A660\" . ?e <Soundex> ?pv . ?pv <pred:value> \"A660\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "655": {
        "generations": "Does the biological process with spoken text audio \"Simple en Evolution.oga\" have another spoken text audio with the same value?",
        "ori_data_item": {
            "question": "whether <ES> <C> biological process </C> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V> </ES> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"biological process\" . ?e <spoken text audio> ?pv_1 . ?pv_1 <pred:value> \"Simple en Evolution.oga\" . ?e <spoken text audio> ?pv . ?pv <pred:value> \"Simple en Evolution.oga\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "656": {
        "generations": "Does the television series episode have a production code of 111?",
        "ori_data_item": {
            "question": "whether <ES> <C> television series episode </C> whose <A> production code </A> is text <V> 111 </V> </ES> whose <A> production code </A> is text <V> 111 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series episode\" . ?e <production code> ?pv_1 . ?pv_1 <pred:value> \"111\" . ?e <production code> ?pv . ?pv <pred:value> \"111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "657": {
        "generations": "What is the metropolitan area whose population was 2.71049e+06 on January 1st, 2014?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 2.71049e+06 </V> </ES> whose <A> population </A> is number <V> 2.71049e+06 </V> ( <Q> point in time </Q> is date <V> 2014-01-01 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.71049e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.71049e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "658": {
        "generations": "Was the attendance of a film equal to 8446.0 on 2018-05-30 and had an end time?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> attendance </A> is number <V> 8446.0 </V> </ES> whose <A> attendance </A> is number <V> 8446.0 </V> ( <Q> end time </Q> is date <V> 2018-05-30 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8446.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv_1 ] <end time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8446.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "659": {
        "generations": "What is the connection between Ivory Coast (the one with a Human Development Index of 0.39) to Ivory Coast (the one with a Human Development Index of 0.444)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.444 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.39\"^^xsd:double . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.444\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "660": {
        "generations": "Who was the voice actor for Fred Astaire in Top Hat (the one whose duration is 101.0)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> voice actor </Q> of <ES> <E> Top Hat </E> whose <A> duration </A> is text <V> 101.0 </V> </ES> that <R> cast member </R> backward to <E> Fred Astaire </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Top Hat\" . ?e_1 <duration> ?pv . ?pv <pred:value> \"101.0\" . ?e_2 <pred:name> \"Fred Astaire\" . ?e_1 <cast member> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <cast member> ; <pred:fact_t> ?e_2 ] <voice actor> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "661": {
        "generations": "What is the connection between Cameroon (the one with a Human Development Index of 0.436) to Cameroon (the one with a Human Development Index of 0.436)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "662": {
        "generations": "Is \"Boston\" both the Dewey Decimal Classification and official name of the city?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> </ES> whose <A> official name </A> is text <V> Boston </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--74461\" . ?e <official name> ?pv . ?pv <pred:value> \"Boston\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "663": {
        "generations": "Is the duration of the movie \"Miracle at St. Anna\" 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> title </A> is text <V> Miracle at St. Anna </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <title> ?pv . ?pv <pred:value> \"Miracle at St. Anna\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "664": {
        "generations": "Is Fred Astaire's name in native language also Fred Astaire and does he have a British Museum person-institution ID of 17780?",
        "ori_data_item": {
            "question": "whether <ES> <E> Fred Astaire </E> whose <A> British Museum person-institution </A> is text <V> 17780 </V> </ES> whose <A> name in native language </A> is text <V> Fred Astaire </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <British Museum person-institution> ?pv_1 . ?pv_1 <pred:value> \"17780\" . ?e <name in native language> ?pv . ?pv <pred:value> \"Fred Astaire\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "665": {
        "generations": "Does the topic \"heterosexuality\" have a PhilPapers topic of \"heterosexuality\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "666": {
        "generations": "Is there a portrait with an Artsy gene value of \"portrait\" for both its name and gene?",
        "ori_data_item": {
            "question": "whether <ES> <E> portrait </E> whose <A> Artsy gene </A> is text <V> portrait </V> </ES> whose <A> Artsy gene </A> is text <V> portrait </V>",
            "sparql": "ASK { ?e <pred:name> \"portrait\" . ?e <Artsy gene> ?pv_1 . ?pv_1 <pred:value> \"portrait\" . ?e <Artsy gene> ?pv . ?pv <pred:value> \"portrait\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "667": {
        "generations": "What is the connection between Cameroon (the one with a Human Development Index of 0.436) and Cameroon (the one whose inception date is 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> to <ES> <E> Cameroon </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "668": {
        "generations": "What is the connection between Harry Potter and the Goblet of Fire (the one whose box office is 8.96911e+08) and Maggie Smith (the one born on 1934-12-28)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> to <ES> <E> Maggie Smith </E> whose <A> date of birth </A> is date <V> 1934-12-28 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double . ?e_2 <pred:name> \"Maggie Smith\" . ?e_2 <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1934-12-28\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "669": {
        "generations": "Which metropolitan area has a population of 6.155e+06?",
        "ori_data_item": {
            "question": "what is <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 6.155e+06 </V> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "670": {
        "generations": "What is the diplomatic relation between Ghana (whose Human Development Index is 0.427) and Ivory Coast (whose Human Development Index is 0.39)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Ghana </E> whose <A> Human Development Index </A> is number <V> 0.427 </V> </ES> that <R> diplomatic relation </R> backward to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Ghana\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.427\"^^xsd:double . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.39\"^^xsd:double . ?e_1 <diplomatic relation> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <diplomatic relation> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "671": {
        "generations": "What is the Dewey Decimal Classification of the sovereign state with a Human Development Index of 0.39?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.39\"^^xsd:double . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "672": {
        "generations": "What is the connection between Cameroon (the one with Dewey Decimal Classification of 2--6711) and Cameroon (the one with a Human Development Index of 0.486)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.486 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.486\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "673": {
        "generations": "Is the population of the U.S. city equal to 25514.0 and is this the only population value for this city?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> whose <A> population </A> is text <V> 25514.0 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <population> ?pv . ?pv <pred:value> \"25514.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "674": {
        "generations": "Did the film, published on 2005-11-16 in Germany, have a box office of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> publication date </A> is date <V> 2005-11-16 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V> ( <Q> place of publication </Q> is text <V> Germany </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-11-16\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <publication date> ; <pred:fact_t> ?pv_1 ] <place of publication> ?qpv . ?qpv <pred:value> \"Germany\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "675": {
        "generations": "Is there an administrative territorial entity that was established on March 31, 1917 based on the Treaty of the Danish West Indies and has a total fertility rate of 2.06?",
        "ori_data_item": {
            "question": "whether <ES> <C> administrative territorial entity </C> whose <A> inception </A> is date <V> 1917-03-31 </V> </ES> whose <A> total fertility rate </A> is number <V> 2.06 </V> ( <Q> criterion used </Q> is text <V> Treaty of the Danish West Indies </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"administrative territorial entity\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1917-03-31\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <inception> ; <pred:fact_t> ?pv_1 ] <criterion used> ?qpv . ?qpv <pred:value> \"Treaty of the Danish West Indies\" . ?e <total fertility rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "676": {
        "generations": "Did Pan Am operate the aircraft functional class that had a service entry date of 1970-01-22 and a total production of 1527.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> service entry </A> is date <V> 1970-01-22 </V> </ES> whose <A> total produced </A> is number <V> 1527.0 </V> ( <Q> operator </Q> is text <V> Pan Am </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <service entry> ?pv_1 . ?pv_1 <pred:date> \"1970-01-22\"^^xsd:date . [ <pred:fact_h> ?e ; <pred:fact_r> <service entry> ; <pred:fact_t> ?pv_1 ] <operator> ?qpv . ?qpv <pred:value> \"Pan Am\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "677": {
        "generations": "Which sovereign state had a nominal GDP of 1.13963e+10 on January 1st, 1992 and has a Dewey Decimal Classification of 2--6711?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 1.13963e+10 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> ( <Q> point in time </Q> is date <V> 1992-01-01 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"1.13963e+10\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"1992-01-01\"^^xsd:date . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "678": {
        "generations": "Does the film with an exploitation visa number of 54231, which started on 1981-05-20 and has a duration of 120.0, belong to the \"film\" category?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> exploitation visa number </A> is text <V> 54231 </V> </ES> whose <A> duration </A> is text <V> 120.0 </V> ( <Q> start time </Q> is date <V> 1981-05-20 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <exploitation visa number> ?pv_1 . ?pv_1 <pred:value> \"54231\" . [ <pred:fact_h> ?e ; <pred:fact_r> <exploitation visa number> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"1981-05-20\"^^xsd:date . ?e <duration> ?pv . ?pv <pred:value> \"120.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "679": {
        "generations": "What is the connection between Ivory Coast (the one with Dewey Decimal Classification of 2--6668) and Ivory Coast (the one whose inception date is 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "680": {
        "generations": "What is the connection between Dallas (the one with 357.0 number of episodes) and Larry Hagman (the one who died on 2012-11-23)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Dallas </E> whose <A> number of episodes </A> is text <V> 357.0 </V> </ES> to <ES> <E> Larry Hagman </E> whose <A> date of death </A> is date <V> 2012-11-23 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Dallas\" . ?e_1 <number of episodes> ?pv . ?pv <pred:value> \"357.0\" . ?e_2 <pred:name> \"Larry Hagman\" . ?e_2 <date of death> ?pv_1 . ?pv_1 <pred:date> \"2012-11-23\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "681": {
        "generations": "What is the connection between Somerset (the one with 1710.0 number of episodes) and Sigourney Weaver?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Somerset </E> whose <A> number of episodes </A> is number <V> 1710.0 </V> </ES> to <E> Sigourney Weaver </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Somerset\" . ?e_1 <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1710.0\"^^xsd:double . ?e_2 <pred:name> \"Sigourney Weaver\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "682": {
        "generations": "What is the connection between St. Clair County (the one with a population of 161508.0) to Port Huron?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> St. Clair County </E> whose <A> population </A> is number <V> 161508.0 </V> </ES> to <E> Port Huron </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"St. Clair County\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"161508.0\"^^xsd:double . ?e_2 <pred:name> \"Port Huron\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "683": {
        "generations": "What is the connection between Mary Pickford (who has 2 children) and the Academy Award for Best Actress?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Mary Pickford </E> whose <A> number of children </A> is number <V> 2.0 </V> </ES> to <E> Academy Award for Best Actress </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Mary Pickford\" . ?e_1 <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double . ?e_2 <pred:name> \"Academy Award for Best Actress\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "684": {
        "generations": "What is the connection between the United States presidential election, 2008 (which had 2.13314e+08 eligible voters) and John McCain?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> United States presidential election, 2008 </E> whose <A> eligible voters </A> is number <V> 2.13314e+08 </V> </ES> to <E> John McCain </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"United States presidential election, 2008\" . ?e_1 <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.13314e+08\"^^xsd:double . ?e_2 <pred:name> \"John McCain\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "685": {
        "generations": "What is the connection between University of Chicago (the one with 2350.0 employees) to University of Chicago Law School?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> University of Chicago </E> whose <A> employees </A> is number <V> 2350.0 </V> </ES> to <E> University of Chicago Law School </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"University of Chicago\" . ?e_1 <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2350.0\"^^xsd:double . ?e_2 <pred:name> \"University of Chicago Law School\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "686": {
        "generations": "What is the Dewey Decimal Classification of Cameroon and what is the Human Development Index of Cameroon (whose value is 0.436) in relation to each other?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Cameroon </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> </ES> that <R> country </R> backward to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "687": {
        "generations": "What is the Human Development Index for Cameroon and what is the connection between two entities with the name Cameroon?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> that <R> country </R> backward to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "688": {
        "generations": "What is the language of work or name for the U.S. city with an inception date of 1630-09-07 and an official website of http://www.cityofboston.gov/?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> official website </A> is text <V> http://www.cityofboston.gov/ </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <official website> ?pv . ?pv <pred:value> \"http://www.cityofboston.gov/\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official website> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "689": {
        "generations": "What is the reason for Ivory Coast (the one whose inception is 1960-01-01) being called elef\u00e1ntcsontparti in its demonym?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> that <R> country </R> backward to <ES> <E> Ivory Coast </E> whose <A> demonym </A> is text <V> elef\u00e1ntcsontparti </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <demonym> ?pv_1 . ?pv_1 <pred:value> \"elef\u00e1ntcsontparti\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "690": {
        "generations": "What is the connection between Ivory Coast (the one with Dewey Decimal Classification of 2--6668) and Ivory Coast (the one with a Human Development Index of 0.458)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.458 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.458\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "691": {
        "generations": "Is there a U.S. city with a population of 25514 and a population greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is number <V> 25514.0 </V> </ES> whose <A> population </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"25514.0\"^^xsd:double . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "692": {
        "generations": "Is there an anime television series with 224.0 episodes and at least one episode with a value greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> anime television series </C> whose <A> number of episodes </A> is number <V> 224.0 </V> </ES> whose <A> number of episodes </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"anime television series\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"224.0\"^^xsd:double . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "693": {
        "generations": "Is there a video game developer with more than 106 employees and an employee whose value is greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game developer </C> whose <A> employees </A> is number <V> 106.0 </V> </ES> whose <A> employees </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game developer\" . ?e <employees> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"106.0\"^^xsd:double . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "694": {
        "generations": "Does the agent with 650 seats have more seats than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> number of seats </A> is number <V> 650.0 </V> </ES> whose <A> number of seats </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"650.0\"^^xsd:double . ?e <number of seats> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "695": {
        "generations": "Is there a political party with a member count of 56741.0 and a member count greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> political party </C> whose <A> member count </A> is number <V> 56741.0 </V> </ES> whose <A> member count </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <member count> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"56741.0\"^^xsd:double . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "696": {
        "generations": "Is there a manifestation with a number of constituencies equal to 107.0 and another number of constituencies greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> manifestation </C> whose <A> number of constituencies </A> is number <V> 107.0 </V> </ES> whose <A> number of constituencies </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"manifestation\" . ?e <number of constituencies> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"107.0\"^^xsd:double . ?e <number of constituencies> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "697": {
        "generations": "Is there an association football club with a maximum capacity greater than 80,000?",
        "ori_data_item": {
            "question": "whether <ES> <C> association football club </C> whose <A> maximum capacity </A> is number <V> 80000.0 </V> </ES> whose <A> maximum capacity </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"association football club\" . ?e <maximum capacity> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"80000.0\"^^xsd:double . ?e <maximum capacity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "698": {
        "generations": "Is there an aircraft functional class with a total production greater than 1527.0 and a total production greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> total produced </A> is number <V> 1527.0 </V> </ES> whose <A> total produced </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <total produced> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1527.0\"^^xsd:double . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "699": {
        "generations": "Is there a cemetery with 250,000 people buried and more than arg4 people buried in total?",
        "ori_data_item": {
            "question": "whether <ES> <C> cemetery </C> whose <A> quantity buried </A> is number <V> 250000.0 </V> </ES> whose <A> quantity buried </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"cemetery\" . ?e <quantity buried> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"250000.0\"^^xsd:double . ?e <quantity buried> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "700": {
        "generations": "Is there a written work with 243 pages and more than arg4 pages?",
        "ori_data_item": {
            "question": "whether <ES> <C> written work </C> whose <A> number of pages </A> is number <V> 243.0 </V> </ES> whose <A> number of pages </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"written work\" . ?e <number of pages> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"243.0\"^^xsd:double . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "701": {
        "generations": "Is there a television series episode with an attendance of 1.43e+07 and another attendance greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> television series episode </C> whose <A> attendance </A> is number <V> 1.43e+07 </V> </ES> whose <A> attendance </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"television series episode\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.43e+07\"^^xsd:double . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "702": {
        "generations": "Is there a recurring event with eligible voters greater than 2.13314e+08 and with a unit of 1 and a value greater than \"arg4\"?",
        "ori_data_item": {
            "question": "whether <ES> <C> recurring event </C> whose <A> eligible voters </A> is number <V> 2.13314e+08 </V> </ES> whose <A> eligible voters </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"recurring event\" . ?e <eligible voters> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.13314e+08\"^^xsd:double . ?e <eligible voters> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "703": {
        "generations": "Is there a facility with a visitors per year of 2.74113e+06 and another visitors per year greater than arg4?",
        "ori_data_item": {
            "question": "whether <ES> <C> facility </C> whose <A> visitors per year </A> is number <V> 2.74113e+06 </V> </ES> whose <A> visitors per year </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"facility\" . ?e <visitors per year> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.74113e+06\"^^xsd:double . ?e <visitors per year> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "704": {
        "generations": "Is there a language with 1.6e+07 speakers and more than arg4 speakers?",
        "ori_data_item": {
            "question": "whether <ES> <C> language </C> whose <A> number of speakers </A> is number <V> 1.6e+07 </V> </ES> whose <A> number of speakers </A> larger than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"language\" . ?e <number of speakers> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.6e+07\"^^xsd:double . ?e <number of speakers> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "705": {
        "generations": "What is the connection between Ivory Coast and Ivory Coast (the one whose inception date is 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Ivory Coast </E> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "706": {
        "generations": "What is the connection between Dallas and Larry Hagman (the one who died on 2012-11-23)?",
        "ori_data_item": {
            "question": "what is the relation from <E> Dallas </E> to <ES> <E> Larry Hagman </E> whose <A> date of death </A> is date <V> 2012-11-23 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Dallas\" . ?e_2 <pred:name> \"Larry Hagman\" . ?e_2 <date of death> ?pv . ?pv <pred:date> \"2012-11-23\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "707": {
        "generations": "What is the connection between The Sound of Music (the one with the same name as the date of first performance of 1959-11-16) and The Sound of Music?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Sound of Music </E> to <ES> <E> The Sound of Music </E> whose <A> date of first performance </A> is date <V> 1959-11-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Sound of Music\" . ?e_2 <pred:name> \"The Sound of Music\" . ?e_2 <date of first performance> ?pv . ?pv <pred:date> \"1959-11-16\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "708": {
        "generations": "Does Burton upon Trent have an OS grid reference of SK245225?",
        "ori_data_item": {
            "question": "whether <ES> <E> Burton upon Trent </E> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> whose <A> OS grid reference </A> is text <V> SK245225 </V>",
            "sparql": "ASK { ?e <pred:name> \"Burton upon Trent\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <OS grid reference> ?pv . ?pv <pred:value> \"SK245225\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "709": {
        "generations": "Is the area of Summit equal to 15.661?",
        "ori_data_item": {
            "question": "whether <ES> <E> Summit </E> whose <A> area </A> is text <V> 15.661 </V> </ES> whose <A> area </A> is text <V> 15.661 </V>",
            "sparql": "ASK { ?e <pred:name> \"Summit\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" . ?e <area> ?pv . ?pv <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "710": {
        "generations": "Do the Orkney Islands have the same Dewey Decimal Classification as \"2--41132\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Orkney Islands </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--41132 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--41132 </V>",
            "sparql": "ASK { ?e <pred:name> \"Orkney Islands\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--41132\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--41132\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "711": {
        "generations": "Is the duration of Miracle at St. Anna 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "712": {
        "generations": "Is there a commercial art gallery with OSM tag or key \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> commercial art gallery </E> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V>",
            "sparql": "ASK { ?e <pred:name> \"commercial art gallery\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "713": {
        "generations": "Did Ayn Rand have less than 4 children and was born on February 2nd, 1905?",
        "ori_data_item": {
            "question": "whether <ES> <E> Ayn Rand </E> whose <A> date of birth </A> is date <V> 1905-02-02 </V> </ES> whose <A> number of children </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ayn Rand\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1905-02-02\"^^xsd:date . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "714": {
        "generations": "Is the rural population of New Delhi less than arg4, given that its inception date is 1911-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <E> New Delhi </E> whose <A> inception </A> is date <V> 1911-01-01 </V> </ES> whose <A> rural population </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"New Delhi\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1911-01-01\"^^xsd:date . ?e <rural population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "715": {
        "generations": "Did Serpico end on January 28, 1977 and have less than 4 seasons?",
        "ori_data_item": {
            "question": "whether <ES> <E> Serpico </E> whose <A> end time </A> is date <V> 1977-01-28 </V> </ES> whose <A> number of seasons </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Serpico\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1977-01-28\"^^xsd:date . ?e <number of seasons> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "716": {
        "generations": "Did the Golden Gate Bridge officially open on May 27, 1937 and have less than one span?",
        "ori_data_item": {
            "question": "whether <ES> <E> Golden Gate Bridge </E> whose <A> date of official opening </A> is date <V> 1937-05-27 </V> </ES> whose <A> number of spans </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Golden Gate Bridge\" . ?e <date of official opening> ?pv_1 . ?pv_1 <pred:date> \"1937-05-27\"^^xsd:date . ?e <number of spans> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "717": {
        "generations": "Is the mean age of Prague less than arg4, given that its earliest written record dates back to 0965-01-17?",
        "ori_data_item": {
            "question": "whether <ES> <E> Prague </E> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V> </ES> whose <A> mean age </A> smaller than number <V> arg4 </V>",
            "sparql": "ASK { ?e <pred:name> \"Prague\" . ?e <time of earliest written record> ?pv_1 . ?pv_1 <pred:date> \"0965-01-17\"^^xsd:date . ?e <mean age> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "718": {
        "generations": "Is there a sovereign state with a Human Development Index of 0.501 (unit: 1) and an inception date of 1960-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is number <V> 0.501 </V> </ES> whose <A> inception </A> is date <V> 1960-01-01 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.501\"^^xsd:double . ?e <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "719": {
        "generations": "Did the film with a box office of 8.96911e+08 and a publication date of 2005-11-06 belong to the category of film?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> publication date </A> is date <V> 2005-11-06 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <publication date> ?pv . ?pv <pred:date> \"2005-11-06\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "720": {
        "generations": "Did the person born on 1899-05-10, who is a human, have 2 children?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> number of children </A> is number <V> 2.0 </V> </ES> whose <A> date of birth </A> is date <V> 1899-05-10 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.0\"^^xsd:double . ?e <date of birth> ?pv . ?pv <pred:date> \"1899-05-10\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "721": {
        "generations": "Was the video game console model with 1.5368e+08 units sold and discontinued on 2013-01-04?",
        "ori_data_item": {
            "question": "whether <ES> <C> video game console model </C> whose <A> units sold </A> is number <V> 1.5368e+08 </V> </ES> whose <A> discontinued date </A> is date <V> 2013-01-04 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"video game console model\" . ?e <units sold> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.5368e+08\"^^xsd:double . ?e <discontinued date> ?pv . ?pv <pred:date> \"2013-01-04\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "722": {
        "generations": "Is the capital city whose mean age is 42.0 and has the earliest written record on 0965-01-17?",
        "ori_data_item": {
            "question": "whether <ES> <C> capital </C> whose <A> mean age </A> is number <V> 42.0 </V> </ES> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <mean age> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"42.0\"^^xsd:double . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"0965-01-17\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "723": {
        "generations": "Is there an aircraft functional class that has a total production of 1527.0 and entered service on 1970-01-22?",
        "ori_data_item": {
            "question": "whether <ES> <C> aircraft functional class </C> whose <A> total produced </A> is number <V> 1527.0 </V> </ES> whose <A> service entry </A> is date <V> 1970-01-22 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <total produced> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1527.0\"^^xsd:double . ?e <service entry> ?pv . ?pv <pred:date> \"1970-01-22\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "724": {
        "generations": "What metropolitan area had a population of 2.71049e+06 on January 1st, 2014 and had a population greater than arg4?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> metropolitan area </C> whose <A> population </A> is text <V> 2.71049e+06 </V> </ES> and <ES> <C> metropolitan area </C> whose <A> population </A> larger than number <V> arg4 </V> </ES> ( <Q> point in time </Q> is date <V> 2014-01-01 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv . ?pv <pred:value> \"2.71049e+06\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "725": {
        "generations": "Which film had an attendance of 8446.0 and a start time of 2018-05-30, and whose attendance value is greater than arg4?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> attendance </A> is text <V> 8446.0 </V> </ES> and <ES> <C> film </C> whose <A> attendance </A> larger than number <V> arg4 </V> </ES> ( <Q> start time </Q> is date <V> 2018-05-30 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv . ?pv <pred:value> \"8446.0\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg4\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "726": {
        "generations": "What sovereign state had a nominal GDP of 1.13963e+10 on January 1st, 1992 and has a Dewey Decimal Classification of 2--6711?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 1.13963e+10 </V> </ES> and <ES> <C> sovereign state </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V> </ES> ( <Q> point in time </Q> is date <V> 1992-01-01 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <nominal GDP> ?pv . ?pv <pred:value> \"1.13963e+10\" . [ <pred:fact_h> ?e ; <pred:fact_r> <nominal GDP> ; <pred:fact_t> ?pv ] <point in time> ?qpv . ?qpv <pred:date> \"1992-01-01\"^^xsd:date . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--6711\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "727": {
        "generations": "What film has an exploitation visa number of 54231, a start time of 1981-05-20, and a duration of 120.0?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> film </C> whose <A> exploitation visa number </A> is text <V> 54231 </V> </ES> and <ES> <C> film </C> whose <A> duration </A> is text <V> 120.0 </V> </ES> ( <Q> start time </Q> is date <V> 1981-05-20 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <exploitation visa number> ?pv . ?pv <pred:value> \"54231\" . [ <pred:fact_h> ?e ; <pred:fact_r> <exploitation visa number> ; <pred:fact_t> ?pv ] <start time> ?qpv . ?qpv <pred:date> \"1981-05-20\"^^xsd:date . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"120.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "728": {
        "generations": "What is the admission rate of the university that has an admission rate of 0.42 (with a point in time) and a unit of 1?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <C> university </C> whose <A> admission rate </A> is text <V> 0.42 </V> </ES> whose <A> admission rate </A> is text <V> 0.42 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"university\" . ?e <admission rate> ?pv_1 . ?pv_1 <pred:value> \"0.42\" . [ <pred:fact_h> ?e ; <pred:fact_r> <admission rate> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:unit> \"1\" . ?qpv_1 <pred:value> \"0.42\"^^xsd:double . ?e <admission rate> ?pv . ?pv <pred:value> \"0.42\" . [ <pred:fact_h> ?e ; <pred:fact_r> <admission rate> ; <pred:fact_t> ?pv ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "729": {
        "generations": "What is the area of the U.S. city whose elevation above sea level is 114.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> area </A> of <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 114.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"114.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"114.0\" . ?e <area> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "730": {
        "generations": "Which city of the United States has an elevation above sea level of 114.0 and an area of 15.661?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 114.0 </V> </ES> and <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 15.661 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 114.0 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"114.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"114.0\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "731": {
        "generations": "What is the connection between two instances of A Midsummer Night's Dream?",
        "ori_data_item": {
            "question": "what is the relation from <E> A Midsummer Night's Dream </E> to <E> A Midsummer Night's Dream </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"A Midsummer Night's Dream\" . ?e_2 <pred:name> \"A Midsummer Night's Dream\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "732": {
        "generations": "What is the connection between Aachen and Aachen?",
        "ori_data_item": {
            "question": "what is the relation from <E> Aachen </E> to <E> Aachen </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Aachen\" . ?e_2 <pred:name> \"Aachen\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "733": {
        "generations": "What is the connection between two entities named Alien?",
        "ori_data_item": {
            "question": "what is the relation from <E> Alien </E> to <E> Alien </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Alien\" . ?e_2 <pred:name> \"Alien\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "734": {
        "generations": "What is the connection between two instances of Catch-22?",
        "ori_data_item": {
            "question": "what is the relation from <E> Catch-22 </E> to <E> Catch-22 </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Catch-22\" . ?e_2 <pred:name> \"Catch-22\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "735": {
        "generations": "What is the connection between two entities named Max Weber?",
        "ori_data_item": {
            "question": "what is the relation from <E> Max Weber </E> to <E> Max Weber </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Max Weber\" . ?e_2 <pred:name> \"Max Weber\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "736": {
        "generations": "What is the connection between two instances of Morocco?",
        "ori_data_item": {
            "question": "what is the relation from <E> Morocco </E> to <E> Morocco </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Morocco\" . ?e_2 <pred:name> \"Morocco\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "737": {
        "generations": "What is the connection between two instances of Roger Moore?",
        "ori_data_item": {
            "question": "what is the relation from <E> Roger Moore </E> to <E> Roger Moore </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Roger Moore\" . ?e_2 <pred:name> \"Roger Moore\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "738": {
        "generations": "What is the connection between The Velvet Underground (the band) and The Velvet Underground (the album)?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Velvet Underground </E> to <E> The Velvet Underground </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Velvet Underground\" . ?e_2 <pred:name> \"The Velvet Underground\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "739": {
        "generations": "What is the connection between two entities both named Chichester?",
        "ori_data_item": {
            "question": "what is the relation from <E> Chichester </E> to <E> Chichester </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Chichester\" . ?e_2 <pred:name> \"Chichester\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "740": {
        "generations": "What is the connection between two entities both named \"blue\"?",
        "ori_data_item": {
            "question": "what is the relation from <E> blue </E> to <E> blue </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"blue\" . ?e_2 <pred:name> \"blue\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "741": {
        "generations": "What is the connection between two entities named Cherokee?",
        "ori_data_item": {
            "question": "what is the relation from <E> Cherokee </E> to <E> Cherokee </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cherokee\" . ?e_2 <pred:name> \"Cherokee\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "742": {
        "generations": "What is the connection between two instances of Christopher Cross?",
        "ori_data_item": {
            "question": "what is the relation from <E> Christopher Cross </E> to <E> Christopher Cross </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Christopher Cross\" . ?e_2 <pred:name> \"Christopher Cross\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "743": {
        "generations": "What is the connection between two entities named Limburg?",
        "ori_data_item": {
            "question": "what is the relation from <E> Limburg </E> to <E> Limburg </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Limburg\" . ?e_2 <pred:name> \"Limburg\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "744": {
        "generations": "What is the relationship between two entities named \"string\"?",
        "ori_data_item": {
            "question": "what is the relation from <E> string </E> to <E> string </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"string\" . ?e_2 <pred:name> \"string\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "745": {
        "generations": "What is the connection between two instances of The Lion King?",
        "ori_data_item": {
            "question": "what is the relation from <E> The Lion King </E> to <E> The Lion King </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"The Lion King\" . ?e_2 <pred:name> \"The Lion King\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "746": {
        "generations": "What is the connection between two entities both named Brandenburg?",
        "ori_data_item": {
            "question": "what is the relation from <E> Brandenburg </E> to <E> Brandenburg </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Brandenburg\" . ?e_2 <pred:name> \"Brandenburg\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "747": {
        "generations": "What is the connection between two entities named John Adams?",
        "ori_data_item": {
            "question": "what is the relation from <E> John Adams </E> to <E> John Adams </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"John Adams\" . ?e_2 <pred:name> \"John Adams\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "748": {
        "generations": "What is the connection between two instances of Shrek?",
        "ori_data_item": {
            "question": "what is the relation from <E> Shrek </E> to <E> Shrek </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Shrek\" . ?e_2 <pred:name> \"Shrek\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "749": {
        "generations": "What is the connection between two instances of Nantes?",
        "ori_data_item": {
            "question": "what is the relation from <E> Nantes </E> to <E> Nantes </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Nantes\" . ?e_2 <pred:name> \"Nantes\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "750": {
        "generations": "What is the connection between two entities both named Taunton?",
        "ori_data_item": {
            "question": "what is the relation from <E> Taunton </E> to <E> Taunton </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Taunton\" . ?e_2 <pred:name> \"Taunton\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "751": {
        "generations": "What is the connection between two instances of Grammy Award for Best Comedy Album?",
        "ori_data_item": {
            "question": "what is the relation from <E> Grammy Award for Best Comedy Album </E> to <E> Grammy Award for Best Comedy Album </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Grammy Award for Best Comedy Album\" . ?e_2 <pred:name> \"Grammy Award for Best Comedy Album\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "752": {
        "generations": "What is the connection between two instances of jaundice?",
        "ori_data_item": {
            "question": "what is the relation from <E> jaundice </E> to <E> jaundice </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"jaundice\" . ?e_2 <pred:name> \"jaundice\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "753": {
        "generations": "What is the connection between two entities named Helen?",
        "ori_data_item": {
            "question": "what is the relation from <E> Helen </E> to <E> Helen </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Helen\" . ?e_2 <pred:name> \"Helen\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "754": {
        "generations": "What is the connection between two instances of Johann Sebastian Bach?",
        "ori_data_item": {
            "question": "what is the relation from <E> Johann Sebastian Bach </E> to <E> Johann Sebastian Bach </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Johann Sebastian Bach\" . ?e_2 <pred:name> \"Johann Sebastian Bach\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "755": {
        "generations": "What is the connection between two instances of Philadelphia?",
        "ori_data_item": {
            "question": "what is the relation from <E> Philadelphia </E> to <E> Philadelphia </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Philadelphia\" . ?e_2 <pred:name> \"Philadelphia\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "756": {
        "generations": "What is the connection between the two entities named Ghostbusters?",
        "ori_data_item": {
            "question": "what is the relation from <E> Ghostbusters </E> to <E> Ghostbusters </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ghostbusters\" . ?e_2 <pred:name> \"Ghostbusters\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "757": {
        "generations": "What is the connection between the two entities named Hercules?",
        "ori_data_item": {
            "question": "what is the relation from <E> Hercules </E> to <E> Hercules </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Hercules\" . ?e_2 <pred:name> \"Hercules\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "758": {
        "generations": "What is the connection between two entities named Harry Stradling?",
        "ori_data_item": {
            "question": "what is the relation from <E> Harry Stradling </E> to <E> Harry Stradling </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Stradling\" . ?e_2 <pred:name> \"Harry Stradling\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "759": {
        "generations": "What is the connection between the two entities named Antwone Fisher?",
        "ori_data_item": {
            "question": "what is the relation from <E> Antwone Fisher </E> to <E> Antwone Fisher </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Antwone Fisher\" . ?e_2 <pred:name> \"Antwone Fisher\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "760": {
        "generations": "What is the connection between two entities named Nuclear Blast?",
        "ori_data_item": {
            "question": "what is the relation from <E> Nuclear Blast </E> to <E> Nuclear Blast </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Nuclear Blast\" . ?e_2 <pred:name> \"Nuclear Blast\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "761": {
        "generations": "What is the connection between two instances of Universal Pictures?",
        "ori_data_item": {
            "question": "what is the relation from <E> Universal Pictures </E> to <E> Universal Pictures </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Universal Pictures\" . ?e_2 <pred:name> \"Universal Pictures\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "762": {
        "generations": "What is the connection between two entities named Alice in Wonderland?",
        "ori_data_item": {
            "question": "what is the relation from <E> Alice in Wonderland </E> to <E> Alice in Wonderland </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Alice in Wonderland\" . ?e_2 <pred:name> \"Alice in Wonderland\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "763": {
        "generations": "What is the connection between two entities named Richard III?",
        "ori_data_item": {
            "question": "what is the relation from <E> Richard III </E> to <E> Richard III </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Richard III\" . ?e_2 <pred:name> \"Richard III\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "764": {
        "generations": "What is the connection between two entities named Stephen Colbert?",
        "ori_data_item": {
            "question": "what is the relation from <E> Stephen Colbert </E> to <E> Stephen Colbert </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Stephen Colbert\" . ?e_2 <pred:name> \"Stephen Colbert\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "765": {
        "generations": "What is the connection between two entities named Seal?",
        "ori_data_item": {
            "question": "what is the relation from <E> Seal </E> to <E> Seal </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Seal\" . ?e_2 <pred:name> \"Seal\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "766": {
        "generations": "What is the connection between two instances of Erin Brockovich?",
        "ori_data_item": {
            "question": "what is the relation from <E> Erin Brockovich </E> to <E> Erin Brockovich </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Erin Brockovich\" . ?e_2 <pred:name> \"Erin Brockovich\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "767": {
        "generations": "What is the connection between two entities named Havok?",
        "ori_data_item": {
            "question": "what is the relation from <E> Havok </E> to <E> Havok </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Havok\" . ?e_2 <pred:name> \"Havok\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "768": {
        "generations": "What is the connection between two entities named Python?",
        "ori_data_item": {
            "question": "what is the relation from <E> Python </E> to <E> Python </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Python\" . ?e_2 <pred:name> \"Python\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "769": {
        "generations": "What is the connection between two instances of Malcolm X?",
        "ori_data_item": {
            "question": "what is the relation from <E> Malcolm X </E> to <E> Malcolm X </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Malcolm X\" . ?e_2 <pred:name> \"Malcolm X\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "770": {
        "generations": "What is the relationship between two instances of chicken?",
        "ori_data_item": {
            "question": "what is the relation from <E> chicken </E> to <E> chicken </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"chicken\" . ?e_2 <pred:name> \"chicken\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "771": {
        "generations": "How many entertainment items have a publication date of 2008-11-04 and a Nintendo GameID of RRGP52?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> entertainment </C> whose <A> publication date </A> is date <V> 2008-11-04 </V> </ES> and <ES> <C> entertainment </C> whose <A> Nintendo GameID </A> is text <V> RRGP52 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"entertainment\" . ?e <publication date> ?pv . ?pv <pred:date> \"2008-11-04\"^^xsd:date . ?e <Nintendo GameID> ?pv_1 . ?pv_1 <pred:value> \"RRGP52\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "772": {
        "generations": "What work did Michael Douglas receive the Academy Award for Best Picture for (assuming his name in native language is \"Michael Douglas\")?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> for work </Q> of <ES> <E> Michael Douglas </E> whose <A> name in native language </A> is text <V> Michael Douglas </V> </ES> that <R> award received </R> backward to <E> Academy Award for Best Picture </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Michael Douglas\" . ?e_1 <name in native language> ?pv . ?pv <pred:value> \"Michael Douglas\" . ?e_2 <pred:name> \"Academy Award for Best Picture\" . ?e_1 <award received> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <award received> ; <pred:fact_t> ?e_2 ] <for work> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "773": {
        "generations": "Who was the voice actor for Fred Astaire in Top Hat?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> voice actor </Q> of <ES> <E> Top Hat </E> whose <A> title </A> is text <V> Top Hat </V> </ES> that <R> cast member </R> backward to <E> Fred Astaire </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Top Hat\" . ?e_1 <title> ?pv . ?pv <pred:value> \"Top Hat\" . ?e_2 <pred:name> \"Fred Astaire\" . ?e_1 <cast member> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <cast member> ; <pred:fact_t> ?e_2 ] <voice actor> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "774": {
        "generations": "Which political party had less than arg1 representatives in an organization/legislature, but had 199 representatives as of 2019-01-03?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> political party </C> whose <A> number of representatives in an organization/legislature </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> political party </C> whose <A> number of representatives in an organization/legislature </A> is number <V> 199.0 </V> </ES> ( <Q> start time </Q> is date <V> 2019-01-03 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"political party\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"199.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <number of representatives in an organization/legislature> ; <pred:fact_t> ?pv_1 ] <start time> ?qpv . ?qpv <pred:date> \"2019-01-03\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "775": {
        "generations": "Which agent had an Alexa rank less than arg1 and a rank of 42.0 on 2017-11-20?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> agent </C> whose <A> Alexa rank </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> agent </C> whose <A> Alexa rank </A> is number <V> 42.0 </V> </ES> ( <Q> point in time </Q> is date <V> 2017-11-20 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"42.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <Alexa rank> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2017-11-20\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "776": {
        "generations": "What is the connection between Ivory Coast (the one whose inception is 1960-01-01) and Ivory Coast (the one whose inception is also 1960-01-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <inception> ?pv_1 . ?pv_1 <pred:date> \"1960-01-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "777": {
        "generations": "What is the connection between Gene Kelly (the one born on 1912-08-23) and Fred Astaire (the one born on 1899-05-10)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Gene Kelly </E> whose <A> date of birth </A> is date <V> 1912-08-23 </V> </ES> to <ES> <E> Fred Astaire </E> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Gene Kelly\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1912-08-23\"^^xsd:date . ?e_2 <pred:name> \"Fred Astaire\" . ?e_2 <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1899-05-10\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "778": {
        "generations": "What is the connection between two editions of Harry Potter and the Order of the Phoenix, one published on 2007-06-25 and the other on 2007-06-28?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Order of the Phoenix </E> whose <A> publication date </A> is date <V> 2007-06-25 </V> </ES> to <ES> <E> Harry Potter and the Order of the Phoenix </E> whose <A> publication date </A> is date <V> 2007-06-28 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_1 <publication date> ?pv . ?pv <pred:date> \"2007-06-25\"^^xsd:date . ?e_2 <pred:name> \"Harry Potter and the Order of the Phoenix\" . ?e_2 <publication date> ?pv_1 . ?pv_1 <pred:date> \"2007-06-28\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "779": {
        "generations": "What is the connection between Midway Games (which was dissolved, abolished or demolished on 2009-01-01) and Atari Games (which was dissolved, abolished or demolished on 2003-02-01)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Midway Games </E> whose <A> dissolved, abolished or demolished </A> is date <V> 2009-01-01 </V> </ES> to <ES> <E> Atari Games </E> whose <A> dissolved, abolished or demolished </A> is date <V> 2003-02-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Midway Games\" . ?e_1 <dissolved, abolished or demolished> ?pv . ?pv <pred:date> \"2009-01-01\"^^xsd:date . ?e_2 <pred:name> \"Atari Games\" . ?e_2 <dissolved, abolished or demolished> ?pv_1 . ?pv_1 <pred:date> \"2003-02-01\"^^xsd:date . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "780": {
        "generations": "Which TV production company has 8200 employees?",
        "ori_data_item": {
            "question": "what is <ES> <C> TV production company </C> whose <A> employees </A> is text <V> 8200.0 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"TV production company\" . ?e <employees> ?pv . ?pv <pred:value> \"8200.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <employees> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"8200.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "781": {
        "generations": "Is Boston's elevation above sea level 43.0?",
        "ori_data_item": {
            "question": "whether <E> Boston </E> whose <A> elevation above sea level </A> is text <V> 43.0 </V> ( <Q> pred:fact t </Q> is text <V> 43.0 </V> )",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"43.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"43.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "782": {
        "generations": "Does Bharatiya Janata Party have 117 representatives in Lok Sabha?",
        "ori_data_item": {
            "question": "whether <E> Bharatiya Janata Party </E> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V> ( <Q> legislative body </Q> is text <V> Lok Sabha </V> )",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"117.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <number of representatives in an organization/legislature> ; <pred:fact_t> ?pv ] <legislative body> ?qpv . ?qpv <pred:value> \"Lok Sabha\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "783": {
        "generations": "How many sovereign states have a nominal GDP of 6.7044e+09 and a total fertility rate less than arg4?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 6.7044e+09 </V> </ES> and <ES> <C> sovereign state </C> whose <A> total fertility rate </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <nominal GDP> ?pv . ?pv <pred:value> \"6.7044e+09\" . ?e <total fertility rate> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "784": {
        "generations": "Does MegaMan NT Warrior have less than 56 episodes?",
        "ori_data_item": {
            "question": "whether <E> MegaMan NT Warrior </E> whose <A> number of episodes </A> smaller than number <V> arg4 </V> ( <Q> pred:fact t </Q> is text <V> 56.0 </V> )",
            "sparql": "ASK { ?e <pred:name> \"MegaMan NT Warrior\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <number of episodes> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"56.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "785": {
        "generations": "What is the language of work or name for the subreddit \"PortHuron\" related to the city with a WOEID of 2475403 named Port Huron?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <E> Port Huron </E> whose <A> WOEID </A> is text <V> 2475403 </V> </ES> whose <A> subreddit </A> is text <V> PortHuron </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Port Huron\" . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"2475403\" . ?e <subreddit> ?pv . ?pv <pred:value> \"PortHuron\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "786": {
        "generations": "What is the subject's role for Burton upon Trent, which has a TOID of 4000000074552364 and an OS grid reference of SK245225?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> subject has role </Q> of <ES> <E> Burton upon Trent </E> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES> whose <A> TOID </A> is text <V> 4000000074552364 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Burton upon Trent\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <TOID> ?pv . ?pv <pred:value> \"4000000074552364\" . [ <pred:fact_h> ?e ; <pred:fact_r> <TOID> ; <pred:fact_t> ?pv ] <subject has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "787": {
        "generations": "What is the date of birth of the child of John Adams whose name is John Quincy Adams and was born on 1767-07-11?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> date of birth </Q> of <E> John Adams </E> that <R> child </R> backward to <ES> <E> John Quincy Adams </E> whose <A> date of birth </A> is date <V> 1767-07-11 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"John Adams\" . ?e_2 <pred:name> \"John Quincy Adams\" . ?e_2 <date of birth> ?pv . ?pv <pred:date> \"1767-07-11\"^^xsd:date . ?e_1 <child> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <child> ; <pred:fact_t> ?e_2 ] <date of birth> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "788": {
        "generations": "When did Bas-Rhin stop being located in the administrative territorial entity of Alsace?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> end time </Q> of <E> Bas-Rhin </E> that <R> located in the administrative territorial entity </R> backward to <ES> <E> Alsace </E> whose <A> end time </A> is date <V> 2016-01-01 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Bas-Rhin\" . ?e_2 <pred:name> \"Alsace\" . ?e_2 <end time> ?pv . ?pv <pred:date> \"2016-01-01\"^^xsd:date . ?e_1 <located in the administrative territorial entity> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <located in the administrative territorial entity> ; <pred:fact_t> ?e_2 ] <end time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "789": {
        "generations": "When did Australia start using pound sterling as its currency?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Australia </E> that <R> currency </R> backward to <ES> <E> pound sterling </E> whose <A> start time </A> is date <V> 1694-07-27 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Australia\" . ?e_2 <pred:name> \"pound sterling\" . ?e_2 <start time> ?pv . ?pv <pred:date> \"1694-07-27\"^^xsd:date . ?e_1 <currency> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <currency> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "790": {
        "generations": "Was Club Olimpia Deportivo founded on January 1st, 1912?",
        "ori_data_item": {
            "question": "whether <E> Club Olimpia Deportivo </E> whose <A> inception </A> is date <V> 1912-01-01 </V>",
            "sparql": "ASK { ?e <pred:name> \"Club Olimpia Deportivo\" . ?e <inception> ?pv . ?pv <pred:date> \"1912-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "791": {
        "generations": "Did The Sound of Music have its first performance on November 16, 1959?",
        "ori_data_item": {
            "question": "whether <E> The Sound of Music </E> whose <A> date of first performance </A> is date <V> 1959-11-16 </V>",
            "sparql": "ASK { ?e <pred:name> \"The Sound of Music\" . ?e <date of first performance> ?pv . ?pv <pred:date> \"1959-11-16\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "792": {
        "generations": "Was Chris Carter born on September 16th, 1982?",
        "ori_data_item": {
            "question": "whether <E> Chris Carter </E> whose <A> date of birth </A> is date <V> 1982-09-16 </V>",
            "sparql": "ASK { ?e <pred:name> \"Chris Carter\" . ?e <date of birth> ?pv . ?pv <pred:date> \"1982-09-16\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "793": {
        "generations": "Was Get Carter published on August 16, 2001?",
        "ori_data_item": {
            "question": "whether <E> Get Carter </E> whose <A> publication date </A> is date <V> 2001-08-16 </V>",
            "sparql": "ASK { ?e <pred:name> \"Get Carter\" . ?e <publication date> ?pv . ?pv <pred:date> \"2001-08-16\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "794": {
        "generations": "Did Somerset end on December 31st, 1976?",
        "ori_data_item": {
            "question": "whether <E> Somerset </E> whose <A> end time </A> is date <V> 1976-12-31 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <end time> ?pv . ?pv <pred:date> \"1976-12-31\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "795": {
        "generations": "Did Raja Casablanca officially open on March 6th, 1955?",
        "ori_data_item": {
            "question": "whether <E> Raja Casablanca </E> whose <A> date of official opening </A> is date <V> 1955-03-06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Raja Casablanca\" . ?e <date of official opening> ?pv . ?pv <pred:date> \"1955-03-06\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "796": {
        "generations": "Was Hudson Soft dissolved, abolished or demolished on March 1st, 2012?",
        "ori_data_item": {
            "question": "whether <E> Hudson Soft </E> whose <A> dissolved, abolished or demolished </A> is date <V> 2012-03-01 </V>",
            "sparql": "ASK { ?e <pred:name> \"Hudson Soft\" . ?e <dissolved, abolished or demolished> ?pv . ?pv <pred:date> \"2012-03-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "797": {
        "generations": "Did the 40th Academy Awards take place on April 10th, 1968?",
        "ori_data_item": {
            "question": "whether <E> 40th Academy Awards </E> whose <A> point in time </A> is date <V> 1968-04-10 </V>",
            "sparql": "ASK { ?e <pred:name> \"40th Academy Awards\" . ?e <point in time> ?pv . ?pv <pred:date> \"1968-04-10\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "798": {
        "generations": "Was the PlayStation 2 discontinued on January 4th, 2013?",
        "ori_data_item": {
            "question": "whether <E> PlayStation 2 </E> whose <A> discontinued date </A> is date <V> 2013-01-04 </V>",
            "sparql": "ASK { ?e <pred:name> \"PlayStation 2\" . ?e <discontinued date> ?pv . ?pv <pred:date> \"2013-01-04\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "799": {
        "generations": "What is the earliest written record of Prague (the one dated 0965-01-17)?",
        "ori_data_item": {
            "question": "whether <E> Prague </E> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V>",
            "sparql": "ASK { ?e <pred:name> \"Prague\" . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"0965-01-17\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "800": {
        "generations": "What was the date of baptism in early childhood for Johann Sebastian Bach (born on 1685-03-23)?",
        "ori_data_item": {
            "question": "whether <E> Johann Sebastian Bach </E> whose <A> date of baptism in early childhood </A> is date <V> 1685-03-23 </V>",
            "sparql": "ASK { ?e <pred:name> \"Johann Sebastian Bach\" . ?e <date of baptism in early childhood> ?pv . ?pv <pred:date> \"1685-03-23\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "801": {
        "generations": "Did the Boeing 747 have its first flight on February 9th, 1969?",
        "ori_data_item": {
            "question": "whether <E> Boeing 747 </E> whose <A> first flight </A> is date <V> 1969-02-09 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <first flight> ?pv . ?pv <pred:date> \"1969-02-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "802": {
        "generations": "What is the fact about Boston (the one whose inception date is 1630-09-07 and native label is Boston)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> native label </A> is text <V> Boston </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Boston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <native label> ?pv . ?pv <pred:value> \"Boston\" . [ <pred:fact_h> ?e ; <pred:fact_r> <native label> ; <pred:fact_t> ?pv ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "803": {
        "generations": "What is the connection between the People's Democratic Party (whose native label is People's Democratic Party) to Nigeria (the one whose Human Development Index is 0.499)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> People's Democratic Party </E> whose <A> native label </A> is text <V> People's Democratic Party </V> </ES> to <ES> <E> Nigeria </E> whose <A> Human Development Index </A> is number <V> 0.499 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"People's Democratic Party\" . ?e_1 <native label> ?pv . ?pv <pred:value> \"People's Democratic Party\" . ?e_2 <pred:name> \"Nigeria\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.499\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "804": {
        "generations": "Which city of the United States had an area of 259.0 and ended on 1846-07-09?",
        "ori_data_item": {
            "question": "what is <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 259.0 </V> ( <Q> end time </Q> is date <V> 1846-07-09 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv . ?pv <pred:value> \"259.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <area> ; <pred:fact_t> ?pv ] <end time> ?qpv . ?qpv <pred:date> \"1846-07-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "805": {
        "generations": "How many humans died on September 1st, 1988?",
        "ori_data_item": {
            "question": "how many <ES> <C> human </C> whose <A> date of death </A> is date <V> 1988-09-01 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of death> ?pv . ?pv <pred:date> \"1988-09-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "806": {
        "generations": "How many films were published on February 20th, 1997?",
        "ori_data_item": {
            "question": "how many <ES> <C> film </C> whose <A> publication date </A> is date <V> 1997-02-20 </V> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv . ?pv <pred:date> \"1997-02-20\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "807": {
        "generations": "What is the language of work or name for the subreddit PortHuron, which is related to the city of the United States with a WOEID of 2475403?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <C> city of the United States </C> whose <A> WOEID </A> is text <V> 2475403 </V> </ES> whose <A> subreddit </A> is text <V> PortHuron </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"2475403\" . [ <pred:fact_h> ?e ; <pred:fact_r> <WOEID> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:value> \"2475403\" . ?e <subreddit> ?pv . ?pv <pred:value> \"PortHuron\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "808": {
        "generations": "Does Cameroon have a Human Development Index of 0.436?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> whose <A> Human Development Index </A> is number <V> 0.436 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cameroon\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.436\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "809": {
        "generations": "Does Bharatiya Janata Party have 1.1e+08 members and 117 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "whether <ES> <E> Bharatiya Janata Party </E> whose <A> member count </A> is number <V> 1.1e+08 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is number <V> 117.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <member count> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"1.1e+08\"^^xsd:double . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"117.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "810": {
        "generations": "Did Harry Potter and the Goblet of Fire have a box office revenue of 8.96911e+08 in the same unit as the one mentioned in the statement?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "811": {
        "generations": "What is the difference in Human Development Index between Ivory Coast and Ivory Coast (the same country)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact h </Q> of <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> that <R> country </R> backward to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.445 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.39\"^^xsd:double . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.445\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <pred:fact h> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "812": {
        "generations": "Is there a city in the United States with a population of 25514.0 and a population greater than arg6?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> whose <A> population </A> larger than number <V> arg6 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "813": {
        "generations": "Is the population of Greater Houston equal to 6.155e+06?",
        "ori_data_item": {
            "question": "whether <E> Greater Houston </E> whose <A> population </A> is number <V> 6.155e+06 </V> ( <Q> pred:fact t </Q> is text <V> 6.155e+06 </V> )",
            "sparql": "ASK { ?e <pred:name> \"Greater Houston\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.155e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"6.155e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "814": {
        "generations": "What is the object role for snowboarding in Utah, which has a population of 2.99592e+06 and has snowboarding as an official symbol with subreddit \"snowboarding\"?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> object has role </Q> of <ES> <E> Utah </E> whose <A> population </A> is number <V> 2.99592e+06 </V> </ES> that <R> official symbol </R> backward to <ES> <E> snowboarding </E> whose <A> subreddit </A> is text <V> snowboarding </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Utah\" . ?e_1 <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.99592e+06\"^^xsd:double . ?e_2 <pred:name> \"snowboarding\" . ?e_2 <subreddit> ?pv_1 . ?pv_1 <pred:value> \"snowboarding\" . ?e_1 <official symbol> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <official symbol> ; <pred:fact_t> ?e_2 ] <object has role> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "815": {
        "generations": "When did Madonna receive the Grammy Award for Best Dance/Electronic Album (the one whose native label is \"Grammy Award for Best Dance/Electronic Album\") and has 6 children?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> point in time </Q> of <ES> <E> Madonna </E> whose <A> number of children </A> is number <V> 6.0 </V> </ES> that <R> award received </R> backward to <ES> <E> Grammy Award for Best Dance/Electronic Album </E> whose <A> native label </A> is text <V> Grammy Award for Best Dance/Electronic Album </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Madonna\" . ?e_1 <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"6.0\"^^xsd:double . ?e_2 <pred:name> \"Grammy Award for Best Dance/Electronic Album\" . ?e_2 <native label> ?pv_1 . ?pv_1 <pred:value> \"Grammy Award for Best Dance/Electronic Album\" . ?e_1 <award received> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <award received> ; <pred:fact_t> ?e_2 ] <point in time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "816": {
        "generations": "How many cities in the United States have a male population greater than arg1 and a female population greater than arg4?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> city of the United States </C> whose <A> male population </A> larger than number <V> arg1 </V> </ES> and <ES> <C> city of the United States </C> whose <A> female population </A> larger than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <male population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <female population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "817": {
        "generations": "How many film production companies have more than arg1 employees and also have more than arg4 employees?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> film production company </C> whose <A> employees </A> larger than number <V> arg1 </V> </ES> and <ES> <C> film production company </C> whose <A> employees </A> larger than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film production company\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <employees> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "818": {
        "generations": "How many museums have more than arg1 visitors per year and also have more than arg4 visitors per year?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> museum </C> whose <A> visitors per year </A> larger than number <V> arg1 </V> </ES> and <ES> <C> museum </C> whose <A> visitors per year </A> larger than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"museum\" . ?e <visitors per year> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <visitors per year> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "819": {
        "generations": "How many states have a number of out-of-school children greater than arg1 and also have a number of out-of-school children greater than arg4?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> state </C> whose <A> number of out-of-school children </A> larger than number <V> arg1 </V> </ES> and <ES> <C> state </C> whose <A> number of out-of-school children </A> larger than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"state\" . ?e <number of out-of-school children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <number of out-of-school children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "820": {
        "generations": "How many visual artworks have a box office greater than arg1 and another box office greater than arg4?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> visual artwork </C> whose <A> box office </A> larger than number <V> arg1 </V> </ES> and <ES> <C> visual artwork </C> whose <A> box office </A> larger than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"visual artwork\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v > \"arg1\"^^xsd:double ) . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "821": {
        "generations": "What is the language of work or name for the subreddit \"PortHuron\" related to the city with a population of 31302.0 named Port Huron?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> language of work or name </Q> of <ES> <E> Port Huron </E> whose <A> population </A> is number <V> 31302.0 </V> </ES> whose <A> subreddit </A> is text <V> PortHuron </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Port Huron\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"31302.0\"^^xsd:double . ?e <subreddit> ?pv . ?pv <pred:value> \"PortHuron\" . [ <pred:fact_h> ?e ; <pred:fact_r> <subreddit> ; <pred:fact_t> ?pv ] <language of work or name> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "822": {
        "generations": "What is the population of the metropolitan area on January 1st, 2014, if its population is 2.71049e+06?",
        "ori_data_item": {
            "question": "whether <ES> <C> metropolitan area </C> whose <A> population </A> is number <V> 2.71049e+06 </V> </ES> whose <A> population </A> is text <V> 2.71049e+06 </V> ( <Q> point in time </Q> is date <V> 2014-01-01 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"metropolitan area\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"2.71049e+06\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <point in time> ?qpv . ?qpv <pred:date> \"2014-01-01\"^^xsd:date . ?e <population> ?pv . ?pv <pred:value> \"2.71049e+06\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "823": {
        "generations": "Did the film with an attendance of 8446.0 on 2018-05-30 have an end time?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> attendance </A> is number <V> 8446.0 </V> </ES> whose <A> attendance </A> is text <V> 8446.0 </V> ( <Q> end time </Q> is date <V> 2018-05-30 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <attendance> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8446.0\"^^xsd:double . [ <pred:fact_h> ?e ; <pred:fact_r> <attendance> ; <pred:fact_t> ?pv_1 ] <end time> ?qpv . ?qpv <pred:date> \"2018-05-30\"^^xsd:date . ?e <attendance> ?pv . ?pv <pred:value> \"8446.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "824": {
        "generations": "Did the anime television series with 224 episodes (whose end time is 2004-09-29) have each episode lasting 224.0 units?",
        "ori_data_item": {
            "question": "whether <ES> <C> anime television series </C> whose <A> number of episodes </A> is text <V> 224.0 </V> </ES> whose <A> end time </A> is date <V> 2004-09-29 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"anime television series\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"224.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <number of episodes> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"224.0\"^^xsd:double . ?e <end time> ?pv . ?pv <pred:date> \"2004-09-29\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "825": {
        "generations": "How many unitary states have a population of 554109 and a population greater than arg3?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> unitary state </C> whose <A> population </A> is number <V> 554109.0 </V> </ES> and <ES> <C> unitary state </C> whose <A> population </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"unitary state\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"554109.0\"^^xsd:double . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "826": {
        "generations": "How many national association football teams have a ranking of 161.0 and a ranking higher than arg3?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> national association football team </C> whose <A> ranking </A> is number <V> 161.0 </V> </ES> and <ES> <C> national association football team </C> whose <A> ranking </A> larger than number <V> arg3 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"national association football team\" . ?e <ranking> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"161.0\"^^xsd:double . ?e <ranking> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg3\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "827": {
        "generations": "Is there a sovereign state with a Human Development Index of 0.436 and a Dewey Decimal Classification of 2--6711?",
        "ori_data_item": {
            "question": "whether <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--6711 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6711\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "828": {
        "generations": "Does the film with a box office of 8.96911e+08 have two box office values that are equal to 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <ES> <C> film </C> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES> whose <A> box office </A> is text <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e <box office> ?pv . ?pv <pred:value> \"8.96911e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "829": {
        "generations": "What is the agent whose number of seats is less than arg1 and has 59.0 seats?",
        "ori_data_item": {
            "question": "whether <ES> <C> agent </C> whose <A> number of seats </A> smaller than number <V> arg1 </V> </ES> whose <A> number of seats </A> is text <V> 59.0 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"agent\" . ?e <number of seats> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 < \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <number of seats> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"59.0\"^^xsd:double . ?e <number of seats> ?pv . ?pv <pred:value> \"59.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "830": {
        "generations": "Is there an astronomical object type with an angular diameter less than arg1 and a minimum quantity of 32.7 and an absolute magnitude of 4.83?",
        "ori_data_item": {
            "question": "whether <ES> <C> astronomical object type </C> whose <A> angular diameter </A> smaller than number <V> arg1 </V> </ES> whose <A> absolute magnitude </A> is text <V> 4.83 </V> ( <Q> minimum quantity </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"astronomical object type\" . ?e <angular diameter> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 < \"arg1\"^^xsd:double ) . [ <pred:fact_h> ?e ; <pred:fact_r> <angular diameter> ; <pred:fact_t> ?pv_1 ] <minimum quantity> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"32.7\"^^xsd:double . ?e <absolute magnitude> ?pv . ?pv <pred:value> \"4.83\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "831": {
        "generations": "Which sovereign state has a Dewey Decimal Classification of 2--6668 and a Human Development Index less than arg4?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--6668 </V> </ES> and <ES> <C> sovereign state </C> whose <A> Human Development Index </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--6668\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "832": {
        "generations": "Who is the human with CANTIC-ID a19144258 and less than 4 children?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> CANTIC-ID </A> is text <V> a19144258 </V> </ES> and <ES> <C> human </C> whose <A> number of children </A> smaller than number <V> arg4 </V> </ES> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <CANTIC-ID> ?pv . ?pv <pred:value> \"a19144258\" . ?e <number of children> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v < \"arg4\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "833": {
        "generations": "When did Alsace (the one with INSEE region code 42) end?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> end time </Q> of <ES> <E> Alsace </E> whose <A> end time </A> is date <V> 2016-01-01 </V> </ES> whose <A> INSEE region code </A> is text <V> 42 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Alsace\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"2016-01-01\"^^xsd:date . ?e <INSEE region code> ?pv . ?pv <pred:value> \"42\" . [ <pred:fact_h> ?e ; <pred:fact_r> <INSEE region code> ; <pred:fact_t> ?pv ] <end time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "834": {
        "generations": "What is the inception time for the city of Indianapolis (the one whose local dialing code is 317) and whose inception date is 1821-01-01?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> inception </Q> of <ES> <E> Indianapolis </E> whose <A> inception </A> is date <V> 1821-01-01 </V> </ES> whose <A> local dialing code </A> is text <V> 317 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Indianapolis\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1821-01-01\"^^xsd:date . ?e <local dialing code> ?pv . ?pv <pred:value> \"317\" . [ <pred:fact_h> ?e ; <pred:fact_r> <local dialing code> ; <pred:fact_t> ?pv ] <inception> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "835": {
        "generations": "What is the publication date of the review that gave Constantine a score of 4/10 (published on 2005-02-15)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> publication date </Q> of <ES> <E> Constantine </E> whose <A> publication date </A> is date <V> 2005-02-15 </V> </ES> whose <A> review score </A> is text <V> 4/10 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:name> \"Constantine\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2005-02-15\"^^xsd:date . ?e <review score> ?pv . ?pv <pred:value> \"4/10\" . [ <pred:fact_h> ?e ; <pred:fact_r> <review score> ; <pred:fact_t> ?pv ] <publication date> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "836": {
        "generations": "What is the Dewey Decimal Classification of the city of the United States that has a value of \"2--74461\"?",
        "ori_data_item": {
            "question": "what is the attribute <A> Dewey Decimal Classification </A> of <ES> <C> city of the United States </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--74461\" . ?e <Dewey Decimal Classification> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "837": {
        "generations": "What is the OSM tag or key for the real property that has a Tag:shop=art value?",
        "ori_data_item": {
            "question": "what is the attribute <A> OSM tag or key </A> of <ES> <C> real property </C> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"real property\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "838": {
        "generations": "What is the OS grid reference of the town that has an OS grid reference of SK245225?",
        "ori_data_item": {
            "question": "what is the attribute <A> OS grid reference </A> of <ES> <C> town </C> whose <A> OS grid reference </A> is text <V> SK245225 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"town\" . ?e <OS grid reference> ?pv_1 . ?pv_1 <pred:value> \"SK245225\" . ?e <OS grid reference> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "839": {
        "generations": "Who is a cast member in a film with a duration of 160.0?",
        "ori_data_item": {
            "question": "what is the attribute <A> cast member </A> of <ES> <C> film </C> whose <A> duration </A> is text <V> 160.0 </V> </ES>",
            "sparql": "SELECT DISTINCT ?pv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <cast member> ?pv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "840": {
        "generations": "Who said \"I love you, too\" as their last words to George W. Bush, had less than arg1 children, and was a human?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> human </C> whose <A> number of children </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> human </C> whose <A> last words </A> is text <V> I love you, too. </V> </ES> ( <Q> addressee </Q> is text <V> George W. Bush </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <last words> ?pv_1 . ?pv_1 <pred:value> \"I love you, too.\" . [ <pred:fact_h> ?e ; <pred:fact_r> <last words> ; <pred:fact_t> ?pv_1 ] <addressee> ?qpv . ?qpv <pred:value> \"George W. Bush\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "841": {
        "generations": "Which city has a population of 6.52027e+06, a Brazilian municipality code of 2017, and a Human Development Index less than arg1?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city </C> whose <A> Human Development Index </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> city </C> whose <A> population </A> is text <V> 6.52027e+06 </V> </ES> ( <Q> Brazilian municipality code </Q> is text <V> 2017 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"6.52027e+06\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <Brazilian municipality code> ?qpv . ?qpv <pred:value> \"2017\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "842": {
        "generations": "Which sovereign state has a total fertility rate less than arg1, an official name of \"\uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d\", and a McCune-Reischauer romanization of \"Chos\u014fn Minjuju\u016di Inmin Konghwaguk\"?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> sovereign state </C> whose <A> total fertility rate </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> sovereign state </C> whose <A> official name </A> is text <V> \uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d </V> </ES> ( <Q> McCune-Reischauer romanization </Q> is text <V> Chos\u014fn Minjuju\u016di Inmin Konghwaguk </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <total fertility rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <official name> ?pv_1 . ?pv_1 <pred:value> \"\uc870\uc120\ubbfc\uc8fc\uc8fc\uc758\uc778\ubbfc\uacf5\ud654\uad6d\" . [ <pred:fact_h> ?e ; <pred:fact_r> <official name> ; <pred:fact_t> ?pv_1 ] <McCune-Reischauer romanization> ?qpv . ?qpv <pred:value> \"Chos\u014fn Minjuju\u016di Inmin Konghwaguk\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "843": {
        "generations": "Which disease has less than arg1 number of cases and has 31479.0 cases in Guyana?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> disease </C> whose <A> number of cases </A> smaller than number <V> arg1 </V> </ES> and <ES> <C> disease </C> whose <A> number of cases </A> is text <V> 31479.0 </V> </ES> ( <Q> country </Q> is text <V> Guyana </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"disease\" . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> ?v . FILTER ( ?v < \"arg1\"^^xsd:double ) . ?e <number of cases> ?pv_1 . ?pv_1 <pred:value> \"31479.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <number of cases> ; <pred:fact_t> ?pv_1 ] <country> ?qpv . ?qpv <pred:value> \"Guyana\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "844": {
        "generations": "When did Boston become a part of the country whose Human Development Index is 0.92?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Boston </E> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> Human Development Index </A> is number <V> 0.92 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_2 <pred:name> \"United States of America\" . ?e_2 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.92\"^^xsd:double . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "845": {
        "generations": "When was John Quincy Adams born, who is the child of John Adams (the one born on 1735-10-19)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> date of birth </Q> of <ES> <E> John Adams </E> whose <A> date of birth </A> is date <V> 1735-10-19 </V> </ES> that <R> child </R> backward to <E> John Quincy Adams </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"John Adams\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1735-10-19\"^^xsd:date . ?e_2 <pred:name> \"John Quincy Adams\" . ?e_1 <child> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <child> ; <pred:fact_t> ?e_2 ] <date of birth> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "846": {
        "generations": "When did Degrassi: The Next Generation stop airing on CTV Television Network?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> end time </Q> of <ES> <E> Degrassi: The Next Generation </E> whose <A> end time </A> is date <V> 2015-08-02 </V> </ES> that <R> original network </R> backward to <E> CTV Television Network </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Degrassi: The Next Generation\" . ?e_1 <end time> ?pv . ?pv <pred:date> \"2015-08-02\"^^xsd:date . ?e_2 <pred:name> \"CTV Television Network\" . ?e_1 <original network> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <original network> ; <pred:fact_t> ?e_2 ] <end time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "847": {
        "generations": "What is the publication date of Friends (the one whose place of publication is the United States of America)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> publication date </Q> of <ES> <E> Friends </E> whose <A> publication date </A> is date <V> 1968-06-24 </V> </ES> that <R> place of publication </R> backward to <E> United States of America </E>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Friends\" . ?e_1 <publication date> ?pv . ?pv <pred:date> \"1968-06-24\"^^xsd:date . ?e_2 <pred:name> \"United States of America\" . ?e_1 <place of publication> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <place of publication> ; <pred:fact_t> ?e_2 ] <publication date> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "848": {
        "generations": "What is the elevation above sea level of the U.S. city whose area is 15.661 square miles and has an elevation above sea level of 114.0?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> pred:fact t </Q> of <ES> <C> city of the United States </C> whose <A> area </A> is text <V> 15.661 </V> </ES> whose <A> elevation above sea level </A> is text <V> 114.0 </V>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" . [ <pred:fact_h> ?e ; <pred:fact_r> <area> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv_1 . ?qpv_1 <pred:value> \"15.661\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"114.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "849": {
        "generations": "What is the connection between Cher (the one whose name in native language is Cher) and the Primetime Emmy Award?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cher </E> whose <A> name in native language </A> is text <V> Cher </V> </ES> to <E> Primetime Emmy Award </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cher\" . ?e_1 <name in native language> ?pv . ?pv <pred:value> \"Cher\" . ?e_2 <pred:name> \"Primetime Emmy Award\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "850": {
        "generations": "What is the connection between Alien (the one with the title \"Alien\") and Sigourney Weaver?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Alien </E> whose <A> title </A> is text <V> Alien </V> </ES> to <E> Sigourney Weaver </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Alien\" . ?e_1 <title> ?pv . ?pv <pred:value> \"Alien\" . ?e_2 <pred:name> \"Sigourney Weaver\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "851": {
        "generations": "What is the connection between Abidjan (the one with a native label of Abidjan) and Ivory Coast?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Abidjan </E> whose <A> native label </A> is text <V> Abidjan </V> </ES> to <E> Ivory Coast </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Abidjan\" . ?e_1 <native label> ?pv . ?pv <pred:value> \"Abidjan\" . ?e_2 <pred:name> \"Ivory Coast\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "852": {
        "generations": "What is the connection between Allium cepa and carbohydrate?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Allium cepa </E> whose <A> taxon name </A> is text <V> Allium cepa </V> </ES> to <E> carbohydrate </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Allium cepa\" . ?e_1 <taxon name> ?pv . ?pv <pred:value> \"Allium cepa\" . ?e_2 <pred:name> \"carbohydrate\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "853": {
        "generations": "Is there a U.S. city with a population of exactly 25514.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> population </A> is text <V> 25514.0 </V> </ES> whose <A> population </A> is number <V> 25514.0 </V> ( <Q> pred:fact t </Q> is text <V> 1 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <population> ?pv_1 . ?pv_1 <pred:value> \"25514.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <population> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:unit> \"1\" . ?qpv <pred:value> \"25514.0\"^^xsd:double . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"25514.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "854": {
        "generations": "What is the connection between Somerset (the one whose end time is 1976-12-31) and Sigourney Weaver?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Somerset </E> whose <A> end time </A> is date <V> 1976-12-31 </V> </ES> to <E> Sigourney Weaver </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Somerset\" . ?e_1 <end time> ?pv . ?pv <pred:date> \"1976-12-31\"^^xsd:date . ?e_2 <pred:name> \"Sigourney Weaver\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "855": {
        "generations": "What is the connection between Kevin Clash (the one born on 1960-09-17) and the Primetime Emmy Award?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Kevin Clash </E> whose <A> date of birth </A> is date <V> 1960-09-17 </V> </ES> to <E> Primetime Emmy Award </E>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Kevin Clash\" . ?e_1 <date of birth> ?pv . ?pv <pred:date> \"1960-09-17\"^^xsd:date . ?e_2 <pred:name> \"Primetime Emmy Award\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "856": {
        "generations": "Which city of the United States has a Dewey Decimal Classification of 2--74461?",
        "ori_data_item": {
            "question": "what is <ES> <C> city of the United States </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> ( <Q> pred:fact t </Q> is text <V> 2--74461 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--74461\" . [ <pred:fact_h> ?e ; <pred:fact_r> <Dewey Decimal Classification> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"2--74461\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "857": {
        "generations": "When did Boston become a part of the United States of America (the one whose CANTIC-ID is a11444253)?",
        "ori_data_item": {
            "question": "what is the qualifier <Q> start time </Q> of <E> Boston </E> that <R> country </R> backward to <ES> <E> United States of America </E> whose <A> CANTIC-ID </A> is text <V> a11444253 </V> </ES>",
            "sparql": "SELECT DISTINCT ?qpv WHERE { ?e_1 <pred:name> \"Boston\" . ?e_2 <pred:name> \"United States of America\" . ?e_2 <CANTIC-ID> ?pv . ?pv <pred:value> \"a11444253\" . ?e_1 <country> ?e_2 . [ <pred:fact_h> ?e_1 ; <pred:fact_r> <country> ; <pred:fact_t> ?e_2 ] <start time> ?qpv .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "858": {
        "generations": "Is the city of the United States with a WOEID of 2475403 and a population of 31302.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> WOEID </A> is text <V> 2475403 </V> </ES> whose <A> population </A> is number <V> 31302.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"2475403\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"31302.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "859": {
        "generations": "Is the person with a British Museum person-institution ID of 17780 and 2 children a human?",
        "ori_data_item": {
            "question": "whether <ES> <C> human </C> whose <A> British Museum person-institution </A> is text <V> 17780 </V> </ES> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <British Museum person-institution> ?pv_1 . ?pv_1 <pred:value> \"17780\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "860": {
        "generations": "Which city of the United States was founded on September 7th, 1630?",
        "ori_data_item": {
            "question": "what is <ES> <C> city of the United States </C> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "861": {
        "generations": "Who was born on May 10th, 1899 and is classified as a human?",
        "ori_data_item": {
            "question": "what is <ES> <C> human </C> whose <A> date of birth </A> is date <V> 1899-05-10 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"human\" . ?e <date of birth> ?pv . ?pv <pred:date> \"1899-05-10\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "862": {
        "generations": "Which film was published on July 11th, 2007?",
        "ori_data_item": {
            "question": "what is <ES> <C> film </C> whose <A> publication date </A> is date <V> 2007-07-11 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"film\" . ?e <publication date> ?pv . ?pv <pred:date> \"2007-07-11\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "863": {
        "generations": "Which play had its first performance on November 16th, 1959?",
        "ori_data_item": {
            "question": "what is <ES> <C> play </C> whose <A> date of first performance </A> is date <V> 1959-11-16 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"play\" . ?e <date of first performance> ?pv . ?pv <pred:date> \"1959-11-16\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "864": {
        "generations": "Which theatrical genre ended on 1968-03-25?",
        "ori_data_item": {
            "question": "what is <ES> <C> theatrical genre </C> whose <A> end time </A> is date <V> 1968-03-25 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"theatrical genre\" . ?e <end time> ?pv . ?pv <pred:date> \"1968-03-25\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "865": {
        "generations": "Which Academy Awards ceremony took place on April 9th, 1979?",
        "ori_data_item": {
            "question": "what is <ES> <C> Academy Awards ceremony </C> whose <A> point in time </A> is date <V> 1979-04-09 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"Academy Awards ceremony\" . ?e <point in time> ?pv . ?pv <pred:date> \"1979-04-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "866": {
        "generations": "Which city is the capital and has the earliest written record dated on 0965-01-17?",
        "ori_data_item": {
            "question": "what is <ES> <C> capital </C> whose <A> time of earliest written record </A> is date <V> 0965-01-17 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"capital\" . ?e <time of earliest written record> ?pv . ?pv <pred:date> \"0965-01-17\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "867": {
        "generations": "Which aircraft functional class had its first flight on 1969-02-09?",
        "ori_data_item": {
            "question": "what is <ES> <C> aircraft functional class </C> whose <A> first flight </A> is date <V> 1969-02-09 </V> </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"aircraft functional class\" . ?e <first flight> ?pv . ?pv <pred:date> \"1969-02-09\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "868": {
        "generations": "Is Boston's Dewey Decimal Classification 2--74461 and was it founded on September 7th, 1630?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> inception </A> is date <V> 1630-09-07 </V> </ES> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <inception> ?pv_1 . ?pv_1 <pred:date> \"1630-09-07\"^^xsd:date . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--74461\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "869": {
        "generations": "Does Larry Hagman (born on 1931-09-21) have an ISNI of 0000 0000 5930 3891?",
        "ori_data_item": {
            "question": "whether <ES> <E> Larry Hagman </E> whose <A> date of birth </A> is date <V> 1931-09-21 </V> </ES> whose <A> ISNI </A> is text <V> 0000 0000 5930 3891 </V>",
            "sparql": "ASK { ?e <pred:name> \"Larry Hagman\" . ?e <date of birth> ?pv_1 . ?pv_1 <pred:date> \"1931-09-21\"^^xsd:date . ?e <ISNI> ?pv . ?pv <pred:value> \"0000 0000 5930 3891\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "870": {
        "generations": "Does Miracle at St. Anna have a duration of 160.0 and a publication date of 2008-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> publication date </A> is date <V> 2008-01-01 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <publication date> ?pv_1 . ?pv_1 <pred:date> \"2008-01-01\"^^xsd:date . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "871": {
        "generations": "Did Somerset end on December 31st, 1976 and have 1710 episodes?",
        "ori_data_item": {
            "question": "whether <ES> <E> Somerset </E> whose <A> end time </A> is date <V> 1976-12-31 </V> </ES> whose <A> number of episodes </A> is text <V> 1710.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <end time> ?pv_1 . ?pv_1 <pred:date> \"1976-12-31\"^^xsd:date . ?e <number of episodes> ?pv . ?pv <pred:value> \"1710.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "872": {
        "generations": "Did the 40th Academy Awards take place on April 10th, 1968 and have an edition number of 40?",
        "ori_data_item": {
            "question": "whether <ES> <E> 40th Academy Awards </E> whose <A> point in time </A> is date <V> 1968-04-10 </V> </ES> whose <A> edition number </A> is text <V> 40 </V>",
            "sparql": "ASK { ?e <pred:name> \"40th Academy Awards\" . ?e <point in time> ?pv_1 . ?pv_1 <pred:date> \"1968-04-10\"^^xsd:date . ?e <edition number> ?pv . ?pv <pred:value> \"40\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "873": {
        "generations": "Did Boston, which has a Dewey Decimal Classification of 2--74461, have an inception date of 1630-09-07?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> </ES> whose <A> inception </A> is date <V> 1630-09-07 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--74461\" . ?e <inception> ?pv . ?pv <pred:date> \"1630-09-07\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "874": {
        "generations": "Did Miracle at St. Anna have a duration of 160.0 and a publication date of 2008-01-01?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> publication date </A> is date <V> 2008-01-01 </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <publication date> ?pv . ?pv <pred:date> \"2008-01-01\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "875": {
        "generations": "Did Larry Hagman (the one with ISNI 0000 0000 5930 3891) die on November 23, 2012?",
        "ori_data_item": {
            "question": "whether <ES> <E> Larry Hagman </E> whose <A> ISNI </A> is text <V> 0000 0000 5930 3891 </V> </ES> whose <A> date of death </A> is date <V> 2012-11-23 </V>",
            "sparql": "ASK { ?e <pred:name> \"Larry Hagman\" . ?e <ISNI> ?pv_1 . ?pv_1 <pred:value> \"0000 0000 5930 3891\" . ?e <date of death> ?pv . ?pv <pred:date> \"2012-11-23\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "876": {
        "generations": "Did Somerset end on December 31st, 1976 and have 1710 episodes?",
        "ori_data_item": {
            "question": "whether <ES> <E> Somerset </E> whose <A> number of episodes </A> is text <V> 1710.0 </V> </ES> whose <A> end time </A> is date <V> 1976-12-31 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <number of episodes> ?pv_1 . ?pv_1 <pred:value> \"1710.0\" . ?e <end time> ?pv . ?pv <pred:date> \"1976-12-31\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "877": {
        "generations": "Did the 40th Academy Awards take place on April 10th, 1968 and have an edition number of 40?",
        "ori_data_item": {
            "question": "whether <ES> <E> 40th Academy Awards </E> whose <A> edition number </A> is text <V> 40 </V> </ES> whose <A> point in time </A> is date <V> 1968-04-10 </V>",
            "sparql": "ASK { ?e <pred:name> \"40th Academy Awards\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"40\" . ?e <point in time> ?pv . ?pv <pred:date> \"1968-04-10\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "878": {
        "generations": "Was the production code for Hearts and Minds 111 and was its first performance on January 12th, 2005?",
        "ori_data_item": {
            "question": "whether <ES> <E> Hearts and Minds </E> whose <A> production code </A> is text <V> 111 </V> </ES> whose <A> date of first performance </A> is date <V> 2005-01-12 </V>",
            "sparql": "ASK { ?e <pred:name> \"Hearts and Minds\" . ?e <production code> ?pv_1 . ?pv_1 <pred:value> \"111\" . ?e <date of first performance> ?pv . ?pv <pred:date> \"2005-01-12\"^^xsd:date .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "879": {
        "generations": "What is the connection between the People's Democratic Party (whose native label is also People's Democratic Party) and Nigeria (the one whose British Museum person-institution is 174909)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> People's Democratic Party </E> whose <A> native label </A> is text <V> People's Democratic Party </V> </ES> to <ES> <E> Nigeria </E> whose <A> British Museum person-institution </A> is text <V> 174909 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"People's Democratic Party\" . ?e_1 <native label> ?pv . ?pv <pred:value> \"People's Democratic Party\" . ?e_2 <pred:name> \"Nigeria\" . ?e_2 <British Museum person-institution> ?pv_1 . ?pv_1 <pred:value> \"174909\" . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "880": {
        "generations": "Does Bharatiya Janata Party have a member count of 1.1e+08?",
        "ori_data_item": {
            "question": "whether <E> Bharatiya Janata Party </E> whose <A> member count </A> is number <V> 1.1e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <member count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.1e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "881": {
        "generations": "Did Harry Potter and the Goblet of Fire have a box office revenue of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.96911e+08\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "882": {
        "generations": "Does Liberia have a Human Development Index of 0.424?",
        "ori_data_item": {
            "question": "whether <E> Liberia </E> whose <A> Human Development Index </A> is number <V> 0.424 </V>",
            "sparql": "ASK { ?e <pred:name> \"Liberia\" . ?e <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.424\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "883": {
        "generations": "Does Ipswich have a population of 163,000?",
        "ori_data_item": {
            "question": "whether <E> Ipswich </E> whose <A> population </A> is number <V> 163000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ipswich\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"163000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "884": {
        "generations": "Does Fred Astaire have 2 children?",
        "ori_data_item": {
            "question": "whether <E> Fred Astaire </E> whose <A> number of children </A> is number <V> 2.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Fred Astaire\" . ?e <number of children> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "885": {
        "generations": "Does Butler University have a student count of 4512?",
        "ori_data_item": {
            "question": "whether <E> Butler University </E> whose <A> students count </A> is number <V> 4512.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Butler University\" . ?e <students count> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"4512.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "886": {
        "generations": "Does California College of the Arts have 500 employees?",
        "ori_data_item": {
            "question": "whether <E> California College of the Arts </E> whose <A> employees </A> is number <V> 500.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"California College of the Arts\" . ?e <employees> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"500.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "887": {
        "generations": "Does the California State Assembly have 80 seats?",
        "ori_data_item": {
            "question": "whether <E> California State Assembly </E> whose <A> number of seats </A> is number <V> 80.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"California State Assembly\" . ?e <number of seats> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"80.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "888": {
        "generations": "Does Somerset have 1710.0 episodes?",
        "ori_data_item": {
            "question": "whether <E> Somerset </E> whose <A> number of episodes </A> is number <V> 1710.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <number of episodes> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1710.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "889": {
        "generations": "Does Target Corporation have an Alexa rank of 380.0?",
        "ori_data_item": {
            "question": "whether <E> Target Corporation </E> whose <A> Alexa rank </A> is number <V> 380.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Target Corporation\" . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"380.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "890": {
        "generations": "Does Gujarat have a female population of 2.89484e+07?",
        "ori_data_item": {
            "question": "whether <E> Gujarat </E> whose <A> female population </A> is number <V> 2.89484e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"Gujarat\" . ?e <female population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.89484e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "891": {
        "generations": "Has PlayStation 3 sold 87 million units?",
        "ori_data_item": {
            "question": "whether <E> PlayStation 3 </E> whose <A> units sold </A> is number <V> 8.7e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"PlayStation 3\" . ?e <units sold> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"8.7e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "892": {
        "generations": "Does Limburg have an annual number of weddings equal to 3568.0?",
        "ori_data_item": {
            "question": "whether <E> Limburg </E> whose <A> annual number of weddings </A> is number <V> 3568.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Limburg\" . ?e <annual number of weddings> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"3568.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "893": {
        "generations": "Does Carlisle have 50429.0 households?",
        "ori_data_item": {
            "question": "whether <E> Carlisle </E> whose <A> number of households </A> is number <V> 50429.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Carlisle\" . ?e <number of households> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"50429.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "894": {
        "generations": "Does Mars have a flattening of 0.00589?",
        "ori_data_item": {
            "question": "whether <E> Mars </E> whose <A> flattening </A> is number <V> 0.00589 </V>",
            "sparql": "ASK { ?e <pred:name> \"Mars\" . ?e <flattening> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.00589\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "895": {
        "generations": "Has cholera caused 143,000 deaths?",
        "ori_data_item": {
            "question": "whether <E> cholera </E> whose <A> number of deaths </A> is number <V> 143000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"cholera\" . ?e <number of deaths> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"143000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "896": {
        "generations": "Does malaria have 881730 cases?",
        "ori_data_item": {
            "question": "whether <E> malaria </E> whose <A> number of cases </A> is number <V> 881730.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"malaria\" . ?e <number of cases> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"881730.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "897": {
        "generations": "Does Forest Lawn Memorial Park have 119216 graves?",
        "ori_data_item": {
            "question": "whether <E> Forest Lawn Memorial Park </E> whose <A> number of graves </A> is number <V> 119216.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Forest Lawn Memorial Park\" . ?e <number of graves> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"119216.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "898": {
        "generations": "Does Cebu have an electorate of 1.90374e+06?",
        "ori_data_item": {
            "question": "whether <E> Cebu </E> whose <A> electorate </A> is number <V> 1.90374e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cebu\" . ?e <electorate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.90374e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "899": {
        "generations": "Does Queen's University have an admission rate of 0.42?",
        "ori_data_item": {
            "question": "whether <E> Queen's University </E> whose <A> admission rate </A> is number <V> 0.42 </V>",
            "sparql": "ASK { ?e <pred:name> \"Queen's University\" . ?e <admission rate> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.42\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "900": {
        "generations": "Did Cinderella have an attendance of 1.35985e+06?",
        "ori_data_item": {
            "question": "whether <E> Cinderella </E> whose <A> attendance </A> is number <V> 1.35985e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cinderella\" . ?e <attendance> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1.35985e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "901": {
        "generations": "Does the Metropolitan Museum of Art have 5.24 million visitors per year?",
        "ori_data_item": {
            "question": "whether <E> Metropolitan Museum of Art </E> whose <A> visitors per year </A> is number <V> 5.24e+06 </V>",
            "sparql": "ASK { ?e <pred:name> \"Metropolitan Museum of Art\" . ?e <visitors per year> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"5.24e+06\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "902": {
        "generations": "Does For Your Eyes Only have 218 pages?",
        "ori_data_item": {
            "question": "whether <E> For Your Eyes Only </E> whose <A> number of pages </A> is number <V> 218.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"For Your Eyes Only\" . ?e <number of pages> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"218.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "903": {
        "generations": "Does Sydney Airport have a patronage of 2.71981e+07?",
        "ori_data_item": {
            "question": "whether <E> Sydney Airport </E> whose <A> patronage </A> is number <V> 2.71981e+07 </V>",
            "sparql": "ASK { ?e <pred:name> \"Sydney Airport\" . ?e <patronage> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"2.71981e+07\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "904": {
        "generations": "Was 1527.0 the total number of Boeing 747s produced?",
        "ori_data_item": {
            "question": "whether <E> Boeing 747 </E> whose <A> total produced </A> is number <V> 1527.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boeing 747\" . ?e <total produced> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"1527.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "905": {
        "generations": "Does Selangor FA have a maximum capacity of 80000.0?",
        "ori_data_item": {
            "question": "whether <E> Selangor FA </E> whose <A> maximum capacity </A> is number <V> 80000.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Selangor FA\" . ?e <maximum capacity> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"80000.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "906": {
        "generations": "How many sovereign states have a Human Development Index of 0.499 and a nominal GDP of 2.07215e+10?",
        "ori_data_item": {
            "question": "how many <ES> <ES> <C> sovereign state </C> whose <A> Human Development Index </A> is text <V> 0.499 </V> </ES> and <ES> <C> sovereign state </C> whose <A> nominal GDP </A> is text <V> 2.07215e+10 </V> </ES> </ES>",
            "sparql": "SELECT (COUNT(DISTINCT ?e) AS ?count) WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"sovereign state\" . ?e <Human Development Index> ?pv . ?pv <pred:value> \"0.499\" . ?e <nominal GDP> ?pv_1 . ?pv_1 <pred:value> \"2.07215e+10\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "907": {
        "generations": "Is the area of Summit equal to 15.661?",
        "ori_data_item": {
            "question": "whether <ES> <E> Summit </E> whose <A> area </A> is text <V> 15.661 </V> </ES> whose <A> area </A> is text <V> 15.661 </V>",
            "sparql": "ASK { ?e <pred:name> \"Summit\" . ?e <area> ?pv_1 . ?pv_1 <pred:value> \"15.661\" . ?e <area> ?pv . ?pv <pred:value> \"15.661\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "908": {
        "generations": "Is Boston's elevation above sea level 43.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Boston </E> whose <A> elevation above sea level </A> is text <V> 43.0 </V> </ES> whose <A> elevation above sea level </A> is text <V> 43.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Boston\" . ?e <elevation above sea level> ?pv_1 . ?pv_1 <pred:value> \"43.0\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"43.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "909": {
        "generations": "Is the duration of Miracle at St. Anna 160.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Miracle at St. Anna </E> whose <A> duration </A> is text <V> 160.0 </V> </ES> whose <A> duration </A> is text <V> 160.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Miracle at St. Anna\" . ?e <duration> ?pv_1 . ?pv_1 <pred:value> \"160.0\" . ?e <duration> ?pv . ?pv <pred:value> \"160.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "910": {
        "generations": "Does Burton upon Trent have a WOEID of 14696?",
        "ori_data_item": {
            "question": "whether <ES> <E> Burton upon Trent </E> whose <A> WOEID </A> is text <V> 14696 </V> </ES> whose <A> WOEID </A> is text <V> 14696 </V>",
            "sparql": "ASK { ?e <pred:name> \"Burton upon Trent\" . ?e <WOEID> ?pv_1 . ?pv_1 <pred:value> \"14696\" . ?e <WOEID> ?pv . ?pv <pred:value> \"14696\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "911": {
        "generations": "Does Ivory Coast have a Human Development Index of 0.376?",
        "ori_data_item": {
            "question": "whether <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is text <V> 0.376 </V> </ES> whose <A> Human Development Index </A> is text <V> 0.376 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ivory Coast\" . ?e <Human Development Index> ?pv_1 . ?pv_1 <pred:value> \"0.376\" . ?e <Human Development Index> ?pv . ?pv <pred:value> \"0.376\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "912": {
        "generations": "Is Larry Hagman's Munzinger IBA value equal to 00000016518?",
        "ori_data_item": {
            "question": "whether <ES> <E> Larry Hagman </E> whose <A> Munzinger IBA </A> is text <V> 00000016518 </V> </ES> whose <A> Munzinger IBA </A> is text <V> 00000016518 </V>",
            "sparql": "ASK { ?e <pred:name> \"Larry Hagman\" . ?e <Munzinger IBA> ?pv_1 . ?pv_1 <pred:value> \"00000016518\" . ?e <Munzinger IBA> ?pv . ?pv <pred:value> \"00000016518\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "913": {
        "generations": "Is there a commercial art gallery with OSM tag or key \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> commercial art gallery </E> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V> </ES> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V>",
            "sparql": "ASK { ?e <pred:name> \"commercial art gallery\" . ?e <OSM tag or key> ?pv_1 . ?pv_1 <pred:value> \"Tag:shop=art\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "914": {
        "generations": "Is Rafael Nadal's height 185.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Rafael Nadal </E> whose <A> height </A> is text <V> 185.0 </V> </ES> whose <A> height </A> is text <V> 185.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Rafael Nadal\" . ?e <height> ?pv_1 . ?pv_1 <pred:value> \"185.0\" . ?e <height> ?pv . ?pv <pred:value> \"185.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "915": {
        "generations": "Is \"https://engineering.stackexchange.com/tags/mechanical-engineering\" a Stack Exchange tag for mechanical engineering?",
        "ori_data_item": {
            "question": "whether <ES> <E> mechanical engineering </E> whose <A> Stack Exchange tag </A> is text <V> https://engineering.stackexchange.com/tags/mechanical-engineering </V> </ES> whose <A> Stack Exchange tag </A> is text <V> https://engineering.stackexchange.com/tags/mechanical-engineering </V>",
            "sparql": "ASK { ?e <pred:name> \"mechanical engineering\" . ?e <Stack Exchange tag> ?pv_1 . ?pv_1 <pred:value> \"https://engineering.stackexchange.com/tags/mechanical-engineering\" . ?e <Stack Exchange tag> ?pv . ?pv <pred:value> \"https://engineering.stackexchange.com/tags/mechanical-engineering\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "916": {
        "generations": "Is the Hornbostel-Sachs classification of \"bell\" equal to 111.242?",
        "ori_data_item": {
            "question": "whether <ES> <E> bell </E> whose <A> Hornbostel-Sachs classification </A> is text <V> 111.242 </V> </ES> whose <A> Hornbostel-Sachs classification </A> is text <V> 111.242 </V>",
            "sparql": "ASK { ?e <pred:name> \"bell\" . ?e <Hornbostel-Sachs classification> ?pv_1 . ?pv_1 <pred:value> \"111.242\" . ?e <Hornbostel-Sachs classification> ?pv . ?pv <pred:value> \"111.242\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "917": {
        "generations": "Does Aachen have a German municipality key of 05334002?",
        "ori_data_item": {
            "question": "whether <ES> <E> Aachen </E> whose <A> German municipality key </A> is text <V> 05334002 </V> </ES> whose <A> German municipality key </A> is text <V> 05334002 </V>",
            "sparql": "ASK { ?e <pred:name> \"Aachen\" . ?e <German municipality key> ?pv_1 . ?pv_1 <pred:value> \"05334002\" . ?e <German municipality key> ?pv . ?pv <pred:value> \"05334002\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "918": {
        "generations": "Did Harry Potter and the Goblet of Fire have a box office value of 8.96911e+08?",
        "ori_data_item": {
            "question": "whether <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is text <V> 8.96911e+08 </V> </ES> whose <A> box office </A> is text <V> 8.96911e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e <box office> ?pv_1 . ?pv_1 <pred:value> \"8.96911e+08\" . ?e <box office> ?pv . ?pv <pred:value> \"8.96911e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "919": {
        "generations": "Does Bharatiya Janata Party have 117 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "whether <ES> <E> Bharatiya Janata Party </E> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is text <V> 117.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:value> \"117.0\" . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:value> \"117.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "920": {
        "generations": "Is Estudiantes Tecos also known as UAG Tecos?",
        "ori_data_item": {
            "question": "whether <ES> <E> Estudiantes Tecos </E> whose <A> name </A> is text <V> UAG Tecos </V> </ES> whose <A> name </A> is text <V> UAG Tecos </V>",
            "sparql": "ASK { ?e <pred:name> \"Estudiantes Tecos\" . ?e <name> ?pv_1 . ?pv_1 <pred:value> \"UAG Tecos\" . ?e <name> ?pv . ?pv <pred:value> \"UAG Tecos\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "921": {
        "generations": "Does California College of the Arts have 500 employees?",
        "ori_data_item": {
            "question": "whether <ES> <E> California College of the Arts </E> whose <A> employees </A> is text <V> 500.0 </V> </ES> whose <A> employees </A> is text <V> 500.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"California College of the Arts\" . ?e <employees> ?pv_1 . ?pv_1 <pred:value> \"500.0\" . ?e <employees> ?pv . ?pv <pred:value> \"500.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "922": {
        "generations": "Does the 60th Golden Globe Awards have an edition number of 60?",
        "ori_data_item": {
            "question": "whether <ES> <E> 60th Golden Globe Awards </E> whose <A> edition number </A> is text <V> 60 </V> </ES> whose <A> edition number </A> is text <V> 60 </V>",
            "sparql": "ASK { ?e <pred:name> \"60th Golden Globe Awards\" . ?e <edition number> ?pv_1 . ?pv_1 <pred:value> \"60\" . ?e <edition number> ?pv . ?pv <pred:value> \"60\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "923": {
        "generations": "Does Canberra have a draft value of 9.97?",
        "ori_data_item": {
            "question": "whether <ES> <E> Canberra </E> whose <A> draft </A> is text <V> 9.97 </V> </ES> whose <A> draft </A> is text <V> 9.97 </V>",
            "sparql": "ASK { ?e <pred:name> \"Canberra\" . ?e <draft> ?pv_1 . ?pv_1 <pred:value> \"9.97\" . ?e <draft> ?pv . ?pv <pred:value> \"9.97\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "924": {
        "generations": "Does the topic \"heterosexuality\" have a PhilPapers topic of \"heterosexuality\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V> </ES> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv_1 . ?pv_1 <pred:value> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "925": {
        "generations": "Does SNK have a Corporate Number (Japan) of 6120901008215?",
        "ori_data_item": {
            "question": "whether <ES> <E> SNK </E> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V> </ES> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V>",
            "sparql": "ASK { ?e <pred:name> \"SNK\" . ?e <Corporate Number (Japan)> ?pv_1 . ?pv_1 <pred:value> \"6120901008215\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"6120901008215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "926": {
        "generations": "Does Target Corporation have an Alexa rank of 360.0?",
        "ori_data_item": {
            "question": "whether <ES> <E> Target Corporation </E> whose <A> Alexa rank </A> is text <V> 360.0 </V> </ES> whose <A> Alexa rank </A> is text <V> 360.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Target Corporation\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:value> \"360.0\" . ?e <Alexa rank> ?pv . ?pv <pred:value> \"360.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "927": {
        "generations": "Does Guitar Hero III: Legends of Rock have a Nintendo GameID of RGHE52?",
        "ori_data_item": {
            "question": "whether <ES> <E> Guitar Hero III: Legends of Rock </E> whose <A> Nintendo GameID </A> is text <V> RGHE52 </V> </ES> whose <A> Nintendo GameID </A> is text <V> RGHE52 </V>",
            "sparql": "ASK { ?e <pred:name> \"Guitar Hero III: Legends of Rock\" . ?e <Nintendo GameID> ?pv_1 . ?pv_1 <pred:value> \"RGHE52\" . ?e <Nintendo GameID> ?pv . ?pv <pred:value> \"RGHE52\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "928": {
        "generations": "Did Franz Schubert have an NSDAP membership number of 44488?",
        "ori_data_item": {
            "question": "whether <ES> <E> Franz Schubert </E> whose <A> NSDAP membership number (1925\u20131945 </A> is text <V> 44488 </V> </ES> whose <A> NSDAP membership number (1925\u20131945 </A> is text <V> 44488 </V>",
            "sparql": "ASK { ?e <pred:name> \"Franz Schubert\" . ?e <NSDAP membership number (1925\u20131945> ?pv_1 . ?pv_1 <pred:value> \"44488\" . ?e <NSDAP membership number (1925\u20131945> ?pv . ?pv <pred:value> \"44488\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "929": {
        "generations": "Does the Greater Los Angeles Area have a nighttime view of Long Beach, CA at night.jpg?",
        "ori_data_item": {
            "question": "whether <ES> <E> Greater Los Angeles Area </E> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V> </ES> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V>",
            "sparql": "ASK { ?e <pred:name> \"Greater Los Angeles Area\" . ?e <nighttime view> ?pv_1 . ?pv_1 <pred:value> \"Long Beach, CA at night.jpg\" . ?e <nighttime view> ?pv . ?pv <pred:value> \"Long Beach, CA at night.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "930": {
        "generations": "Is Hamburg's German regional key equal to 02?",
        "ori_data_item": {
            "question": "whether <ES> <E> Hamburg </E> whose <A> German regional key </A> is text <V> 02 </V> </ES> whose <A> German regional key </A> is text <V> 02 </V>",
            "sparql": "ASK { ?e <pred:name> \"Hamburg\" . ?e <German regional key> ?pv_1 . ?pv_1 <pred:value> \"02\" . ?e <German regional key> ?pv . ?pv <pred:value> \"02\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "931": {
        "generations": "Does the evolution have a spoken text audio with the value \"Simple en Evolution.oga\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> evolution </E> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V> </ES> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V>",
            "sparql": "ASK { ?e <pred:name> \"evolution\" . ?e <spoken text audio> ?pv_1 . ?pv_1 <pred:value> \"Simple en Evolution.oga\" . ?e <spoken text audio> ?pv . ?pv <pred:value> \"Simple en Evolution.oga\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "932": {
        "generations": "Does the subject of geography have a Universal Decimal Classification of 91?",
        "ori_data_item": {
            "question": "whether <ES> <E> geography </E> whose <A> Universal Decimal Classification </A> is text <V> 91 </V> </ES> whose <A> Universal Decimal Classification </A> is text <V> 91 </V>",
            "sparql": "ASK { ?e <pred:name> \"geography\" . ?e <Universal Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"91\" . ?e <Universal Decimal Classification> ?pv . ?pv <pred:value> \"91\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "933": {
        "generations": "Does Cosmopolis have an OCLC control number of 50441437?",
        "ori_data_item": {
            "question": "whether <ES> <E> Cosmopolis </E> whose <A> OCLC control number </A> is text <V> 50441437 </V> </ES> whose <A> OCLC control number </A> is text <V> 50441437 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cosmopolis\" . ?e <OCLC control number> ?pv_1 . ?pv_1 <pred:value> \"50441437\" . ?e <OCLC control number> ?pv . ?pv <pred:value> \"50441437\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "934": {
        "generations": "Does cheese have an OKPD2 code of the good or service equal to 10.51.40.100?",
        "ori_data_item": {
            "question": "whether <ES> <E> cheese </E> whose <A> OKPD2 code of the good or service </A> is text <V> 10.51.40.100 </V> </ES> whose <A> OKPD2 code of the good or service </A> is text <V> 10.51.40.100 </V>",
            "sparql": "ASK { ?e <pred:name> \"cheese\" . ?e <OKPD2 code of the good or service> ?pv_1 . ?pv_1 <pred:value> \"10.51.40.100\" . ?e <OKPD2 code of the good or service> ?pv . ?pv <pred:value> \"10.51.40.100\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "935": {
        "generations": "Does the serum have a UMLS CUI of C0229671?",
        "ori_data_item": {
            "question": "whether <ES> <E> serum </E> whose <A> UMLS CUI </A> is text <V> C0229671 </V> </ES> whose <A> UMLS CUI </A> is text <V> C0229671 </V>",
            "sparql": "ASK { ?e <pred:name> \"serum\" . ?e <UMLS CUI> ?pv_1 . ?pv_1 <pred:value> \"C0229671\" . ?e <UMLS CUI> ?pv . ?pv <pred:value> \"C0229671\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "936": {
        "generations": "Is the ISO 4217 code for the Canadian dollar \"CAD\"?",
        "ori_data_item": {
            "question": "whether <ES> <E> Canadian dollar </E> whose <A> ISO 4217 code </A> is text <V> CAD </V> </ES> whose <A> ISO 4217 code </A> is text <V> CAD </V>",
            "sparql": "ASK { ?e <pred:name> \"Canadian dollar\" . ?e <ISO 4217 code> ?pv_1 . ?pv_1 <pred:value> \"CAD\" . ?e <ISO 4217 code> ?pv . ?pv <pred:value> \"CAD\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "937": {
        "generations": "Does Parkinson disease have an ICD-9-CM code of 332?",
        "ori_data_item": {
            "question": "whether <ES> <E> Parkinson disease </E> whose <A> ICD-9-CM </A> is text <V> 332 </V> </ES> whose <A> ICD-9-CM </A> is text <V> 332 </V>",
            "sparql": "ASK { ?e <pred:name> \"Parkinson disease\" . ?e <ICD-9-CM> ?pv_1 . ?pv_1 <pred:value> \"332\" . ?e <ICD-9-CM> ?pv . ?pv <pred:value> \"332\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "938": {
        "generations": "Does Alzheimer's disease have an eMedicine ID of 1134817?",
        "ori_data_item": {
            "question": "whether <ES> <E> Alzheimer's disease </E> whose <A> eMedicine </A> is text <V> 1134817 </V> </ES> whose <A> eMedicine </A> is text <V> 1134817 </V>",
            "sparql": "ASK { ?e <pred:name> \"Alzheimer's disease\" . ?e <eMedicine> ?pv_1 . ?pv_1 <pred:value> \"1134817\" . ?e <eMedicine> ?pv . ?pv <pred:value> \"1134817\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "939": {
        "generations": "Is the occupation code of the astronomer 2111?",
        "ori_data_item": {
            "question": "whether <ES> <E> astronomer </E> whose <A> ISCO occupation code </A> is text <V> 2111 </V> </ES> whose <A> ISCO occupation code </A> is text <V> 2111 </V>",
            "sparql": "ASK { ?e <pred:name> \"astronomer\" . ?e <ISCO occupation code> ?pv_1 . ?pv_1 <pred:value> \"2111\" . ?e <ISCO occupation code> ?pv . ?pv <pred:value> \"2111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "940": {
        "generations": "Does Mars have a flattening of 0.00589?",
        "ori_data_item": {
            "question": "whether <ES> <E> Mars </E> whose <A> flattening </A> is text <V> 0.00589 </V> </ES> whose <A> flattening </A> is text <V> 0.00589 </V>",
            "sparql": "ASK { ?e <pred:name> \"Mars\" . ?e <flattening> ?pv_1 . ?pv_1 <pred:value> \"0.00589\" . ?e <flattening> ?pv . ?pv <pred:value> \"0.00589\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "941": {
        "generations": "Does Trainspotting have an ISBN-10 of 0-7493-9606-7?",
        "ori_data_item": {
            "question": "whether <ES> <E> Trainspotting </E> whose <A> ISBN-10 </A> is text <V> 0-7493-9606-7 </V> </ES> whose <A> ISBN-10 </A> is text <V> 0-7493-9606-7 </V>",
            "sparql": "ASK { ?e <pred:name> \"Trainspotting\" . ?e <ISBN-10> ?pv_1 . ?pv_1 <pred:value> \"0-7493-9606-7\" . ?e <ISBN-10> ?pv . ?pv <pred:value> \"0-7493-9606-7\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "942": {
        "generations": "Is Chongqing's China administrative division code equal to 50?",
        "ori_data_item": {
            "question": "whether <ES> <E> Chongqing </E> whose <A> China administrative division code </A> is text <V> 50 </V> </ES> whose <A> China administrative division code </A> is text <V> 50 </V>",
            "sparql": "ASK { ?e <pred:name> \"Chongqing\" . ?e <China administrative division code> ?pv_1 . ?pv_1 <pred:value> \"50\" . ?e <China administrative division code> ?pv . ?pv <pred:value> \"50\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "943": {
        "generations": "Is the OLAC video game genre vocabulary for the life simulation game equal to 1041?",
        "ori_data_item": {
            "question": "whether <ES> <E> life simulation game </E> whose <A> OLAC video game genre vocabulary </A> is text <V> 1041 </V> </ES> whose <A> OLAC video game genre vocabulary </A> is text <V> 1041 </V>",
            "sparql": "ASK { ?e <pred:name> \"life simulation game\" . ?e <OLAC video game genre vocabulary> ?pv_1 . ?pv_1 <pred:value> \"1041\" . ?e <OLAC video game genre vocabulary> ?pv . ?pv <pred:value> \"1041\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "944": {
        "generations": "Is the population of the U.S. city with Dewey Decimal Classification 2--74461 equal to 617594 and also has a Dewey Decimal Classification of 2--74461?",
        "ori_data_item": {
            "question": "whether <ES> <C> city of the United States </C> whose <A> Dewey Decimal Classification </A> is text <V> 2--74461 </V> </ES> whose <A> population </A> is number <V> 617594.0 </V> ( <Q> pred:fact t </Q> is text <V> 2--74461 </V> )",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <Dewey Decimal Classification> ?pv_1 . ?pv_1 <pred:value> \"2--74461\" . [ <pred:fact_h> ?e ; <pred:fact_r> <Dewey Decimal Classification> ; <pred:fact_t> ?pv_1 ] <pred:fact t> ?qpv . ?qpv <pred:value> \"2--74461\" . ?e <population> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"617594.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "945": {
        "generations": "What is the connection between Ivory Coast (the one with a Human Development Index of 0.39) and Ivory Coast (also with a Human Development Index of 0.39)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES> to <ES> <E> Ivory Coast </E> whose <A> Human Development Index </A> is number <V> 0.39 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Ivory Coast\" . ?e_1 <Human Development Index> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"0.39\"^^xsd:double . ?e_2 <pred:name> \"Ivory Coast\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.39\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "946": {
        "generations": "What is the connection between Cameroon (the one whose inception is 1960-01-01) and Cameroon (the one whose Human Development Index is 0.436)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Cameroon </E> whose <A> inception </A> is date <V> 1960-01-01 </V> </ES> to <ES> <E> Cameroon </E> whose <A> Human Development Index </A> is number <V> 0.436 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Cameroon\" . ?e_1 <inception> ?pv . ?pv <pred:date> \"1960-01-01\"^^xsd:date . ?e_2 <pred:name> \"Cameroon\" . ?e_2 <Human Development Index> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"0.436\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "947": {
        "generations": "What is the connection between Harry Potter and the Goblet of Fire (published on 2000-07-08) and Harry Potter and the Goblet of Fire (with a box office of 8.96911e+08)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> publication date </A> is date <V> 2000-07-08 </V> </ES> to <ES> <E> Harry Potter and the Goblet of Fire </E> whose <A> box office </A> is number <V> 8.96911e+08 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_1 <publication date> ?pv . ?pv <pred:date> \"2000-07-08\"^^xsd:date . ?e_2 <pred:name> \"Harry Potter and the Goblet of Fire\" . ?e_2 <box office> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"8.96911e+08\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "948": {
        "generations": "What is the connection between the National Gallery (the one with a date of first performance of 2014-05-17) and the National Gallery (the one with 6.41672e+06 visitors per year)?",
        "ori_data_item": {
            "question": "what is the relation from <ES> <E> National Gallery </E> whose <A> date of first performance </A> is date <V> 2014-05-17 </V> </ES> to <ES> <E> National Gallery </E> whose <A> visitors per year </A> is number <V> 6.41672e+06 </V> </ES>",
            "sparql": "SELECT DISTINCT ?p WHERE { ?e_1 <pred:name> \"National Gallery\" . ?e_1 <date of first performance> ?pv . ?pv <pred:date> \"2014-05-17\"^^xsd:date . ?e_2 <pred:name> \"National Gallery\" . ?e_2 <visitors per year> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> \"6.41672e+06\"^^xsd:double . ?e_1 ?p ?e_2 .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "949": {
        "generations": "Which city of the United States has an elevation above sea level of 184.0 and a population greater than arg6?",
        "ori_data_item": {
            "question": "what is <ES> <ES> <C> city of the United States </C> whose <A> elevation above sea level </A> is text <V> 184.0 </V> </ES> and <ES> <C> city of the United States </C> whose <A> population </A> larger than number <V> arg6 </V> </ES> ( <Q> pred:fact t </Q> is text <V> 184.0 </V> ) </ES>",
            "sparql": "SELECT DISTINCT ?e WHERE { ?e <pred:instance_of> ?c . ?c <pred:name> \"city of the United States\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"184.0\" . [ <pred:fact_h> ?e ; <pred:fact_r> <elevation above sea level> ; <pred:fact_t> ?pv ] <pred:fact t> ?qpv . ?qpv <pred:value> \"184.0\" . ?e <population> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v . FILTER ( ?v > \"arg6\"^^xsd:double ) .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "950": {
        "generations": "Does the commercial art gallery have an OSM tag or key of \"Tag:shop=art\"?",
        "ori_data_item": {
            "question": "whether <E> commercial art gallery </E> whose <A> OSM tag or key </A> is text <V> Tag:shop=art </V>",
            "sparql": "ASK { ?e <pred:name> \"commercial art gallery\" . ?e <OSM tag or key> ?pv . ?pv <pred:value> \"Tag:shop=art\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "951": {
        "generations": "Does the knight have an Iconclass notation of 46A124?",
        "ori_data_item": {
            "question": "whether <E> knight </E> whose <A> Iconclass notation </A> is text <V> 46A124 </V>",
            "sparql": "ASK { ?e <pred:name> \"knight\" . ?e <Iconclass notation> ?pv . ?pv <pred:value> \"46A124\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "952": {
        "generations": "Is Ipswich's elevation above sea level 50.0?",
        "ori_data_item": {
            "question": "whether <E> Ipswich </E> whose <A> elevation above sea level </A> is text <V> 50.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Ipswich\" . ?e <elevation above sea level> ?pv . ?pv <pred:value> \"50.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "953": {
        "generations": "Does mechanical engineering have an IPTC Newscode of mediatopic/20000716?",
        "ori_data_item": {
            "question": "whether <E> mechanical engineering </E> whose <A> IPTC Newscode </A> is text <V> mediatopic/20000716 </V>",
            "sparql": "ASK { ?e <pred:name> \"mechanical engineering\" . ?e <IPTC Newscode> ?pv . ?pv <pred:value> \"mediatopic/20000716\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "954": {
        "generations": "Is the area of Whanganui 2.3727?",
        "ori_data_item": {
            "question": "whether <E> Whanganui </E> whose <A> area </A> is text <V> 2.3727 </V>",
            "sparql": "ASK { ?e <pred:name> \"Whanganui\" . ?e <area> ?pv . ?pv <pred:value> \"2.3727\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "955": {
        "generations": "Is \"UAG Tecos\" another name for Estudiantes Tecos?",
        "ori_data_item": {
            "question": "whether <E> Estudiantes Tecos </E> whose <A> name </A> is text <V> UAG Tecos </V>",
            "sparql": "ASK { ?e <pred:name> \"Estudiantes Tecos\" . ?e <name> ?pv . ?pv <pred:value> \"UAG Tecos\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "956": {
        "generations": "Does Club Atlas have a Twitter username of \"atlasfc\"?",
        "ori_data_item": {
            "question": "whether <E> Club Atlas </E> whose <A> Twitter username </A> is text <V> atlasfc </V>",
            "sparql": "ASK { ?e <pred:name> \"Club Atlas\" . ?e <Twitter username> ?pv . ?pv <pred:value> \"atlasfc\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "957": {
        "generations": "Does the Bureau of Land Management have an ISNI of 0000 0000 9987 0743?",
        "ori_data_item": {
            "question": "whether <E> Bureau of Land Management </E> whose <A> ISNI </A> is text <V> 0000 0000 9987 0743 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bureau of Land Management\" . ?e <ISNI> ?pv . ?pv <pred:value> \"0000 0000 9987 0743\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "958": {
        "generations": "Is the Hornbostel-Sachs classification of a bell 111.242?",
        "ori_data_item": {
            "question": "whether <E> bell </E> whose <A> Hornbostel-Sachs classification </A> is text <V> 111.242 </V>",
            "sparql": "ASK { ?e <pred:name> \"bell\" . ?e <Hornbostel-Sachs classification> ?pv . ?pv <pred:value> \"111.242\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "959": {
        "generations": "Is the OS grid reference of Pontefract SE455215?",
        "ori_data_item": {
            "question": "whether <E> Pontefract </E> whose <A> OS grid reference </A> is text <V> SE455215 </V>",
            "sparql": "ASK { ?e <pred:name> \"Pontefract\" . ?e <OS grid reference> ?pv . ?pv <pred:value> \"SE455215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "960": {
        "generations": "Is Chris Carter's height 183.0?",
        "ori_data_item": {
            "question": "whether <E> Chris Carter </E> whose <A> height </A> is text <V> 183.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Chris Carter\" . ?e <height> ?pv . ?pv <pred:value> \"183.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "961": {
        "generations": "Does Independence have a Dewey Decimal Classification of 2--79487?",
        "ori_data_item": {
            "question": "whether <E> Independence </E> whose <A> Dewey Decimal Classification </A> is text <V> 2--79487 </V>",
            "sparql": "ASK { ?e <pred:name> \"Independence\" . ?e <Dewey Decimal Classification> ?pv . ?pv <pred:value> \"2--79487\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "962": {
        "generations": "Does Rafael Nadal have a CANTIC-ID of a11246789?",
        "ori_data_item": {
            "question": "whether <E> Rafael Nadal </E> whose <A> CANTIC-ID </A> is text <V> a11246789 </V>",
            "sparql": "ASK { ?e <pred:name> \"Rafael Nadal\" . ?e <CANTIC-ID> ?pv . ?pv <pred:value> \"a11246789\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "963": {
        "generations": "Does the Bharatiya Janata Party have a British Museum person-institution ID of 8433?",
        "ori_data_item": {
            "question": "whether <E> Bharatiya Janata Party </E> whose <A> British Museum person-institution </A> is text <V> 8433 </V>",
            "sparql": "ASK { ?e <pred:name> \"Bharatiya Janata Party\" . ?e <British Museum person-institution> ?pv . ?pv <pred:value> \"8433\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "964": {
        "generations": "Does Farrah Fawcett have a Deutsche Synchronkartei actor-ID of 10012?",
        "ori_data_item": {
            "question": "whether <E> Farrah Fawcett </E> whose <A> Deutsche Synchronkartei actor-ID </A> is text <V> 10012 </V>",
            "sparql": "ASK { ?e <pred:name> \"Farrah Fawcett\" . ?e <Deutsche Synchronkartei actor-ID> ?pv . ?pv <pred:value> \"10012\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "965": {
        "generations": "Did Harry Potter and the Prisoner of Azkaban earn a box office revenue of 7.96688e+08?",
        "ori_data_item": {
            "question": "whether <E> Harry Potter and the Prisoner of Azkaban </E> whose <A> box office </A> is text <V> 7.96688e+08 </V>",
            "sparql": "ASK { ?e <pred:name> \"Harry Potter and the Prisoner of Azkaban\" . ?e <box office> ?pv . ?pv <pred:value> \"7.96688e+08\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "966": {
        "generations": "Does Club Olimpia Deportivo have an official website with the URL http://www.clubolimpia.com/?",
        "ori_data_item": {
            "question": "whether <E> Club Olimpia Deportivo </E> whose <A> official website </A> is text <V> http://www.clubolimpia.com/ </V>",
            "sparql": "ASK { ?e <pred:name> \"Club Olimpia Deportivo\" . ?e <official website> ?pv . ?pv <pred:value> \"http://www.clubolimpia.com/\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "967": {
        "generations": "Does Canberra have an IMO ship number of 5059953?",
        "ori_data_item": {
            "question": "whether <E> Canberra </E> whose <A> IMO ship number </A> is text <V> 5059953 </V>",
            "sparql": "ASK { ?e <pred:name> \"Canberra\" . ?e <IMO ship number> ?pv . ?pv <pred:value> \"5059953\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "968": {
        "generations": "Does the topic \"heterosexuality\" have a PhilPapers topic equal to \"heterosexuality\"?",
        "ori_data_item": {
            "question": "whether <E> heterosexuality </E> whose <A> PhilPapers topic </A> is text <V> heterosexuality </V>",
            "sparql": "ASK { ?e <pred:name> \"heterosexuality\" . ?e <PhilPapers topic> ?pv . ?pv <pred:value> \"heterosexuality\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "969": {
        "generations": "Does Hertha BSC have a Giphy username of \"hbsc\"?",
        "ori_data_item": {
            "question": "whether <E> Hertha BSC </E> whose <A> Giphy username </A> is text <V> hbsc </V>",
            "sparql": "ASK { ?e <pred:name> \"Hertha BSC\" . ?e <Giphy username> ?pv . ?pv <pred:value> \"hbsc\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "970": {
        "generations": "Does Cardiff University have an ARCHON code of 1239?",
        "ori_data_item": {
            "question": "whether <E> Cardiff University </E> whose <A> ARCHON code </A> is text <V> 1239 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cardiff University\" . ?e <ARCHON code> ?pv . ?pv <pred:value> \"1239\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "971": {
        "generations": "Does the 60th Golden Globe Awards have an edition number of 60?",
        "ori_data_item": {
            "question": "whether <E> 60th Golden Globe Awards </E> whose <A> edition number </A> is text <V> 60 </V>",
            "sparql": "ASK { ?e <pred:name> \"60th Golden Globe Awards\" . ?e <edition number> ?pv . ?pv <pred:value> \"60\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "972": {
        "generations": "Does Somerset have 1710 episodes?",
        "ori_data_item": {
            "question": "whether <E> Somerset </E> whose <A> number of episodes </A> is text <V> 1710.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Somerset\" . ?e <number of episodes> ?pv . ?pv <pred:value> \"1710.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "973": {
        "generations": "Does SNK have a Corporate Number (Japan) of 6120901008215?",
        "ori_data_item": {
            "question": "whether <E> SNK </E> whose <A> Corporate Number (Japan) </A> is text <V> 6120901008215 </V>",
            "sparql": "ASK { ?e <pred:name> \"SNK\" . ?e <Corporate Number (Japan)> ?pv . ?pv <pred:value> \"6120901008215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "974": {
        "generations": "Does Carleton University have a DOI prefix of 10.22215?",
        "ori_data_item": {
            "question": "whether <E> Carleton University </E> whose <A> DOI prefix </A> is text <V> 10.22215 </V>",
            "sparql": "ASK { ?e <pred:name> \"Carleton University\" . ?e <DOI prefix> ?pv . ?pv <pred:value> \"10.22215\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "975": {
        "generations": "Does the Greater Los Angeles Area have a nighttime view called \"Long Beach, CA at night.jpg\"?",
        "ori_data_item": {
            "question": "whether <E> Greater Los Angeles Area </E> whose <A> nighttime view </A> is text <V> Long Beach, CA at night.jpg </V>",
            "sparql": "ASK { ?e <pred:name> \"Greater Los Angeles Area\" . ?e <nighttime view> ?pv . ?pv <pred:value> \"Long Beach, CA at night.jpg\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "976": {
        "generations": "Did Franz Schubert have a NSDAP membership number (1925-1945) of 44488?",
        "ori_data_item": {
            "question": "whether <E> Franz Schubert </E> whose <A> NSDAP membership number (1925\u20131945 </A> is text <V> 44488 </V>",
            "sparql": "ASK { ?e <pred:name> \"Franz Schubert\" . ?e <NSDAP membership number (1925\u20131945> ?pv . ?pv <pred:value> \"44488\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "977": {
        "generations": "Does Target Corporation have an Alexa rank of 380.0?",
        "ori_data_item": {
            "question": "whether <E> Target Corporation </E> whose <A> Alexa rank </A> is text <V> 380.0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Target Corporation\" . ?e <Alexa rank> ?pv . ?pv <pred:value> \"380.0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "978": {
        "generations": "Does Guitar Hero III: Legends of Rock have a Nintendo GameID of RGHJ52?",
        "ori_data_item": {
            "question": "whether <E> Guitar Hero III: Legends of Rock </E> whose <A> Nintendo GameID </A> is text <V> RGHJ52 </V>",
            "sparql": "ASK { ?e <pred:name> \"Guitar Hero III: Legends of Rock\" . ?e <Nintendo GameID> ?pv . ?pv <pred:value> \"RGHJ52\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "979": {
        "generations": "Does Saskatoon have a Statistics Canada Geographic code of 4711066?",
        "ori_data_item": {
            "question": "whether <E> Saskatoon </E> whose <A> Statistics Canada Geographic code </A> is text <V> 4711066 </V>",
            "sparql": "ASK { ?e <pred:name> \"Saskatoon\" . ?e <Statistics Canada Geographic code> ?pv . ?pv <pred:value> \"4711066\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "980": {
        "generations": "Does John Grisham have an Amazon author page with the value \"B000AQ40M8\"?",
        "ori_data_item": {
            "question": "whether <E> John Grisham </E> whose <A> Amazon author page </A> is text <V> B000AQ40M8 </V>",
            "sparql": "ASK { ?e <pred:name> \"John Grisham\" . ?e <Amazon author page> ?pv . ?pv <pred:value> \"B000AQ40M8\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "981": {
        "generations": "Does the spoken text audio \"Simple en Evolution.oga\" pertain to evolution?",
        "ori_data_item": {
            "question": "whether <E> evolution </E> whose <A> spoken text audio </A> is text <V> Simple en Evolution.oga </V>",
            "sparql": "ASK { ?e <pred:name> \"evolution\" . ?e <spoken text audio> ?pv . ?pv <pred:value> \"Simple en Evolution.oga\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "982": {
        "generations": "Does Aurora have a Caverphone code of ARR111?",
        "ori_data_item": {
            "question": "whether <E> Aurora </E> whose <A> Caverphone </A> is text <V> ARR111 </V>",
            "sparql": "ASK { ?e <pred:name> \"Aurora\" . ?e <Caverphone> ?pv . ?pv <pred:value> \"ARR111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "983": {
        "generations": "Does geography have a Classification of Instructional Programs code of 45.0799?",
        "ori_data_item": {
            "question": "whether <E> geography </E> whose <A> Classification of Instructional Programs code </A> is text <V> 45.0799 </V>",
            "sparql": "ASK { ?e <pred:name> \"geography\" . ?e <Classification of Instructional Programs code> ?pv . ?pv <pred:value> \"45.0799\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "984": {
        "generations": "Is \"Die Hard: New York\" the codename for Die Hard with a Vengeance?",
        "ori_data_item": {
            "question": "whether <E> Die Hard with a Vengeance </E> whose <A> codename </A> is text <V> Die Hard: New York </V>",
            "sparql": "ASK { ?e <pred:name> \"Die Hard with a Vengeance\" . ?e <codename> ?pv . ?pv <pred:value> \"Die Hard: New York\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "985": {
        "generations": "Does Cosmopolis have an OCLC control number of 50441437?",
        "ori_data_item": {
            "question": "whether <E> Cosmopolis </E> whose <A> OCLC control number </A> is text <V> 50441437 </V>",
            "sparql": "ASK { ?e <pred:name> \"Cosmopolis\" . ?e <OCLC control number> ?pv . ?pv <pred:value> \"50441437\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "986": {
        "generations": "Does Hearts and Minds have a production code of 111?",
        "ori_data_item": {
            "question": "whether <E> Hearts and Minds </E> whose <A> production code </A> is text <V> 111 </V>",
            "sparql": "ASK { ?e <pred:name> \"Hearts and Minds\" . ?e <production code> ?pv . ?pv <pred:value> \"111\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "987": {
        "generations": "Does serum have a UMLS CUI of C0229671?",
        "ori_data_item": {
            "question": "whether <E> serum </E> whose <A> UMLS CUI </A> is text <V> C0229671 </V>",
            "sparql": "ASK { ?e <pred:name> \"serum\" . ?e <UMLS CUI> ?pv . ?pv <pred:value> \"C0229671\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "988": {
        "generations": "Is the ISO 4217 code for the Canadian dollar CAD?",
        "ori_data_item": {
            "question": "whether <E> Canadian dollar </E> whose <A> ISO 4217 code </A> is text <V> CAD </V>",
            "sparql": "ASK { ?e <pred:name> \"Canadian dollar\" . ?e <ISO 4217 code> ?pv . ?pv <pred:value> \"CAD\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "989": {
        "generations": "Is the occupation code for a cartoonist 2452?",
        "ori_data_item": {
            "question": "whether <E> cartoonist </E> whose <A> ISCO occupation code </A> is text <V> 2452 </V>",
            "sparql": "ASK { ?e <pred:name> \"cartoonist\" . ?e <ISCO occupation code> ?pv . ?pv <pred:value> \"2452\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "990": {
        "generations": "Does the United States Department of Defense have a GitHub username of \"deptofdefense\"?",
        "ori_data_item": {
            "question": "whether <E> United States Department of Defense </E> whose <A> GitHub username </A> is text <V> deptofdefense </V>",
            "sparql": "ASK { ?e <pred:name> \"United States Department of Defense\" . ?e <GitHub username> ?pv . ?pv <pred:value> \"deptofdefense\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "991": {
        "generations": "Does Parkinson disease have a DiseasesDB ID of 9651?",
        "ori_data_item": {
            "question": "whether <E> Parkinson disease </E> whose <A> DiseasesDB </A> is text <V> 9651 </V>",
            "sparql": "ASK { ?e <pred:name> \"Parkinson disease\" . ?e <DiseasesDB> ?pv . ?pv <pred:value> \"9651\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "992": {
        "generations": "Does Trainspotting have an ISBN-10 of 85-325-1773-0?",
        "ori_data_item": {
            "question": "whether <E> Trainspotting </E> whose <A> ISBN-10 </A> is text <V> 85-325-1773-0 </V>",
            "sparql": "ASK { ?e <pred:name> \"Trainspotting\" . ?e <ISBN-10> ?pv . ?pv <pred:value> \"85-325-1773-0\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "993": {
        "generations": "Does Adobe Inc. have an ACM Classification Code (2012) of 10011154?",
        "ori_data_item": {
            "question": "whether <E> Adobe Inc. </E> whose <A> ACM Classification Code (2012) </A> is text <V> 10011154 </V>",
            "sparql": "ASK { ?e <pred:name> \"Adobe Inc.\" . ?e <ACM Classification Code (2012)> ?pv . ?pv <pred:value> \"10011154\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "994": {
        "generations": "Does John Adams have a Biografisch Portaal number of 57767253?",
        "ori_data_item": {
            "question": "whether <E> John Adams </E> whose <A> Biografisch Portaal number </A> is text <V> 57767253 </V>",
            "sparql": "ASK { ?e <pred:name> \"John Adams\" . ?e <Biografisch Portaal number> ?pv . ?pv <pred:value> \"57767253\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "995": {
        "generations": "Is Wuhan's China administrative division code \"42 01\"?",
        "ori_data_item": {
            "question": "whether <E> Wuhan </E> whose <A> China administrative division code </A> is text <V> 42 01 </V>",
            "sparql": "ASK { ?e <pred:name> \"Wuhan\" . ?e <China administrative division code> ?pv . ?pv <pred:value> \"42 01\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "996": {
        "generations": "Is \"life simulation game\" categorized under OLAC video game genre vocabulary with code 1041?",
        "ori_data_item": {
            "question": "whether <E> life simulation game </E> whose <A> OLAC video game genre vocabulary </A> is text <V> 1041 </V>",
            "sparql": "ASK { ?e <pred:name> \"life simulation game\" . ?e <OLAC video game genre vocabulary> ?pv . ?pv <pred:value> \"1041\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "997": {
        "generations": "Is there a Bulbapedia article about Shigeru Miyamoto?",
        "ori_data_item": {
            "question": "whether <E> Shigeru Miyamoto </E> whose <A> Bulbapedia article </A> is text <V> Shigeru Miyamoto </V>",
            "sparql": "ASK { ?e <pred:name> \"Shigeru Miyamoto\" . ?e <Bulbapedia article> ?pv . ?pv <pred:value> \"Shigeru Miyamoto\" .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "998": {
        "generations": "Which first-level administrative country subdivision has more than arg1 representatives in an organization/legislature and exactly 135 representatives in an organization/legislature?",
        "ori_data_item": {
            "question": "whether <ES> <C> first-level administrative country subdivision </C> whose <A> number of representatives in an organization/legislature </A> larger than number <V> arg1 </V> </ES> whose <A> number of representatives in an organization/legislature </A> is number <V> 135.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"first-level administrative country subdivision\" . ?e <number of representatives in an organization/legislature> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg1\"^^xsd:double ) . ?e <number of representatives in an organization/legislature> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"135.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    },
    "999": {
        "generations": "Does the Primetime Emmy Award have a higher Alexa rank than 126668.0?",
        "ori_data_item": {
            "question": "whether <ES> <C> Primetime Emmy Award </C> whose <A> Alexa rank </A> larger than number <V> arg1 </V> </ES> whose <A> Alexa rank </A> is number <V> 126668.0 </V>",
            "sparql": "ASK { ?e <pred:instance_of> ?c . ?c <pred:name> \"Primetime Emmy Award\" . ?e <Alexa rank> ?pv_1 . ?pv_1 <pred:unit> \"1\" . ?pv_1 <pred:value> ?v_1 . FILTER ( ?v_1 > \"arg1\"^^xsd:double ) . ?e <Alexa rank> ?pv . ?pv <pred:unit> \"1\" . ?pv <pred:value> \"126668.0\"^^xsd:double .  }",
            "choices": [
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown",
                "unknown"
            ],
            "answer": "unknown"
        }
    }
}