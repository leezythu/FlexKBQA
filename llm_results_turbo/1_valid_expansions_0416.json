{
    "100": {
        "generations": "How do you pronounce Gaba 6 liquid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqs3pp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqs3pp ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0hqs3pp",
            "mid2name": {
                "ns:m.0hqs3pp": "Gaba 6 liquid"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Gaba 6 liquid))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqs3pp))"
        }
    },
    "101": {
        "generations": "how do you pronounce divine comedy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07nj9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07nj9 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07nj9",
            "mid2name": {
                "ns:m.07nj9": "Divine Comedy"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Divine Comedy))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07nj9))"
        }
    },
    "102": {
        "generations": "Who wrote the book and performed in the original Broadway cast of Parade (1999)?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rjzhr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rjzhr ns:music.album.artist ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01rjzhr",
            "mid2name": {
                "ns:m.01rjzhr": "Parade (1999 original Broadway cast)"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.album.artist) Parade (1999 original Broadway cast)))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.album.artist) m.01rjzhr))"
        }
    },
    "103": {
        "generations": "How do you pronounce the word \"diorite\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02943b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02943b ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02943b",
            "mid2name": {
                "ns:m.02943b": "Diorite"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Diorite))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02943b))"
        }
    },
    "104": {
        "generations": "What is the purpose of the medical trial for SPD417 in treating manic symptoms in adults with bipolar I disorder?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d1vdb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d1vdb ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.04d1vdb",
            "mid2name": {
                "ns:m.04d1vdb": "Efficacy and Safety of SPD417 in Treatment of Manic Symptoms in Adults With Bipolar I Disorder"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Efficacy and Safety of SPD417 in Treatment of Manic Symptoms in Adults With Bipolar I Disorder))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.04d1vdb))"
        }
    },
    "105": {
        "generations": "What is the band location on chromosome 2p16.2 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwj00)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwj00 ns:biology.cytogenetic_band.chromosome ?y .\n?y ns:biology.chromosome.band ?x .\n}\n",
            "TopicEntityMid": "m.02kwj00",
            "mid2name": {
                "ns:m.02kwj00": "Human Cytogenetic Band 2p16.2"
            },
            "SExpr_w_name": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) Human Cytogenetic Band 2p16.2))",
            "SExpr": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) m.02kwj00))"
        }
    },
    "106": {
        "generations": "What is Vincristine sulfate used to treat in medicine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040v969)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040v969 ns:medicine.drug.active_moieties ?y .\n?y ns:medicine.medical_treatment.used_to_treat ?x .\n}\n",
            "TopicEntityMid": "m.040v969",
            "mid2name": {
                "ns:m.040v969": "Vincristine sulfate"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug.active_moieties) Vincristine sulfate))",
            "SExpr": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug.active_moieties) m.040v969))"
        }
    },
    "107": {
        "generations": "What album did the artist perform at the iTunes Festival: London 2013?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ys76cw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ys76cw ns:music.album.artist ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.0ys76cw",
            "mid2name": {
                "ns:m.0ys76cw": "iTunes Festival: London 2013"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) iTunes Festival: London 2013))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) m.0ys76cw))"
        }
    },
    "108": {
        "generations": "What is the higher classification of organisms originating in Australia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0chghy",
            "mid2name": {
                "ns:m.0chghy": "Australia"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Australia))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.0chghy))"
        }
    },
    "109": {
        "generations": "who performed the track composed by edward downes?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g8xg2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g8xg2 ns:music.artist.track ?y .\n?y ns:music.recording.artist ?x .\n}\n",
            "TopicEntityMid": "m.0g8xg2",
            "mid2name": {
                "ns:m.0g8xg2": "Edward Downes"
            },
            "SExpr_w_name": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) Edward Downes))",
            "SExpr": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) m.0g8xg2))"
        }
    },
    "110": {
        "generations": "How do you pronounce \"Emirates\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011_65)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011_65 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.011_65",
            "mid2name": {
                "ns:m.011_65": "Emirates"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Emirates))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.011_65))"
        }
    },
    "111": {
        "generations": "what genre does the song \"The Final Countdown (original radio edit)\" belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n493q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n493q ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0n493q",
            "mid2name": {
                "ns:m.0n493q": "The Final Countdown (original radio edit)"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) The Final Countdown (original radio edit)))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0n493q))"
        }
    },
    "112": {
        "generations": "how do you pronounce american league most valuable player award?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04w0y4h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04w0y4h ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04w0y4h",
            "mid2name": {
                "ns:m.04w0y4h": "American League Most Valuable Player Award"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) American League Most Valuable Player Award))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04w0y4h))"
        }
    },
    "113": {
        "generations": "What product lines are included in Terminator Salvation Vehicles?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.063gfd3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.063gfd3 ns:business.product_line.parent_product_line ?y .\n?y ns:business.product_line.includes_product_lines ?x .\n}\n",
            "TopicEntityMid": "m.063gfd3",
            "mid2name": {
                "ns:m.063gfd3": "Terminator Salvation Vehicles"
            },
            "SExpr_w_name": "(JOIN (R business.product_line.includes_product_lines) (JOIN (R business.product_line.parent_product_line) Terminator Salvation Vehicles))",
            "SExpr": "(JOIN (R business.product_line.includes_product_lines) (JOIN (R business.product_line.parent_product_line) m.063gfd3))"
        }
    },
    "114": {
        "generations": "What book contains illustrations by Pamela Lee?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j1wqy4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j1wqy4 ns:book.illustrator.magazine_covers ?y .\n?y ns:book.publication.contents ?x .\n}\n",
            "TopicEntityMid": "m.0j1wqy4",
            "mid2name": {
                "ns:m.0j1wqy4": "Pamela Lee"
            },
            "SExpr_w_name": "(JOIN (R book.publication.contents) (JOIN (R book.illustrator.magazine_covers) Pamela Lee))",
            "SExpr": "(JOIN (R book.publication.contents) (JOIN (R book.illustrator.magazine_covers) m.0j1wqy4))"
        }
    },
    "115": {
        "generations": "What is the higher classification of the Komondor and what does it eat in the food web?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04dm6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04dm6 ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.ecology.food_web_member.eaten_by ?x .\n}\n",
            "TopicEntityMid": "m.04dm6",
            "mid2name": {
                "ns:m.04dm6": "Komondor"
            },
            "SExpr_w_name": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) Komondor))",
            "SExpr": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) m.04dm6))"
        }
    },
    "116": {
        "generations": "Which company produces the 2005 Sunce \"Old Vines, Pena Creek Vineyard\" Dry Creek Valley Zinfandel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q12w4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q12w4 ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03q12w4",
            "mid2name": {
                "ns:m.03q12w4": "2005 Sunce \"Old Vines, Pena Creek Vineyard\" Dry Creek Valley Zinfandel"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2005 Sunce \"Old Vines, Pena Creek Vineyard\" Dry Creek Valley Zinfandel))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03q12w4))"
        }
    },
    "117": {
        "generations": "who won the Officer of the Order of the British Empire award?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gdhq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gdhq ns:award.award_category.winners ?y .\n?y ns:award.award_honor.award_winner ?x .\n}\n",
            "TopicEntityMid": "m.03gdhq",
            "mid2name": {
                "ns:m.03gdhq": "Officer of the Order of the British Empire"
            },
            "SExpr_w_name": "(JOIN (R award.award_honor.award_winner) (JOIN (R award.award_category.winners) Officer of the Order of the British Empire))",
            "SExpr": "(JOIN (R award.award_honor.award_winner) (JOIN (R award.award_category.winners) m.03gdhq))"
        }
    },
    "118": {
        "generations": "who wrote the voyages of captain james cook round the world?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c791sw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c791sw ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0c791sw",
            "mid2name": {
                "ns:m.0c791sw": "The voyages of Captain James Cook round the world : selected from his journals and edited by Christopher Lloyd"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) The voyages of Captain James Cook round the world : selected from his journals and edited by Christopher Lloyd))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.0c791sw))"
        }
    },
    "119": {
        "generations": "What is the Sacred Band of Stepsons and who serves in it?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b_wsry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b_wsry ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:military.military_unit.servicemembers ?x .\n}\n",
            "TopicEntityMid": "m.0b_wsry",
            "mid2name": {
                "ns:m.0b_wsry": "Sacred Band of Stepsons"
            },
            "SExpr_w_name": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) Sacred Band of Stepsons))",
            "SExpr": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) m.0b_wsry))"
        }
    },
    "120": {
        "generations": "who wrote a recipe that uses a chef's knife?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058r4f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058r4f ns:food.culinary_tool.used_in_recipes ?y .\n?y ns:food.recipe.author ?x .\n}\n",
            "TopicEntityMid": "m.058r4f",
            "mid2name": {
                "ns:m.058r4f": "Chef's knife"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) Chef's knife))",
            "SExpr": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) m.058r4f))"
        }
    },
    "121": {
        "generations": "What TV show was filmed at a suspension bridge location?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0466d6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0466d6p ns:tv.tv_episode_segment.subjects ?y .\n?y ns:tv.tv_program.filming_locations ?x .\n}\n",
            "TopicEntityMid": "m.0466d6p",
            "mid2name": {
                "ns:m.0466d6p": "Suspension Bridge"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_program.filming_locations) (JOIN (R tv.tv_episode_segment.subjects) Suspension Bridge))",
            "SExpr": "(JOIN (R tv.tv_program.filming_locations) (JOIN (R tv.tv_episode_segment.subjects) m.0466d6p))"
        }
    },
    "122": {
        "generations": "What award was Chennai Super Kings nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03nwvqm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03nwvqm ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.03nwvqm",
            "mid2name": {
                "ns:m.03nwvqm": "Chennai Super Kings"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) Chennai Super Kings))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.03nwvqm))"
        }
    },
    "123": {
        "generations": "what industry is chris ringland involved in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gljl_4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gljl_4 ns:organization.organization_founder.organizations_founded ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0gljl_4",
            "mid2name": {
                "ns:m.0gljl_4": "Chris Ringland"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R organization.organization_founder.organizations_founded) Chris Ringland))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R organization.organization_founder.organizations_founded) m.0gljl_4))"
        }
    },
    "124": {
        "generations": "What historical places of worship are associated with Judaism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_gx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_gx ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.03_gx",
            "mid2name": {
                "ns:m.03_gx": "Judaism"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Judaism))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.03_gx))"
        }
    },
    "125": {
        "generations": "What city is Hazelwood West High School located in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08w6sy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08w6sy ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.08w6sy",
            "mid2name": {
                "ns:m.08w6sy": "Hazelwood West High School"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) Hazelwood West High School))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) m.08w6sy))"
        }
    },
    "126": {
        "generations": "Which fictional characters have lived in Gisborough Hall?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ygt3m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ygt3m ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.04ygt3m",
            "mid2name": {
                "ns:m.04ygt3m": "Gisborough Hall"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Gisborough Hall))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.04ygt3m))"
        }
    },
    "127": {
        "generations": "What genre of music does Space and Dub perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0129y0h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0129y0h ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0129y0h",
            "mid2name": {
                "ns:m.0129y0h": "Space and Dub"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Space and Dub))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0129y0h))"
        }
    },
    "128": {
        "generations": "What award was Porgy and Bess nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n65dgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n65dgx ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0n65dgx",
            "mid2name": {
                "ns:m.0n65dgx": "Porgy and Bess"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Porgy and Bess))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0n65dgx))"
        }
    },
    "129": {
        "generations": "what books did john boynton priestley write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lzh6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lzh6 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0lzh6",
            "mid2name": {
                "ns:m.0lzh6": "John Boynton Priestley"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) John Boynton Priestley))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.0lzh6))"
        }
    },
    "130": {
        "generations": "how do you pronounce Schwinn Bicycle Company?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045gth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045gth ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.045gth",
            "mid2name": {
                "ns:m.045gth": "Schwinn Bicycle Company"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Schwinn Bicycle Company))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.045gth))"
        }
    },
    "131": {
        "generations": "who wrote the book \"The Structure of Evolutionary Theory\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g14x0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g14x0 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0g14x0",
            "mid2name": {
                "ns:m.0g14x0": "The Structure of Evolutionary Theory"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Structure of Evolutionary Theory))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0g14x0))"
        }
    },
    "132": {
        "generations": "who wrote books about metalworking?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ng72)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ng72 ns:visual_art.visual_art_form.artists ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01ng72",
            "mid2name": {
                "ns:m.01ng72": "Metalworking"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R visual_art.visual_art_form.artists) Metalworking))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R visual_art.visual_art_form.artists) m.01ng72))"
        }
    },
    "133": {
        "generations": "What award was Wait Wait... Don't Tell Me! nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041z1gp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041z1gp ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.041z1gp",
            "mid2name": {
                "ns:m.041z1gp": "Wait Wait... Don't Tell Me!"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Wait Wait... Don't Tell Me!))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.041z1gp))"
        }
    },
    "134": {
        "generations": "What is the latitude of Maastrichtian?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0836b7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0836b7 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0836b7",
            "mid2name": {
                "ns:m.0836b7": "Maastrichtian"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Maastrichtian))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0836b7))"
        }
    },
    "135": {
        "generations": "How do you pronounce the name \"Splake\" and what is its biological classification rank?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d4pw5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d4pw5 ns:biology.organism_classification.rank ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0d4pw5",
            "mid2name": {
                "ns:m.0d4pw5": "Splake"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.rank) Splake))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.rank) m.0d4pw5))"
        }
    },
    "136": {
        "generations": "what ship classes did Cornelius Shields design?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.063lnlx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.063lnlx ns:boats.ship_designer.ship_classes_designed ?y .\n?y ns:boats.ship_class.length_overall_m ?x .\n}\n",
            "TopicEntityMid": "m.063lnlx",
            "mid2name": {
                "ns:m.063lnlx": "Cornelius Shields"
            },
            "SExpr_w_name": "(JOIN (R boats.ship_class.length_overall_m) (JOIN (R boats.ship_designer.ship_classes_designed) Cornelius Shields))",
            "SExpr": "(JOIN (R boats.ship_class.length_overall_m) (JOIN (R boats.ship_designer.ship_classes_designed) m.063lnlx))"
        }
    },
    "137": {
        "generations": "What is near Crocodile Park?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k7_02w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k7_02w ns:travel.tourist_attraction.near_travel_destination ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0k7_02w",
            "mid2name": {
                "ns:m.0k7_02w": "Crocodile Park"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R travel.tourist_attraction.near_travel_destination) Crocodile Park))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R travel.tourist_attraction.near_travel_destination) m.0k7_02w))"
        }
    },
    "138": {
        "generations": "What active ingredient is used in intracavitary drug formulations?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqy5f9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqy5f9 ns:medicine.drug_administration_route.drug_formulations ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n}\n",
            "TopicEntityMid": "m.0hqy5f9",
            "mid2name": {
                "ns:m.0hqy5f9": "Intracavitary"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) Intracavitary))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) m.0hqy5f9))"
        }
    },
    "139": {
        "generations": "What language family does the Dutch language belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02bv9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02bv9 ns:language.human_language.dialects ?y .\n?y ns:language.human_language.language_family ?x .\n}\n",
            "TopicEntityMid": "m.02bv9",
            "mid2name": {
                "ns:m.02bv9": "Dutch Language"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.language_family) (JOIN (R language.human_language.dialects) Dutch Language))",
            "SExpr": "(JOIN (R language.human_language.language_family) (JOIN (R language.human_language.dialects) m.02bv9))"
        }
    },
    "140": {
        "generations": "How do you pronounce Sputnik 3?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wjpj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wjpj ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02wjpj",
            "mid2name": {
                "ns:m.02wjpj": "Sputnik 3"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Sputnik 3))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02wjpj))"
        }
    },
    "141": {
        "generations": "What historical places of worship are associated with Abrahamic religions?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f_h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f_h6 ns:religion.religion.includes ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.0f_h6",
            "mid2name": {
                "ns:m.0f_h6": "Abrahamic religions"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.includes) Abrahamic religions))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.includes) m.0f_h6))"
        }
    },
    "142": {
        "generations": "What is the latitude of MAGIO's geolocation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zfmbjt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zfmbjt ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0zfmbjt",
            "mid2name": {
                "ns:m.0zfmbjt": "MAGIO"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) MAGIO))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0zfmbjt))"
        }
    },
    "143": {
        "generations": "who founded the fictional organization that Raquella Berto-Anirul is a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_0lb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_0lb ns:fictional_universe.fictional_organization_founder.fictional_organizations_founded ?y .\n?y ns:fictional_universe.fictional_organization.members ?x .\n}\n",
            "TopicEntityMid": "m.07_0lb",
            "mid2name": {
                "ns:m.07_0lb": "Raquella Berto-Anirul"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_organization.members) (JOIN (R fictional_universe.fictional_organization_founder.fictional_organizations_founded) Raquella Berto-Anirul))",
            "SExpr": "(JOIN (R fictional_universe.fictional_organization.members) (JOIN (R fictional_universe.fictional_organization_founder.fictional_organizations_founded) m.07_0lb))"
        }
    },
    "144": {
        "generations": "how do you pronounce joey boukadakis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gx3fwf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gx3fwf ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0gx3fwf",
            "mid2name": {
                "ns:m.0gx3fwf": "Joey Boukadakis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Joey Boukadakis))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0gx3fwf))"
        }
    },
    "145": {
        "generations": "What make is the Chevrolet Corvette?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01g8dv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01g8dv ns:automotive.model.generations ?y .\n?y ns:automotive.model.make ?x .\n}\n",
            "TopicEntityMid": "m.01g8dv",
            "mid2name": {
                "ns:m.01g8dv": "Chevrolet Corvette"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.make) (JOIN (R automotive.model.generations) Chevrolet Corvette))",
            "SExpr": "(JOIN (R automotive.model.make) (JOIN (R automotive.model.generations) m.01g8dv))"
        }
    },
    "146": {
        "generations": "What is the particle that corresponds to the bottom antiquark?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094ntzy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094ntzy ns:physics.particle.antiparticle ?y .\n?y ns:physics.particle_antiparticle.particle ?x .\n}\n",
            "TopicEntityMid": "m.094ntzy",
            "mid2name": {
                "ns:m.094ntzy": "Bottom antiquark"
            },
            "SExpr_w_name": "(JOIN (R physics.particle_antiparticle.particle) (JOIN (R physics.particle.antiparticle) Bottom antiquark))",
            "SExpr": "(JOIN (R physics.particle_antiparticle.particle) (JOIN (R physics.particle.antiparticle) m.094ntzy))"
        }
    },
    "147": {
        "generations": "how do you pronounce the word \"literature\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04g51)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04g51 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04g51",
            "mid2name": {
                "ns:m.04g51": "Literature"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Literature))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04g51))"
        }
    },
    "148": {
        "generations": "what genre of music is the album \"Non ci badar, guarda e passa...\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01l9k47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01l9k47 ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01l9k47",
            "mid2name": {
                "ns:m.01l9k47": "Non ci badar, guarda e passa..."
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Non ci badar, guarda e passa...))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01l9k47))"
        }
    },
    "149": {
        "generations": "which companies employ graduates from the computer engineering department?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz9rkf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz9rkf ns:education.department.department_of ?y .\n?y ns:business.employer.employees ?x .\n}\n",
            "TopicEntityMid": "m.0hz9rkf",
            "mid2name": {
                "ns:m.0hz9rkf": "Ingenier\u00eda Inform\u00e1tica"
            },
            "SExpr_w_name": "(JOIN (R business.employer.employees) (JOIN (R education.department.department_of) Ingenier\u00eda Inform\u00e1tica))",
            "SExpr": "(JOIN (R business.employer.employees) (JOIN (R education.department.department_of) m.0hz9rkf))"
        }
    },
    "150": {
        "generations": "What is the higher classification of Damchi and what eats it in the food web?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.1203ng2yx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.1203ng2yx ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.ecology.food_web_member.eaten_by ?x .\n}\n",
            "TopicEntityMid": "g.1203ng2yx",
            "mid2name": {
                "ns:g.1203ng2yx": "Damchi"
            },
            "SExpr_w_name": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) Damchi))",
            "SExpr": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) g.1203ng2yx))"
        }
    },
    "151": {
        "generations": "where did the assistant professor work?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wjn0x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wjn0x ns:business.job_title.people_with_this_title ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n",
            "TopicEntityMid": "m.02wjn0x",
            "mid2name": {
                "ns:m.02wjn0x": "Assistant Professor"
            },
            "SExpr_w_name": "(JOIN (R business.employment_tenure.company) (JOIN (R business.job_title.people_with_this_title) Assistant Professor))",
            "SExpr": "(JOIN (R business.employment_tenure.company) (JOIN (R business.job_title.people_with_this_title) m.02wjn0x))"
        }
    },
    "152": {
        "generations": "Which fictional universes feature characters that have lived in Los Angeles?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030qb3t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030qb3t ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.030qb3t",
            "mid2name": {
                "ns:m.030qb3t": "Los Angeles"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Los Angeles))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.030qb3t))"
        }
    },
    "153": {
        "generations": "What farms are served by Voice of the Voters?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n9xkfv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n9xkfv ns:tv.tv_program.country_of_origin ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.0n9xkfv",
            "mid2name": {
                "ns:m.0n9xkfv": "Voice of the Voters"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R tv.tv_program.country_of_origin) Voice of the Voters))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R tv.tv_program.country_of_origin) m.0n9xkfv))"
        }
    },
    "154": {
        "generations": "who are the characters of the ThunderCats species in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hzzjp8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hzzjp8 ns:fictional_universe.fictional_universe.species ?y .\n?y ns:fictional_universe.character_species.characters_of_this_species ?x .\n}\n",
            "TopicEntityMid": "m.0hzzjp8",
            "mid2name": {
                "ns:m.0hzzjp8": "ThunderCats"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.character_species.characters_of_this_species) (JOIN (R fictional_universe.fictional_universe.species) ThunderCats))",
            "SExpr": "(JOIN (R fictional_universe.character_species.characters_of_this_species) (JOIN (R fictional_universe.fictional_universe.species) m.0hzzjp8))"
        }
    },
    "155": {
        "generations": "Which rockets have been launched from ELA-1 launch site?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d8gn_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d8gn_ ns:spaceflight.rocket_launch_site.rockets_launched_here ?y .\n?y ns:spaceflight.rocket.launch_sites ?x .\n}\n",
            "TopicEntityMid": "m.03d8gn_",
            "mid2name": {
                "ns:m.03d8gn_": "ELA-1"
            },
            "SExpr_w_name": "(JOIN (R spaceflight.rocket.launch_sites) (JOIN (R spaceflight.rocket_launch_site.rockets_launched_here) ELA-1))",
            "SExpr": "(JOIN (R spaceflight.rocket.launch_sites) (JOIN (R spaceflight.rocket_launch_site.rockets_launched_here) m.03d8gn_))"
        }
    },
    "156": {
        "generations": "who wrote the book jekyll & hyde?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07g25t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07g25t ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.07g25t",
            "mid2name": {
                "ns:m.07g25t": "Jekyll & Hyde"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Jekyll & Hyde))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.07g25t))"
        }
    },
    "157": {
        "generations": "How do you pronounce the word \"Pain\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.062t2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.062t2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.062t2",
            "mid2name": {
                "ns:m.062t2": "Pain"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Pain))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.062t2))"
        }
    },
    "158": {
        "generations": "how do you pronounce hong kong?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h64)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h64 ns:location.country.administrative_divisions ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03h64",
            "mid2name": {
                "ns:m.03h64": "Hong Kong"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.country.administrative_divisions) Hong Kong))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.country.administrative_divisions) m.03h64))"
        }
    },
    "159": {
        "generations": "What is the locus of Chromosome 1 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.099hmk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.099hmk ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.099hmk",
            "mid2name": {
                "ns:m.099hmk": "Chromosome 1 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 1 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.099hmk))"
        }
    },
    "160": {
        "generations": "What dog breeds originated near Battersea Railway Bridge?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07fky9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07fky9 ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.07fky9",
            "mid2name": {
                "ns:m.07fky9": "Battersea Railway Bridge"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Battersea Railway Bridge))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.07fky9))"
        }
    },
    "161": {
        "generations": "what league does the barrie colts play in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033587)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033587 ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.033587",
            "mid2name": {
                "ns:m.033587": "Barrie Colts"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Barrie Colts))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.033587))"
        }
    },
    "162": {
        "generations": "Which characters have lived in The Band brings gods to Sandia in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c1c78q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c1c78q ns:base.militaryinfiction.event_in_fiction.location ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.0c1c78q",
            "mid2name": {
                "ns:m.0c1c78q": "The Band brings gods to Sandia"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R base.militaryinfiction.event_in_fiction.location) The Band brings gods to Sandia))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R base.militaryinfiction.event_in_fiction.location) m.0c1c78q))"
        }
    },
    "163": {
        "generations": "what language did j\u00e1nos arany write in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06kmj1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06kmj1 ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.06kmj1",
            "mid2name": {
                "ns:m.06kmj1": "J\u00e1nos Arany"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) J\u00e1nos Arany))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.06kmj1))"
        }
    },
    "164": {
        "generations": "What country does Roger Federer represent in the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01my95)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01my95 ns:olympics.olympic_athlete.country ?y .\n?y ns:olympics.olympic_athlete_affiliation.country ?x .\n}\n",
            "TopicEntityMid": "m.01my95",
            "mid2name": {
                "ns:m.01my95": "Roger Federer"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) Roger Federer))",
            "SExpr": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) m.01my95))"
        }
    },
    "165": {
        "generations": "who wrote the book Wizard Weather?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0b1q0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0b1q0 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0c0b1q0",
            "mid2name": {
                "ns:m.0c0b1q0": "Wizard Weather"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Wizard Weather))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0c0b1q0))"
        }
    },
    "166": {
        "generations": "how do you pronounce \"World War II\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081pw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081pw ns:tv.tv_subject.tv_episode_segments ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.081pw",
            "mid2name": {
                "ns:m.081pw": "World War II"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R tv.tv_subject.tv_episode_segments) World War II))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R tv.tv_subject.tv_episode_segments) m.081pw))"
        }
    },
    "167": {
        "generations": "How do you pronounce words in the Basque language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017k6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017k6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.017k6",
            "mid2name": {
                "ns:m.017k6": "Basque Language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Basque Language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.017k6))"
        }
    },
    "168": {
        "generations": "who is the author of books written by Didier Graffet?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05xr7p_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05xr7p_ ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05xr7p_",
            "mid2name": {
                "ns:m.05xr7p_": "Didier Graffet"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Didier Graffet))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05xr7p_))"
        }
    },
    "169": {
        "generations": "Who were the parties involved in the Silvio Berlusconi prostitute trial?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g9xrjr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g9xrjr ns:law.legal_case.parties ?y .\n?y ns:law.legal_case_party_relationship.parties ?x .\n}\n",
            "TopicEntityMid": "m.0g9xrjr",
            "mid2name": {
                "ns:m.0g9xrjr": "Silvio Berlusconi prostitute trial"
            },
            "SExpr_w_name": "(JOIN (R law.legal_case_party_relationship.parties) (JOIN (R law.legal_case.parties) Silvio Berlusconi prostitute trial))",
            "SExpr": "(JOIN (R law.legal_case_party_relationship.parties) (JOIN (R law.legal_case.parties) m.0g9xrjr))"
        }
    },
    "170": {
        "generations": "What category does the product line \"Build cloud infrastructures\" belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rq165q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rq165q ns:business.product_theme.product_lines ?y .\n?y ns:business.product_line.category ?x .\n}\n",
            "TopicEntityMid": "m.0rq165q",
            "mid2name": {
                "ns:m.0rq165q": "Build cloud infrastructures"
            },
            "SExpr_w_name": "(JOIN (R business.product_line.category) (JOIN (R business.product_theme.product_lines) Build cloud infrastructures))",
            "SExpr": "(JOIN (R business.product_line.category) (JOIN (R business.product_theme.product_lines) m.0rq165q))"
        }
    },
    "171": {
        "generations": "How do you pronounce the word \"marriage\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0238f7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0238f7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0238f7",
            "mid2name": {
                "ns:m.0238f7": "Marriage"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Marriage))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0238f7))"
        }
    },
    "172": {
        "generations": "Which political party supports the issues of libertarianism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08_lx0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08_lx0 ns:government.political_ideology.political_parties ?y .\n?y ns:base.activism.political_party.supports_issues ?x .\n}\n",
            "TopicEntityMid": "m.08_lx0",
            "mid2name": {
                "ns:m.08_lx0": "Libertarianism"
            },
            "SExpr_w_name": "(JOIN (R base.activism.political_party.supports_issues) (JOIN (R government.political_ideology.political_parties) Libertarianism))",
            "SExpr": "(JOIN (R base.activism.political_party.supports_issues) (JOIN (R government.political_ideology.political_parties) m.08_lx0))"
        }
    },
    "173": {
        "generations": "What features does Disney's Yacht Club Resort have?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09lr3h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09lr3h ns:travel.accommodation.features ?y .\n?y ns:travel.accommodation_feature.accommodation_with_this_feature ?x .\n}\n",
            "TopicEntityMid": "m.09lr3h",
            "mid2name": {
                "ns:m.09lr3h": "Disney's Yacht Club Resort"
            },
            "SExpr_w_name": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R travel.accommodation.features) Disney's Yacht Club Resort))",
            "SExpr": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R travel.accommodation.features) m.09lr3h))"
        }
    },
    "174": {
        "generations": "Which athlete competed in demonstration events with Dordi Nordby in the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054slh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054slh ns:olympics.olympic_athlete.demonstration_events_competed_in ?y .\n?y ns:olympics.demonstration_event_athlete_relationship.athlete ?x .\n}\n",
            "TopicEntityMid": "m.054slh",
            "mid2name": {
                "ns:m.054slh": "Dordi Nordby"
            },
            "SExpr_w_name": "(JOIN (R olympics.demonstration_event_athlete_relationship.athlete) (JOIN (R olympics.olympic_athlete.demonstration_events_competed_in) Dordi Nordby))",
            "SExpr": "(JOIN (R olympics.demonstration_event_athlete_relationship.athlete) (JOIN (R olympics.olympic_athlete.demonstration_events_competed_in) m.054slh))"
        }
    },
    "175": {
        "generations": "What was Diamondoid Thin Films as Electron Emitters project's role in the project participation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j1cjhj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j1cjhj ns:projects.project.participants ?y .\n?y ns:projects.project_participation.role ?x .\n}\n",
            "TopicEntityMid": "m.0j1cjhj",
            "mid2name": {
                "ns:m.0j1cjhj": "Diamondoid Thin Films as Electron Emitters project"
            },
            "SExpr_w_name": "(JOIN (R projects.project_participation.role) (JOIN (R projects.project.participants) Diamondoid Thin Films as Electron Emitters project))",
            "SExpr": "(JOIN (R projects.project_participation.role) (JOIN (R projects.project.participants) m.0j1cjhj))"
        }
    },
    "176": {
        "generations": "Who is the governing body of the 2013 Campeonato Brasileiro S\u00e9rie B soccer league?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r4j_fq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r4j_fq ns:soccer.football_league_season.league ?y .\n?y ns:soccer.football_league.governing_body ?x .\n}\n",
            "TopicEntityMid": "m.0r4j_fq",
            "mid2name": {
                "ns:m.0r4j_fq": "2013 Campeonato Brasileiro S\u00e9rie B"
            },
            "SExpr_w_name": "(JOIN (R soccer.football_league.governing_body) (JOIN (R soccer.football_league_season.league) 2013 Campeonato Brasileiro S\u00e9rie B))",
            "SExpr": "(JOIN (R soccer.football_league.governing_body) (JOIN (R soccer.football_league_season.league) m.0r4j_fq))"
        }
    },
    "177": {
        "generations": "Who founded Oriental Orthodoxy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05pbd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05pbd ns:religion.religion.includes ?y .\n?y ns:religion.religion.founding_figures ?x .\n}\n",
            "TopicEntityMid": "m.05pbd",
            "mid2name": {
                "ns:m.05pbd": "Oriental Orthodoxy"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.founding_figures) (JOIN (R religion.religion.includes) Oriental Orthodoxy))",
            "SExpr": "(JOIN (R religion.religion.founding_figures) (JOIN (R religion.religion.includes) m.05pbd))"
        }
    },
    "178": {
        "generations": "What is the location of Engine Company 16 Fire Station?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bs5g7c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bs5g7c ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.0bs5g7c",
            "mid2name": {
                "ns:m.0bs5g7c": "Engine Company 16 Fire Station"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Engine Company 16 Fire Station))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.0bs5g7c))"
        }
    },
    "179": {
        "generations": "What chromosome is the locus for human cytogenetic band 5q35.2 located on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwmk9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwmk9 ns:biology.genomic_locus.annotation ?y .\n?y ns:biology.cytogenetic_band.chromosome ?x .\n}\n",
            "TopicEntityMid": "m.02kwmk9",
            "mid2name": {
                "ns:m.02kwmk9": "Locus for Human Cytogenetic Band 5q35.2"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.chromosome) (JOIN (R biology.genomic_locus.annotation) Locus for Human Cytogenetic Band 5q35.2))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.chromosome) (JOIN (R biology.genomic_locus.annotation) m.02kwmk9))"
        }
    },
    "180": {
        "generations": "how do you pronounce handball?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03krj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03krj ns:organization.organization_sector.organizations_in_this_sector ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03krj",
            "mid2name": {
                "ns:m.03krj": "Handball"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R organization.organization_sector.organizations_in_this_sector) Handball))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R organization.organization_sector.organizations_in_this_sector) m.03krj))"
        }
    },
    "181": {
        "generations": "What election campaign and primaries were held in Georgia's 7th Congressional District in 2002?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0459x8h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0459x8h ns:government.election.primaries ?y .\n?y ns:government.election.campaigns ?x .\n}\n",
            "TopicEntityMid": "m.0459x8h",
            "mid2name": {
                "ns:m.0459x8h": "2002 Election, Georgia\u2019s 7th Congressional District"
            },
            "SExpr_w_name": "(JOIN (R government.election.campaigns) (JOIN (R government.election.primaries) 2002 Election, Georgia\u2019s 7th Congressional District))",
            "SExpr": "(JOIN (R government.election.campaigns) (JOIN (R government.election.primaries) m.0459x8h))"
        }
    },
    "182": {
        "generations": "how do you pronounce josef eisinger's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.075hqm3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.075hqm3 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.075hqm3",
            "mid2name": {
                "ns:m.075hqm3": "Josef Eisinger"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Josef Eisinger))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.075hqm3))"
        }
    },
    "183": {
        "generations": "What is the classification of Molinara in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qkbfk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qkbfk ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.child_classifications ?x .\n}\n",
            "TopicEntityMid": "m.02qkbfk",
            "mid2name": {
                "ns:m.02qkbfk": "Molinara"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) Molinara))",
            "SExpr": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) m.02qkbfk))"
        }
    },
    "184": {
        "generations": "What versions are available for the Mozilla Public License?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02w1yc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02w1yc ns:computer.software_license.version_of ?y .\n?y ns:computer.software_license.versions ?x .\n}\n",
            "TopicEntityMid": "m.02w1yc",
            "mid2name": {
                "ns:m.02w1yc": "Mozilla Public License"
            },
            "SExpr_w_name": "(JOIN (R computer.software_license.versions) (JOIN (R computer.software_license.version_of) Mozilla Public License))",
            "SExpr": "(JOIN (R computer.software_license.versions) (JOIN (R computer.software_license.version_of) m.02w1yc))"
        }
    },
    "185": {
        "generations": "Who is the author of the Foie Gras Pasta recipe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083pzzb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083pzzb ns:food.recipe.author ?y .\n?y ns:food.recipe_author.recipes ?x .\n}\n",
            "TopicEntityMid": "m.083pzzb",
            "mid2name": {
                "ns:m.083pzzb": "Foie Gras Pasta"
            },
            "SExpr_w_name": "(JOIN (R food.recipe_author.recipes) (JOIN (R food.recipe.author) Foie Gras Pasta))",
            "SExpr": "(JOIN (R food.recipe_author.recipes) (JOIN (R food.recipe.author) m.083pzzb))"
        }
    },
    "186": {
        "generations": "how do you pronounce UWH Cultural Criteria?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_g3qj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_g3qj ns:protected_sites.site_listing_category.category_of ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05_g3qj",
            "mid2name": {
                "ns:m.05_g3qj": "UWH Cultural Criteria"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R protected_sites.site_listing_category.category_of) UWH Cultural Criteria))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R protected_sites.site_listing_category.category_of) m.05_g3qj))"
        }
    },
    "187": {
        "generations": "What fictional universe does Honey Airlines appear in and who are its members?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7g7rx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7g7rx ns:fictional_universe.fictional_organization.members ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.0h7g7rx",
            "mid2name": {
                "ns:m.0h7g7rx": "Honey Airlines"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_organization.members) Honey Airlines))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_organization.members) m.0h7g7rx))"
        }
    },
    "188": {
        "generations": "What are the different generations of Pontiac models?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xmf42g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xmf42g ns:automotive.make.model_s ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.0xmf42g",
            "mid2name": {
                "ns:m.0xmf42g": "Pontiac"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) Pontiac))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) m.0xmf42g))"
        }
    },
    "189": {
        "generations": "In which cities is the Maltese dog breed popular?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cyl6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cyl6 ns:base.petbreeds.dog_breed.cities_where_this_dog_is_popular ?y .\n?y ns:base.petbreeds.dog_city_relationship.cities ?x .\n}\n",
            "TopicEntityMid": "m.02cyl6",
            "mid2name": {
                "ns:m.02cyl6": "Maltese"
            },
            "SExpr_w_name": "(JOIN (R base.petbreeds.dog_city_relationship.cities) (JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) Maltese))",
            "SExpr": "(JOIN (R base.petbreeds.dog_city_relationship.cities) (JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) m.02cyl6))"
        }
    },
    "190": {
        "generations": "What is the name of the aircraft model Jabit III?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fr8nd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fr8nd ns:aviation.aircraft.model ?y .\n?y ns:aviation.aircraft_model.aircraft ?x .\n}\n",
            "TopicEntityMid": "m.0fr8nd",
            "mid2name": {
                "ns:m.0fr8nd": "Jabit III"
            },
            "SExpr_w_name": "(JOIN (R aviation.aircraft_model.aircraft) (JOIN (R aviation.aircraft.model) Jabit III))",
            "SExpr": "(JOIN (R aviation.aircraft_model.aircraft) (JOIN (R aviation.aircraft.model) m.0fr8nd))"
        }
    },
    "191": {
        "generations": "what is the orientation of US Interstate 5?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0kd_x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0kd_x ns:transportation.road.orientation ?y .\n?y ns:transportation.road_orientation.roads_with_this_orientation ?x .\n}\n",
            "TopicEntityMid": "m.0kd_x",
            "mid2name": {
                "ns:m.0kd_x": "US Interstate 5"
            },
            "SExpr_w_name": "(JOIN (R transportation.road_orientation.roads_with_this_orientation) (JOIN (R transportation.road.orientation) US Interstate 5))",
            "SExpr": "(JOIN (R transportation.road_orientation.roads_with_this_orientation) (JOIN (R transportation.road.orientation) m.0kd_x))"
        }
    },
    "192": {
        "generations": "what films has robert watched and reviewed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j8zw8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j8zw8 ns:user.robert.default_domain.media_consumer.films_watched ?y .\n?y ns:user.robert.default_domain.film_review.film ?x .\n}\n",
            "TopicEntityMid": "m.0j8zw8",
            "mid2name": {
                "ns:m.0j8zw8": "robert"
            },
            "SExpr_w_name": "(JOIN (R user.robert.default_domain.film_review.film) (JOIN (R user.robert.default_domain.media_consumer.films_watched) robert))",
            "SExpr": "(JOIN (R user.robert.default_domain.film_review.film) (JOIN (R user.robert.default_domain.media_consumer.films_watched) m.0j8zw8))"
        }
    },
    "193": {
        "generations": "What is the location of the band on chromosome 6q13 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwm_g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwm_g ns:biology.cytogenetic_band.chromosome ?y .\n?y ns:biology.chromosome.band ?x .\n}\n",
            "TopicEntityMid": "m.02kwm_g",
            "mid2name": {
                "ns:m.02kwm_g": "Human Cytogenetic Band 6q13"
            },
            "SExpr_w_name": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) Human Cytogenetic Band 6q13))",
            "SExpr": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) m.02kwm_g))"
        }
    },
    "194": {
        "generations": "Which companies produce backup software?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.073g7m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.073g7m ns:business.product_line.producer_s ?y .\n?y ns:business.company_product_line_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.073g7m",
            "mid2name": {
                "ns:m.073g7m": "Backup software"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_line_relationship.company) (JOIN (R business.product_line.producer_s) Backup software))",
            "SExpr": "(JOIN (R business.company_product_line_relationship.company) (JOIN (R business.product_line.producer_s) m.073g7m))"
        }
    },
    "195": {
        "generations": "What areas does the Winston Broadcasting Network serve?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03nnwsq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03nnwsq ns:broadcast.tv_station_owner.tv_stations ?y .\n?y ns:broadcast.broadcast.area_served ?x .\n}\n",
            "TopicEntityMid": "m.03nnwsq",
            "mid2name": {
                "ns:m.03nnwsq": "Winston Broadcasting Network"
            },
            "SExpr_w_name": "(JOIN (R broadcast.broadcast.area_served) (JOIN (R broadcast.tv_station_owner.tv_stations) Winston Broadcasting Network))",
            "SExpr": "(JOIN (R broadcast.broadcast.area_served) (JOIN (R broadcast.tv_station_owner.tv_stations) m.03nnwsq))"
        }
    },
    "196": {
        "generations": "What dialects are used in the translation of The Homeric hymns?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zmb844)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zmb844 ns:book.translation.language ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0zmb844",
            "mid2name": {
                "ns:m.0zmb844": "The Homeric hymns"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R book.translation.language) The Homeric hymns))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R book.translation.language) m.0zmb844))"
        }
    },
    "197": {
        "generations": "How do you pronounce the term \"search engine\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06xw2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06xw2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06xw2",
            "mid2name": {
                "ns:m.06xw2": "Search engine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Search engine))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06xw2))"
        }
    },
    "198": {
        "generations": "What is the locus of chromosome 18 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgll)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgll ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgll",
            "mid2name": {
                "ns:m.02kwgll": "Chromosome 18 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 18 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgll))"
        }
    },
    "199": {
        "generations": "where is the base of the force india formula 1 team located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cm859)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cm859 ns:base.formula1.formula_1_team.base ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.03cm859",
            "mid2name": {
                "ns:m.03cm859": "Force India"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R base.formula1.formula_1_team.base) Force India))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R base.formula1.formula_1_team.base) m.03cm859))"
        }
    },
    "200": {
        "generations": "How do you pronounce the word \"Citrus\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0108h7yk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0108h7yk ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0108h7yk",
            "mid2name": {
                "ns:m.0108h7yk": "Citrus"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Citrus))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0108h7yk))"
        }
    },
    "201": {
        "generations": "What organisms have their higher classification in Bulgaria?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015qh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015qh ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.015qh",
            "mid2name": {
                "ns:m.015qh": "Bulgaria"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Bulgaria))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.015qh))"
        }
    },
    "202": {
        "generations": "What award nominations did H'Angus receive as a sports mascot?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09msl0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09msl0 ns:sports.mascot.team ?y .\n?y ns:award.award_nominee.award_nominations ?x .\n}\n",
            "TopicEntityMid": "m.09msl0",
            "mid2name": {
                "ns:m.09msl0": "H'Angus"
            },
            "SExpr_w_name": "(JOIN (R award.award_nominee.award_nominations) (JOIN (R sports.mascot.team) H'Angus))",
            "SExpr": "(JOIN (R award.award_nominee.award_nominations) (JOIN (R sports.mascot.team) m.09msl0))"
        }
    },
    "203": {
        "generations": "How do you pronounce \"Optical telescope\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ngsz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ngsz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01ngsz",
            "mid2name": {
                "ns:m.01ngsz": "Optical telescope"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Optical telescope))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01ngsz))"
        }
    },
    "204": {
        "generations": "How do you pronounce the name \"Grey\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036k5h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036k5h ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.036k5h",
            "mid2name": {
                "ns:m.036k5h": "Grey"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Grey))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.036k5h))"
        }
    },
    "205": {
        "generations": "Who wrote the book \"Preirradiation chemotherapy with cyclophosphamide, doxorubicin, vincristine, and dexamethasone for primary CNS lymphomas: initial report of radiation therapy oncology group protocol 88-06\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040v961)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040v961 ns:book.written_work.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.040v961",
            "mid2name": {
                "ns:m.040v961": "Preirradiation chemotherapy with cyclophosphamide, doxorubicin, vincristine, and dexamethasone for primary CNS lymphomas: initial report of radiation therapy oncology group protocol 88-06"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) Preirradiation chemotherapy with cyclophosphamide, doxorubicin, vincristine, and dexamethasone for primary CNS lymphomas: initial report of radiation therapy oncology group protocol 88-06))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) m.040v961))"
        }
    },
    "206": {
        "generations": "What camera series does Olympus Corporation manufacture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fqsd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fqsd ns:base.filmcameras.camera_manufacturer.cameras_manufactured ?y .\n?y ns:base.filmcameras.camera.camera_series ?x .\n}\n",
            "TopicEntityMid": "m.0fqsd",
            "mid2name": {
                "ns:m.0fqsd": "Olympus Corporation"
            },
            "SExpr_w_name": "(JOIN (R base.filmcameras.camera.camera_series) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) Olympus Corporation))",
            "SExpr": "(JOIN (R base.filmcameras.camera.camera_series) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) m.0fqsd))"
        }
    },
    "207": {
        "generations": "What is the higher classification of organisms originating in the Netherlands?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059j2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059j2 ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.059j2",
            "mid2name": {
                "ns:m.059j2": "Netherlands"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Netherlands))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.059j2))"
        }
    },
    "208": {
        "generations": "What genre of music does Sleaze rock belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cjjl6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cjjl6 ns:music.genre.artists ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0cjjl6",
            "mid2name": {
                "ns:m.0cjjl6": "Sleaze rock"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) Sleaze rock))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) m.0cjjl6))"
        }
    },
    "209": {
        "generations": "What language family does Occitan language belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05l0r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05l0r ns:language.human_language.dialects ?y .\n?y ns:language.human_language.language_family ?x .\n}\n",
            "TopicEntityMid": "m.05l0r",
            "mid2name": {
                "ns:m.05l0r": "Occitan language"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.language_family) (JOIN (R language.human_language.dialects) Occitan language))",
            "SExpr": "(JOIN (R language.human_language.language_family) (JOIN (R language.human_language.dialects) m.05l0r))"
        }
    },
    "210": {
        "generations": "What are the parts that make up the Rolls-Royce Eagle XVI engine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.076y7_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.076y7_r ns:engineering.engine.category ?y .\n?y ns:base.engineeringdraft.manufactured_component_category.meronyms ?x .\n}\n",
            "TopicEntityMid": "m.076y7_r",
            "mid2name": {
                "ns:m.076y7_r": "Rolls-Royce Eagle XVI"
            },
            "SExpr_w_name": "(JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) (JOIN (R engineering.engine.category) Rolls-Royce Eagle XVI))",
            "SExpr": "(JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) (JOIN (R engineering.engine.category) m.076y7_r))"
        }
    },
    "211": {
        "generations": "Which fictional characters have lived in Sringeri Sharada Peetham?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06_wzv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06_wzv ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.06_wzv",
            "mid2name": {
                "ns:m.06_wzv": "Sringeri Sharada Peetham"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Sringeri Sharada Peetham))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.06_wzv))"
        }
    },
    "212": {
        "generations": "What is the plural form of the term \"Roman temple\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03f0h4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03f0h4 ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.language ?x .\n}\n",
            "TopicEntityMid": "m.03f0h4",
            "mid2name": {
                "ns:m.03f0h4": "Roman temple"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.language) (JOIN (R base.descriptive_names.names.descriptive_name) Roman temple))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.language) (JOIN (R base.descriptive_names.names.descriptive_name) m.03f0h4))"
        }
    },
    "213": {
        "generations": "Which fictional school's students or graduates are associated with Byrd Stadium?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0380c9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0380c9 ns:location.location.containedby ?y .\n?y ns:fictional_universe.school_in_fiction.students_graduates ?x .\n}\n",
            "TopicEntityMid": "m.0380c9",
            "mid2name": {
                "ns:m.0380c9": "Byrd Stadium"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.school_in_fiction.students_graduates) (JOIN (R location.location.containedby) Byrd Stadium))",
            "SExpr": "(JOIN (R fictional_universe.school_in_fiction.students_graduates) (JOIN (R location.location.containedby) m.0380c9))"
        }
    },
    "214": {
        "generations": "who is on the roster for the southern california sun?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069dlf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069dlf ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n}\n",
            "TopicEntityMid": "m.069dlf",
            "mid2name": {
                "ns:m.069dlf": "Southern California Sun"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team_roster.player) (JOIN (R sports.sports_team.roster) Southern California Sun))",
            "SExpr": "(JOIN (R sports.sports_team_roster.player) (JOIN (R sports.sports_team.roster) m.069dlf))"
        }
    },
    "215": {
        "generations": "How do you pronounce words in the Serbian language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k0sb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k0sb ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0k0sb",
            "mid2name": {
                "ns:m.0k0sb": "Serbian language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Serbian language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0k0sb))"
        }
    },
    "216": {
        "generations": "who has possessed a character in back to the future universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hn_sbj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hn_sbj ns:fictional_universe.fictional_universe.characters ?y .\n?y ns:fictional_universe.fictional_character.has_possessed ?x .\n}\n",
            "TopicEntityMid": "m.0hn_sbj",
            "mid2name": {
                "ns:m.0hn_sbj": "Back to the Future"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.fictional_universe.characters) Back to the Future))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.fictional_universe.characters) m.0hn_sbj))"
        }
    },
    "217": {
        "generations": "who wrote a book and composed music called Cinq-Mars?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wf32_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wf32_ ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.03wf32_",
            "mid2name": {
                "ns:m.03wf32_": "Cinq-Mars"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Cinq-Mars))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.03wf32_))"
        }
    },
    "218": {
        "generations": "how do you pronounce adolf hitler's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:book.author.works_written ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07_m9_",
            "mid2name": {
                "ns:m.07_m9_": "Adolf Hitler"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.author.works_written) Adolf Hitler))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.author.works_written) m.07_m9_))"
        }
    },
    "219": {
        "generations": "What is the jurisdiction of the Georgia House of Representatives?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03twx9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03twx9 ns:government.governmental_body.body_this_is_a_component_of ?y .\n?y ns:government.governmental_body.jurisdiction ?x .\n}\n",
            "TopicEntityMid": "m.03twx9",
            "mid2name": {
                "ns:m.03twx9": "Georgia House of Representatives"
            },
            "SExpr_w_name": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.governmental_body.body_this_is_a_component_of) Georgia House of Representatives))",
            "SExpr": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.03twx9))"
        }
    },
    "220": {
        "generations": "who is the author of david drake's books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023v6y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023v6y ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.023v6y",
            "mid2name": {
                "ns:m.023v6y": "David Drake"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) David Drake))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.023v6y))"
        }
    },
    "221": {
        "generations": "What products does the Motorola 88000 manufacturer produce for Robert's mobile phones?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fc68)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fc68 ns:computer.computer_processor.manufacturers ?y .\n?y ns:user.robert.mobile_phones.product_brand.products ?x .\n}\n",
            "TopicEntityMid": "m.0fc68",
            "mid2name": {
                "ns:m.0fc68": "Motorola 88000"
            },
            "SExpr_w_name": "(JOIN (R user.robert.mobile_phones.product_brand.products) (JOIN (R computer.computer_processor.manufacturers) Motorola 88000))",
            "SExpr": "(JOIN (R user.robert.mobile_phones.product_brand.products) (JOIN (R computer.computer_processor.manufacturers) m.0fc68))"
        }
    },
    "222": {
        "generations": "How do you pronounce double sideband modulation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05y5ync)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05y5ync ns:engineering.signal_modulation_mode.parent_modulation ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05y5ync",
            "mid2name": {
                "ns:m.05y5ync": "Double sideband modulation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R engineering.signal_modulation_mode.parent_modulation) Double sideband modulation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R engineering.signal_modulation_mode.parent_modulation) m.05y5ync))"
        }
    },
    "223": {
        "generations": "What books cover the topic of vegetation classification and mapping at Allegheny Portage Railroad National Historic Site?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_8tt9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_8tt9 ns:base.landcover.classification_publication.keywords ?y .\n?y ns:book.book_subject.works ?x .\n}\n",
            "TopicEntityMid": "m.04_8tt9",
            "mid2name": {
                "ns:m.04_8tt9": "Vegetation Classification and Mapping at Allegheny Portage Railroad National Historic Site"
            },
            "SExpr_w_name": "(JOIN (R book.book_subject.works) (JOIN (R base.landcover.classification_publication.keywords) Vegetation Classification and Mapping at Allegheny Portage Railroad National Historic Site))",
            "SExpr": "(JOIN (R book.book_subject.works) (JOIN (R base.landcover.classification_publication.keywords) m.04_8tt9))"
        }
    },
    "224": {
        "generations": "What genre of music does the band Wildside play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jglnr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jglnr ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01jglnr",
            "mid2name": {
                "ns:m.01jglnr": "Wildside"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Wildside))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01jglnr))"
        }
    },
    "225": {
        "generations": "What farms are located near the W. P. Carey School of Business?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.075z01)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.075z01 ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.075z01",
            "mid2name": {
                "ns:m.075z01": "W. P. Carey School of Business"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) W. P. Carey School of Business))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.075z01))"
        }
    },
    "226": {
        "generations": "What is the yomigana for the word \"Male\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05zppz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05zppz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05zppz",
            "mid2name": {
                "ns:m.05zppz": "Male"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Male))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05zppz))"
        }
    },
    "227": {
        "generations": "What genre of music does Soft Serve play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nph4c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nph4c ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0nph4c",
            "mid2name": {
                "ns:m.0nph4c": "Soft Serve"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Soft Serve))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0nph4c))"
        }
    },
    "228": {
        "generations": "What were the rounds in the 2010 FIFA World Cup Group E match between Cameroon and the Netherlands?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c20hwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c20hwx ns:time.event.included_in_event ?y .\n?y ns:base.tournaments.tournament.rounds ?x .\n}\n",
            "TopicEntityMid": "m.0c20hwx",
            "mid2name": {
                "ns:m.0c20hwx": "2010 FIFA World Cup Group E - CMR ./. NED"
            },
            "SExpr_w_name": "(JOIN (R base.tournaments.tournament.rounds) (JOIN (R time.event.included_in_event) 2010 FIFA World Cup Group E - CMR ./. NED))",
            "SExpr": "(JOIN (R base.tournaments.tournament.rounds) (JOIN (R time.event.included_in_event) m.0c20hwx))"
        }
    },
    "229": {
        "generations": "who owns the patents for the Alpha 21064 computer processor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04y6f5v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04y6f5v ns:computer.computer_processor.manufacturers ?y .\n?y ns:law.patent_assignee.patents_assigned ?x .\n}\n",
            "TopicEntityMid": "m.04y6f5v",
            "mid2name": {
                "ns:m.04y6f5v": "Alpha 21064"
            },
            "SExpr_w_name": "(JOIN (R law.patent_assignee.patents_assigned) (JOIN (R computer.computer_processor.manufacturers) Alpha 21064))",
            "SExpr": "(JOIN (R law.patent_assignee.patents_assigned) (JOIN (R computer.computer_processor.manufacturers) m.04y6f5v))"
        }
    },
    "230": {
        "generations": "who designed the costumes for the movie Camp Rock?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02w4by3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02w4by3 ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.02w4by3",
            "mid2name": {
                "ns:m.02w4by3": "Camp Rock"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Camp Rock))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.02w4by3))"
        }
    },
    "231": {
        "generations": "which company produces cabaret shows?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q35n0d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q35n0d ns:business.job_title.people_with_this_title ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n",
            "TopicEntityMid": "m.0q35n0d",
            "mid2name": {
                "ns:m.0q35n0d": "Cabaret Shows"
            },
            "SExpr_w_name": "(JOIN (R business.employment_tenure.company) (JOIN (R business.job_title.people_with_this_title) Cabaret Shows))",
            "SExpr": "(JOIN (R business.employment_tenure.company) (JOIN (R business.job_title.people_with_this_title) m.0q35n0d))"
        }
    },
    "232": {
        "generations": "how do you pronounce saturn v?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07932)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07932 ns:spaceflight.rocket.launch_sites ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07932",
            "mid2name": {
                "ns:m.07932": "Saturn V"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.rocket.launch_sites) Saturn V))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.rocket.launch_sites) m.07932))"
        }
    },
    "233": {
        "generations": "what parks are part of the oyster bay regional shoreline protected site system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.044ngkk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.044ngkk ns:protected_sites.protected_site.system ?y .\n?y ns:protected_sites.park_system.member_parks ?x .\n}\n",
            "TopicEntityMid": "m.044ngkk",
            "mid2name": {
                "ns:m.044ngkk": "Oyster Bay Regional Shoreline"
            },
            "SExpr_w_name": "(JOIN (R protected_sites.park_system.member_parks) (JOIN (R protected_sites.protected_site.system) Oyster Bay Regional Shoreline))",
            "SExpr": "(JOIN (R protected_sites.park_system.member_parks) (JOIN (R protected_sites.protected_site.system) m.044ngkk))"
        }
    },
    "234": {
        "generations": "What farms are located near Sweet Briar College?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04sfxg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04sfxg ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.04sfxg",
            "mid2name": {
                "ns:m.04sfxg": "Sweet Briar College"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Sweet Briar College))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.04sfxg))"
        }
    },
    "235": {
        "generations": "what genre of music is typically associated with bass-baritone singers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tlvj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tlvj ns:music.voice.singers ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01tlvj",
            "mid2name": {
                "ns:m.01tlvj": "Bass-baritone"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.voice.singers) Bass-baritone))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.voice.singers) m.01tlvj))"
        }
    },
    "236": {
        "generations": "which employees work in the department of Especializaci\u00f3n en Gerencia Log\u00edstica?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hzb6lk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hzb6lk ns:education.department.department_of ?y .\n?y ns:business.employer.employees ?x .\n}\n",
            "TopicEntityMid": "m.0hzb6lk",
            "mid2name": {
                "ns:m.0hzb6lk": "Especializaci\u00f3n en Gerencia Log\u00edstica"
            },
            "SExpr_w_name": "(JOIN (R business.employer.employees) (JOIN (R education.department.department_of) Especializaci\u00f3n en Gerencia Log\u00edstica))",
            "SExpr": "(JOIN (R business.employer.employees) (JOIN (R education.department.department_of) m.0hzb6lk))"
        }
    },
    "237": {
        "generations": "how do you pronounce the word \"actor\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hrh1q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hrh1q ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02hrh1q",
            "mid2name": {
                "ns:m.02hrh1q": "Actor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Actor))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02hrh1q))"
        }
    },
    "238": {
        "generations": "Which fictional universes feature characters that have lived in Paris?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.05qtj",
            "mid2name": {
                "ns:m.05qtj": "Paris"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Paris))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.05qtj))"
        }
    },
    "239": {
        "generations": "What active ingredients are in cutaneous drug formulations?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wjmnh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wjmnh ns:medicine.drug_administration_route.drug_formulations ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n}\n",
            "TopicEntityMid": "m.02wjmnh",
            "mid2name": {
                "ns:m.02wjmnh": "Cutaneous"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) Cutaneous))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) m.02wjmnh))"
        }
    },
    "240": {
        "generations": "What is the category of Qigong in martial arts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bmkv ns:martial_arts.martial_art.category ?y .\n?y ns:martial_arts.martial_art_category.martial_arts ?x .\n}\n",
            "TopicEntityMid": "m.0bmkv",
            "mid2name": {
                "ns:m.0bmkv": "Qigong"
            },
            "SExpr_w_name": "(JOIN (R martial_arts.martial_art_category.martial_arts) (JOIN (R martial_arts.martial_art.category) Qigong))",
            "SExpr": "(JOIN (R martial_arts.martial_art_category.martial_arts) (JOIN (R martial_arts.martial_art.category) m.0bmkv))"
        }
    },
    "241": {
        "generations": "What is the plural form of the word \"basilica\" in the English language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f85g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f85g ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.language ?x .\n}\n",
            "TopicEntityMid": "m.0f85g",
            "mid2name": {
                "ns:m.0f85g": "Basilica"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.language) (JOIN (R base.descriptive_names.names.descriptive_name) Basilica))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.language) (JOIN (R base.descriptive_names.names.descriptive_name) m.0f85g))"
        }
    },
    "242": {
        "generations": "What was Cochran Lab's role in the project \"Engineered Knottins as Molecular Imaging Agents\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hdnxj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hdnxj3 ns:projects.project.participants ?y .\n?y ns:projects.project_participation.role ?x .\n}\n",
            "TopicEntityMid": "m.0hdnxj3",
            "mid2name": {
                "ns:m.0hdnxj3": "Cochran Lab : Engineered Knottins as Molecular Imaging Agents"
            },
            "SExpr_w_name": "(JOIN (R projects.project_participation.role) (JOIN (R projects.project.participants) Cochran Lab : Engineered Knottins as Molecular Imaging Agents))",
            "SExpr": "(JOIN (R projects.project_participation.role) (JOIN (R projects.project.participants) m.0hdnxj3))"
        }
    },
    "243": {
        "generations": "What music group was Leisha Hailey a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02y1p_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02y1p_ ns:music.group_member.membership ?y .\n?y ns:music.group_membership.group ?x .\n}\n",
            "TopicEntityMid": "m.02y1p_",
            "mid2name": {
                "ns:m.02y1p_": "Leisha Hailey"
            },
            "SExpr_w_name": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) Leisha Hailey))",
            "SExpr": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) m.02y1p_))"
        }
    },
    "244": {
        "generations": "What music genre is Trent Reznor associated with?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01271h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01271h ns:music.artist.genre ?y .\n?y ns:base.collectives.collective_focus.collectives ?x .\n}\n",
            "TopicEntityMid": "m.01271h",
            "mid2name": {
                "ns:m.01271h": "Trent Reznor"
            },
            "SExpr_w_name": "(JOIN (R base.collectives.collective_focus.collectives) (JOIN (R music.artist.genre) Trent Reznor))",
            "SExpr": "(JOIN (R base.collectives.collective_focus.collectives) (JOIN (R music.artist.genre) m.01271h))"
        }
    },
    "245": {
        "generations": "What is the composition of the object possessed by Tr\u00f4s, the founder of Troy, in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c81wwy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c81wwy ns:fictional_universe.fictional_character.has_possessed ?y .\n?y ns:fictional_universe.fictional_object.composition ?x .\n}\n",
            "TopicEntityMid": "m.0c81wwy",
            "mid2name": {
                "ns:m.0c81wwy": "Tr\u00f4s, founder of Troy"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_character.has_possessed) Tr\u00f4s, founder of Troy))",
            "SExpr": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_character.has_possessed) m.0c81wwy))"
        }
    },
    "246": {
        "generations": "where can i buy the album Q Presents: Glastonbury 2003?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zzwfy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zzwfy ns:music.release.album ?y .\n?y ns:music.album.acquire_webpage ?x .\n}\n",
            "TopicEntityMid": "m.03zzwfy",
            "mid2name": {
                "ns:m.03zzwfy": "Q Presents: Glastonbury 2003"
            },
            "SExpr_w_name": "(JOIN (R music.album.acquire_webpage) (JOIN (R music.release.album) Q Presents: Glastonbury 2003))",
            "SExpr": "(JOIN (R music.album.acquire_webpage) (JOIN (R music.release.album) m.03zzwfy))"
        }
    },
    "247": {
        "generations": "What is the location of Swiss\u00f4tel Dresden?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011tyq2b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011tyq2b ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.011tyq2b",
            "mid2name": {
                "ns:m.011tyq2b": "Swiss\u00f4tel Dresden"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Swiss\u00f4tel Dresden))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.011tyq2b))"
        }
    },
    "248": {
        "generations": "What books have been written by Jean-Michel Basquiat?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041st)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041st ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.041st",
            "mid2name": {
                "ns:m.041st": "Jean-Michel Basquiat"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Jean-Michel Basquiat))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.041st))"
        }
    },
    "249": {
        "generations": "What fictional organization is featured in the Sun Crusher?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_8wg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_8wg ns:fictional_universe.fictional_object.featured_in_fictional_universe ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.04_8wg",
            "mid2name": {
                "ns:m.04_8wg": "Sun Crusher"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_object.featured_in_fictional_universe) Sun Crusher))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_object.featured_in_fictional_universe) m.04_8wg))"
        }
    },
    "250": {
        "generations": "how do you pronounce mads haahr's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rzrcf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rzrcf5 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0rzrcf5",
            "mid2name": {
                "ns:m.0rzrcf5": "Mads Haahr"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Mads Haahr))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0rzrcf5))"
        }
    },
    "251": {
        "generations": "what event did martin van buren speak at?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_0m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_0m ns:base.inaugurations.inauguration_speaker.inauguration ?y .\n?y ns:time.event.instance_of_recurring_event ?x .\n}\n",
            "TopicEntityMid": "m.04_0m",
            "mid2name": {
                "ns:m.04_0m": "Martin Van Buren"
            },
            "SExpr_w_name": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) Martin Van Buren))",
            "SExpr": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) m.04_0m))"
        }
    },
    "252": {
        "generations": "In which fictional universes does Corsair appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033mmj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033mmj ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.033mmj",
            "mid2name": {
                "ns:m.033mmj": "Corsair"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Corsair))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.033mmj))"
        }
    },
    "253": {
        "generations": "what asteroid group is 5878 Charlene a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03y165f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03y165f ns:astronomy.asteroid.member_of_asteroid_group ?y .\n?y ns:astronomy.asteroid_group.asteroid_group_members ?x .\n}\n",
            "TopicEntityMid": "m.03y165f",
            "mid2name": {
                "ns:m.03y165f": "5878 Charlene"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) 5878 Charlene))",
            "SExpr": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) m.03y165f))"
        }
    },
    "254": {
        "generations": "What is the active ingredient in Penicillium chrysogenum var. chrysogenum 6 liquid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqs5vv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqs5vv ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:medicine.drug_ingredient.active_ingredient_of_formulation ?x .\n}\n",
            "TopicEntityMid": "m.0hqs5vv",
            "mid2name": {
                "ns:m.0hqs5vv": "Penicillium chrysogenum var. chrysogenum 6 liquid"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Penicillium chrysogenum var. chrysogenum 6 liquid))",
            "SExpr": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqs5vv))"
        }
    },
    "255": {
        "generations": "how do you pronounce the name of the character created by Jon Talbain?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cwxh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cwxh ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03cwxh",
            "mid2name": {
                "ns:m.03cwxh": "Jon Talbain"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.character_created_by) Jon Talbain))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.character_created_by) m.03cwxh))"
        }
    },
    "256": {
        "generations": "What dog breeds originated in Swiss\u00f4tel Krasnye Holmy Moscow?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bm9td_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bm9td_ ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.0bm9td_",
            "mid2name": {
                "ns:m.0bm9td_": "Swiss\u00f4tel Krasnye Holmy Moscow"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Swiss\u00f4tel Krasnye Holmy Moscow))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.0bm9td_))"
        }
    },
    "257": {
        "generations": "who wrote the sigma rhapsody of the iliad?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06jd163)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06jd163 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.06jd163",
            "mid2name": {
                "ns:m.06jd163": "The Sigma rhapsody of the Iliad"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Sigma rhapsody of the Iliad))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.06jd163))"
        }
    },
    "258": {
        "generations": "What is the address of Semiahmoo Golf and Country Club?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04zl7p4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04zl7p4 ns:location.location.street_address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.04zl7p4",
            "mid2name": {
                "ns:m.04zl7p4": "Semiahmoo Golf and Country Club"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R location.location.street_address) Semiahmoo Golf and Country Club))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R location.location.street_address) m.04zl7p4))"
        }
    },
    "259": {
        "generations": "how do you pronounce the name of the royal line that preceded the house of hesse?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jcm_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jcm_ ns:royalty.royal_line.preceded_by ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01jcm_",
            "mid2name": {
                "ns:m.01jcm_": "House of Hesse"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R royalty.royal_line.preceded_by) House of Hesse))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R royalty.royal_line.preceded_by) m.01jcm_))"
        }
    },
    "260": {
        "generations": "How do you pronounce \"Macintosh\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zd6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zd6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0zd6",
            "mid2name": {
                "ns:m.0zd6": "Macintosh"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Macintosh))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0zd6))"
        }
    },
    "261": {
        "generations": "who wrote Lonely Planet Signspotting 2?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04yqhp0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04yqhp0 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04yqhp0",
            "mid2name": {
                "ns:m.04yqhp0": "Lonely Planet Signspotting 2"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Lonely Planet Signspotting 2))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.04yqhp0))"
        }
    },
    "262": {
        "generations": "who wrote books that alice waters authored?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02v3qq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02v3qq ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.02v3qq",
            "mid2name": {
                "ns:m.02v3qq": "Alice Waters"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Alice Waters))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.02v3qq))"
        }
    },
    "263": {
        "generations": "What internet videos are categorized as humor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09kqc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09kqc ns:base.webvideo.internet_video_genre.internet_video ?y .\n?y ns:base.webvideo.internet_video.performances ?x .\n}\n",
            "TopicEntityMid": "m.09kqc",
            "mid2name": {
                "ns:m.09kqc": "Humour"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R base.webvideo.internet_video_genre.internet_video) Humour))",
            "SExpr": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R base.webvideo.internet_video_genre.internet_video) m.09kqc))"
        }
    },
    "264": {
        "generations": "What is the higher classification of organisms originating in Afghanistan?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jdd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jdd ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0jdd",
            "mid2name": {
                "ns:m.0jdd": "Afghanistan"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Afghanistan))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.0jdd))"
        }
    },
    "265": {
        "generations": "What is the higher classification of organisms originating in Ukraine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t21)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t21 ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.07t21",
            "mid2name": {
                "ns:m.07t21": "Ukraine"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Ukraine))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.07t21))"
        }
    },
    "266": {
        "generations": "What country did Laurent Sciarra represent in the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ljc6_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ljc6_ ns:olympics.olympic_athlete.country ?y .\n?y ns:olympics.olympic_athlete_affiliation.country ?x .\n}\n",
            "TopicEntityMid": "m.04ljc6_",
            "mid2name": {
                "ns:m.04ljc6_": "Laurent Sciarra"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) Laurent Sciarra))",
            "SExpr": "(JOIN (R olympics.olympic_athlete_affiliation.country) (JOIN (R olympics.olympic_athlete.country) m.04ljc6_))"
        }
    },
    "267": {
        "generations": "Who publishes The Wanderer periodical?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.061w14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.061w14 ns:book.periodical.publisher ?y .\n?y ns:book.periodical_publisher_period.publisher ?x .\n}\n",
            "TopicEntityMid": "m.061w14",
            "mid2name": {
                "ns:m.061w14": "The Wanderer"
            },
            "SExpr_w_name": "(JOIN (R book.periodical_publisher_period.publisher) (JOIN (R book.periodical.publisher) The Wanderer))",
            "SExpr": "(JOIN (R book.periodical_publisher_period.publisher) (JOIN (R book.periodical.publisher) m.061w14))"
        }
    },
    "268": {
        "generations": "What is a track by Sierra Leone in the music recording?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01v7bp9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01v7bp9 ns:music.artist.track ?y .\n?y ns:music.recording.tracks ?x .\n}\n",
            "TopicEntityMid": "m.01v7bp9",
            "mid2name": {
                "ns:m.01v7bp9": "Sierra Leone"
            },
            "SExpr_w_name": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) Sierra Leone))",
            "SExpr": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) m.01v7bp9))"
        }
    },
    "269": {
        "generations": "What subjects are covered in the monthly periodical of techgnostic?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hfk6k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hfk6k ns:user.techgnostic.default_domain.publishing_cycle.periodicals ?y .\n?y ns:user.techgnostic.default_domain.periodical.subject ?x .\n}\n",
            "TopicEntityMid": "m.02hfk6k",
            "mid2name": {
                "ns:m.02hfk6k": "Monthly"
            },
            "SExpr_w_name": "(JOIN (R user.techgnostic.default_domain.periodical.subject) (JOIN (R user.techgnostic.default_domain.publishing_cycle.periodicals) Monthly))",
            "SExpr": "(JOIN (R user.techgnostic.default_domain.periodical.subject) (JOIN (R user.techgnostic.default_domain.publishing_cycle.periodicals) m.02hfk6k))"
        }
    },
    "270": {
        "generations": "how do you pronounce the word banana?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09qck)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09qck ns:biology.organism_classification.rank ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.09qck",
            "mid2name": {
                "ns:m.09qck": "Banana"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.rank) Banana))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.rank) m.09qck))"
        }
    },
    "271": {
        "generations": "What is the latitude of Baitul Hamd in Mississauga?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bs4kt6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bs4kt6 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0bs4kt6",
            "mid2name": {
                "ns:m.0bs4kt6": "Baitul Hamd, Mississauga"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Baitul Hamd, Mississauga))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0bs4kt6))"
        }
    },
    "272": {
        "generations": "What brand produces dolls?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0167gd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0167gd ns:business.product_category.product_lines ?y .\n?y ns:business.product_line.brand ?x .\n}\n",
            "TopicEntityMid": "m.0167gd",
            "mid2name": {
                "ns:m.0167gd": "Doll"
            },
            "SExpr_w_name": "(JOIN (R business.product_line.brand) (JOIN (R business.product_category.product_lines) Doll))",
            "SExpr": "(JOIN (R business.product_line.brand) (JOIN (R business.product_category.product_lines) m.0167gd))"
        }
    },
    "273": {
        "generations": "what species is snarf from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h1by7z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h1by7z ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.species ?x .\n}\n",
            "TopicEntityMid": "m.0h1by7z",
            "mid2name": {
                "ns:m.0h1by7z": "Snarf"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Snarf))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.0h1by7z))"
        }
    },
    "274": {
        "generations": "Which company produces wine from Braccialini Vineyard?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p0wkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p0wkv ns:wine.vineyard.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.03p0wkv",
            "mid2name": {
                "ns:m.03p0wkv": "Braccialini Vineyard"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.vineyard.wines) Braccialini Vineyard))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.vineyard.wines) m.03p0wkv))"
        }
    },
    "275": {
        "generations": "who wrote the book \"Mrs. Sappho: the life of C.A. Dawson Scott, mother of International P.E.N.\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c6d4nx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c6d4nx ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0c6d4nx",
            "mid2name": {
                "ns:m.0c6d4nx": "Mrs. Sappho : the life of C.A. Dawson Scott, mother of International P.E.N."
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) Mrs. Sappho : the life of C.A. Dawson Scott, mother of International P.E.N.))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.0c6d4nx))"
        }
    },
    "276": {
        "generations": "who wrote Warren Ellis' Bad Signal?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qdy2w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qdy2w ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.05qdy2w",
            "mid2name": {
                "ns:m.05qdy2w": "Warren Ellis' Bad Signal"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Warren Ellis' Bad Signal))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.05qdy2w))"
        }
    },
    "277": {
        "generations": "What is The Sacred Band of Stepsons universe and who are its servicemembers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ch8hcq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ch8hcq ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:military.military_unit.servicemembers ?x .\n}\n",
            "TopicEntityMid": "m.0ch8hcq",
            "mid2name": {
                "ns:m.0ch8hcq": "The Sacred Band of Stepsons universe"
            },
            "SExpr_w_name": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) The Sacred Band of Stepsons universe))",
            "SExpr": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) m.0ch8hcq))"
        }
    },
    "278": {
        "generations": "What candy bars does Fox-Cross Candy Company sell?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v6dnt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v6dnt ns:food.candy_bar_manufacturer.candy_bars ?y .\n?y ns:food.candy_bar.sold_in ?x .\n}\n",
            "TopicEntityMid": "m.04v6dnt",
            "mid2name": {
                "ns:m.04v6dnt": "Fox-Cross Candy Company"
            },
            "SExpr_w_name": "(JOIN (R food.candy_bar.sold_in) (JOIN (R food.candy_bar_manufacturer.candy_bars) Fox-Cross Candy Company))",
            "SExpr": "(JOIN (R food.candy_bar.sold_in) (JOIN (R food.candy_bar_manufacturer.candy_bars) m.04v6dnt))"
        }
    },
    "279": {
        "generations": "What are the administrative divisions of Tunisia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07fj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07fj_ ns:location.country.administrative_divisions ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.07fj_",
            "mid2name": {
                "ns:m.07fj_": "Tunisia"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) Tunisia))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) m.07fj_))"
        }
    },
    "280": {
        "generations": "how do you pronounce benjamin paloff's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05hr6vf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05hr6vf ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05hr6vf",
            "mid2name": {
                "ns:m.05hr6vf": "Benjamin Paloff"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Benjamin Paloff))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.05hr6vf))"
        }
    },
    "281": {
        "generations": "who discovered pluto?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c3qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c3qy ns:astronomy.astronomical_discovery.discoverer ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0c3qy",
            "mid2name": {
                "ns:m.0c3qy": "Pluto"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R astronomy.astronomical_discovery.discoverer) Pluto))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R astronomy.astronomical_discovery.discoverer) m.0c3qy))"
        }
    },
    "282": {
        "generations": "How do you pronounce the word \"race\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hdcj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hdcj ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06hdcj",
            "mid2name": {
                "ns:m.06hdcj": "Race"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Race))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06hdcj))"
        }
    },
    "283": {
        "generations": "When was the 2008-09 Azerbaijan First Division soccer league season held?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05syg67)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05syg67 ns:soccer.football_league_season.league ?y .\n?y ns:time.recurring_event.instances ?x .\n}\n",
            "TopicEntityMid": "m.05syg67",
            "mid2name": {
                "ns:m.05syg67": "2008\u201309 Azerbaijan First Division"
            },
            "SExpr_w_name": "(JOIN (R time.recurring_event.instances) (JOIN (R soccer.football_league_season.league) 2008\u201309 Azerbaijan First Division))",
            "SExpr": "(JOIN (R time.recurring_event.instances) (JOIN (R soccer.football_league_season.league) m.05syg67))"
        }
    },
    "284": {
        "generations": "where is the national headquarters of team ag2r-la mondiale located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08xrvc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08xrvc ns:base.peleton.cycling_team_professional.team_national_headquarters_location ?y .\n?y ns:base.peleton.cycling_team_based_at.country ?x .\n}\n",
            "TopicEntityMid": "m.08xrvc",
            "mid2name": {
                "ns:m.08xrvc": "Team Ag2r-La Mondiale"
            },
            "SExpr_w_name": "(JOIN (R base.peleton.cycling_team_based_at.country) (JOIN (R base.peleton.cycling_team_professional.team_national_headquarters_location) Team Ag2r-La Mondiale))",
            "SExpr": "(JOIN (R base.peleton.cycling_team_based_at.country) (JOIN (R base.peleton.cycling_team_professional.team_national_headquarters_location) m.08xrvc))"
        }
    },
    "285": {
        "generations": "who won medals in men's freestyle wrestling welterweight at the olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h_qp5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h_qp5 ns:olympics.olympic_event.competitions ?y .\n?y ns:olympics.olympic_event_competition.medalists ?x .\n}\n",
            "TopicEntityMid": "m.07h_qp5",
            "mid2name": {
                "ns:m.07h_qp5": "Men's freestyle Wrestling, Welterweight 68-74 kg"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_event_competition.medalists) (JOIN (R olympics.olympic_event.competitions) Men's freestyle Wrestling, Welterweight 68-74 kg))",
            "SExpr": "(JOIN (R olympics.olympic_event_competition.medalists) (JOIN (R olympics.olympic_event.competitions) m.07h_qp5))"
        }
    },
    "286": {
        "generations": "Who wrote a book about the Connection Machine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz1v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz1v ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0hz1v",
            "mid2name": {
                "ns:m.0hz1v": "Connection Machine"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Connection Machine))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.0hz1v))"
        }
    },
    "287": {
        "generations": "What other dishes are equivalent to Hotteok?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03c073t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03c073t ns:food.dish.cuisine ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.03c073t",
            "mid2name": {
                "ns:m.03c073t": "Hotteok"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R food.dish.cuisine) Hotteok))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R food.dish.cuisine) m.03c073t))"
        }
    },
    "288": {
        "generations": "What category does Nikon Corporation's cameras belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pmfw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pmfw ns:base.filmcameras.camera_manufacturer.cameras_manufactured ?y .\n?y ns:business.consumer_product.category ?x .\n}\n",
            "TopicEntityMid": "m.03pmfw",
            "mid2name": {
                "ns:m.03pmfw": "Nikon Corporation"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.category) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) Nikon Corporation))",
            "SExpr": "(JOIN (R business.consumer_product.category) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) m.03pmfw))"
        }
    },
    "289": {
        "generations": "What genre of magazines does Ohio University publish?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02fy0z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02fy0z ns:education.educational_institution.school_magazines ?y .\n?y ns:book.magazine.genre ?x .\n}\n",
            "TopicEntityMid": "m.02fy0z",
            "mid2name": {
                "ns:m.02fy0z": "Ohio University"
            },
            "SExpr_w_name": "(JOIN (R book.magazine.genre) (JOIN (R education.educational_institution.school_magazines) Ohio University))",
            "SExpr": "(JOIN (R book.magazine.genre) (JOIN (R education.educational_institution.school_magazines) m.02fy0z))"
        }
    },
    "290": {
        "generations": "who holds the position of judge in the high court of northern ireland?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059n9cg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059n9cg ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.governmental_body ?x .\n}\n",
            "TopicEntityMid": "m.059n9cg",
            "mid2name": {
                "ns:m.059n9cg": "High Court of Northern Ireland Judge"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.governmental_body) (JOIN (R government.government_office_or_title.office_holders) High Court of Northern Ireland Judge))",
            "SExpr": "(JOIN (R government.government_position_held.governmental_body) (JOIN (R government.government_office_or_title.office_holders) m.059n9cg))"
        }
    },
    "291": {
        "generations": "who created the character Andy Fox?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r_z8w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r_z8w ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02r_z8w",
            "mid2name": {
                "ns:m.02r_z8w": "Andy Fox"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R fictional_universe.fictional_character.character_created_by) Andy Fox))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R fictional_universe.fictional_character.character_created_by) m.02r_z8w))"
        }
    },
    "292": {
        "generations": "What is the Bloody Mary recipe named after?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_hgblp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_hgblp ns:food.recipe.dish ?y .\n?y ns:symbols.namesake.named_after ?x .\n}\n",
            "TopicEntityMid": "m.0_hgblp",
            "mid2name": {
                "ns:m.0_hgblp": "Bloody Mary recipe"
            },
            "SExpr_w_name": "(JOIN (R symbols.namesake.named_after) (JOIN (R food.recipe.dish) Bloody Mary recipe))",
            "SExpr": "(JOIN (R symbols.namesake.named_after) (JOIN (R food.recipe.dish) m.0_hgblp))"
        }
    },
    "293": {
        "generations": "What are the concepts related to dental care?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bp5ybq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bp5ybq ns:base.skosbase.skos_concept.in_scheme ?y .\n?y ns:base.skosbase.skos_concept_scheme.concepts ?x .\n}\n",
            "TopicEntityMid": "m.0bp5ybq",
            "mid2name": {
                "ns:m.0bp5ybq": "Dental care"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.skos_concept_scheme.concepts) (JOIN (R base.skosbase.skos_concept.in_scheme) Dental care))",
            "SExpr": "(JOIN (R base.skosbase.skos_concept_scheme.concepts) (JOIN (R base.skosbase.skos_concept.in_scheme) m.0bp5ybq))"
        }
    },
    "294": {
        "generations": "who created the comic book character that is a serial killer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bq3x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bq3x ns:fictional_universe.character_occupation.characters_with_this_occupation ?y .\n?y ns:comic_books.comic_book_character.created_by ?x .\n}\n",
            "TopicEntityMid": "m.0bq3x",
            "mid2name": {
                "ns:m.0bq3x": "Serial killer"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) Serial killer))",
            "SExpr": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) m.0bq3x))"
        }
    },
    "295": {
        "generations": "Which fictional universe does the character NiGHTS appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dkdx3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dkdx3d ns:fictional_universe.fictional_universe.characters ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.0dkdx3d",
            "mid2name": {
                "ns:m.0dkdx3d": "Sonic Team's NiGHTS Universe"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_universe.characters) Sonic Team's NiGHTS Universe))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_universe.characters) m.0dkdx3d))"
        }
    },
    "296": {
        "generations": "how do you pronounce earl of warwick?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j157r0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j157r0 ns:theater.theater_character.plays_appears_in ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0j157r0",
            "mid2name": {
                "ns:m.0j157r0": "Earl of Warwick"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R theater.theater_character.plays_appears_in) Earl of Warwick))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R theater.theater_character.plays_appears_in) m.0j157r0))"
        }
    },
    "297": {
        "generations": "What events were held at Palau Sant Jordi during the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0br7dp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0br7dp ns:olympics.olympic_venue.olympic_games_used_in ?y .\n?y ns:time.event.includes_event ?x .\n}\n",
            "TopicEntityMid": "m.0br7dp",
            "mid2name": {
                "ns:m.0br7dp": "Palau Sant Jordi"
            },
            "SExpr_w_name": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_venue.olympic_games_used_in) Palau Sant Jordi))",
            "SExpr": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_venue.olympic_games_used_in) m.0br7dp))"
        }
    },
    "298": {
        "generations": "what is the gender of the person who did costume design for the film Benito?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027jtll)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027jtll ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.027jtll",
            "mid2name": {
                "ns:m.027jtll": "Benito"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Benito))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.027jtll))"
        }
    },
    "299": {
        "generations": "What historical places of worship are associated with Christianity?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lp8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lp8 ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.01lp8",
            "mid2name": {
                "ns:m.01lp8": "Christianity"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Christianity))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.01lp8))"
        }
    },
    "300": {
        "generations": "What operating system is compatible with iMac G5?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.11vt9ngk5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.11vt9ngk5 ns:computer.computer.compatible_oses ?y .\n?y ns:computer.os_compatibility.operating_system ?x .\n}\n",
            "TopicEntityMid": "g.11vt9ngk5",
            "mid2name": {
                "ns:g.11vt9ngk5": "iMac G5"
            },
            "SExpr_w_name": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) iMac G5))",
            "SExpr": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) g.11vt9ngk5))"
        }
    },
    "301": {
        "generations": "What are the team colors of Duke Blue Devils football and what breeds of animals have those colors?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gq8gh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gq8gh ns:sports.sports_team.colors ?y .\n?y ns:biology.breed_coloring.breeds ?x .\n}\n",
            "TopicEntityMid": "m.03gq8gh",
            "mid2name": {
                "ns:m.03gq8gh": "Duke Blue Devils football"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_coloring.breeds) (JOIN (R sports.sports_team.colors) Duke Blue Devils football))",
            "SExpr": "(JOIN (R biology.breed_coloring.breeds) (JOIN (R sports.sports_team.colors) m.03gq8gh))"
        }
    },
    "302": {
        "generations": "What company produces Malvasia Estremadura?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08crjqk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08crjqk ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.08crjqk",
            "mid2name": {
                "ns:m.08crjqk": "Malvasia Estremadura"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Malvasia Estremadura))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.08crjqk))"
        }
    },
    "303": {
        "generations": "who is suing microsoft corporation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04sv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04sv4 ns:base.morelaw.plaintiff.lawsuits ?y .\n?y ns:law.legal_case.parties ?x .\n}\n",
            "TopicEntityMid": "m.04sv4",
            "mid2name": {
                "ns:m.04sv4": "Microsoft Corporation"
            },
            "SExpr_w_name": "(JOIN (R law.legal_case.parties) (JOIN (R base.morelaw.plaintiff.lawsuits) Microsoft Corporation))",
            "SExpr": "(JOIN (R law.legal_case.parties) (JOIN (R base.morelaw.plaintiff.lawsuits) m.04sv4))"
        }
    },
    "304": {
        "generations": "How do you pronounce \"Gold medal\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lpp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lpp7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02lpp7",
            "mid2name": {
                "ns:m.02lpp7": "Gold medal"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Gold medal))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02lpp7))"
        }
    },
    "305": {
        "generations": "What events were included in the Albertville Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gz4f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gz4f ns:olympics.olympic_host_city.olympics_hosted ?y .\n?y ns:time.event.includes_event ?x .\n}\n",
            "TopicEntityMid": "m.0gz4f",
            "mid2name": {
                "ns:m.0gz4f": "Albertville"
            },
            "SExpr_w_name": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) Albertville))",
            "SExpr": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) m.0gz4f))"
        }
    },
    "306": {
        "generations": "How do you pronounce JAXA?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03595y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03595y ns:spaceflight.space_agency.astronauts ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03595y",
            "mid2name": {
                "ns:m.03595y": "JAXA"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.space_agency.astronauts) JAXA))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.space_agency.astronauts) m.03595y))"
        }
    },
    "307": {
        "generations": "What is the classification rank and higher classification of a coconut?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0djtd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0djtd ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.0djtd",
            "mid2name": {
                "ns:m.0djtd": "Coconut"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Coconut))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.0djtd))"
        }
    },
    "308": {
        "generations": "what works of fiction are set in the fictional universe of film flam?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b9qxg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b9qxg ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:fictional_universe.fictional_setting.works_set_here ?x .\n}\n",
            "TopicEntityMid": "m.05b9qxg",
            "mid2name": {
                "ns:m.05b9qxg": "Film Flam"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) Film Flam))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) m.05b9qxg))"
        }
    },
    "309": {
        "generations": "how do you pronounce graham chapman's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03dq9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03dq9 ns:tv.tv_writer.tv_segments_written ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03dq9",
            "mid2name": {
                "ns:m.03dq9": "Graham Chapman"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R tv.tv_writer.tv_segments_written) Graham Chapman))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R tv.tv_writer.tv_segments_written) m.03dq9))"
        }
    },
    "310": {
        "generations": "Who wrote the book \"Comparative Syntax of Old English and Old Icelandic\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bj7hzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bj7hzh ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0bj7hzh",
            "mid2name": {
                "ns:m.0bj7hzh": "Comparative Syntax of Old English and Old Icelandic"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Comparative Syntax of Old English and Old Icelandic))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0bj7hzh))"
        }
    },
    "311": {
        "generations": "how do you pronounce vocal music in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y4f8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y4f8 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0y4f8",
            "mid2name": {
                "ns:m.0y4f8": "Vocal music"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Vocal music))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0y4f8))"
        }
    },
    "312": {
        "generations": "Which farms produce the Anti-Bacterial Moisturizing Hand Citrus Crush 3 soap?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqmwkp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqmwkp ns:medicine.manufactured_drug_form.available_in ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.0hqmwkp",
            "mid2name": {
                "ns:m.0hqmwkp": "Anti-Bacterial Moisturizing Hand Citrus Crush 3 soap"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R medicine.manufactured_drug_form.available_in) Anti-Bacterial Moisturizing Hand Citrus Crush 3 soap))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R medicine.manufactured_drug_form.available_in) m.0hqmwkp))"
        }
    },
    "313": {
        "generations": "How do you pronounce Barakzai Dynasty?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0csf14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0csf14 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0csf14",
            "mid2name": {
                "ns:m.0csf14": "Barakzai Dynasty"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Barakzai Dynasty))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0csf14))"
        }
    },
    "314": {
        "generations": "who owns the brand corn flakes?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018vnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018vnz ns:business.consumer_product.brand ?y .\n?y ns:business.brand.owner_s ?x .\n}\n",
            "TopicEntityMid": "m.018vnz",
            "mid2name": {
                "ns:m.018vnz": "Corn flakes"
            },
            "SExpr_w_name": "(JOIN (R business.brand.owner_s) (JOIN (R business.consumer_product.brand) Corn flakes))",
            "SExpr": "(JOIN (R business.brand.owner_s) (JOIN (R business.consumer_product.brand) m.018vnz))"
        }
    },
    "315": {
        "generations": "What are the subcategories of undersea peaks in geography?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cnmkn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cnmkn5 ns:geography.geographical_feature_category.subcategory_of ?y .\n?y ns:geography.geographical_feature_category.subcategories ?x .\n}\n",
            "TopicEntityMid": "m.0cnmkn5",
            "mid2name": {
                "ns:m.0cnmkn5": "Undersea peak"
            },
            "SExpr_w_name": "(JOIN (R geography.geographical_feature_category.subcategories) (JOIN (R geography.geographical_feature_category.subcategory_of) Undersea peak))",
            "SExpr": "(JOIN (R geography.geographical_feature_category.subcategories) (JOIN (R geography.geographical_feature_category.subcategory_of) m.0cnmkn5))"
        }
    },
    "316": {
        "generations": "What dialects are spoken in the fictional universe of Shameless?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hzzhcv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hzzhcv ns:fictional_universe.fictional_universe.languages ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0hzzhcv",
            "mid2name": {
                "ns:m.0hzzhcv": "Shameless"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R fictional_universe.fictional_universe.languages) Shameless))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R fictional_universe.fictional_universe.languages) m.0hzzhcv))"
        }
    },
    "317": {
        "generations": "Who manufactures the PIC16F88 computer processor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0457y47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0457y47 ns:computer.computer_processor.variants ?y .\n?y ns:computer.computer_processor.manufacturers ?x .\n}\n",
            "TopicEntityMid": "m.0457y47",
            "mid2name": {
                "ns:m.0457y47": "PIC16F88"
            },
            "SExpr_w_name": "(JOIN (R computer.computer_processor.manufacturers) (JOIN (R computer.computer_processor.variants) PIC16F88))",
            "SExpr": "(JOIN (R computer.computer_processor.manufacturers) (JOIN (R computer.computer_processor.variants) m.0457y47))"
        }
    },
    "318": {
        "generations": "What dog breeds originated in Nevado Las Agujas?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07kf84d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07kf84d ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.07kf84d",
            "mid2name": {
                "ns:m.07kf84d": "Nevado Las Agujas"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Nevado Las Agujas))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.07kf84d))"
        }
    },
    "319": {
        "generations": "What company produces wine from the Bucelas DOC region?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n3dvh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n3dvh ns:wine.wine_region.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.04n3dvh",
            "mid2name": {
                "ns:m.04n3dvh": "Bucelas DOC"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_region.wines) Bucelas DOC))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_region.wines) m.04n3dvh))"
        }
    },
    "320": {
        "generations": "how do you pronounce \"Fudai daimyo\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_7c_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_7c_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03_7c_",
            "mid2name": {
                "ns:m.03_7c_": "Fudai daimyo"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Fudai daimyo))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03_7c_))"
        }
    },
    "321": {
        "generations": "how do you pronounce Accipitrinae?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03bw_l1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03bw_l1 ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03bw_l1",
            "mid2name": {
                "ns:m.03bw_l1": "Accipitrinae"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) Accipitrinae))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) m.03bw_l1))"
        }
    },
    "322": {
        "generations": "What is the Ra\u1e25mat month in the calendar system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0111b1n5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0111b1n5 ns:time.month.calendar_system ?y .\n?y ns:time.calendar.months ?x .\n}\n",
            "TopicEntityMid": "m.0111b1n5",
            "mid2name": {
                "ns:m.0111b1n5": "Ra\u1e25mat"
            },
            "SExpr_w_name": "(JOIN (R time.calendar.months) (JOIN (R time.month.calendar_system) Ra\u1e25mat))",
            "SExpr": "(JOIN (R time.calendar.months) (JOIN (R time.month.calendar_system) m.0111b1n5))"
        }
    },
    "323": {
        "generations": "Who wrote about the Shaker spiritual?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069pc08)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069pc08 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.069pc08",
            "mid2name": {
                "ns:m.069pc08": "The Shaker spiritual"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Shaker spiritual))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.069pc08))"
        }
    },
    "324": {
        "generations": "how do you pronounce cowboy curtis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.097485)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.097485 ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.097485",
            "mid2name": {
                "ns:m.097485": "Cowboy Curtis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Cowboy Curtis))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.097485))"
        }
    },
    "325": {
        "generations": "what are the administrative divisions of south korea's television rating system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jqtdv1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jqtdv1 ns:tv.tv_rating_system.jurisdiction ?y .\n?y ns:location.country.administrative_divisions ?x .\n}\n",
            "TopicEntityMid": "m.0jqtdv1",
            "mid2name": {
                "ns:m.0jqtdv1": "South Korean television rating system"
            },
            "SExpr_w_name": "(JOIN (R location.country.administrative_divisions) (JOIN (R tv.tv_rating_system.jurisdiction) South Korean television rating system))",
            "SExpr": "(JOIN (R location.country.administrative_divisions) (JOIN (R tv.tv_rating_system.jurisdiction) m.0jqtdv1))"
        }
    },
    "326": {
        "generations": "which publishing company released the comic book series Nexus Meets Madman?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059d5x_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059d5x_ ns:comic_books.comic_book_series.publisher ?y .\n?y ns:book.publishing_company.books_published ?x .\n}\n",
            "TopicEntityMid": "m.059d5x_",
            "mid2name": {
                "ns:m.059d5x_": "Nexus Meets Madman"
            },
            "SExpr_w_name": "(JOIN (R book.publishing_company.books_published) (JOIN (R comic_books.comic_book_series.publisher) Nexus Meets Madman))",
            "SExpr": "(JOIN (R book.publishing_company.books_published) (JOIN (R comic_books.comic_book_series.publisher) m.059d5x_))"
        }
    },
    "327": {
        "generations": "What mythical creatures are associated with the location of Drin?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0536n6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0536n6 ns:location.location.containedby ?y .\n?y ns:base.folklore.mythology.mythical_creatures ?x .\n}\n",
            "TopicEntityMid": "m.0536n6",
            "mid2name": {
                "ns:m.0536n6": "Drin"
            },
            "SExpr_w_name": "(JOIN (R base.folklore.mythology.mythical_creatures) (JOIN (R location.location.containedby) Drin))",
            "SExpr": "(JOIN (R base.folklore.mythology.mythical_creatures) (JOIN (R location.location.containedby) m.0536n6))"
        }
    },
    "328": {
        "generations": "what award nominations did Y: The Last Man #53 receive?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043thwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043thwx ns:comic_books.comic_book_issue.part_of_series ?y .\n?y ns:award.award_nominated_work.award_nominations ?x .\n}\n",
            "TopicEntityMid": "m.043thwx",
            "mid2name": {
                "ns:m.043thwx": "Y: The Last Man #53"
            },
            "SExpr_w_name": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R comic_books.comic_book_issue.part_of_series) Y: The Last Man #53))",
            "SExpr": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R comic_books.comic_book_issue.part_of_series) m.043thwx))"
        }
    },
    "329": {
        "generations": "What is the status of the astronomical object Eris?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gb731)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gb731 ns:astronomy.astronomical_discovery.status ?y .\n?y ns:astronomy.astronomical_discovery_status.objects ?x .\n}\n",
            "TopicEntityMid": "m.0gb731",
            "mid2name": {
                "ns:m.0gb731": "Eris"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery_status.objects) (JOIN (R astronomy.astronomical_discovery.status) Eris))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery_status.objects) (JOIN (R astronomy.astronomical_discovery.status) m.0gb731))"
        }
    },
    "330": {
        "generations": "What is Sunni Islam named after?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.078tg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.078tg ns:religion.religion.branched_into ?y .\n?y ns:symbols.namesake.named_after ?x .\n}\n",
            "TopicEntityMid": "m.078tg",
            "mid2name": {
                "ns:m.078tg": "Sunni Islam"
            },
            "SExpr_w_name": "(JOIN (R symbols.namesake.named_after) (JOIN (R religion.religion.branched_into) Sunni Islam))",
            "SExpr": "(JOIN (R symbols.namesake.named_after) (JOIN (R religion.religion.branched_into) m.078tg))"
        }
    },
    "331": {
        "generations": "Where is the Skeletal tower lighthouse located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025yr5d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025yr5d ns:architecture.tower_shape.lighthouse_has_shape ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.025yr5d",
            "mid2name": {
                "ns:m.025yr5d": "Skeletal tower"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R architecture.tower_shape.lighthouse_has_shape) Skeletal tower))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R architecture.tower_shape.lighthouse_has_shape) m.025yr5d))"
        }
    },
    "332": {
        "generations": "what are the latitude coordinates for superstar limo?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0857zb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0857zb ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0857zb",
            "mid2name": {
                "ns:m.0857zb": "Superstar Limo"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Superstar Limo))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0857zb))"
        }
    },
    "333": {
        "generations": "How do you pronounce ThoughtWorks?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gb_t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gb_t ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05gb_t",
            "mid2name": {
                "ns:m.05gb_t": "ThoughtWorks"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) ThoughtWorks))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05gb_t))"
        }
    },
    "334": {
        "generations": "how do you pronounce US holiday?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wlxw6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wlxw6 ns:time.holiday_category.holidays ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03wlxw6",
            "mid2name": {
                "ns:m.03wlxw6": "US holiday"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.holiday_category.holidays) US holiday))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.holiday_category.holidays) m.03wlxw6))"
        }
    },
    "335": {
        "generations": "What industry is Sputnik's rocket manufacturer in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0407zvl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0407zvl ns:spaceflight.rocket.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0407zvl",
            "mid2name": {
                "ns:m.0407zvl": "Sputnik"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R spaceflight.rocket.manufacturer) Sputnik))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R spaceflight.rocket.manufacturer) m.0407zvl))"
        }
    },
    "336": {
        "generations": "what events are included in the women's wheelchair tennis doubles tournament?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gf8800)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gf8800 ns:sports.tournament_event.competitions ?y .\n?y ns:time.event.included_in_event ?x .\n}\n",
            "TopicEntityMid": "m.0gf8800",
            "mid2name": {
                "ns:m.0gf8800": "Women's Wheelchair Tennis, Doubles"
            },
            "SExpr_w_name": "(JOIN (R time.event.included_in_event) (JOIN (R sports.tournament_event.competitions) Women's Wheelchair Tennis, Doubles))",
            "SExpr": "(JOIN (R time.event.included_in_event) (JOIN (R sports.tournament_event.competitions) m.0gf8800))"
        }
    },
    "337": {
        "generations": "who wrote the book and composed the music for Il Pigmalione?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ffldm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ffldm ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0ffldm",
            "mid2name": {
                "ns:m.0ffldm": "Il Pigmalione"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Il Pigmalione))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.0ffldm))"
        }
    },
    "338": {
        "generations": "What is the highest alcohol content for American Pale Ale beer style?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v3gs4f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v3gs4f ns:food.beer_style.alcohol_by_volume_range ?y .\n?y ns:measurement_unit.floating_point_range.high_value ?x .\n}\n",
            "TopicEntityMid": "m.0v3gs4f",
            "mid2name": {
                "ns:m.0v3gs4f": "American Pale Ale"
            },
            "SExpr_w_name": "(JOIN (R measurement_unit.floating_point_range.high_value) (JOIN (R food.beer_style.alcohol_by_volume_range) American Pale Ale))",
            "SExpr": "(JOIN (R measurement_unit.floating_point_range.high_value) (JOIN (R food.beer_style.alcohol_by_volume_range) m.0v3gs4f))"
        }
    },
    "339": {
        "generations": "what is the latitude of Vandenberg AFB Space Launch Complex 3?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07fqfw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07fqfw ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.07fqfw",
            "mid2name": {
                "ns:m.07fqfw": "Vandenberg AFB Space Launch Complex 3"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Vandenberg AFB Space Launch Complex 3))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.07fqfw))"
        }
    },
    "340": {
        "generations": "who worked for the think tank?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.097zh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.097zh ns:business.employer.employees ?y .\n?y ns:business.employment_tenure.person ?x .\n}\n",
            "TopicEntityMid": "m.097zh",
            "mid2name": {
                "ns:m.097zh": "Think tank"
            },
            "SExpr_w_name": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) Think tank))",
            "SExpr": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) m.097zh))"
        }
    },
    "341": {
        "generations": "What language is the TV show Formidable Opponent in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_g7klh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_g7klh ns:tv.sequence_of_tv_episode_segments.tv_series ?y .\n?y ns:tv.tv_program.languages ?x .\n}\n",
            "TopicEntityMid": "m.0_g7klh",
            "mid2name": {
                "ns:m.0_g7klh": "Formidable Opponent"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_program.languages) (JOIN (R tv.sequence_of_tv_episode_segments.tv_series) Formidable Opponent))",
            "SExpr": "(JOIN (R tv.tv_program.languages) (JOIN (R tv.sequence_of_tv_episode_segments.tv_series) m.0_g7klh))"
        }
    },
    "342": {
        "generations": "what books did gerald jay sussman write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nwzb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nwzb ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0nwzb",
            "mid2name": {
                "ns:m.0nwzb": "Gerald Jay Sussman"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Gerald Jay Sussman))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.0nwzb))"
        }
    },
    "343": {
        "generations": "What branch of religion is Shafi'i a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01l1yv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01l1yv ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.branched_into ?x .\n}\n",
            "TopicEntityMid": "m.01l1yv",
            "mid2name": {
                "ns:m.01l1yv": "Shafi'i"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.branched_into) (JOIN (R religion.religion.is_part_of) Shafi'i))",
            "SExpr": "(JOIN (R religion.religion.branched_into) (JOIN (R religion.religion.is_part_of) m.01l1yv))"
        }
    },
    "344": {
        "generations": "What programming language is influenced by J# and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0268yl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0268yl ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0268yl",
            "mid2name": {
                "ns:m.0268yl": "J#"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) J#))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.0268yl))"
        }
    },
    "345": {
        "generations": "How do you pronounce the word \"Present\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03khhv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03khhv ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03khhv",
            "mid2name": {
                "ns:m.03khhv": "Present"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Present))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03khhv))"
        }
    },
    "346": {
        "generations": "what league did the denver spurs play in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.068nsv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.068nsv ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.068nsv",
            "mid2name": {
                "ns:m.068nsv": "Denver Spurs"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Denver Spurs))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.068nsv))"
        }
    },
    "347": {
        "generations": "Which dynasty succeeded the P\u0159emyslid dynasty?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h8pg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h8pg ns:royalty.royal_line.succeeded_by ?y .\n?y ns:royalty.royal_line.preceded_by ?x .\n}\n",
            "TopicEntityMid": "m.07h8pg",
            "mid2name": {
                "ns:m.07h8pg": "P\u0159emyslid dynasty"
            },
            "SExpr_w_name": "(JOIN (R royalty.royal_line.preceded_by) (JOIN (R royalty.royal_line.succeeded_by) P\u0159emyslid dynasty))",
            "SExpr": "(JOIN (R royalty.royal_line.preceded_by) (JOIN (R royalty.royal_line.succeeded_by) m.07h8pg))"
        }
    },
    "348": {
        "generations": "how do you pronounce D battery?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qc8zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qc8zq ns:engineering.battery_size.shape_format ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03qc8zq",
            "mid2name": {
                "ns:m.03qc8zq": "D battery"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R engineering.battery_size.shape_format) D battery))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R engineering.battery_size.shape_format) m.03qc8zq))"
        }
    },
    "349": {
        "generations": "What book series is Malthus and the Population Controversy 1803-1830 a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b2t9b8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b2t9b8 ns:book.book_edition_series.part_of_series ?y .\n?y ns:book.book_edition_series.sub_series ?x .\n}\n",
            "TopicEntityMid": "m.0b2t9b8",
            "mid2name": {
                "ns:m.0b2t9b8": "Malthus and the Population Controversy 1803-1830"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition_series.sub_series) (JOIN (R book.book_edition_series.part_of_series) Malthus and the Population Controversy 1803-1830))",
            "SExpr": "(JOIN (R book.book_edition_series.sub_series) (JOIN (R book.book_edition_series.part_of_series) m.0b2t9b8))"
        }
    },
    "350": {
        "generations": "who wrote the play Hippolyto?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j8b37t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j8b37t ns:theater.theater_character.plays_appears_in ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0j8b37t",
            "mid2name": {
                "ns:m.0j8b37t": "Hippolyto"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R theater.theater_character.plays_appears_in) Hippolyto))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R theater.theater_character.plays_appears_in) m.0j8b37t))"
        }
    },
    "351": {
        "generations": "What is the locus of chromosome 9 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgjm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgjm ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgjm",
            "mid2name": {
                "ns:m.02kwgjm": "Chromosome 9 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 9 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgjm))"
        }
    },
    "352": {
        "generations": "What genre of music does Ronan Tynan perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s9lq0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s9lq0 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.01s9lq0",
            "mid2name": {
                "ns:m.01s9lq0": "Ronan Tynan"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Ronan Tynan))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.01s9lq0))"
        }
    },
    "353": {
        "generations": "How do you pronounce \"Atmospheric sciences\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015y2c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015y2c ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.015y2c",
            "mid2name": {
                "ns:m.015y2c": "Atmospheric sciences"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Atmospheric sciences))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.015y2c))"
        }
    },
    "354": {
        "generations": "What is the higher classification of organisms originating in Denmark?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k6nt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k6nt ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0k6nt",
            "mid2name": {
                "ns:m.0k6nt": "Denmark"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Denmark))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.0k6nt))"
        }
    },
    "355": {
        "generations": "how do you pronounce the word alphabet?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hwf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hwf ns:book.book_subject.works ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0hwf",
            "mid2name": {
                "ns:m.0hwf": "Alphabet"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.book_subject.works) Alphabet))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.book_subject.works) m.0hwf))"
        }
    },
    "356": {
        "generations": "What brand is The Prince book edition?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059cjgk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059cjgk ns:book.book_edition.binding ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.059cjgk",
            "mid2name": {
                "ns:m.059cjgk": "The Prince"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) The Prince))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) m.059cjgk))"
        }
    },
    "357": {
        "generations": "what league is the football club in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vx4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vx4 ns:organization.club_interest.clubs ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.02vx4",
            "mid2name": {
                "ns:m.02vx4": "Football"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R organization.club_interest.clubs) Football))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R organization.club_interest.clubs) m.02vx4))"
        }
    },
    "358": {
        "generations": "which artists create ceramic art series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b07p4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b07p4 ns:visual_art.visual_art_form.artists ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.0b07p4",
            "mid2name": {
                "ns:m.0b07p4": "Ceramic art"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) Ceramic art))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) m.0b07p4))"
        }
    },
    "359": {
        "generations": "what media format is used for the podcast Warp Drive Active?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04559mv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04559mv ns:broadcast.content.broadcast ?y .\n?y ns:broadcast.podcast_feed.media_format ?x .\n}\n",
            "TopicEntityMid": "m.04559mv",
            "mid2name": {
                "ns:m.04559mv": "Warp Drive Active"
            },
            "SExpr_w_name": "(JOIN (R broadcast.podcast_feed.media_format) (JOIN (R broadcast.content.broadcast) Warp Drive Active))",
            "SExpr": "(JOIN (R broadcast.podcast_feed.media_format) (JOIN (R broadcast.content.broadcast) m.04559mv))"
        }
    },
    "360": {
        "generations": "what historical places of worship are associated with jehovah's witnesses?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dtdq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dtdq ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.0dtdq",
            "mid2name": {
                "ns:m.0dtdq": "Jehovah's Witnesses"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) Jehovah's Witnesses))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) m.0dtdq))"
        }
    },
    "361": {
        "generations": "What is a common descriptive name for someone who works as a model?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1pc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1pc ns:user.narphorium.default_domain.job_title.professions ?y .\n?y ns:base.descriptive_names.names.descriptive_name ?x .\n}\n",
            "TopicEntityMid": "m.0d1pc",
            "mid2name": {
                "ns:m.0d1pc": "Model"
            },
            "SExpr_w_name": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R user.narphorium.default_domain.job_title.professions) Model))",
            "SExpr": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R user.narphorium.default_domain.job_title.professions) m.0d1pc))"
        }
    },
    "362": {
        "generations": "how do you pronounce the word artist?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n1h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n1h ns:user.narphorium.default_domain.job_title.professions ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0n1h",
            "mid2name": {
                "ns:m.0n1h": "Artist"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.narphorium.default_domain.job_title.professions) Artist))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.narphorium.default_domain.job_title.professions) m.0n1h))"
        }
    },
    "363": {
        "generations": "who directed TV G rated episodes of a TV series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030p0gc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030p0gc ns:tv.tv_rating.tv_episodes ?y .\n?y ns:tv.tv_series_episode.director ?x .\n}\n",
            "TopicEntityMid": "m.030p0gc",
            "mid2name": {
                "ns:m.030p0gc": "TV G"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.director) (JOIN (R tv.tv_rating.tv_episodes) TV G))",
            "SExpr": "(JOIN (R tv.tv_series_episode.director) (JOIN (R tv.tv_rating.tv_episodes) m.030p0gc))"
        }
    },
    "364": {
        "generations": "What medical trial phase is the Hypertension Prevention Trial (HPT) Feasibility Study in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbwp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbwp ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.03zbbwp",
            "mid2name": {
                "ns:m.03zbbwp": "Hypertension Prevention Trial (HPT) Feasibility Study"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Hypertension Prevention Trial (HPT) Feasibility Study))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbwp))"
        }
    },
    "365": {
        "generations": "What industry does Pro FM radio station belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j3gcqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j3gcqw ns:broadcast.radio_station.owner ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0j3gcqw",
            "mid2name": {
                "ns:m.0j3gcqw": "Pro FM"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R broadcast.radio_station.owner) Pro FM))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R broadcast.radio_station.owner) m.0j3gcqw))"
        }
    },
    "366": {
        "generations": "What music group is Amanda Louise Marchant a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07vd9tq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07vd9tq ns:music.group_member.membership ?y .\n?y ns:music.group_membership.group ?x .\n}\n",
            "TopicEntityMid": "m.07vd9tq",
            "mid2name": {
                "ns:m.07vd9tq": "Amanda Louise Marchant"
            },
            "SExpr_w_name": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) Amanda Louise Marchant))",
            "SExpr": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) m.07vd9tq))"
        }
    },
    "367": {
        "generations": "What mythology is Thunderbolt from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ch8w02)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ch8w02 ns:fictional_universe.fictional_object.created_by ?y .\n?y ns:base.folklore.mythical_creature.mythology ?x .\n}\n",
            "TopicEntityMid": "m.0ch8w02",
            "mid2name": {
                "ns:m.0ch8w02": "Thunderbolt"
            },
            "SExpr_w_name": "(JOIN (R base.folklore.mythical_creature.mythology) (JOIN (R fictional_universe.fictional_object.created_by) Thunderbolt))",
            "SExpr": "(JOIN (R base.folklore.mythical_creature.mythology) (JOIN (R fictional_universe.fictional_object.created_by) m.0ch8w02))"
        }
    },
    "368": {
        "generations": "Which artists are associated with the Danish National Symphony Orchestra's genre of music?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b91z_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b91z_ ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.0b91z_",
            "mid2name": {
                "ns:m.0b91z_": "Danish National Symphony Orchestra"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Danish National Symphony Orchestra))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.0b91z_))"
        }
    },
    "369": {
        "generations": "What operating systems are compatible with Drive Controllers-Drive Controllers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pxmq4g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pxmq4g ns:computer.computer_peripheral.compatible_computers ?y .\n?y ns:computer.computer.compatible_oses ?x .\n}\n",
            "TopicEntityMid": "m.0pxmq4g",
            "mid2name": {
                "ns:m.0pxmq4g": "Drive Controllers-Drive Controllers"
            },
            "SExpr_w_name": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_peripheral.compatible_computers) Drive Controllers-Drive Controllers))",
            "SExpr": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_peripheral.compatible_computers) m.0pxmq4g))"
        }
    },
    "370": {
        "generations": "who is the author of books written by alex ross?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.032yyw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.032yyw ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.032yyw",
            "mid2name": {
                "ns:m.032yyw": "Alex Ross"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Alex Ross))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.032yyw))"
        }
    },
    "371": {
        "generations": "Which operating system is compatible with Samsung Galaxy S4 Zoom?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y4lg88)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y4lg88 ns:computer.computer.compatible_oses ?y .\n?y ns:computer.os_compatibility.operating_system ?x .\n}\n",
            "TopicEntityMid": "m.0y4lg88",
            "mid2name": {
                "ns:m.0y4lg88": "Samsung Galaxy S4 Zoom"
            },
            "SExpr_w_name": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) Samsung Galaxy S4 Zoom))",
            "SExpr": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) m.0y4lg88))"
        }
    },
    "372": {
        "generations": "Which company produced the 2005 Grey Wolf \"Big Bad Wolf, Evelyn's Estate Vineyard\" Paso Robles Zinfandel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m079j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m079j ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03m079j",
            "mid2name": {
                "ns:m.03m079j": "2005 Grey Wolf \"Big Bad Wolf, Evelyn's Estate Vineyard\" Paso Robles Zinfandel"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2005 Grey Wolf \"Big Bad Wolf, Evelyn's Estate Vineyard\" Paso Robles Zinfandel))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03m079j))"
        }
    },
    "373": {
        "generations": "What kitchen equipment is used in recipes that require a cutting board?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pdsw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pdsw ns:food.culinary_tool.used_in_recipes ?y .\n?y ns:food.recipe.equipment ?x .\n}\n",
            "TopicEntityMid": "m.02pdsw",
            "mid2name": {
                "ns:m.02pdsw": "Cutting board"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.equipment) (JOIN (R food.culinary_tool.used_in_recipes) Cutting board))",
            "SExpr": "(JOIN (R food.recipe.equipment) (JOIN (R food.culinary_tool.used_in_recipes) m.02pdsw))"
        }
    },
    "374": {
        "generations": "What genre of music does Necro perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01w7nwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01w7nwc ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.01w7nwc",
            "mid2name": {
                "ns:m.01w7nwc": "Necro"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Necro))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.01w7nwc))"
        }
    },
    "375": {
        "generations": "Which fictional characters have lived in Andaz West Hollywood?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fm4bb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fm4bb ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.0fm4bb",
            "mid2name": {
                "ns:m.0fm4bb": "Andaz West Hollywood"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Andaz West Hollywood))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.0fm4bb))"
        }
    },
    "376": {
        "generations": "Which city bid on the Olympics and was located near the Metropolitan Vancouver Hotel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tkhdn3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tkhdn3 ns:location.location.containedby ?y .\n?y ns:olympics.olympic_bidding_city.olympics_bid_on ?x .\n}\n",
            "TopicEntityMid": "m.0tkhdn3",
            "mid2name": {
                "ns:m.0tkhdn3": "Metropolitan Vancouver Hotel"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_bidding_city.olympics_bid_on) (JOIN (R location.location.containedby) Metropolitan Vancouver Hotel))",
            "SExpr": "(JOIN (R olympics.olympic_bidding_city.olympics_bid_on) (JOIN (R location.location.containedby) m.0tkhdn3))"
        }
    },
    "377": {
        "generations": "What genre of music does ESP Horizon play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g6_pt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g6_pt ns:music.guitar.guitarists ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0g6_pt",
            "mid2name": {
                "ns:m.0g6_pt": "ESP Horizon"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.guitar.guitarists) ESP Horizon))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.guitar.guitarists) m.0g6_pt))"
        }
    },
    "378": {
        "generations": "Which company produces the 2004 Alesia \"Kanzler Vineyard\" Sonoma Coast Pinot Noir?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045wv1r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045wv1r ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.045wv1r",
            "mid2name": {
                "ns:m.045wv1r": "2004 Alesia \"Kanzler Vineyard\" Sonoma Coast Pinot Noir"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2004 Alesia \"Kanzler Vineyard\" Sonoma Coast Pinot Noir))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.045wv1r))"
        }
    },
    "379": {
        "generations": "Which areas were affected by the strongest storm in the 2006 Atlantic hurricane season?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04rs63)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04rs63 ns:meteorology.tropical_cyclone_season.strongest_storm ?y .\n?y ns:meteorology.tropical_cyclone.affected_areas ?x .\n}\n",
            "TopicEntityMid": "m.04rs63",
            "mid2name": {
                "ns:m.04rs63": "2006 Atlantic hurricane season"
            },
            "SExpr_w_name": "(JOIN (R meteorology.tropical_cyclone.affected_areas) (JOIN (R meteorology.tropical_cyclone_season.strongest_storm) 2006 Atlantic hurricane season))",
            "SExpr": "(JOIN (R meteorology.tropical_cyclone.affected_areas) (JOIN (R meteorology.tropical_cyclone_season.strongest_storm) m.04rs63))"
        }
    },
    "380": {
        "generations": "What is the locus of chromosome 14 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.099xng)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.099xng ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.099xng",
            "mid2name": {
                "ns:m.099xng": "Chromosome 14 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 14 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.099xng))"
        }
    },
    "381": {
        "generations": "What genre of music does Cyrano de Bergerac perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ph675)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ph675 ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01ph675",
            "mid2name": {
                "ns:m.01ph675": "Cyrano de Bergerac"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Cyrano de Bergerac))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01ph675))"
        }
    },
    "382": {
        "generations": "How do you pronounce Faeroes?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0724shv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0724shv ns:location.location.containedby ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0724shv",
            "mid2name": {
                "ns:m.0724shv": "Faeroes"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.location.containedby) Faeroes))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.location.containedby) m.0724shv))"
        }
    },
    "383": {
        "generations": "what books has arthur waskow written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04pxs4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04pxs4 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.04pxs4",
            "mid2name": {
                "ns:m.04pxs4": "Arthur Waskow"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Arthur Waskow))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.04pxs4))"
        }
    },
    "384": {
        "generations": "What country is San Marino a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06sff)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06sff ns:location.country.administrative_divisions ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.06sff",
            "mid2name": {
                "ns:m.06sff": "San Marino"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) San Marino))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) m.06sff))"
        }
    },
    "385": {
        "generations": "Which fictional character has possessed someone in Lemuria?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dc60vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dc60vr ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.has_possessed ?x .\n}\n",
            "TopicEntityMid": "m.0dc60vr",
            "mid2name": {
                "ns:m.0dc60vr": "Lemuria"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Lemuria))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.0dc60vr))"
        }
    },
    "386": {
        "generations": "who wrote the book \"Red Light, Love Light\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0b06z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0b06z ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0c0b06z",
            "mid2name": {
                "ns:m.0c0b06z": "Red Light, Love Light"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Red Light, Love Light))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0c0b06z))"
        }
    },
    "387": {
        "generations": "what category does the digg api belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hz97f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hz97f ns:internet.api.site ?y .\n?y ns:internet.website.category ?x .\n}\n",
            "TopicEntityMid": "m.02hz97f",
            "mid2name": {
                "ns:m.02hz97f": "Digg API"
            },
            "SExpr_w_name": "(JOIN (R internet.website.category) (JOIN (R internet.api.site) Digg API))",
            "SExpr": "(JOIN (R internet.website.category) (JOIN (R internet.api.site) m.02hz97f))"
        }
    },
    "388": {
        "generations": "which members of congress have voted on issues related to NASA?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05f4p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05f4p ns:spaceflight.space_agency.astronauts ?y .\n?y ns:user.alexbl.congressional_voting_records.congressional_member.voted_on ?x .\n}\n",
            "TopicEntityMid": "m.05f4p",
            "mid2name": {
                "ns:m.05f4p": "NASA"
            },
            "SExpr_w_name": "(JOIN (R user.alexbl.congressional_voting_records.congressional_member.voted_on) (JOIN (R spaceflight.space_agency.astronauts) NASA))",
            "SExpr": "(JOIN (R user.alexbl.congressional_voting_records.congressional_member.voted_on) (JOIN (R spaceflight.space_agency.astronauts) m.05f4p))"
        }
    },
    "389": {
        "generations": "How do you pronounce the job title \"computer scientist\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m3mgq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m3mgq ns:user.narphorium.default_domain.job_title.professions ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03m3mgq",
            "mid2name": {
                "ns:m.03m3mgq": "Computer Scientist"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.narphorium.default_domain.job_title.professions) Computer Scientist))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.narphorium.default_domain.job_title.professions) m.03m3mgq))"
        }
    },
    "390": {
        "generations": "what industry is silicon laboratories, inc. in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p34_5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p34_5 ns:business.business_operation.industry ?y .\n?y ns:base.descriptive_names.names.descriptive_name ?x .\n}\n",
            "TopicEntityMid": "m.03p34_5",
            "mid2name": {
                "ns:m.03p34_5": "Silicon Laboratories, Inc."
            },
            "SExpr_w_name": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) Silicon Laboratories, Inc.))",
            "SExpr": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) m.03p34_5))"
        }
    },
    "391": {
        "generations": "Who wrote the book referenced in the medical trial \"Rapid Evaluation of Amantadine for Treatment of Cocaine Abuse/Dependence \u2013 4\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbw6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbw6 ns:medicine.medical_trial.references ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03zbbw6",
            "mid2name": {
                "ns:m.03zbbw6": "Rapid Evaluation of Amantadine for Treatment of Cocaine Abuse/Dependence \u2013 4"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) Rapid Evaluation of Amantadine for Treatment of Cocaine Abuse/Dependence \u2013 4))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) m.03zbbw6))"
        }
    },
    "392": {
        "generations": "How do you pronounce words in the Klingon language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.049ph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.049ph ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.049ph",
            "mid2name": {
                "ns:m.049ph": "Klingon language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Klingon language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.049ph))"
        }
    },
    "393": {
        "generations": "What live recordings and concert films or videos are associated with Selena Live 2010 tour?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k39q8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k39q8 ns:music.concert_tour.concert_films_or_videos ?y .\n?y ns:music.concert_tour.live_recordings ?x .\n}\n",
            "TopicEntityMid": "m.09k39q8",
            "mid2name": {
                "ns:m.09k39q8": "Selena Live 2010"
            },
            "SExpr_w_name": "(JOIN (R music.concert_tour.live_recordings) (JOIN (R music.concert_tour.concert_films_or_videos) Selena Live 2010))",
            "SExpr": "(JOIN (R music.concert_tour.live_recordings) (JOIN (R music.concert_tour.concert_films_or_videos) m.09k39q8))"
        }
    },
    "394": {
        "generations": "what is the gender-neutral plural form of the word \"editor\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h6676)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h6676 ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.gender ?x .\n}\n",
            "TopicEntityMid": "m.02h6676",
            "mid2name": {
                "ns:m.02h6676": "Editor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) Editor))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) m.02h6676))"
        }
    },
    "395": {
        "generations": "How do you pronounce Gran Canaria Airport?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hzpc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hzpc ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06hzpc",
            "mid2name": {
                "ns:m.06hzpc": "Gran Canaria Airport"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Gran Canaria Airport))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06hzpc))"
        }
    },
    "396": {
        "generations": "What category does the Virgo Cluster belong to in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fc1x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fc1x ns:astronomy.galactic_cluster.galaxy_groups ?y .\n?y ns:astronomy.celestial_object.category ?x .\n}\n",
            "TopicEntityMid": "m.01fc1x",
            "mid2name": {
                "ns:m.01fc1x": "Virgo Cluster"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object.category) (JOIN (R astronomy.galactic_cluster.galaxy_groups) Virgo Cluster))",
            "SExpr": "(JOIN (R astronomy.celestial_object.category) (JOIN (R astronomy.galactic_cluster.galaxy_groups) m.01fc1x))"
        }
    },
    "397": {
        "generations": "Which brand of camera has an ISO of 400?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrf_g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrf_g ns:digicams.camera_iso.cameras ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.01xrf_g",
            "mid2name": {
                "ns:m.01xrf_g": "400"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) 400))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) m.01xrf_g))"
        }
    },
    "398": {
        "generations": "what books did wayne reynolds write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ch295r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ch295r ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0ch295r",
            "mid2name": {
                "ns:m.0ch295r": "Wayne Reynolds"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Wayne Reynolds))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.0ch295r))"
        }
    },
    "399": {
        "generations": "which city bid for the olympics and was covered by WDMK?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gc_y_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gc_y_ ns:broadcast.broadcast.area_served ?y .\n?y ns:olympics.olympic_bidding_city.olympics_bid_on ?x .\n}\n",
            "TopicEntityMid": "m.0gc_y_",
            "mid2name": {
                "ns:m.0gc_y_": "WDMK"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_bidding_city.olympics_bid_on) (JOIN (R broadcast.broadcast.area_served) WDMK))",
            "SExpr": "(JOIN (R olympics.olympic_bidding_city.olympics_bid_on) (JOIN (R broadcast.broadcast.area_served) m.0gc_y_))"
        }
    },
    "400": {
        "generations": "what books did marcel breuer write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04dhv_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04dhv_ ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.04dhv_",
            "mid2name": {
                "ns:m.04dhv_": "Marcel Breuer"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Marcel Breuer))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.04dhv_))"
        }
    },
    "401": {
        "generations": "What is located inside Executive Tower J?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0wskvrp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0wskvrp ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.0wskvrp",
            "mid2name": {
                "ns:m.0wskvrp": "Executive Tower J"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Executive Tower J))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.0wskvrp))"
        }
    },
    "402": {
        "generations": "what language did jim morekis write in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bj5k_k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bj5k_k ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.0bj5k_k",
            "mid2name": {
                "ns:m.0bj5k_k": "Jim Morekis"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Jim Morekis))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.0bj5k_k))"
        }
    },
    "403": {
        "generations": "How do you pronounce the word \"diplomat\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.080ntlp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.080ntlp ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.080ntlp",
            "mid2name": {
                "ns:m.080ntlp": "Diplomat"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Diplomat))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.080ntlp))"
        }
    },
    "404": {
        "generations": "What artworks are part of Peter Paul Rubens' art series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pwnh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pwnh ns:visual_art.visual_artist.art_series ?y .\n?y ns:visual_art.art_series.artworks ?x .\n}\n",
            "TopicEntityMid": "m.0pwnh",
            "mid2name": {
                "ns:m.0pwnh": "Peter Paul Rubens"
            },
            "SExpr_w_name": "(JOIN (R visual_art.art_series.artworks) (JOIN (R visual_art.visual_artist.art_series) Peter Paul Rubens))",
            "SExpr": "(JOIN (R visual_art.art_series.artworks) (JOIN (R visual_art.visual_artist.art_series) m.0pwnh))"
        }
    },
    "405": {
        "generations": "who is the artist of the album \"The Joan Baez Ballad Book\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0401q5t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0401q5t ns:music.release.album ?y .\n?y ns:music.album.artist ?x .\n}\n",
            "TopicEntityMid": "m.0401q5t",
            "mid2name": {
                "ns:m.0401q5t": "The Joan Baez Ballad Book"
            },
            "SExpr_w_name": "(JOIN (R music.album.artist) (JOIN (R music.release.album) The Joan Baez Ballad Book))",
            "SExpr": "(JOIN (R music.album.artist) (JOIN (R music.release.album) m.0401q5t))"
        }
    },
    "406": {
        "generations": "how do you pronounce the setting of the work of fiction \"We Are Atomic\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b9rhl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b9rhl ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05b9rhl",
            "mid2name": {
                "ns:m.05b9rhl": "We Are Atomic"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.work_of_fiction.setting) We Are Atomic))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.work_of_fiction.setting) m.05b9rhl))"
        }
    },
    "407": {
        "generations": "Which fictional characters have lived in California's 15th congressional district?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dvp10)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dvp10 ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.0dvp10",
            "mid2name": {
                "ns:m.0dvp10": "California\u2019s 15th congressional district"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) California\u2019s 15th congressional district))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.0dvp10))"
        }
    },
    "408": {
        "generations": "How do you pronounce \"Emergency medical services\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dxh1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dxh1 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0dxh1",
            "mid2name": {
                "ns:m.0dxh1": "Emergency medical services"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Emergency medical services))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0dxh1))"
        }
    },
    "409": {
        "generations": "how do you pronounce the name Motoko Kusanagi?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nspz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nspz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05nspz",
            "mid2name": {
                "ns:m.05nspz": "Motoko Kusanagi"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Motoko Kusanagi))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05nspz))"
        }
    },
    "410": {
        "generations": "How do you pronounce \"Armed Forces of Ukraine\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0w1d32m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0w1d32m ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0w1d32m",
            "mid2name": {
                "ns:m.0w1d32m": "Armed Forces of Ukraine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Armed Forces of Ukraine))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0w1d32m))"
        }
    },
    "411": {
        "generations": "what books has cat cora written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r56y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r56y ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05r56y",
            "mid2name": {
                "ns:m.05r56y": "Cat Cora"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Cat Cora))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05r56y))"
        }
    },
    "412": {
        "generations": "how do you pronounce the name of the Thursday before Easter?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h7_q9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h7_q9 ns:time.day_of_year.calendar_system ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02h7_q9",
            "mid2name": {
                "ns:m.02h7_q9": "Thursday before Easter"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.day_of_year.calendar_system) Thursday before Easter))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.day_of_year.calendar_system) m.02h7_q9))"
        }
    },
    "413": {
        "generations": "What other instances are equivalent to the United States District Court for the District of Maryland?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pkdm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pkdm ns:government.governmental_body.body_this_is_a_component_of ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.03pkdm",
            "mid2name": {
                "ns:m.03pkdm": "United States District Court for the District of Maryland"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) United States District Court for the District of Maryland))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.03pkdm))"
        }
    },
    "414": {
        "generations": "how do you pronounce the name of the polling organization that conducted a poll for the 2012 presidential election on September 10, 2012?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mzfjkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mzfjkj ns:government.election_poll.election ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0mzfjkj",
            "mid2name": {
                "ns:m.0mzfjkj": "American Research Group, 2012 presidential election, 2012-09-10"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R government.election_poll.election) American Research Group, 2012 presidential election, 2012-09-10))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R government.election_poll.election) m.0mzfjkj))"
        }
    },
    "415": {
        "generations": "How do you pronounce the word \"History\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03g3w ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03g3w",
            "mid2name": {
                "ns:m.03g3w": "History"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) History))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03g3w))"
        }
    },
    "416": {
        "generations": "where is the feast day of saints celebrated during the holiday period of Jul?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pc5w2c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pc5w2c ns:time.holiday_period.holidays ?y .\n?y ns:base.saints.feast_day.places_celebrated ?x .\n}\n",
            "TopicEntityMid": "m.0pc5w2c",
            "mid2name": {
                "ns:m.0pc5w2c": "Jul"
            },
            "SExpr_w_name": "(JOIN (R base.saints.feast_day.places_celebrated) (JOIN (R time.holiday_period.holidays) Jul))",
            "SExpr": "(JOIN (R base.saints.feast_day.places_celebrated) (JOIN (R time.holiday_period.holidays) m.0pc5w2c))"
        }
    },
    "417": {
        "generations": "What is the classification of Muscadelle in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.078m85)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.078m85 ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.child_classifications ?x .\n}\n",
            "TopicEntityMid": "m.078m85",
            "mid2name": {
                "ns:m.078m85": "Muscadelle"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) Muscadelle))",
            "SExpr": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) m.078m85))"
        }
    },
    "418": {
        "generations": "who owns the brand Galbani?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zd4m6b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zd4m6b ns:business.brand.owner_s ?y .\n?y ns:business.company_brand_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.0zd4m6b",
            "mid2name": {
                "ns:m.0zd4m6b": "Galbani"
            },
            "SExpr_w_name": "(JOIN (R business.company_brand_relationship.company) (JOIN (R business.brand.owner_s) Galbani))",
            "SExpr": "(JOIN (R business.company_brand_relationship.company) (JOIN (R business.brand.owner_s) m.0zd4m6b))"
        }
    },
    "419": {
        "generations": "who directed the episodes of the TV series Youth Ministry?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fwx6k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fwx6k ns:tv.tv_subject.tv_episodes ?y .\n?y ns:tv.tv_series_episode.director ?x .\n}\n",
            "TopicEntityMid": "m.0fwx6k",
            "mid2name": {
                "ns:m.0fwx6k": "Youth ministry"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.director) (JOIN (R tv.tv_subject.tv_episodes) Youth ministry))",
            "SExpr": "(JOIN (R tv.tv_series_episode.director) (JOIN (R tv.tv_subject.tv_episodes) m.0fwx6k))"
        }
    },
    "420": {
        "generations": "How do you pronounce nitric acid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fmf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fmf ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05fmf",
            "mid2name": {
                "ns:m.05fmf": "Nitric acid"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Nitric acid))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05fmf))"
        }
    },
    "421": {
        "generations": "What is the child method of contention in engineering channel access method?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cfn07)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cfn07 ns:engineering.channel_access_method.parent_method ?y .\n?y ns:engineering.channel_access_method.child_method ?x .\n}\n",
            "TopicEntityMid": "m.03cfn07",
            "mid2name": {
                "ns:m.03cfn07": "Contention"
            },
            "SExpr_w_name": "(JOIN (R engineering.channel_access_method.child_method) (JOIN (R engineering.channel_access_method.parent_method) Contention))",
            "SExpr": "(JOIN (R engineering.channel_access_method.child_method) (JOIN (R engineering.channel_access_method.parent_method) m.03cfn07))"
        }
    },
    "422": {
        "generations": "who wrote the x-men issue #1?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hqp3h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hqp3h ns:comic_books.comic_book_issue.editor ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02hqp3h",
            "mid2name": {
                "ns:m.02hqp3h": "The X-Men #1"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R comic_books.comic_book_issue.editor) The X-Men #1))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R comic_books.comic_book_issue.editor) m.02hqp3h))"
        }
    },
    "423": {
        "generations": "who created the artwork for The Chanson Fran\u00e7aise Show?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01317jrt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01317jrt ns:visual_art.art_series.artworks ?y .\n?y ns:visual_art.artwork.artist ?x .\n}\n",
            "TopicEntityMid": "m.01317jrt",
            "mid2name": {
                "ns:m.01317jrt": "The Chanson Fran\u00e7aise Show"
            },
            "SExpr_w_name": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) The Chanson Fran\u00e7aise Show))",
            "SExpr": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) m.01317jrt))"
        }
    },
    "424": {
        "generations": "where was Bacardi founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01k6v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01k6v ns:organization.organization.place_founded ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.01k6v",
            "mid2name": {
                "ns:m.01k6v": "Bacardi"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R organization.organization.place_founded) Bacardi))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R organization.organization.place_founded) m.01k6v))"
        }
    },
    "425": {
        "generations": "Which company produced the premiere production of La rondine opera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.066hvz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.066hvz ns:opera.opera.premiere_production ?y .\n?y ns:opera.opera_production.producing_company ?x .\n}\n",
            "TopicEntityMid": "m.066hvz",
            "mid2name": {
                "ns:m.066hvz": "La rondine"
            },
            "SExpr_w_name": "(JOIN (R opera.opera_production.producing_company) (JOIN (R opera.opera.premiere_production) La rondine))",
            "SExpr": "(JOIN (R opera.opera_production.producing_company) (JOIN (R opera.opera.premiere_production) m.066hvz))"
        }
    },
    "426": {
        "generations": "What medical trials were conducted for the Physicians' Health Study?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbx9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbx9 ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.03zbbx9",
            "mid2name": {
                "ns:m.03zbbx9": "Physicians' Health Study"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Physicians' Health Study))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbx9))"
        }
    },
    "427": {
        "generations": "What dog breeds originated in Surtees Bridge?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm8sv1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm8sv1 ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.0cm8sv1",
            "mid2name": {
                "ns:m.0cm8sv1": "Surtees Bridge"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Surtees Bridge))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.0cm8sv1))"
        }
    },
    "428": {
        "generations": "How do you pronounce iPhone 4 in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0bg9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0bg9c ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0c0bg9c",
            "mid2name": {
                "ns:m.0c0bg9c": "iPhone 4"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) iPhone 4))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0c0bg9c))"
        }
    },
    "429": {
        "generations": "How do you pronounce London Heathrow Airport in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03jn4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03jn4 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03jn4",
            "mid2name": {
                "ns:m.03jn4": "London Heathrow Airport"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) London Heathrow Airport))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03jn4))"
        }
    },
    "430": {
        "generations": "where has banksy exhibited his art series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023b7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023b7b ns:visual_art.visual_artist.art_series ?y .\n?y ns:time.event.locations ?x .\n}\n",
            "TopicEntityMid": "m.023b7b",
            "mid2name": {
                "ns:m.023b7b": "Banksy"
            },
            "SExpr_w_name": "(JOIN (R time.event.locations) (JOIN (R visual_art.visual_artist.art_series) Banksy))",
            "SExpr": "(JOIN (R time.event.locations) (JOIN (R visual_art.visual_artist.art_series) m.023b7b))"
        }
    },
    "431": {
        "generations": "who invented the Steve Hushek invention?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j5c1z1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j5c1z1 ns:law.inventor.inventions ?y .\n?y ns:law.invention.inventor ?x .\n}\n",
            "TopicEntityMid": "m.0j5c1z1",
            "mid2name": {
                "ns:m.0j5c1z1": "Steve Hushek"
            },
            "SExpr_w_name": "(JOIN (R law.invention.inventor) (JOIN (R law.inventor.inventions) Steve Hushek))",
            "SExpr": "(JOIN (R law.invention.inventor) (JOIN (R law.inventor.inventions) m.0j5c1z1))"
        }
    },
    "432": {
        "generations": "what is the gender of the artist who created The Farm artwork?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nl8pd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nl8pd ns:visual_art.artwork.artist ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.05nl8pd",
            "mid2name": {
                "ns:m.05nl8pd": "The Farm"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R visual_art.artwork.artist) The Farm))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R visual_art.artwork.artist) m.05nl8pd))"
        }
    },
    "433": {
        "generations": "where is the headquarters of the company advised by richard rubin?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ghm0b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ghm0b ns:business.company_advisor.companies_advised ?y .\n?y ns:organization.organization.headquarters ?x .\n}\n",
            "TopicEntityMid": "m.03ghm0b",
            "mid2name": {
                "ns:m.03ghm0b": "Richard Rubin"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.headquarters) (JOIN (R business.company_advisor.companies_advised) Richard Rubin))",
            "SExpr": "(JOIN (R organization.organization.headquarters) (JOIN (R business.company_advisor.companies_advised) m.03ghm0b))"
        }
    },
    "434": {
        "generations": "how do you pronounce the name Maximo?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065myjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065myjj ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.065myjj",
            "mid2name": {
                "ns:m.065myjj": "Maximo"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Maximo))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.065myjj))"
        }
    },
    "435": {
        "generations": "who wrote the book \"Charming Enemy\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06q1y2y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06q1y2y ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.06q1y2y",
            "mid2name": {
                "ns:m.06q1y2y": "Charming enemy"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Charming enemy))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.06q1y2y))"
        }
    },
    "436": {
        "generations": "where is the headquarters of downtown aquarium in denver?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0604fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0604fr ns:zoos.zoo.memberships ?y .\n?y ns:organization.organization.headquarters ?x .\n}\n",
            "TopicEntityMid": "m.0604fr",
            "mid2name": {
                "ns:m.0604fr": "Downtown Aquarium, Denver"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.headquarters) (JOIN (R zoos.zoo.memberships) Downtown Aquarium, Denver))",
            "SExpr": "(JOIN (R organization.organization.headquarters) (JOIN (R zoos.zoo.memberships) m.0604fr))"
        }
    },
    "437": {
        "generations": "What is contained within Malin and where is it located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0725dfj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0725dfj ns:location.location.contains ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0725dfj",
            "mid2name": {
                "ns:m.0725dfj": "Malin"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R location.location.contains) Malin))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R location.location.contains) m.0725dfj))"
        }
    },
    "438": {
        "generations": "How do you pronounce \"Build automation\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h2vrf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h2vrf ns:computer.software_genre.software_in_genre ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0h2vrf",
            "mid2name": {
                "ns:m.0h2vrf": "Build automation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software_genre.software_in_genre) Build automation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software_genre.software_in_genre) m.0h2vrf))"
        }
    },
    "439": {
        "generations": "What is the yomigana for the Western context name pronunciation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hfjk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hfjk ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0hfjk",
            "mid2name": {
                "ns:m.0hfjk": "Western"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Western))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0hfjk))"
        }
    },
    "440": {
        "generations": "who was joe biden's rival in the 2012 vice-presidential campaign?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nbyx6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nbyx6q ns:government.election_campaign.candidate ?y .\n?y ns:celebrities.celebrity.celebrity_rivals ?x .\n}\n",
            "TopicEntityMid": "m.0nbyx6q",
            "mid2name": {
                "ns:m.0nbyx6q": "Joe Biden vice-presidential campaign, 2012"
            },
            "SExpr_w_name": "(JOIN (R celebrities.celebrity.celebrity_rivals) (JOIN (R government.election_campaign.candidate) Joe Biden vice-presidential campaign, 2012))",
            "SExpr": "(JOIN (R celebrities.celebrity.celebrity_rivals) (JOIN (R government.election_campaign.candidate) m.0nbyx6q))"
        }
    },
    "441": {
        "generations": "What grape varieties are used to make Bonarda di Gattinara wine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rk12l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rk12l ns:wine.grape_variety.wine_styles ?y .\n?y ns:food.wine_style.grape_varieties ?x .\n}\n",
            "TopicEntityMid": "m.09rk12l",
            "mid2name": {
                "ns:m.09rk12l": "Bonarda di Gattinara"
            },
            "SExpr_w_name": "(JOIN (R food.wine_style.grape_varieties) (JOIN (R wine.grape_variety.wine_styles) Bonarda di Gattinara))",
            "SExpr": "(JOIN (R food.wine_style.grape_varieties) (JOIN (R wine.grape_variety.wine_styles) m.09rk12l))"
        }
    },
    "442": {
        "generations": "who recorded a track with red rodney?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m8kk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m8kk ns:music.artist.track ?y .\n?y ns:music.recording.artist ?x .\n}\n",
            "TopicEntityMid": "m.03m8kk",
            "mid2name": {
                "ns:m.03m8kk": "Red Rodney"
            },
            "SExpr_w_name": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) Red Rodney))",
            "SExpr": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) m.03m8kk))"
        }
    },
    "443": {
        "generations": "what asteroid group is 19446 Muroski a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03y7l53)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03y7l53 ns:astronomy.asteroid.member_of_asteroid_group ?y .\n?y ns:astronomy.asteroid_group.asteroid_group_members ?x .\n}\n",
            "TopicEntityMid": "m.03y7l53",
            "mid2name": {
                "ns:m.03y7l53": "19446 Muroski"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) 19446 Muroski))",
            "SExpr": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) m.03y7l53))"
        }
    },
    "444": {
        "generations": "How do you pronounce the name \"Narrator\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0147fv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0147fv ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0147fv",
            "mid2name": {
                "ns:m.0147fv": "Narrator"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Narrator))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0147fv))"
        }
    },
    "445": {
        "generations": "How do you pronounce the name of the Brown University Band?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f_z24)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f_z24 ns:music.artist.genre ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0f_z24",
            "mid2name": {
                "ns:m.0f_z24": "Brown University Band"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R music.artist.genre) Brown University Band))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R music.artist.genre) m.0f_z24))"
        }
    },
    "446": {
        "generations": "which constellations border Pictor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f17j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f17j ns:astronomy.constellation.bordering_constellations_new ?y .\n?y ns:astronomy.constellation_bordering_relationship.constellations ?x .\n}\n",
            "TopicEntityMid": "m.01f17j",
            "mid2name": {
                "ns:m.01f17j": "Pictor"
            },
            "SExpr_w_name": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) Pictor))",
            "SExpr": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) m.01f17j))"
        }
    },
    "447": {
        "generations": "What industry is the Dassault Mirage III aircraft model associated with?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0175ww)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0175ww ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0175ww",
            "mid2name": {
                "ns:m.0175ww": "Dassault Mirage III"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) Dassault Mirage III))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.0175ww))"
        }
    },
    "448": {
        "generations": "How do you pronounce \"Park Forest\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04cqn05)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04cqn05 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04cqn05",
            "mid2name": {
                "ns:m.04cqn05": "Park Forest"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Park Forest))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04cqn05))"
        }
    },
    "449": {
        "generations": "Which ski lift serves the Donkey Serenade run?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.077093l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.077093l ns:skiing.ski_run.served_by ?y .\n?y ns:skiing.ski_lift.ski_area ?x .\n}\n",
            "TopicEntityMid": "m.077093l",
            "mid2name": {
                "ns:m.077093l": "Donkey Serenade"
            },
            "SExpr_w_name": "(JOIN (R skiing.ski_lift.ski_area) (JOIN (R skiing.ski_run.served_by) Donkey Serenade))",
            "SExpr": "(JOIN (R skiing.ski_lift.ski_area) (JOIN (R skiing.ski_run.served_by) m.077093l))"
        }
    },
    "450": {
        "generations": "what dialects are used in the nancy drew files book series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ptds6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ptds6 ns:book.written_work.original_language ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.02ptds6",
            "mid2name": {
                "ns:m.02ptds6": "The Nancy Drew Files"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R book.written_work.original_language) The Nancy Drew Files))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R book.written_work.original_language) m.02ptds6))"
        }
    },
    "451": {
        "generations": "What genre of music does Tjaldva perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0114bp6z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0114bp6z ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0114bp6z",
            "mid2name": {
                "ns:m.0114bp6z": "Tjaldva"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Tjaldva))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0114bp6z))"
        }
    },
    "452": {
        "generations": "What are the administrative divisions of Namibia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05bmq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05bmq ns:location.country.administrative_divisions ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.05bmq",
            "mid2name": {
                "ns:m.05bmq": "Namibia"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.country.administrative_divisions) Namibia))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.country.administrative_divisions) m.05bmq))"
        }
    },
    "453": {
        "generations": "how do you pronounce walter vromans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0mfbj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0mfbj ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0c0mfbj",
            "mid2name": {
                "ns:m.0c0mfbj": "Walter Vromans"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Walter Vromans))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0c0mfbj))"
        }
    },
    "454": {
        "generations": "What is the gender of fictional characters that have lived in Toronto?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.gender ?x .\n}\n",
            "TopicEntityMid": "m.0h7h6",
            "mid2name": {
                "ns:m.0h7h6": "Toronto"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Toronto))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.0h7h6))"
        }
    },
    "455": {
        "generations": "What is the classification rank and higher classification of Pinus longaeva?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_hv6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_hv6 ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.02_hv6",
            "mid2name": {
                "ns:m.02_hv6": "Pinus longaeva"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Pinus longaeva))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.02_hv6))"
        }
    },
    "456": {
        "generations": "Which fictional universes feature characters that have lived in Ephesus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p8r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p8r ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.02p8r",
            "mid2name": {
                "ns:m.02p8r": "Ephesus"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Ephesus))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.02p8r))"
        }
    },
    "457": {
        "generations": "What song did Loyal to the Zoo record?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0137zch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0137zch ns:music.recording.artist ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.0137zch",
            "mid2name": {
                "ns:m.0137zch": "Loyal to the Zoo"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.recording.artist) Loyal to the Zoo))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.recording.artist) m.0137zch))"
        }
    },
    "458": {
        "generations": "What genre of music does the artist of the album \"Dutronc au Casino\" play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01m4hdv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01m4hdv ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01m4hdv",
            "mid2name": {
                "ns:m.01m4hdv": "Dutronc au Casino"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Dutronc au Casino))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01m4hdv))"
        }
    },
    "459": {
        "generations": "what is the latitude of the Robert Hull Fleming Museum?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059q4mp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059q4mp ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.059q4mp",
            "mid2name": {
                "ns:m.059q4mp": "Robert Hull Fleming Museum"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Robert Hull Fleming Museum))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.059q4mp))"
        }
    },
    "460": {
        "generations": "What type of fuel does the Kia 2.4L 4 Cylinder 191 hp 181 ft-lbs engine use?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h2cw40)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h2cw40 ns:automotive.engine.fuels_used ?y .\n?y ns:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?x .\n}\n",
            "TopicEntityMid": "m.0h2cw40",
            "mid2name": {
                "ns:m.0h2cw40": "Kia 2.4L 4 Cylinder 191 hp 181 ft-lbs"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) (JOIN (R automotive.engine.fuels_used) Kia 2.4L 4 Cylinder 191 hp 181 ft-lbs))",
            "SExpr": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) (JOIN (R automotive.engine.fuels_used) m.0h2cw40))"
        }
    },
    "461": {
        "generations": "how do you pronounce the word \"Visitation\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_r63z9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_r63z9 ns:time.holiday.featured_in_religions ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0_r63z9",
            "mid2name": {
                "ns:m.0_r63z9": "Visitation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.holiday.featured_in_religions) Visitation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.holiday.featured_in_religions) m.0_r63z9))"
        }
    },
    "462": {
        "generations": "what is the equivalent concept of pile in textile weaving?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xhmlw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xhmlw ns:fashion.weave.textiles_of_this_weave ?y .\n?y ns:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?x .\n}\n",
            "TopicEntityMid": "m.02xhmlw",
            "mid2name": {
                "ns:m.02xhmlw": "Pile"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) (JOIN (R fashion.weave.textiles_of_this_weave) Pile))",
            "SExpr": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) (JOIN (R fashion.weave.textiles_of_this_weave) m.02xhmlw))"
        }
    },
    "463": {
        "generations": "What books has Carol C Mattusch written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wktm9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wktm9 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.05wktm9",
            "mid2name": {
                "ns:m.05wktm9": "Carol C Mattusch"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Carol C Mattusch))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05wktm9))"
        }
    },
    "464": {
        "generations": "What is the phase of the medical trial for the feasibility study of take-home LAAM medication?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbvx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbvx ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.03zbbvx",
            "mid2name": {
                "ns:m.03zbbvx": "Feasibility Study of Take-Home LAAM Medication \u2013 3"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Feasibility Study of Take-Home LAAM Medication \u2013 3))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbvx))"
        }
    },
    "465": {
        "generations": "Who wrote the book that references postmenopausal hormone therapy in unstable angina?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbw_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbw_ ns:medicine.medical_trial.references ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03zbbw_",
            "mid2name": {
                "ns:m.03zbbw_": "Postmenopausal Hormone Therapy in Unstable Angina"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) Postmenopausal Hormone Therapy in Unstable Angina))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) m.03zbbw_))"
        }
    },
    "466": {
        "generations": "Who wrote the book \"King Dragon\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04j4r74)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04j4r74 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04j4r74",
            "mid2name": {
                "ns:m.04j4r74": "King Dragon"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) King Dragon))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.04j4r74))"
        }
    },
    "467": {
        "generations": "Which organizations provide datasets for international use?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z430m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z430m ns:organization.organization_scope.organizations_with_this_scope ?y .\n?y ns:dataworld.data_provider.datasets_provided ?x .\n}\n",
            "TopicEntityMid": "m.01z430m",
            "mid2name": {
                "ns:m.01z430m": "International"
            },
            "SExpr_w_name": "(JOIN (R dataworld.data_provider.datasets_provided) (JOIN (R organization.organization_scope.organizations_with_this_scope) International))",
            "SExpr": "(JOIN (R dataworld.data_provider.datasets_provided) (JOIN (R organization.organization_scope.organizations_with_this_scope) m.01z430m))"
        }
    },
    "468": {
        "generations": "What animal eats the Braque Francais according to the food web?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0403yxh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0403yxh ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.ecology.food_web_member.eaten_by ?x .\n}\n",
            "TopicEntityMid": "m.0403yxh",
            "mid2name": {
                "ns:m.0403yxh": "Braque Francais"
            },
            "SExpr_w_name": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) Braque Francais))",
            "SExpr": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) m.0403yxh))"
        }
    },
    "469": {
        "generations": "who wrote the book \"The Shifting Sands\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rqbs2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rqbs2 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02rqbs2",
            "mid2name": {
                "ns:m.02rqbs2": "The Shifting Sands"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Shifting Sands))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.02rqbs2))"
        }
    },
    "470": {
        "generations": "what is the latitude of buckner glacier?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qkwhpm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qkwhpm ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0qkwhpm",
            "mid2name": {
                "ns:m.0qkwhpm": "Buckner Glacier"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Buckner Glacier))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0qkwhpm))"
        }
    },
    "471": {
        "generations": "which constellations border Musca?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f198)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f198 ns:astronomy.constellation.bordering_constellations_new ?y .\n?y ns:astronomy.constellation_bordering_relationship.constellations ?x .\n}\n",
            "TopicEntityMid": "m.01f198",
            "mid2name": {
                "ns:m.01f198": "Musca"
            },
            "SExpr_w_name": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) Musca))",
            "SExpr": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) m.01f198))"
        }
    },
    "472": {
        "generations": "how do you pronounce D-flat major?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069w_t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069w_t ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.069w_t",
            "mid2name": {
                "ns:m.069w_t": "D-flat major"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) D-flat major))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.069w_t))"
        }
    },
    "473": {
        "generations": "who wrote the star gazers theme song and what else did they write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_fk14v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_fk14v ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0_fk14v",
            "mid2name": {
                "ns:m.0_fk14v": "Star Gazers Theme Song"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Star Gazers Theme Song))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.0_fk14v))"
        }
    },
    "474": {
        "generations": "What industry is Mikoyan-Gurevich I-250 associated with?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s8_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s8_7 ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.01s8_7",
            "mid2name": {
                "ns:m.01s8_7": "Mikoyan-Gurevich I-250"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) Mikoyan-Gurevich I-250))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.01s8_7))"
        }
    },
    "475": {
        "generations": "What breeds of animals originated from the Vostok space program?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0231j1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0231j1 ns:spaceflight.space_program.sponsor ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.0231j1",
            "mid2name": {
                "ns:m.0231j1": "Vostok programme"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R spaceflight.space_program.sponsor) Vostok programme))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R spaceflight.space_program.sponsor) m.0231j1))"
        }
    },
    "476": {
        "generations": "which TV series and season is Alarm f\u00fcr Cobra 11 \u2013 Die Autobahnpolizei episode 27 from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lj0p4d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lj0p4d ns:tv.tv_series_season.episodes ?y .\n?y ns:tv.tv_series_episode.series ?x .\n}\n",
            "TopicEntityMid": "m.0lj0p4d",
            "mid2name": {
                "ns:m.0lj0p4d": "Alarm f\u00fcr Cobra 11 \u2013 Die Autobahnpolizei - Season 27"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_series_season.episodes) Alarm f\u00fcr Cobra 11 \u2013 Die Autobahnpolizei - Season 27))",
            "SExpr": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_series_season.episodes) m.0lj0p4d))"
        }
    },
    "477": {
        "generations": "What brand uses sodium ascorbate and ascorbic acid in their products?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065s739)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065s739 ns:business.product_ingredient.used_in_products ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.065s739",
            "mid2name": {
                "ns:m.065s739": "Sodium ascorbate and ascorbic acid"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R business.product_ingredient.used_in_products) Sodium ascorbate and ascorbic acid))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R business.product_ingredient.used_in_products) m.065s739))"
        }
    },
    "478": {
        "generations": "What organisms have their higher classification originating from the Soviet Union?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vz3zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vz3zq ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.05vz3zq",
            "mid2name": {
                "ns:m.05vz3zq": "Soviet Union"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Soviet Union))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.05vz3zq))"
        }
    },
    "479": {
        "generations": "What is the sex of the parent in a Zony hybrid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06p92q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06p92q ns:biology.hybrid.parent_classifications ?y .\n?y ns:biology.hybrid_parentage.parent_sex ?x .\n}\n",
            "TopicEntityMid": "m.06p92q",
            "mid2name": {
                "ns:m.06p92q": "Zony"
            },
            "SExpr_w_name": "(JOIN (R biology.hybrid_parentage.parent_sex) (JOIN (R biology.hybrid.parent_classifications) Zony))",
            "SExpr": "(JOIN (R biology.hybrid_parentage.parent_sex) (JOIN (R biology.hybrid.parent_classifications) m.06p92q))"
        }
    },
    "480": {
        "generations": "What is the Primeval dart tube made of in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c036dw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c036dw ns:fictional_universe.fictional_object.composition ?y .\n?y ns:fictional_universe.fictional_substance.fictional_object ?x .\n}\n",
            "TopicEntityMid": "m.0c036dw",
            "mid2name": {
                "ns:m.0c036dw": "Primeval dart tube"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_substance.fictional_object) (JOIN (R fictional_universe.fictional_object.composition) Primeval dart tube))",
            "SExpr": "(JOIN (R fictional_universe.fictional_substance.fictional_object) (JOIN (R fictional_universe.fictional_object.composition) m.0c036dw))"
        }
    },
    "481": {
        "generations": "where is the headquarters of the head start program located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01njrf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01njrf ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.01njrf",
            "mid2name": {
                "ns:m.01njrf": "Head Start Program"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) Head Start Program))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) m.01njrf))"
        }
    },
    "482": {
        "generations": "What animal is a predator of the Sarplaninac?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p89l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p89l ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.ecology.food_web_member.eaten_by ?x .\n}\n",
            "TopicEntityMid": "m.01p89l",
            "mid2name": {
                "ns:m.01p89l": "Sarplaninac"
            },
            "SExpr_w_name": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) Sarplaninac))",
            "SExpr": "(JOIN (R base.ecology.food_web_member.eaten_by) (JOIN (R biology.organism_classification.higher_classification) m.01p89l))"
        }
    },
    "483": {
        "generations": "What discoveries were made using the 60 inch telescope?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09tzp39)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09tzp39 ns:astronomy.telescope.housed_in ?y .\n?y ns:astronomy.astronomical_observatory.discoveries ?x .\n}\n",
            "TopicEntityMid": "m.09tzp39",
            "mid2name": {
                "ns:m.09tzp39": "60 inch telescope"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_observatory.discoveries) (JOIN (R astronomy.telescope.housed_in) 60 inch telescope))",
            "SExpr": "(JOIN (R astronomy.astronomical_observatory.discoveries) (JOIN (R astronomy.telescope.housed_in) m.09tzp39))"
        }
    },
    "484": {
        "generations": "Which company produces the Samsung i85?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q2kj0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q2kj0 ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03q2kj0",
            "mid2name": {
                "ns:m.03q2kj0": "Samsung i85"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Samsung i85))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03q2kj0))"
        }
    },
    "485": {
        "generations": "What is the meaning of the symbol Cetus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wmv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wmv ns:symbols.namesake.named_after ?y .\n?y ns:symbols.name_source.namesakes ?x .\n}\n",
            "TopicEntityMid": "m.01wmv",
            "mid2name": {
                "ns:m.01wmv": "Cetus"
            },
            "SExpr_w_name": "(JOIN (R symbols.name_source.namesakes) (JOIN (R symbols.namesake.named_after) Cetus))",
            "SExpr": "(JOIN (R symbols.name_source.namesakes) (JOIN (R symbols.namesake.named_after) m.01wmv))"
        }
    },
    "486": {
        "generations": "How do you pronounce \"Artistic gymnastics\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hp22)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hp22 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01hp22",
            "mid2name": {
                "ns:m.01hp22": "Artistic gymnastics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Artistic gymnastics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01hp22))"
        }
    },
    "487": {
        "generations": "What industry does Hollister Co. in Miami International Mall belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m0sv0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m0sv0 ns:business.business_location.parent_company ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.03m0sv0",
            "mid2name": {
                "ns:m.03m0sv0": "Hollister Co., Miami International Mall"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R business.business_location.parent_company) Hollister Co., Miami International Mall))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R business.business_location.parent_company) m.03m0sv0))"
        }
    },
    "488": {
        "generations": "What active ingredients are in intravenous drugs?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0403l2c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0403l2c ns:medicine.drug_administration_route.drug_formulations ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n}\n",
            "TopicEntityMid": "m.0403l2c",
            "mid2name": {
                "ns:m.0403l2c": "Intravenous"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) Intravenous))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_administration_route.drug_formulations) m.0403l2c))"
        }
    },
    "489": {
        "generations": "Who wrote the book that references the effects of methadone on zidovudine disposition?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbxg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbxg ns:medicine.medical_trial.references ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03zbbxg",
            "mid2name": {
                "ns:m.03zbbxg": "Methadone Effects on Zidovudine (ZDV, AZT) Disposition"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) Methadone Effects on Zidovudine (ZDV, AZT) Disposition))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) m.03zbbxg))"
        }
    },
    "490": {
        "generations": "What type of binding does Aldine use for their books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qj557)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qj557 ns:book.publishing_company.books_published ?y .\n?y ns:book.book_edition.binding ?x .\n}\n",
            "TopicEntityMid": "m.05qj557",
            "mid2name": {
                "ns:m.05qj557": "Aldine"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.binding) (JOIN (R book.publishing_company.books_published) Aldine))",
            "SExpr": "(JOIN (R book.book_edition.binding) (JOIN (R book.publishing_company.books_published) m.05qj557))"
        }
    },
    "491": {
        "generations": "Which breeds of animals originate from countries where Schedule 4 Prescription Only Medicine is legal?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d1tc2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d1tc2 ns:medicine.drug_legal_status.country ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.04d1tc2",
            "mid2name": {
                "ns:m.04d1tc2": "Schedule 4 Prescription Only Medicine"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R medicine.drug_legal_status.country) Schedule 4 Prescription Only Medicine))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R medicine.drug_legal_status.country) m.04d1tc2))"
        }
    },
    "492": {
        "generations": "what is the gender distribution of health educators?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07f904m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07f904m ns:people.profession.people_with_this_profession ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.07f904m",
            "mid2name": {
                "ns:m.07f904m": "Health Educator"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) Health Educator))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) m.07f904m))"
        }
    },
    "493": {
        "generations": "What farms are located near Tennessee State University?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01t8sr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01t8sr ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.01t8sr",
            "mid2name": {
                "ns:m.01t8sr": "Tennessee State University"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Tennessee State University))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.01t8sr))"
        }
    },
    "494": {
        "generations": "What genre of music is Keep It Comin' and who composed it?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l0qhq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l0qhq ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0l0qhq",
            "mid2name": {
                "ns:m.0l0qhq": "Keep It Comin'"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) Keep It Comin'))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) m.0l0qhq))"
        }
    },
    "495": {
        "generations": "who is the vice mayor of half moon bay?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04j3pf7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04j3pf7 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n}\n",
            "TopicEntityMid": "m.04j3pf7",
            "mid2name": {
                "ns:m.04j3pf7": "Vice Mayor of Half Moon Bay"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) Vice Mayor of Half Moon Bay))",
            "SExpr": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) m.04j3pf7))"
        }
    },
    "496": {
        "generations": "who wrote the book \"Play it by Trust\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051zsrv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051zsrv ns:visual_art.artwork.artist ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.051zsrv",
            "mid2name": {
                "ns:m.051zsrv": "Play it by Trust"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R visual_art.artwork.artist) Play it by Trust))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R visual_art.artwork.artist) m.051zsrv))"
        }
    },
    "497": {
        "generations": "How do you pronounce the word \"oncology\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hl17)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hl17 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0hl17",
            "mid2name": {
                "ns:m.0hl17": "Oncology"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Oncology))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0hl17))"
        }
    },
    "498": {
        "generations": "where is GRUPO TELEVISA S.A.-SER D Common Stock located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cl2sf0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cl2sf0 ns:business.issue.issuer ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0cl2sf0",
            "mid2name": {
                "ns:m.0cl2sf0": "GRUPO TELEVISA S.A.-SER D Common Stock"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R business.issue.issuer) GRUPO TELEVISA S.A.-SER D Common Stock))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R business.issue.issuer) m.0cl2sf0))"
        }
    },
    "499": {
        "generations": "What TV series and season is Newsnight Review a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07kxft6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07kxft6 ns:tv.tv_series_season.episodes ?y .\n?y ns:tv.tv_series_episode.series ?x .\n}\n",
            "TopicEntityMid": "m.07kxft6",
            "mid2name": {
                "ns:m.07kxft6": "Newsnight Review - Season 2"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_series_season.episodes) Newsnight Review - Season 2))",
            "SExpr": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_series_season.episodes) m.07kxft6))"
        }
    },
    "500": {
        "generations": "What episodes are in the TV series season \"Survival\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03n2zm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03n2zm ns:user.techgnostic.default_domain.tv_series_serial.season ?y .\n?y ns:tv.tv_series_season.episodes ?x .\n}\n",
            "TopicEntityMid": "m.03n2zm",
            "mid2name": {
                "ns:m.03n2zm": "Survival"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_season.episodes) (JOIN (R user.techgnostic.default_domain.tv_series_serial.season) Survival))",
            "SExpr": "(JOIN (R tv.tv_series_season.episodes) (JOIN (R user.techgnostic.default_domain.tv_series_serial.season) m.03n2zm))"
        }
    },
    "501": {
        "generations": "How do you pronounce Iroquoian languages?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0321lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0321lh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0321lh",
            "mid2name": {
                "ns:m.0321lh": "Iroquoian languages"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Iroquoian languages))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0321lh))"
        }
    },
    "502": {
        "generations": "Where are the Montaukett farms located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cbp1r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cbp1r ns:people.ethnicity.geographic_distribution ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.0cbp1r",
            "mid2name": {
                "ns:m.0cbp1r": "Montaukett"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R people.ethnicity.geographic_distribution) Montaukett))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R people.ethnicity.geographic_distribution) m.0cbp1r))"
        }
    },
    "503": {
        "generations": "How do you pronounce Badminton at the 2006 Asian Games?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026q5xx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026q5xx ns:time.event.included_in_event ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.026q5xx",
            "mid2name": {
                "ns:m.026q5xx": "Badminton at the 2006 Asian Games"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.event.included_in_event) Badminton at the 2006 Asian Games))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R time.event.included_in_event) m.026q5xx))"
        }
    },
    "504": {
        "generations": "What awards has Capitol Records been nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017l96)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017l96 ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.017l96",
            "mid2name": {
                "ns:m.017l96": "Capitol Records"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) Capitol Records))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.017l96))"
        }
    },
    "505": {
        "generations": "What farms were featured in the film Punchinello and the Most Marvelous Gift?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crw5b5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crw5b5 ns:film.film.country ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.0crw5b5",
            "mid2name": {
                "ns:m.0crw5b5": "Punchinello and the Most Marvelous Gift"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) Punchinello and the Most Marvelous Gift))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) m.0crw5b5))"
        }
    },
    "506": {
        "generations": "What is the tincture of the coat of arms with the heraldic variation \"Party per fess\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d1hzx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d1hzx ns:symbols.heraldic_variation_of_the_field.coat_of_arms ?y .\n?y ns:symbols.heraldic_variation_of_the_field_color.tincture ?x .\n}\n",
            "TopicEntityMid": "m.05d1hzx",
            "mid2name": {
                "ns:m.05d1hzx": "Party per fess"
            },
            "SExpr_w_name": "(JOIN (R symbols.heraldic_variation_of_the_field_color.tincture) (JOIN (R symbols.heraldic_variation_of_the_field.coat_of_arms) Party per fess))",
            "SExpr": "(JOIN (R symbols.heraldic_variation_of_the_field_color.tincture) (JOIN (R symbols.heraldic_variation_of_the_field.coat_of_arms) m.05d1hzx))"
        }
    },
    "507": {
        "generations": "What historical places of worship are associated with polytheism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.061c9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.061c9 ns:religion.religion.branched_into ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.061c9",
            "mid2name": {
                "ns:m.061c9": "Polytheism"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.branched_into) Polytheism))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.branched_into) m.061c9))"
        }
    },
    "508": {
        "generations": "What is located within the Municipal Theatre of Santiago?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.076vvs5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.076vvs5 ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.076vvs5",
            "mid2name": {
                "ns:m.076vvs5": "Municipal Theatre of Santiago"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Municipal Theatre of Santiago))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.076vvs5))"
        }
    },
    "509": {
        "generations": "How do you pronounce \"Art Gallery\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hhbr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hhbr ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0hhbr",
            "mid2name": {
                "ns:m.0hhbr": "Art Gallery"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Art Gallery))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0hhbr))"
        }
    },
    "510": {
        "generations": "Who developed the Sinclair Spectrum Emulator software?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rkv78)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rkv78 ns:computer.software.developer ?y .\n?y ns:computer.software_developer.software ?x .\n}\n",
            "TopicEntityMid": "m.09rkv78",
            "mid2name": {
                "ns:m.09rkv78": "Sinclair Spectrum Emulator"
            },
            "SExpr_w_name": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) Sinclair Spectrum Emulator))",
            "SExpr": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) m.09rkv78))"
        }
    },
    "511": {
        "generations": "which company produces the Kyocera Finecam S3 camera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q2nzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q2nzc ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03q2nzc",
            "mid2name": {
                "ns:m.03q2nzc": "Kyocera Finecam S3"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Kyocera Finecam S3))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03q2nzc))"
        }
    },
    "512": {
        "generations": "where is the headquarters of BUALUANG SECURITIES PCL Common Stock located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ckw4ym)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ckw4ym ns:business.issue.issuer ?y .\n?y ns:organization.organization.headquarters ?x .\n}\n",
            "TopicEntityMid": "m.0ckw4ym",
            "mid2name": {
                "ns:m.0ckw4ym": "BUALUANG SECURITIES PCL Common Stock"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.headquarters) (JOIN (R business.issue.issuer) BUALUANG SECURITIES PCL Common Stock))",
            "SExpr": "(JOIN (R organization.organization.headquarters) (JOIN (R business.issue.issuer) m.0ckw4ym))"
        }
    },
    "513": {
        "generations": "What are the sub-classifications of viruses according to Jefft0's default domain virus classification?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g9pc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g9pc ns:biology.organism_classification.lower_classifications ?y .\n?y ns:user.jefft0.default_domain.virus_classification.child_classifications ?x .\n}\n",
            "TopicEntityMid": "m.0g9pc",
            "mid2name": {
                "ns:m.0g9pc": "Virus"
            },
            "SExpr_w_name": "(JOIN (R user.jefft0.default_domain.virus_classification.child_classifications) (JOIN (R biology.organism_classification.lower_classifications) Virus))",
            "SExpr": "(JOIN (R user.jefft0.default_domain.virus_classification.child_classifications) (JOIN (R biology.organism_classification.lower_classifications) m.0g9pc))"
        }
    },
    "514": {
        "generations": "How do you pronounce the word \"Skirmisher\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0334hh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0334hh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0334hh",
            "mid2name": {
                "ns:m.0334hh": "Skirmisher"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Skirmisher))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0334hh))"
        }
    },
    "515": {
        "generations": "How do you pronounce the Phoenician alphabet?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j59b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j59b ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0j59b",
            "mid2name": {
                "ns:m.0j59b": "Phoenician alphabet"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Phoenician alphabet))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0j59b))"
        }
    },
    "516": {
        "generations": "what event did bill clinton speak at?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0157m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0157m ns:base.inaugurations.inauguration_speaker.inauguration ?y .\n?y ns:time.event.instance_of_recurring_event ?x .\n}\n",
            "TopicEntityMid": "m.0157m",
            "mid2name": {
                "ns:m.0157m": "Bill Clinton"
            },
            "SExpr_w_name": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) Bill Clinton))",
            "SExpr": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) m.0157m))"
        }
    },
    "517": {
        "generations": "what language did matthew williamson write his books in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04t5fyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04t5fyk ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.04t5fyk",
            "mid2name": {
                "ns:m.04t5fyk": "Matthew Williamson"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Matthew Williamson))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.04t5fyk))"
        }
    },
    "518": {
        "generations": "Which asteroid group was discovered by the GEODSS and Haleakala astronomical observatories?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k0rb6l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k0rb6l ns:astronomy.astronomical_observatory.discoveries ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.0k0rb6l",
            "mid2name": {
                "ns:m.0k0rb6l": "GEODSS, Haleakala"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) GEODSS, Haleakala))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) m.0k0rb6l))"
        }
    },
    "519": {
        "generations": "What is the make and model of the 1967-1970 Shelby GT500?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lc0rk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lc0rk ns:automotive.generation.designer ?y .\n?y ns:automotive.make.model_s ?x .\n}\n",
            "TopicEntityMid": "m.02lc0rk",
            "mid2name": {
                "ns:m.02lc0rk": "1967-1970 Shelby GT500"
            },
            "SExpr_w_name": "(JOIN (R automotive.make.model_s) (JOIN (R automotive.generation.designer) 1967-1970 Shelby GT500))",
            "SExpr": "(JOIN (R automotive.make.model_s) (JOIN (R automotive.generation.designer) m.02lc0rk))"
        }
    },
    "520": {
        "generations": "where was pain management founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025whv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025whv ns:business.industry.companies ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.025whv",
            "mid2name": {
                "ns:m.025whv": "Pain management"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) Pain management))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) m.025whv))"
        }
    },
    "521": {
        "generations": "what music videos feature the song \"I Am Not a Child of Despair\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0sgh_vw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0sgh_vw ns:music.music_video.music_video_subject ?y .\n?y ns:music.music_video_subject.subject_in_these_music_videos ?x .\n}\n",
            "TopicEntityMid": "m.0sgh_vw",
            "mid2name": {
                "ns:m.0sgh_vw": "I Am Not a Child of Despair"
            },
            "SExpr_w_name": "(JOIN (R music.music_video_subject.subject_in_these_music_videos) (JOIN (R music.music_video.music_video_subject) I Am Not a Child of Despair))",
            "SExpr": "(JOIN (R music.music_video_subject.subject_in_these_music_videos) (JOIN (R music.music_video.music_video_subject) m.0sgh_vw))"
        }
    },
    "522": {
        "generations": "What events were included in the 1982 FIFA World Cup Final?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04mywh2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04mywh2 ns:time.event.included_in_event ?y .\n?y ns:time.event.includes_event ?x .\n}\n",
            "TopicEntityMid": "m.04mywh2",
            "mid2name": {
                "ns:m.04mywh2": "1982 FIFA World Cup Final"
            },
            "SExpr_w_name": "(JOIN (R time.event.includes_event) (JOIN (R time.event.included_in_event) 1982 FIFA World Cup Final))",
            "SExpr": "(JOIN (R time.event.includes_event) (JOIN (R time.event.included_in_event) m.04mywh2))"
        }
    },
    "523": {
        "generations": "Who wrote the book and created the recipe for Gimlet?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j_jy15)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j_jy15 ns:food.recipe.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0j_jy15",
            "mid2name": {
                "ns:m.0j_jy15": "Gimlet"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R food.recipe.author) Gimlet))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R food.recipe.author) m.0j_jy15))"
        }
    },
    "524": {
        "generations": "How do you pronounce \"American food\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z1jf2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z1jf2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01z1jf2",
            "mid2name": {
                "ns:m.01z1jf2": "American food"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) American food))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01z1jf2))"
        }
    },
    "525": {
        "generations": "what historical places of worship are associated with the fast of esther?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06y942)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06y942 ns:time.holiday.featured_in_religions ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.06y942",
            "mid2name": {
                "ns:m.06y942": "Fast of Esther"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R time.holiday.featured_in_religions) Fast of Esther))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R time.holiday.featured_in_religions) m.06y942))"
        }
    },
    "526": {
        "generations": "What songs did The Hamptons record?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fsy3c1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fsy3c1 ns:music.artist.track ?y .\n?y ns:music.recording.tracks ?x .\n}\n",
            "TopicEntityMid": "m.0fsy3c1",
            "mid2name": {
                "ns:m.0fsy3c1": "The Hamptons"
            },
            "SExpr_w_name": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) The Hamptons))",
            "SExpr": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) m.0fsy3c1))"
        }
    },
    "527": {
        "generations": "What awards were won by the exhibition \"Exploring the North Atlantic: Traders, Scholars and Vikings\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ky402)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ky402 ns:exhibitions.exhibition.produced_by ?y .\n?y ns:award.award_winner.awards_won ?x .\n}\n",
            "TopicEntityMid": "m.04ky402",
            "mid2name": {
                "ns:m.04ky402": "Exploring the North Atlantic: Traders, Scholars and Vikings"
            },
            "SExpr_w_name": "(JOIN (R award.award_winner.awards_won) (JOIN (R exhibitions.exhibition.produced_by) Exploring the North Atlantic: Traders, Scholars and Vikings))",
            "SExpr": "(JOIN (R award.award_winner.awards_won) (JOIN (R exhibitions.exhibition.produced_by) m.04ky402))"
        }
    },
    "528": {
        "generations": "How do you pronounce iPAQ?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fpp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fpp7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01fpp7",
            "mid2name": {
                "ns:m.01fpp7": "iPAQ"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) iPAQ))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01fpp7))"
        }
    },
    "529": {
        "generations": "Which fictional characters have lived in the area served by KUKC-LP?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dyxqc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dyxqc ns:broadcast.broadcast.area_served ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.0dyxqc",
            "mid2name": {
                "ns:m.0dyxqc": "KUKC-LP"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R broadcast.broadcast.area_served) KUKC-LP))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R broadcast.broadcast.area_served) m.0dyxqc))"
        }
    },
    "530": {
        "generations": "What league did the Tacoma Yankees belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pcq52k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pcq52k ns:sports.defunct_sports_team.later_known_as ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.0pcq52k",
            "mid2name": {
                "ns:m.0pcq52k": "Tacoma Yankees"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R sports.defunct_sports_team.later_known_as) Tacoma Yankees))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R sports.defunct_sports_team.later_known_as) m.0pcq52k))"
        }
    },
    "531": {
        "generations": "how do you pronounce yuji matsumoto's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zrnb4z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zrnb4z ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0zrnb4z",
            "mid2name": {
                "ns:m.0zrnb4z": "Yuji Matsumoto"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Yuji Matsumoto))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0zrnb4z))"
        }
    },
    "532": {
        "generations": "who are the adoptive parents of a character from the Neyaphem species in duck1123's default domain?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09tc50)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09tc50 ns:fictional_universe.character_species.characters_of_this_species ?y .\n?y ns:user.duck1123.default_domain.adopted_character.adoptive_parents ?x .\n}\n",
            "TopicEntityMid": "m.09tc50",
            "mid2name": {
                "ns:m.09tc50": "Neyaphem"
            },
            "SExpr_w_name": "(JOIN (R user.duck1123.default_domain.adopted_character.adoptive_parents) (JOIN (R fictional_universe.character_species.characters_of_this_species) Neyaphem))",
            "SExpr": "(JOIN (R user.duck1123.default_domain.adopted_character.adoptive_parents) (JOIN (R fictional_universe.character_species.characters_of_this_species) m.09tc50))"
        }
    },
    "533": {
        "generations": "What programming language was influenced by QuickBASIC and named after a symbol?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h22q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h22q ns:computer.programming_language.influenced_by ?y .\n?y ns:symbols.namesake.named_after ?x .\n}\n",
            "TopicEntityMid": "m.0h22q",
            "mid2name": {
                "ns:m.0h22q": "QuickBASIC"
            },
            "SExpr_w_name": "(JOIN (R symbols.namesake.named_after) (JOIN (R computer.programming_language.influenced_by) QuickBASIC))",
            "SExpr": "(JOIN (R symbols.namesake.named_after) (JOIN (R computer.programming_language.influenced_by) m.0h22q))"
        }
    },
    "534": {
        "generations": "what books did david weyhe smith write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wc1fv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wc1fv ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.05wc1fv",
            "mid2name": {
                "ns:m.05wc1fv": "David Weyhe Smith"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) David Weyhe Smith))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05wc1fv))"
        }
    },
    "535": {
        "generations": "who played the character Catbus in a film?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c9xy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c9xy ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
            "TopicEntityMid": "m.05c9xy",
            "mid2name": {
                "ns:m.05c9xy": "Catbus"
            },
            "SExpr_w_name": "(JOIN (R film.performance.actor) (JOIN (R film.film_character.portrayed_in_films) Catbus))",
            "SExpr": "(JOIN (R film.performance.actor) (JOIN (R film.film_character.portrayed_in_films) m.05c9xy))"
        }
    },
    "536": {
        "generations": "Which Olympics were hosted in South Korea?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06qd3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06qd3 ns:location.country.administrative_divisions ?y .\n?y ns:olympics.olympic_host_city.olympics_hosted ?x .\n}\n",
            "TopicEntityMid": "m.06qd3",
            "mid2name": {
                "ns:m.06qd3": "South Korea"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_host_city.olympics_hosted) (JOIN (R location.country.administrative_divisions) South Korea))",
            "SExpr": "(JOIN (R olympics.olympic_host_city.olympics_hosted) (JOIN (R location.country.administrative_divisions) m.06qd3))"
        }
    },
    "537": {
        "generations": "what books has edward berkowitz written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cp76k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cp76k ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.0cp76k",
            "mid2name": {
                "ns:m.0cp76k": "Edward Berkowitz"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Edward Berkowitz))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.0cp76k))"
        }
    },
    "538": {
        "generations": "What fictional universe does Moonglow appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07wcxh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07wcxh ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.07wcxh",
            "mid2name": {
                "ns:m.07wcxh": "Moonglow"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Moonglow))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.07wcxh))"
        }
    },
    "539": {
        "generations": "How do you pronounce \"Pathogenic bacteria\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qch2w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qch2w ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03qch2w",
            "mid2name": {
                "ns:m.03qch2w": "Pathogenic bacteria"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Pathogenic bacteria))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03qch2w))"
        }
    },
    "540": {
        "generations": "What should you do to a plant if it is critically wounded like in the Straton event in fiction?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cc0nbl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cc0nbl ns:fictional_universe.event_in_fiction.included_by_these_events ?y .\n?y ns:dataworld.gardening_hint.split_to ?x .\n}\n",
            "TopicEntityMid": "m.0cc0nbl",
            "mid2name": {
                "ns:m.0cc0nbl": "Straton critically wounded"
            },
            "SExpr_w_name": "(JOIN (R dataworld.gardening_hint.split_to) (JOIN (R fictional_universe.event_in_fiction.included_by_these_events) Straton critically wounded))",
            "SExpr": "(JOIN (R dataworld.gardening_hint.split_to) (JOIN (R fictional_universe.event_in_fiction.included_by_these_events) m.0cc0nbl))"
        }
    },
    "541": {
        "generations": "What articles are in the Science magazine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mq7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mq7 ns:user.techgnostic.default_domain.magazine_topic.periodical ?y .\n?y ns:book.journal.articles ?x .\n}\n",
            "TopicEntityMid": "m.06mq7",
            "mid2name": {
                "ns:m.06mq7": "Science"
            },
            "SExpr_w_name": "(JOIN (R book.journal.articles) (JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) Science))",
            "SExpr": "(JOIN (R book.journal.articles) (JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) m.06mq7))"
        }
    },
    "542": {
        "generations": "What other instances are equivalent to the United States District Court for the Northern District of California?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m8dt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m8dt ns:government.governmental_body.body_this_is_a_component_of ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.03m8dt",
            "mid2name": {
                "ns:m.03m8dt": "United States District Court for the Northern District of California"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) United States District Court for the Northern District of California))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.03m8dt))"
        }
    },
    "543": {
        "generations": "who wrote the book on Elastomer Spatial Light Modulators for EUV Lithography?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j2tqc3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j2tqc3 ns:law.invention.inventor ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0j2tqc3",
            "mid2name": {
                "ns:m.0j2tqc3": "Elastomer Spatial Light Modulators for EUV Lithography"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) Elastomer Spatial Light Modulators for EUV Lithography))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) m.0j2tqc3))"
        }
    },
    "544": {
        "generations": "who is an artist in the genre of butch walker?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05l2y3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05l2y3 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.05l2y3",
            "mid2name": {
                "ns:m.05l2y3": "Butch Walker"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Butch Walker))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.05l2y3))"
        }
    },
    "545": {
        "generations": "What government agency has jurisdiction over the 20th Ohio Infantry?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bs0n7y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bs0n7y ns:military.military_unit.armed_force ?y .\n?y ns:government.government_agency.jurisdiction ?x .\n}\n",
            "TopicEntityMid": "m.0bs0n7y",
            "mid2name": {
                "ns:m.0bs0n7y": "20th Ohio Infantry"
            },
            "SExpr_w_name": "(JOIN (R government.government_agency.jurisdiction) (JOIN (R military.military_unit.armed_force) 20th Ohio Infantry))",
            "SExpr": "(JOIN (R government.government_agency.jurisdiction) (JOIN (R military.military_unit.armed_force) m.0bs0n7y))"
        }
    },
    "546": {
        "generations": "what radio station is affiliated with the university of auckland?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pj48)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pj48 ns:education.educational_institution.radio_station ?y .\n?y ns:broadcast.radio_station.affiliations ?x .\n}\n",
            "TopicEntityMid": "m.01pj48",
            "mid2name": {
                "ns:m.01pj48": "University of Auckland"
            },
            "SExpr_w_name": "(JOIN (R broadcast.radio_station.affiliations) (JOIN (R education.educational_institution.radio_station) University of Auckland))",
            "SExpr": "(JOIN (R broadcast.radio_station.affiliations) (JOIN (R education.educational_institution.radio_station) m.01pj48))"
        }
    },
    "547": {
        "generations": "What role did Dave Draves have in music tracks?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mx4px)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mx4px ns:music.artist.track_contributions ?y .\n?y ns:music.track_contribution.role ?x .\n}\n",
            "TopicEntityMid": "m.05mx4px",
            "mid2name": {
                "ns:m.05mx4px": "Dave Draves"
            },
            "SExpr_w_name": "(JOIN (R music.track_contribution.role) (JOIN (R music.artist.track_contributions) Dave Draves))",
            "SExpr": "(JOIN (R music.track_contribution.role) (JOIN (R music.artist.track_contributions) m.05mx4px))"
        }
    },
    "548": {
        "generations": "when was midnight raver LLC's website launched?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.11bc1ggfg3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.11bc1ggfg3 ns:internet.website_owner.websites_owned ?y .\n?y ns:internet.website.launched ?x .\n}\n",
            "TopicEntityMid": "g.11bc1ggfg3",
            "mid2name": {
                "ns:g.11bc1ggfg3": "Midnight Raver LLC"
            },
            "SExpr_w_name": "(JOIN (R internet.website.launched) (JOIN (R internet.website_owner.websites_owned) Midnight Raver LLC))",
            "SExpr": "(JOIN (R internet.website.launched) (JOIN (R internet.website_owner.websites_owned) g.11bc1ggfg3))"
        }
    },
    "549": {
        "generations": "What genre of music is the song \"Comin' Back\" and who composed it?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zxsbhr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zxsbhr ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0zxsbhr",
            "mid2name": {
                "ns:m.0zxsbhr": "Comin\u2019 Back"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) Comin\u2019 Back))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) m.0zxsbhr))"
        }
    },
    "550": {
        "generations": "who wrote the book and composed the music for the song \"Just Like Starting Over\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04nfdz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04nfdz ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04nfdz",
            "mid2name": {
                "ns:m.04nfdz": "(Just Like) Starting Over"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) (Just Like) Starting Over))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.04nfdz))"
        }
    },
    "551": {
        "generations": "What periodical does Investor's Business Daily publish?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0100td04)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0100td04 ns:book.periodical_publisher.periodicals_published ?y .\n?y ns:book.periodical_publisher_period.periodical ?x .\n}\n",
            "TopicEntityMid": "m.0100td04",
            "mid2name": {
                "ns:m.0100td04": "Investor's Business Daily"
            },
            "SExpr_w_name": "(JOIN (R book.periodical_publisher_period.periodical) (JOIN (R book.periodical_publisher.periodicals_published) Investor's Business Daily))",
            "SExpr": "(JOIN (R book.periodical_publisher_period.periodical) (JOIN (R book.periodical_publisher.periodicals_published) m.0100td04))"
        }
    },
    "552": {
        "generations": "How do you pronounce the word \"demon\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029m8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029m8 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.029m8",
            "mid2name": {
                "ns:m.029m8": "Demon"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Demon))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.029m8))"
        }
    },
    "553": {
        "generations": "which fictional universes does Niko appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cpg05_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cpg05_ ns:fictional_universe.fictional_character.has_possessed ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.0cpg05_",
            "mid2name": {
                "ns:m.0cpg05_": "Niko"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_character.has_possessed) Niko))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_character.has_possessed) m.0cpg05_))"
        }
    },
    "554": {
        "generations": "what tv series has anthony rich directed episodes for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.11byb3d8nv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.11byb3d8nv ns:tv.tv_director.episodes_directed ?y .\n?y ns:tv.tv_series_episode.series ?x .\n}\n",
            "TopicEntityMid": "g.11byb3d8nv",
            "mid2name": {
                "ns:g.11byb3d8nv": "Anthony Rich"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_director.episodes_directed) Anthony Rich))",
            "SExpr": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_director.episodes_directed) g.11byb3d8nv))"
        }
    },
    "555": {
        "generations": "how do you pronounce barack obama's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:base.inaugurations.inauguration_speaker.inauguration ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02mjmr",
            "mid2name": {
                "ns:m.02mjmr": "Barack Obama"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) Barack Obama))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) m.02mjmr))"
        }
    },
    "556": {
        "generations": "who wrote about breastfeeding activism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hb2r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hb2r ns:base.activism.activism_issue.activists ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0hb2r",
            "mid2name": {
                "ns:m.0hb2r": "Breastfeeding"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R base.activism.activism_issue.activists) Breastfeeding))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R base.activism.activism_issue.activists) m.0hb2r))"
        }
    },
    "557": {
        "generations": "what music video features the character \"eye\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z3wcrd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z3wcrd ns:music.music_video_character.portrayed_in_music_videos ?y .\n?y ns:music.music_video_performance.music_video ?x .\n}\n",
            "TopicEntityMid": "m.0z3wcrd",
            "mid2name": {
                "ns:m.0z3wcrd": "eye"
            },
            "SExpr_w_name": "(JOIN (R music.music_video_performance.music_video) (JOIN (R music.music_video_character.portrayed_in_music_videos) eye))",
            "SExpr": "(JOIN (R music.music_video_performance.music_video) (JOIN (R music.music_video_character.portrayed_in_music_videos) m.0z3wcrd))"
        }
    },
    "558": {
        "generations": "How do you pronounce the IATA airline designator KE?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h7yv2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h7yv2 ns:aviation.iata_airline_designator.airline ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02h7yv2",
            "mid2name": {
                "ns:m.02h7yv2": "KE"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.iata_airline_designator.airline) KE))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.iata_airline_designator.airline) m.02h7yv2))"
        }
    },
    "559": {
        "generations": "How do you pronounce PlayStation 3 in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.067gh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.067gh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.067gh",
            "mid2name": {
                "ns:m.067gh": "PlayStation 3"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) PlayStation 3))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.067gh))"
        }
    },
    "560": {
        "generations": "How do you pronounce the chemical file format?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057b57)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057b57 ns:computer.file_format_genre.file_formats ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.057b57",
            "mid2name": {
                "ns:m.057b57": "Chemical file format"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.file_format_genre.file_formats) Chemical file format))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.file_format_genre.file_formats) m.057b57))"
        }
    },
    "561": {
        "generations": "how do you pronounce F minor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06kvkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06kvkh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06kvkh",
            "mid2name": {
                "ns:m.06kvkh": "F minor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) F minor))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06kvkh))"
        }
    },
    "562": {
        "generations": "What tracks did Khalil Chahine record?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tk2w7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tk2w7 ns:music.artist.track ?y .\n?y ns:music.recording.tracks ?x .\n}\n",
            "TopicEntityMid": "m.01tk2w7",
            "mid2name": {
                "ns:m.01tk2w7": "Khalil Chahine"
            },
            "SExpr_w_name": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) Khalil Chahine))",
            "SExpr": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) m.01tk2w7))"
        }
    },
    "563": {
        "generations": "what is the latitude of road runner express?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cp1841)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cp1841 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0cp1841",
            "mid2name": {
                "ns:m.0cp1841": "Road Runner Express"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Road Runner Express))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0cp1841))"
        }
    },
    "564": {
        "generations": "how do you pronounce arthur whitney's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05y84y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05y84y ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05y84y",
            "mid2name": {
                "ns:m.05y84y": "Arthur Whitney"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Arthur Whitney))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.05y84y))"
        }
    },
    "565": {
        "generations": "How do you pronounce \"Lyric poetry\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l3kg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l3kg ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0l3kg",
            "mid2name": {
                "ns:m.0l3kg": "Lyric poetry"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Lyric poetry))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0l3kg))"
        }
    },
    "566": {
        "generations": "What amusement park is located in Liberty Square?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06908b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06908b ns:amusement_parks.amusement_park_area.parks ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.06908b",
            "mid2name": {
                "ns:m.06908b": "Liberty Square"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R amusement_parks.amusement_park_area.parks) Liberty Square))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R amusement_parks.amusement_park_area.parks) m.06908b))"
        }
    },
    "567": {
        "generations": "What is the broader group of R7 cell fate commitment in biology gene ontology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l3ln1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l3ln1 ns:biology.gene_ontology_group.aggregate_group ?y .\n?y ns:biology.gene_ontology_group.broader_group ?x .\n}\n",
            "TopicEntityMid": "m.02l3ln1",
            "mid2name": {
                "ns:m.02l3ln1": "R7 cell fate commitment"
            },
            "SExpr_w_name": "(JOIN (R biology.gene_ontology_group.broader_group) (JOIN (R biology.gene_ontology_group.aggregate_group) R7 cell fate commitment))",
            "SExpr": "(JOIN (R biology.gene_ontology_group.broader_group) (JOIN (R biology.gene_ontology_group.aggregate_group) m.02l3ln1))"
        }
    },
    "568": {
        "generations": "What chromosome band is the Heat shock protein 90kDa alpha (cytosolic), member A1 gene located on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ct2rq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ct2rq ns:biology.gene.chromosome ?y .\n?y ns:biology.chromosome.band ?x .\n}\n",
            "TopicEntityMid": "m.03ct2rq",
            "mid2name": {
                "ns:m.03ct2rq": "Heat shock protein 90kDa alpha (cytosolic), member A1"
            },
            "SExpr_w_name": "(JOIN (R biology.chromosome.band) (JOIN (R biology.gene.chromosome) Heat shock protein 90kDa alpha (cytosolic), member A1))",
            "SExpr": "(JOIN (R biology.chromosome.band) (JOIN (R biology.gene.chromosome) m.03ct2rq))"
        }
    },
    "569": {
        "generations": "who owns the brand for holiday ball barbie?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05hplyv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05hplyv ns:business.consumer_product.brand ?y .\n?y ns:business.brand.owner_s ?x .\n}\n",
            "TopicEntityMid": "m.05hplyv",
            "mid2name": {
                "ns:m.05hplyv": "Holiday Ball Barbie"
            },
            "SExpr_w_name": "(JOIN (R business.brand.owner_s) (JOIN (R business.consumer_product.brand) Holiday Ball Barbie))",
            "SExpr": "(JOIN (R business.brand.owner_s) (JOIN (R business.consumer_product.brand) m.05hplyv))"
        }
    },
    "570": {
        "generations": "What farms are located in the basin of El Dorado Lake?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q3n90)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q3n90 ns:geography.lake.basin_countries ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.02q3n90",
            "mid2name": {
                "ns:m.02q3n90": "El Dorado Lake"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R geography.lake.basin_countries) El Dorado Lake))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R geography.lake.basin_countries) m.02q3n90))"
        }
    },
    "571": {
        "generations": "What models are in the sixth generation of the Pontiac Grand Prix?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hdqrd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hdqrd ns:automotive.generation.models ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.04hdqrd",
            "mid2name": {
                "ns:m.04hdqrd": "Sixth Generation Pontiac Grand Prix"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) Sixth Generation Pontiac Grand Prix))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) m.04hdqrd))"
        }
    },
    "572": {
        "generations": "which company produces the Fujifilm FinePix A610 camera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q2l2c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q2l2c ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03q2l2c",
            "mid2name": {
                "ns:m.03q2l2c": "Fujifilm FinePix A610"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Fujifilm FinePix A610))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03q2l2c))"
        }
    },
    "573": {
        "generations": "What industry is Zenit involved in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033xpj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033xpj ns:spaceflight.rocket.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.033xpj",
            "mid2name": {
                "ns:m.033xpj": "Zenit"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R spaceflight.rocket.manufacturer) Zenit))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R spaceflight.rocket.manufacturer) m.033xpj))"
        }
    },
    "574": {
        "generations": "What is located within Brighton Ski Resort?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09mtpb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09mtpb ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.09mtpb",
            "mid2name": {
                "ns:m.09mtpb": "Brighton Ski Resort"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Brighton Ski Resort))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.09mtpb))"
        }
    },
    "575": {
        "generations": "who is the series editor of the Easy Series 24 Pack (Regular) book edition series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b1nd5m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b1nd5m ns:book.book_edition_series.part_of_series ?y .\n?y ns:book.book_edition_series.series_editor ?x .\n}\n",
            "TopicEntityMid": "m.0b1nd5m",
            "mid2name": {
                "ns:m.0b1nd5m": "Easy Series 24 Pack (Regular)"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition_series.series_editor) (JOIN (R book.book_edition_series.part_of_series) Easy Series 24 Pack (Regular)))",
            "SExpr": "(JOIN (R book.book_edition_series.series_editor) (JOIN (R book.book_edition_series.part_of_series) m.0b1nd5m))"
        }
    },
    "576": {
        "generations": "who is the current leader of the opposition?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vxdgml)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vxdgml ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n}\n",
            "TopicEntityMid": "m.0vxdgml",
            "mid2name": {
                "ns:m.0vxdgml": "Leader of the Opposition"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) Leader of the Opposition))",
            "SExpr": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) m.0vxdgml))"
        }
    },
    "577": {
        "generations": "Where is Blizzard T. Husky's school located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09p8d_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09p8d_ ns:education.school_mascot.school ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.09p8d_",
            "mid2name": {
                "ns:m.09p8d_": "Blizzard T. Husky"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.school_mascot.school) Blizzard T. Husky))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.school_mascot.school) m.09p8d_))"
        }
    },
    "578": {
        "generations": "What industry is the Green Lantern Corps: Recharge comic book series published in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08c_g8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08c_g8 ns:comic_books.comic_book_series.publisher ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.08c_g8",
            "mid2name": {
                "ns:m.08c_g8": "Green Lantern Corps: Recharge"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R comic_books.comic_book_series.publisher) Green Lantern Corps: Recharge))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R comic_books.comic_book_series.publisher) m.08c_g8))"
        }
    },
    "579": {
        "generations": "which opera did zhang jigang direct?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027jdk4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027jdk4 ns:opera.opera_director.operas_directed ?y .\n?y ns:opera.opera_production.opera ?x .\n}\n",
            "TopicEntityMid": "m.027jdk4",
            "mid2name": {
                "ns:m.027jdk4": "Zhang Jigang"
            },
            "SExpr_w_name": "(JOIN (R opera.opera_production.opera) (JOIN (R opera.opera_director.operas_directed) Zhang Jigang))",
            "SExpr": "(JOIN (R opera.opera_production.opera) (JOIN (R opera.opera_director.operas_directed) m.027jdk4))"
        }
    },
    "580": {
        "generations": "what books did joan rydon write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c46l73)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c46l73 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.0c46l73",
            "mid2name": {
                "ns:m.0c46l73": "Joan Rydon"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Joan Rydon))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.0c46l73))"
        }
    },
    "581": {
        "generations": "How do you pronounce the setting \"Mostly I'm Silent\" in the work of fiction?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b9rwq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b9rwq ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05b9rwq",
            "mid2name": {
                "ns:m.05b9rwq": "Mostly I'm Silent"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.work_of_fiction.setting) Mostly I'm Silent))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.work_of_fiction.setting) m.05b9rwq))"
        }
    },
    "582": {
        "generations": "who is on the committee for Solazyme?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n7fm9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n7fm9 ns:organization.organization.committees ?y .\n?y ns:organization.organization_committee.members ?x .\n}\n",
            "TopicEntityMid": "m.04n7fm9",
            "mid2name": {
                "ns:m.04n7fm9": "Solazyme"
            },
            "SExpr_w_name": "(JOIN (R organization.organization_committee.members) (JOIN (R organization.organization.committees) Solazyme))",
            "SExpr": "(JOIN (R organization.organization_committee.members) (JOIN (R organization.organization.committees) m.04n7fm9))"
        }
    },
    "583": {
        "generations": "When was men's volleyball a demonstration event in the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04fk282)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04fk282 ns:olympics.olympic_event.contested_as_demonstration_event ?y .\n?y ns:time.event.includes_event ?x .\n}\n",
            "TopicEntityMid": "m.04fk282",
            "mid2name": {
                "ns:m.04fk282": "Men's Volleyball"
            },
            "SExpr_w_name": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_event.contested_as_demonstration_event) Men's Volleyball))",
            "SExpr": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_event.contested_as_demonstration_event) m.04fk282))"
        }
    },
    "584": {
        "generations": "what is the gender of matt gonzalez, who ran for vice-president in 2008?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045b01m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045b01m ns:government.election_campaign.candidate ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.045b01m",
            "mid2name": {
                "ns:m.045b01m": "Matt Gonzalez vice-presidential campaign, 2008"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R government.election_campaign.candidate) Matt Gonzalez vice-presidential campaign, 2008))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R government.election_campaign.candidate) m.045b01m))"
        }
    },
    "585": {
        "generations": "How do you pronounce the word \"Eloquence\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0283d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0283d4 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0283d4",
            "mid2name": {
                "ns:m.0283d4": "Eloquence"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Eloquence))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0283d4))"
        }
    },
    "586": {
        "generations": "which TV series featured the song \"These Boots Are Made for Walkin'\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0531b_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0531b_ ns:base.songsfromtv.song_performance.heard_in_tv_episode ?y .\n?y ns:tv.tv_series_episode.series ?x .\n}\n",
            "TopicEntityMid": "m.0531b_",
            "mid2name": {
                "ns:m.0531b_": "These Boots Are Made for Walkin'"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.series) (JOIN (R base.songsfromtv.song_performance.heard_in_tv_episode) These Boots Are Made for Walkin'))",
            "SExpr": "(JOIN (R tv.tv_series_episode.series) (JOIN (R base.songsfromtv.song_performance.heard_in_tv_episode) m.0531b_))"
        }
    },
    "587": {
        "generations": "What is the plural form of the word \"pianist\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vyk ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.gender ?x .\n}\n",
            "TopicEntityMid": "m.05vyk",
            "mid2name": {
                "ns:m.05vyk": "Pianist"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) Pianist))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) m.05vyk))"
        }
    },
    "588": {
        "generations": "who was the costume designer for transformers: revenge of the fallen?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047csmy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047csmy ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.047csmy",
            "mid2name": {
                "ns:m.047csmy": "Transformers: Revenge of the Fallen"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Transformers: Revenge of the Fallen))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.047csmy))"
        }
    },
    "589": {
        "generations": "who is the author of lena str\u00f6mb\u00e4ck's book?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kf_40)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kf_40 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.04kf_40",
            "mid2name": {
                "ns:m.04kf_40": "Lena Str\u00f6mb\u00e4ck"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Lena Str\u00f6mb\u00e4ck))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.04kf_40))"
        }
    },
    "590": {
        "generations": "What internet videos feature performances of pop music?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064t9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064t9 ns:base.webvideo.internet_video_genre.internet_video ?y .\n?y ns:base.webvideo.internet_video.performances ?x .\n}\n",
            "TopicEntityMid": "m.064t9",
            "mid2name": {
                "ns:m.064t9": "Pop music"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R base.webvideo.internet_video_genre.internet_video) Pop music))",
            "SExpr": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R base.webvideo.internet_video_genre.internet_video) m.064t9))"
        }
    },
    "591": {
        "generations": "where was coffeehouse founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z1bzt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z1bzt ns:business.industry.companies ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.01z1bzt",
            "mid2name": {
                "ns:m.01z1bzt": "Coffeehouse"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) Coffeehouse))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) m.01z1bzt))"
        }
    },
    "592": {
        "generations": "What computers use the MOS Technology 8502 processor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ltfz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ltfz ns:computer.computer_processor.processor_family ?y .\n?y ns:computer.computer_processor.used_in_computers ?x .\n}\n",
            "TopicEntityMid": "m.03ltfz",
            "mid2name": {
                "ns:m.03ltfz": "MOS Technology 8502"
            },
            "SExpr_w_name": "(JOIN (R computer.computer_processor.used_in_computers) (JOIN (R computer.computer_processor.processor_family) MOS Technology 8502))",
            "SExpr": "(JOIN (R computer.computer_processor.used_in_computers) (JOIN (R computer.computer_processor.processor_family) m.03ltfz))"
        }
    },
    "593": {
        "generations": "who designed the costumes for the movie Swiss Family Robinson?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03dhpv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03dhpv ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.03dhpv",
            "mid2name": {
                "ns:m.03dhpv": "Swiss Family Robinson"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Swiss Family Robinson))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.03dhpv))"
        }
    },
    "594": {
        "generations": "what was the currency of the net worth of theodore j. forstmann?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s_c9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s_c9 ns:celebrities.celebrity.net_worth ?y .\n?y ns:measurement_unit.dated_money_value.currency ?x .\n}\n",
            "TopicEntityMid": "m.03s_c9",
            "mid2name": {
                "ns:m.03s_c9": "Theodore J. Forstmann"
            },
            "SExpr_w_name": "(JOIN (R measurement_unit.dated_money_value.currency) (JOIN (R celebrities.celebrity.net_worth) Theodore J. Forstmann))",
            "SExpr": "(JOIN (R measurement_unit.dated_money_value.currency) (JOIN (R celebrities.celebrity.net_worth) m.03s_c9))"
        }
    },
    "595": {
        "generations": "who created dream-forged iron and bronze in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cb9nbr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cb9nbr ns:fictional_universe.fictional_substance.fictional_object ?y .\n?y ns:fictional_universe.fictional_object.created_by ?x .\n}\n",
            "TopicEntityMid": "m.0cb9nbr",
            "mid2name": {
                "ns:m.0cb9nbr": "Dream-forged iron and bronze"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_object.created_by) (JOIN (R fictional_universe.fictional_substance.fictional_object) Dream-forged iron and bronze))",
            "SExpr": "(JOIN (R fictional_universe.fictional_object.created_by) (JOIN (R fictional_universe.fictional_substance.fictional_object) m.0cb9nbr))"
        }
    },
    "596": {
        "generations": "who wrote the summary and analysis of the u.s. government bat banding program?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059mb4q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059mb4q ns:book.written_work.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.059mb4q",
            "mid2name": {
                "ns:m.059mb4q": "Summary and Analysis of the U.S. Government Bat Banding Program"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) Summary and Analysis of the U.S. Government Bat Banding Program))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) m.059mb4q))"
        }
    },
    "597": {
        "generations": "who wrote the book \"Shrine\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cwf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cwf_ ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.02cwf_",
            "mid2name": {
                "ns:m.02cwf_": "Shrine"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Shrine))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.02cwf_))"
        }
    },
    "598": {
        "generations": "how do you pronounce UWH criteria i?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_g3nx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_g3nx ns:protected_sites.site_listing_category.category_of ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05_g3nx",
            "mid2name": {
                "ns:m.05_g3nx": "UWH criteria i"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R protected_sites.site_listing_category.category_of) UWH criteria i))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R protected_sites.site_listing_category.category_of) m.05_g3nx))"
        }
    },
    "599": {
        "generations": "which clubs are interested in the comic book series Longshot?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rgsf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rgsf_ ns:comic_books.comic_book_series.publisher ?y .\n?y ns:organization.club_interest.clubs ?x .\n}\n",
            "TopicEntityMid": "m.09rgsf_",
            "mid2name": {
                "ns:m.09rgsf_": "Longshot"
            },
            "SExpr_w_name": "(JOIN (R organization.club_interest.clubs) (JOIN (R comic_books.comic_book_series.publisher) Longshot))",
            "SExpr": "(JOIN (R organization.club_interest.clubs) (JOIN (R comic_books.comic_book_series.publisher) m.09rgsf_))"
        }
    },
    "600": {
        "generations": "What disease is being treated in stage 2 of the BV therapeutic medical trial?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tyczg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tyczg ns:medicine.medical_trial.treatment_being_tested ?y .\n?y ns:base.bioventurist.bv_therapeutic.indication_or_disease ?x .\n}\n",
            "TopicEntityMid": "m.05tyczg",
            "mid2name": {
                "ns:m.05tyczg": "stage 2"
            },
            "SExpr_w_name": "(JOIN (R base.bioventurist.bv_therapeutic.indication_or_disease) (JOIN (R medicine.medical_trial.treatment_being_tested) stage 2))",
            "SExpr": "(JOIN (R base.bioventurist.bv_therapeutic.indication_or_disease) (JOIN (R medicine.medical_trial.treatment_being_tested) m.05tyczg))"
        }
    },
    "601": {
        "generations": "Which military unit is associated with the Thieves' World fictional shared universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b_tw43)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b_tw43 ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:military.military_unit.servicemembers ?x .\n}\n",
            "TopicEntityMid": "m.0b_tw43",
            "mid2name": {
                "ns:m.0b_tw43": "Thieves' World fictional shared universe"
            },
            "SExpr_w_name": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) Thieves' World fictional shared universe))",
            "SExpr": "(JOIN (R military.military_unit.servicemembers) (JOIN (R fictional_universe.fictional_universe.organizations) m.0b_tw43))"
        }
    },
    "602": {
        "generations": "how do you pronounce Haibei Tibetan Autonomous Prefecture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09jcw8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09jcw8 ns:location.cn_autonomous_prefecture.designated_minority ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.09jcw8",
            "mid2name": {
                "ns:m.09jcw8": "Haibei Tibetan Autonomous Prefecture"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.cn_autonomous_prefecture.designated_minority) Haibei Tibetan Autonomous Prefecture))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.cn_autonomous_prefecture.designated_minority) m.09jcw8))"
        }
    },
    "603": {
        "generations": "what category does universal uclick's website belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwlfq2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwlfq2 ns:internet.website_owner.websites_owned ?y .\n?y ns:internet.website.category ?x .\n}\n",
            "TopicEntityMid": "m.0bwlfq2",
            "mid2name": {
                "ns:m.0bwlfq2": "Universal Uclick"
            },
            "SExpr_w_name": "(JOIN (R internet.website.category) (JOIN (R internet.website_owner.websites_owned) Universal Uclick))",
            "SExpr": "(JOIN (R internet.website.category) (JOIN (R internet.website_owner.websites_owned) m.0bwlfq2))"
        }
    },
    "604": {
        "generations": "What objects are in the category of Epsilon Bo\u00f6tis in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058ld_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058ld_ ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.058ld_",
            "mid2name": {
                "ns:m.058ld_": "Epsilon Bo\u00f6tis"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) Epsilon Bo\u00f6tis))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) m.058ld_))"
        }
    },
    "605": {
        "generations": "What was the jurisdiction of the 3rd Parliament of Upper Canada?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08rypw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08rypw ns:government.legislative_session.legislature ?y .\n?y ns:government.governmental_body.jurisdiction ?x .\n}\n",
            "TopicEntityMid": "m.08rypw",
            "mid2name": {
                "ns:m.08rypw": "3rd Parliament of Upper Canada"
            },
            "SExpr_w_name": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.legislative_session.legislature) 3rd Parliament of Upper Canada))",
            "SExpr": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.legislative_session.legislature) m.08rypw))"
        }
    },
    "606": {
        "generations": "What programming language influenced newLISP and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069gh5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069gh5 ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.069gh5",
            "mid2name": {
                "ns:m.069gh5": "newLISP"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) newLISP))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.069gh5))"
        }
    },
    "607": {
        "generations": "What is contained within the Raton-Clayton volcanic field?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r102g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r102g ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.02r102g",
            "mid2name": {
                "ns:m.02r102g": "Raton-Clayton volcanic field"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Raton-Clayton volcanic field))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.02r102g))"
        }
    },
    "608": {
        "generations": "What is the locus of chromosome 8 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgjd ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgjd",
            "mid2name": {
                "ns:m.02kwgjd": "Chromosome 8 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 8 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgjd))"
        }
    },
    "609": {
        "generations": "what award was john p. hampton nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c7ffh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c7ffh ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.05c7ffh",
            "mid2name": {
                "ns:m.05c7ffh": "John P. Hampton"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) John P. Hampton))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.05c7ffh))"
        }
    },
    "610": {
        "generations": "What is Joydick equivalent to in terms of computer peripherals?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gppxw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gppxw ns:computer.computer_peripheral.peripheral_class ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.05gppxw",
            "mid2name": {
                "ns:m.05gppxw": "Joydick"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R computer.computer_peripheral.peripheral_class) Joydick))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R computer.computer_peripheral.peripheral_class) m.05gppxw))"
        }
    },
    "611": {
        "generations": "Which family rose to prominence after the House of Habsburg?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03lht)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03lht ns:royalty.royal_line.preceded_by ?y .\n?y ns:people.family.rise_to_prominence ?x .\n}\n",
            "TopicEntityMid": "m.03lht",
            "mid2name": {
                "ns:m.03lht": "House of Habsburg"
            },
            "SExpr_w_name": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) House of Habsburg))",
            "SExpr": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) m.03lht))"
        }
    },
    "612": {
        "generations": "how do you pronounce Kubuntu 5.10?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.050yvn4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.050yvn4 ns:computer.operating_system.parent_os ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.050yvn4",
            "mid2name": {
                "ns:m.050yvn4": "Kubuntu 5.10"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.operating_system.parent_os) Kubuntu 5.10))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.operating_system.parent_os) m.050yvn4))"
        }
    },
    "613": {
        "generations": "who wrote the book \"The Mother's Recompense\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069fyzd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069fyzd ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.069fyzd",
            "mid2name": {
                "ns:m.069fyzd": "The mother's recompense"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The mother's recompense))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.069fyzd))"
        }
    },
    "614": {
        "generations": "where was bourbon whiskey founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c59y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c59y ns:organization.club_interest.clubs ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.0c59y",
            "mid2name": {
                "ns:m.0c59y": "Bourbon whiskey"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R organization.club_interest.clubs) Bourbon whiskey))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R organization.club_interest.clubs) m.0c59y))"
        }
    },
    "615": {
        "generations": "how do you pronounce light middleweight in boxing?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.078gly)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.078gly ns:sports.boxing_weight_division.matches ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.078gly",
            "mid2name": {
                "ns:m.078gly": "Light middleweight"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R sports.boxing_weight_division.matches) Light middleweight))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R sports.boxing_weight_division.matches) m.078gly))"
        }
    },
    "616": {
        "generations": "What newspapers cover the topic of news?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05jhg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05jhg ns:user.techgnostic.default_domain.magazine_topic.periodical ?y .\n?y ns:user.techgnostic.default_domain.newspaper.market_areas ?x .\n}\n",
            "TopicEntityMid": "m.05jhg",
            "mid2name": {
                "ns:m.05jhg": "News"
            },
            "SExpr_w_name": "(JOIN (R user.techgnostic.default_domain.newspaper.market_areas) (JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) News))",
            "SExpr": "(JOIN (R user.techgnostic.default_domain.newspaper.market_areas) (JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) m.05jhg))"
        }
    },
    "617": {
        "generations": "who holds the academic post of resident in preventive medicine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j7q499)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j7q499 ns:education.academic_post_title.people_with_this_title ?y .\n?y ns:education.academic_post.institution ?x .\n}\n",
            "TopicEntityMid": "m.0j7q499",
            "mid2name": {
                "ns:m.0j7q499": "Resident in Preventive Medicine"
            },
            "SExpr_w_name": "(JOIN (R education.academic_post.institution) (JOIN (R education.academic_post_title.people_with_this_title) Resident in Preventive Medicine))",
            "SExpr": "(JOIN (R education.academic_post.institution) (JOIN (R education.academic_post_title.people_with_this_title) m.0j7q499))"
        }
    },
    "618": {
        "generations": "who is the coach of the Arkansas-Pine Bluff Golden Lions football team?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gjd0vp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gjd0vp ns:sports.sports_team.coaches ?y .\n?y ns:sports.sports_team_coach_tenure.coach ?x .\n}\n",
            "TopicEntityMid": "m.0gjd0vp",
            "mid2name": {
                "ns:m.0gjd0vp": "Arkansas\u2013Pine Bluff Golden Lions football"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team_coach_tenure.coach) (JOIN (R sports.sports_team.coaches) Arkansas\u2013Pine Bluff Golden Lions football))",
            "SExpr": "(JOIN (R sports.sports_team_coach_tenure.coach) (JOIN (R sports.sports_team.coaches) m.0gjd0vp))"
        }
    },
    "619": {
        "generations": "What awards were Lisa Hanawalt's works nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_yxpr7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_yxpr7 ns:book.author.works_written ?y .\n?y ns:award.award_nominated_work.award_nominations ?x .\n}\n",
            "TopicEntityMid": "m.0_yxpr7",
            "mid2name": {
                "ns:m.0_yxpr7": "Lisa Hanawalt"
            },
            "SExpr_w_name": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R book.author.works_written) Lisa Hanawalt))",
            "SExpr": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R book.author.works_written) m.0_yxpr7))"
        }
    },
    "620": {
        "generations": "what language is the magazine Dom in svet written in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05m_6jr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05m_6jr ns:book.periodical.language ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.05m_6jr",
            "mid2name": {
                "ns:m.05m_6jr": "Dom in svet"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R book.periodical.language) Dom in svet))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R book.periodical.language) m.05m_6jr))"
        }
    },
    "621": {
        "generations": "How do you pronounce Neanderthal?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cbc6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cbc6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0cbc6",
            "mid2name": {
                "ns:m.0cbc6": "Neanderthal"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Neanderthal))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0cbc6))"
        }
    },
    "622": {
        "generations": "How do you pronounce the word \"Lieutenant\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015czt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015czt ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.015czt",
            "mid2name": {
                "ns:m.015czt": "Lieutenant"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Lieutenant))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.015czt))"
        }
    },
    "623": {
        "generations": "What genre of music is the artist of the song \"Once Upon a Time\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vl51z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vl51z ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0vl51z",
            "mid2name": {
                "ns:m.0vl51z": "Once Upon a Time"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Once Upon a Time))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0vl51z))"
        }
    },
    "624": {
        "generations": "What is the yomigana for the syllabary in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06nk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06nk7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06nk7",
            "mid2name": {
                "ns:m.06nk7": "Syllabary"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Syllabary))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06nk7))"
        }
    },
    "625": {
        "generations": "which constellations border Norma?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019d34)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019d34 ns:astronomy.constellation.bordering_constellations_new ?y .\n?y ns:astronomy.constellation_bordering_relationship.constellations ?x .\n}\n",
            "TopicEntityMid": "m.019d34",
            "mid2name": {
                "ns:m.019d34": "Norma"
            },
            "SExpr_w_name": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) Norma))",
            "SExpr": "(JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) m.019d34))"
        }
    },
    "626": {
        "generations": "Who is the artist of the album \"And Gun\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033zrqx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033zrqx ns:music.release.album ?y .\n?y ns:music.album.artist ?x .\n}\n",
            "TopicEntityMid": "m.033zrqx",
            "mid2name": {
                "ns:m.033zrqx": "And Gun"
            },
            "SExpr_w_name": "(JOIN (R music.album.artist) (JOIN (R music.release.album) And Gun))",
            "SExpr": "(JOIN (R music.album.artist) (JOIN (R music.release.album) m.033zrqx))"
        }
    },
    "627": {
        "generations": "What category does the Pollyanna product line belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01147l69)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01147l69 ns:business.product_line.category ?y .\n?y ns:business.product_category.product_lines ?x .\n}\n",
            "TopicEntityMid": "m.01147l69",
            "mid2name": {
                "ns:m.01147l69": "Pollyanna"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) Pollyanna))",
            "SExpr": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) m.01147l69))"
        }
    },
    "628": {
        "generations": "What is the composition of the swords used by the swordsmen in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cnb192)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cnb192 ns:fictional_universe.fictional_object_destroyer.fictional_objects_destroyed ?y .\n?y ns:fictional_universe.fictional_object.composition ?x .\n}\n",
            "TopicEntityMid": "m.0cnb192",
            "mid2name": {
                "ns:m.0cnb192": "swordsmen"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_object_destroyer.fictional_objects_destroyed) swordsmen))",
            "SExpr": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_object_destroyer.fictional_objects_destroyed) m.0cnb192))"
        }
    },
    "629": {
        "generations": "What car model came before the Ford Mondeo?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0115mcz7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0115mcz7 ns:automotive.generation.models ?y .\n?y ns:automotive.model.predecessor ?x .\n}\n",
            "TopicEntityMid": "m.0115mcz7",
            "mid2name": {
                "ns:m.0115mcz7": "Ford Mondeo"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.predecessor) (JOIN (R automotive.generation.models) Ford Mondeo))",
            "SExpr": "(JOIN (R automotive.model.predecessor) (JOIN (R automotive.generation.models) m.0115mcz7))"
        }
    },
    "630": {
        "generations": "How do you pronounce the word \"fraud\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g1jf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g1jf ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0g1jf",
            "mid2name": {
                "ns:m.0g1jf": "Fraud"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Fraud))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0g1jf))"
        }
    },
    "631": {
        "generations": "What industry is the Bell ARH-70 Arapaho aircraft model manufactured for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bqwdc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bqwdc ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.0bqwdc",
            "mid2name": {
                "ns:m.0bqwdc": "Bell ARH-70 Arapaho"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) Bell ARH-70 Arapaho))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.0bqwdc))"
        }
    },
    "632": {
        "generations": "Where is Snake Creek Express ski lift located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kp487)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kp487 ns:skiing.ski_lift.ski_area ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.04kp487",
            "mid2name": {
                "ns:m.04kp487": "Snake Creek Express"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) Snake Creek Express))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) m.04kp487))"
        }
    },
    "633": {
        "generations": "How do you pronounce the word \"cardiology\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01nd8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01nd8 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01nd8",
            "mid2name": {
                "ns:m.01nd8": "Cardiology"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Cardiology))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01nd8))"
        }
    },
    "634": {
        "generations": "What is Memantine used to treat in Systemic Lupus Erythematosus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d2cxf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d2cxf ns:medicine.medical_trial.treatment_being_tested ?y .\n?y ns:medicine.medical_treatment.used_to_treat ?x .\n}\n",
            "TopicEntityMid": "m.04d2cxf",
            "mid2name": {
                "ns:m.04d2cxf": "Memantine in Systemic Lupus Erythematosus"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.medical_trial.treatment_being_tested) Memantine in Systemic Lupus Erythematosus))",
            "SExpr": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.medical_trial.treatment_being_tested) m.04d2cxf))"
        }
    },
    "635": {
        "generations": "Which company produced the ZX Interface 2?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.073hcq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.073hcq ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.073hcq",
            "mid2name": {
                "ns:m.073hcq": "ZX Interface 2"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) ZX Interface 2))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.073hcq))"
        }
    },
    "636": {
        "generations": "what books did barry goldwater write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j6t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j6t ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.01j6t",
            "mid2name": {
                "ns:m.01j6t": "Barry Goldwater"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Barry Goldwater))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.01j6t))"
        }
    },
    "637": {
        "generations": "What historical places of worship are associated with the \u0100gama religious text?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_m24)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_m24 ns:religion.religious_text.religious_text_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.05_m24",
            "mid2name": {
                "ns:m.05_m24": "\u0100gama"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religious_text.religious_text_of) \u0100gama))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religious_text.religious_text_of) m.05_m24))"
        }
    },
    "638": {
        "generations": "How do you pronounce the word \"strike\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rj0b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rj0b ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02rj0b",
            "mid2name": {
                "ns:m.02rj0b": "Strike"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Strike))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02rj0b))"
        }
    },
    "639": {
        "generations": "who created the character Ursula in a fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.092t__)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.092t__ ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.092t__",
            "mid2name": {
                "ns:m.092t__": "Ursula"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R fictional_universe.fictional_character.character_created_by) Ursula))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R fictional_universe.fictional_character.character_created_by) m.092t__))"
        }
    },
    "640": {
        "generations": "Which celebrities have bought music in the Freestyle genre?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xjb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xjb ns:music.genre.artists ?y .\n?y ns:base.popstra.celebrity.bought ?x .\n}\n",
            "TopicEntityMid": "m.02xjb",
            "mid2name": {
                "ns:m.02xjb": "Freestyle music"
            },
            "SExpr_w_name": "(JOIN (R base.popstra.celebrity.bought) (JOIN (R music.genre.artists) Freestyle music))",
            "SExpr": "(JOIN (R base.popstra.celebrity.bought) (JOIN (R music.genre.artists) m.02xjb))"
        }
    },
    "641": {
        "generations": "who won the nobel prize in the subject area of meson?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_rh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_rh ns:base.nobelprizes.nobel_subject_area.nobel_awards ?y .\n?y ns:base.nobelprizes.nobel_honor.nobel_prize_winner ?x .\n}\n",
            "TopicEntityMid": "m.04_rh",
            "mid2name": {
                "ns:m.04_rh": "Meson"
            },
            "SExpr_w_name": "(JOIN (R base.nobelprizes.nobel_honor.nobel_prize_winner) (JOIN (R base.nobelprizes.nobel_subject_area.nobel_awards) Meson))",
            "SExpr": "(JOIN (R base.nobelprizes.nobel_honor.nobel_prize_winner) (JOIN (R base.nobelprizes.nobel_subject_area.nobel_awards) m.04_rh))"
        }
    },
    "642": {
        "generations": "What farms are located near the Edmund A. Walsh School of Foreign Service?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ckl3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ckl3 ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.02ckl3",
            "mid2name": {
                "ns:m.02ckl3": "Edmund A. Walsh School of Foreign Service"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Edmund A. Walsh School of Foreign Service))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.02ckl3))"
        }
    },
    "643": {
        "generations": "How do you pronounce the word \"Textile\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dnr7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dnr7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0dnr7",
            "mid2name": {
                "ns:m.0dnr7": "Textile"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Textile))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0dnr7))"
        }
    },
    "644": {
        "generations": "who designed the costumes for the film Repo Man?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06m2j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06m2j ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.06m2j",
            "mid2name": {
                "ns:m.06m2j": "Repo Man"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Repo Man))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.06m2j))"
        }
    },
    "645": {
        "generations": "How do you pronounce \"Transporter bridge\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01cxh7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01cxh7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01cxh7",
            "mid2name": {
                "ns:m.01cxh7": "Transporter bridge"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Transporter bridge))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01cxh7))"
        }
    },
    "646": {
        "generations": "who wrote the book Urban Acupuncture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0679vth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0679vth ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0679vth",
            "mid2name": {
                "ns:m.0679vth": "Urban Acupuncture"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Urban Acupuncture))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.0679vth))"
        }
    },
    "647": {
        "generations": "What programming language is influenced by BAIL and has dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vshxf6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vshxf6 ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0vshxf6",
            "mid2name": {
                "ns:m.0vshxf6": "BAIL"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) BAIL))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.0vshxf6))"
        }
    },
    "648": {
        "generations": "who manufactured the rocket that launched Genesis I satellite?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ffsxy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ffsxy ns:spaceflight.satellite.launch_vehicle ?y .\n?y ns:spaceflight.rocket.manufacturer ?x .\n}\n",
            "TopicEntityMid": "m.0ffsxy",
            "mid2name": {
                "ns:m.0ffsxy": "Genesis I"
            },
            "SExpr_w_name": "(JOIN (R spaceflight.rocket.manufacturer) (JOIN (R spaceflight.satellite.launch_vehicle) Genesis I))",
            "SExpr": "(JOIN (R spaceflight.rocket.manufacturer) (JOIN (R spaceflight.satellite.launch_vehicle) m.0ffsxy))"
        }
    },
    "649": {
        "generations": "who created the character Sue Dibny in comic books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gzqg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gzqg ns:comic_books.comic_book_character.created_by ?y .\n?y ns:comic_books.comic_book_penciler.comic_books_penciled ?x .\n}\n",
            "TopicEntityMid": "m.04gzqg",
            "mid2name": {
                "ns:m.04gzqg": "Sue Dibny"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) Sue Dibny))",
            "SExpr": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) m.04gzqg))"
        }
    },
    "650": {
        "generations": "What are the active ingredients in the liquid formulation containing Phytolacca decandra, trifolium pratense, xanthoxylum fraxineum, and arsenicum album with a ratio of 12/30/12/30/12/30/12/30/30/12/3/30/3/30/30/30/3/30?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqstjh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqstjh ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:chemistry.chemical_element.atomic_mass ?x .\n}\n",
            "TopicEntityMid": "m.0hqstjh",
            "mid2name": {
                "ns:m.0hqstjh": "Phytolacca decandra, trifolium pratense, xanthoxylum fraxineum, arsenicum album, 12/30/12/30/12/30/12/30/30/12/3/30/3/30/30/30/3/30 liquid"
            },
            "SExpr_w_name": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Phytolacca decandra, trifolium pratense, xanthoxylum fraxineum, arsenicum album, 12/30/12/30/12/30/12/30/30/12/3/30/3/30/30/30/3/30 liquid))",
            "SExpr": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqstjh))"
        }
    },
    "651": {
        "generations": "What chromosome is the locus for human cytogenetic band 7q22.3 on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwnz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwnz1 ns:biology.genomic_locus.annotation ?y .\n?y ns:biology.cytogenetic_band.chromosome ?x .\n}\n",
            "TopicEntityMid": "m.02kwnz1",
            "mid2name": {
                "ns:m.02kwnz1": "Locus for Human Cytogenetic Band 7q22.3"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.chromosome) (JOIN (R biology.genomic_locus.annotation) Locus for Human Cytogenetic Band 7q22.3))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.chromosome) (JOIN (R biology.genomic_locus.annotation) m.02kwnz1))"
        }
    },
    "652": {
        "generations": "How do you pronounce the word \"Photon\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05v_l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05v_l ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05v_l",
            "mid2name": {
                "ns:m.05v_l": "Photon"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Photon))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05v_l))"
        }
    },
    "653": {
        "generations": "What genre of music does OMG compose?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bh9whb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bh9whb ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0bh9whb",
            "mid2name": {
                "ns:m.0bh9whb": "OMG"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) OMG))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) m.0bh9whb))"
        }
    },
    "654": {
        "generations": "who discovered the jupiter trojan asteroid group?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07m61)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07m61 ns:astronomy.asteroid_group.asteroid_group_members ?y .\n?y ns:astronomy.astronomical_discovery.discoverer ?x .\n}\n",
            "TopicEntityMid": "m.07m61",
            "mid2name": {
                "ns:m.07m61": "Jupiter trojan"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.asteroid_group.asteroid_group_members) Jupiter trojan))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.asteroid_group.asteroid_group_members) m.07m61))"
        }
    },
    "655": {
        "generations": "what titles did the ayyubid dynasty hold?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01g4b2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01g4b2 ns:royalty.system_of_nobility.titles ?y .\n?y ns:royalty.system_title_relationship.title ?x .\n}\n",
            "TopicEntityMid": "m.01g4b2",
            "mid2name": {
                "ns:m.01g4b2": "Ayyubid dynasty"
            },
            "SExpr_w_name": "(JOIN (R royalty.system_title_relationship.title) (JOIN (R royalty.system_of_nobility.titles) Ayyubid dynasty))",
            "SExpr": "(JOIN (R royalty.system_title_relationship.title) (JOIN (R royalty.system_of_nobility.titles) m.01g4b2))"
        }
    },
    "656": {
        "generations": "How do you pronounce \"bzip2\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04tl5yl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04tl5yl ns:dataworld.gardening_hint.split_to ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04tl5yl",
            "mid2name": {
                "ns:m.04tl5yl": "bzip2"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R dataworld.gardening_hint.split_to) bzip2))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R dataworld.gardening_hint.split_to) m.04tl5yl))"
        }
    },
    "657": {
        "generations": "What historical places of worship are associated with Buddhism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.092bf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.092bf5 ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.092bf5",
            "mid2name": {
                "ns:m.092bf5": "Buddhism"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Buddhism))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.092bf5))"
        }
    },
    "658": {
        "generations": "What album was released by Projekt: Archive?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dmxv5v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dmxv5v ns:music.record_label.releases ?y .\n?y ns:music.release.album ?x .\n}\n",
            "TopicEntityMid": "m.0dmxv5v",
            "mid2name": {
                "ns:m.0dmxv5v": "Projekt: Archive"
            },
            "SExpr_w_name": "(JOIN (R music.release.album) (JOIN (R music.record_label.releases) Projekt: Archive))",
            "SExpr": "(JOIN (R music.release.album) (JOIN (R music.record_label.releases) m.0dmxv5v))"
        }
    },
    "659": {
        "generations": "What places of worship were used by pagans in history?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tgm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tgm ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.05tgm",
            "mid2name": {
                "ns:m.05tgm": "Paganism"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Paganism))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.05tgm))"
        }
    },
    "660": {
        "generations": "How do you pronounce Hyundai Heavy Industries?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02bgb6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02bgb6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02bgb6",
            "mid2name": {
                "ns:m.02bgb6": "Hyundai Heavy Industries"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Hyundai Heavy Industries))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02bgb6))"
        }
    },
    "661": {
        "generations": "What other events are included in the Men's Judo, Middleweight 78-86 competition at the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07nm95y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07nm95y ns:olympics.olympic_event.competitions ?y .\n?y ns:time.event.included_in_event ?x .\n}\n",
            "TopicEntityMid": "m.07nm95y",
            "mid2name": {
                "ns:m.07nm95y": "Men's Judo, Middleweight 78-86"
            },
            "SExpr_w_name": "(JOIN (R time.event.included_in_event) (JOIN (R olympics.olympic_event.competitions) Men's Judo, Middleweight 78-86))",
            "SExpr": "(JOIN (R time.event.included_in_event) (JOIN (R olympics.olympic_event.competitions) m.07nm95y))"
        }
    },
    "662": {
        "generations": "What songs has Neil Morrissey recorded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pvs8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pvs8 ns:music.artist.track ?y .\n?y ns:music.recording.tracks ?x .\n}\n",
            "TopicEntityMid": "m.02pvs8",
            "mid2name": {
                "ns:m.02pvs8": "Neil Morrissey"
            },
            "SExpr_w_name": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) Neil Morrissey))",
            "SExpr": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) m.02pvs8))"
        }
    },
    "663": {
        "generations": "how do you pronounce CEO?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dq_5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dq_5 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0dq_5",
            "mid2name": {
                "ns:m.0dq_5": "CEO"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) CEO))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0dq_5))"
        }
    },
    "664": {
        "generations": "what is the gender of the judge in the case Estate of Carter v. Commissioner?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06zqfv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06zqfv4 ns:law.legal_case.judges ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.06zqfv4",
            "mid2name": {
                "ns:m.06zqfv4": "Estate of Carter v. Commissioner"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R law.legal_case.judges) Estate of Carter v. Commissioner))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R law.legal_case.judges) m.06zqfv4))"
        }
    },
    "665": {
        "generations": "How do you pronounce words in the Sinhala language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02002f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02002f ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02002f",
            "mid2name": {
                "ns:m.02002f": "Sinhala Language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Sinhala Language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02002f))"
        }
    },
    "666": {
        "generations": "what language did leonardo da vinci write in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.04lg6",
            "mid2name": {
                "ns:m.04lg6": "Leonardo da Vinci"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Leonardo da Vinci))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.04lg6))"
        }
    },
    "667": {
        "generations": "who created the recipe for transcontinental condiment violation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gd6zgm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gd6zgm ns:food.dish.recipes ?y .\n?y ns:food.recipe.author ?x .\n}\n",
            "TopicEntityMid": "m.0gd6zgm",
            "mid2name": {
                "ns:m.0gd6zgm": "Transcontinental Condiment Violation"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.author) (JOIN (R food.dish.recipes) Transcontinental Condiment Violation))",
            "SExpr": "(JOIN (R food.recipe.author) (JOIN (R food.dish.recipes) m.0gd6zgm))"
        }
    },
    "668": {
        "generations": "Which fictional universes feature characters that have lived in India?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rk0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rk0 ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.03rk0",
            "mid2name": {
                "ns:m.03rk0": "India"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) India))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.03rk0))"
        }
    },
    "669": {
        "generations": "What city or town is Bajaritos located in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_1vdv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_1vdv ns:business.business_location.address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.01_1vdv",
            "mid2name": {
                "ns:m.01_1vdv": "Bajaritos"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) Bajaritos))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) m.01_1vdv))"
        }
    },
    "670": {
        "generations": "What language dialect does the Kentish dialect belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03nns3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03nns3v ns:language.language_dialect.language ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.03nns3v",
            "mid2name": {
                "ns:m.03nns3v": "Kentish dialect"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_dialect.language) Kentish dialect))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_dialect.language) m.03nns3v))"
        }
    },
    "671": {
        "generations": "Where is Praia Sancho located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ngkt48)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ngkt48 ns:geography.island_group.islands_in_group ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0ngkt48",
            "mid2name": {
                "ns:m.0ngkt48": "Praia Sancho"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R geography.island_group.islands_in_group) Praia Sancho))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R geography.island_group.islands_in_group) m.0ngkt48))"
        }
    },
    "672": {
        "generations": "On which chromosome is the genomic locus annotation 17 + [38272687,38274759]?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lr0gz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lr0gz ns:biology.genomic_locus.annotation ?y .\n?y ns:biology.gene.chromosome ?x .\n}\n",
            "TopicEntityMid": "m.02lr0gz",
            "mid2name": {
                "ns:m.02lr0gz": "17 + [38272687,38274759]"
            },
            "SExpr_w_name": "(JOIN (R biology.gene.chromosome) (JOIN (R biology.genomic_locus.annotation) 17 + [38272687,38274759]))",
            "SExpr": "(JOIN (R biology.gene.chromosome) (JOIN (R biology.genomic_locus.annotation) m.02lr0gz))"
        }
    },
    "673": {
        "generations": "what format was the album \"\u82b1\u6a23\u5c11\u5e74\u5c11\u5973\" released in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dv5bxb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dv5bxb ns:music.album.primary_release ?y .\n?y ns:music.release.format ?x .\n}\n",
            "TopicEntityMid": "m.0dv5bxb",
            "mid2name": {
                "ns:m.0dv5bxb": "\u82b1\u6a23\u5c11\u5e74\u5c11\u5973"
            },
            "SExpr_w_name": "(JOIN (R music.release.format) (JOIN (R music.album.primary_release) \u82b1\u6a23\u5c11\u5e74\u5c11\u5973))",
            "SExpr": "(JOIN (R music.release.format) (JOIN (R music.album.primary_release) m.0dv5bxb))"
        }
    },
    "674": {
        "generations": "What category does software belong to in the consumer product business?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mf0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mf0 ns:business.product_category.products ?y .\n?y ns:business.consumer_product.category ?x .\n}\n",
            "TopicEntityMid": "m.01mf0",
            "mid2name": {
                "ns:m.01mf0": "Software"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.category) (JOIN (R business.product_category.products) Software))",
            "SExpr": "(JOIN (R business.consumer_product.category) (JOIN (R business.product_category.products) m.01mf0))"
        }
    },
    "675": {
        "generations": "What books has Peter S. Thaulad written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0brb4d7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0brb4d7 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.0brb4d7",
            "mid2name": {
                "ns:m.0brb4d7": "Peter S. Thaulad"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Peter S. Thaulad))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.0brb4d7))"
        }
    },
    "676": {
        "generations": "who is a famous author that was also a swimming coach?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h6nlh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h6nlh ns:people.profession.people_with_this_profession ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02h6nlh",
            "mid2name": {
                "ns:m.02h6nlh": "Swimming coach"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R people.profession.people_with_this_profession) Swimming coach))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R people.profession.people_with_this_profession) m.02h6nlh))"
        }
    },
    "677": {
        "generations": "How do you pronounce \"Court of Cassation\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01g4nb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01g4nb ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01g4nb",
            "mid2name": {
                "ns:m.01g4nb": "Court of Cassation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Court of Cassation))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01g4nb))"
        }
    },
    "678": {
        "generations": "What is the alcohol by volume of spirits produced by Barton Brands distillery?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dlknf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dlknf ns:distilled_spirits.distillery.spirits ?y .\n?y ns:distilled_spirits.distilled_spirit.abv ?x .\n}\n",
            "TopicEntityMid": "m.0dlknf",
            "mid2name": {
                "ns:m.0dlknf": "Barton Brands"
            },
            "SExpr_w_name": "(JOIN (R distilled_spirits.distilled_spirit.abv) (JOIN (R distilled_spirits.distillery.spirits) Barton Brands))",
            "SExpr": "(JOIN (R distilled_spirits.distilled_spirit.abv) (JOIN (R distilled_spirits.distillery.spirits) m.0dlknf))"
        }
    },
    "679": {
        "generations": "What category does Iota Carinae belong to in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057st8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057st8 ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.057st8",
            "mid2name": {
                "ns:m.057st8": "Iota Carinae"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) Iota Carinae))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) m.057st8))"
        }
    },
    "680": {
        "generations": "who is the artist of the album \"Disappointed Cloud\" Anyway?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nqcqmp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nqcqmp ns:music.release.album ?y .\n?y ns:music.album.artist ?x .\n}\n",
            "TopicEntityMid": "m.0nqcqmp",
            "mid2name": {
                "ns:m.0nqcqmp": "(Disappointed Cloud) Anyway"
            },
            "SExpr_w_name": "(JOIN (R music.album.artist) (JOIN (R music.release.album) (Disappointed Cloud) Anyway))",
            "SExpr": "(JOIN (R music.album.artist) (JOIN (R music.release.album) m.0nqcqmp))"
        }
    },
    "681": {
        "generations": "What is the role of aptamers in the human genome?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bsdc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bsdc ns:biology.genome.gene ?y .\n?y ns:base.aptamer.interactor.is_participant_in ?x .\n}\n",
            "TopicEntityMid": "m.0bsdc",
            "mid2name": {
                "ns:m.0bsdc": "Human genome"
            },
            "SExpr_w_name": "(JOIN (R base.aptamer.interactor.is_participant_in) (JOIN (R biology.genome.gene) Human genome))",
            "SExpr": "(JOIN (R base.aptamer.interactor.is_participant_in) (JOIN (R biology.genome.gene) m.0bsdc))"
        }
    },
    "682": {
        "generations": "how do you pronounce ibutilide?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h07s2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h07s2 ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0h07s2",
            "mid2name": {
                "ns:m.0h07s2": "Ibutilide"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Ibutilide))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.0h07s2))"
        }
    },
    "683": {
        "generations": "what is the gender of basketball officials?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r4f56)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r4f56 ns:people.profession.people_with_this_profession ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.02r4f56",
            "mid2name": {
                "ns:m.02r4f56": "Basketball Official"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) Basketball Official))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) m.02r4f56))"
        }
    },
    "684": {
        "generations": "What inventions are associated with the Raggedy Ann patent assignee?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04k9rd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04k9rd ns:law.patent_assignee.patents_assigned ?y .\n?y ns:law.us_patent.associated_inventions ?x .\n}\n",
            "TopicEntityMid": "m.04k9rd",
            "mid2name": {
                "ns:m.04k9rd": "Raggedy Ann"
            },
            "SExpr_w_name": "(JOIN (R law.us_patent.associated_inventions) (JOIN (R law.patent_assignee.patents_assigned) Raggedy Ann))",
            "SExpr": "(JOIN (R law.us_patent.associated_inventions) (JOIN (R law.patent_assignee.patents_assigned) m.04k9rd))"
        }
    },
    "685": {
        "generations": "How do you pronounce \"Virtual machine\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07yf2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07yf2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07yf2",
            "mid2name": {
                "ns:m.07yf2": "Virtual machine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Virtual machine))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07yf2))"
        }
    },
    "686": {
        "generations": "What is the gender breakdown of CNES astronauts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024fy1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024fy1 ns:spaceflight.space_agency.astronauts ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.024fy1",
            "mid2name": {
                "ns:m.024fy1": "CNES"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R spaceflight.space_agency.astronauts) CNES))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R spaceflight.space_agency.astronauts) m.024fy1))"
        }
    },
    "687": {
        "generations": "How do you pronounce the word \"Quartzite\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029zr1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029zr1 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.029zr1",
            "mid2name": {
                "ns:m.029zr1": "Quartzite"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Quartzite))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.029zr1))"
        }
    },
    "688": {
        "generations": "what books did lincoln stein write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vh2_g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vh2_g ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.05vh2_g",
            "mid2name": {
                "ns:m.05vh2_g": "Lincoln Stein"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Lincoln Stein))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05vh2_g))"
        }
    },
    "689": {
        "generations": "Which fictional character has possessed a military branch?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mzj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mzj_ ns:fictional_universe.school_in_fiction.students_graduates ?y .\n?y ns:fictional_universe.fictional_character.has_possessed ?x .\n}\n",
            "TopicEntityMid": "m.0mzj_",
            "mid2name": {
                "ns:m.0mzj_": "Military branch"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.school_in_fiction.students_graduates) Military branch))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.school_in_fiction.students_graduates) m.0mzj_))"
        }
    },
    "690": {
        "generations": "What is the higher classification of the Yellow-gray breed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04p5r4x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04p5r4x ns:biology.breed_coloring.breeds ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.04p5r4x",
            "mid2name": {
                "ns:m.04p5r4x": "Yellow-gray"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_coloring.breeds) Yellow-gray))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_coloring.breeds) m.04p5r4x))"
        }
    },
    "691": {
        "generations": "Who is the manufacturer of the Boeing 737-600?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.049hj89)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.049hj89 ns:aviation.aircraft_model.parent_aircraft_model ?y .\n?y ns:aviation.aircraft_model.manufacturer ?x .\n}\n",
            "TopicEntityMid": "m.049hj89",
            "mid2name": {
                "ns:m.049hj89": "Boeing 737-600"
            },
            "SExpr_w_name": "(JOIN (R aviation.aircraft_model.manufacturer) (JOIN (R aviation.aircraft_model.parent_aircraft_model) Boeing 737-600))",
            "SExpr": "(JOIN (R aviation.aircraft_model.manufacturer) (JOIN (R aviation.aircraft_model.parent_aircraft_model) m.049hj89))"
        }
    },
    "692": {
        "generations": "who wrote the book Engaging The Enemy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g25n5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g25n5 ns:book.written_work.part_of_series ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0g25n5",
            "mid2name": {
                "ns:m.0g25n5": "Engaging The Enemy"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.written_work.part_of_series) Engaging The Enemy))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.written_work.part_of_series) m.0g25n5))"
        }
    },
    "693": {
        "generations": "What is the atomic mass of the active moieties titanium and zinc?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqwkyv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqwkyv ns:medicine.drug.active_moieties ?y .\n?y ns:chemistry.chemical_element.atomic_mass ?x .\n}\n",
            "TopicEntityMid": "m.0hqwkyv",
            "mid2name": {
                "ns:m.0hqwkyv": "Titanium/Zinc"
            },
            "SExpr_w_name": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug.active_moieties) Titanium/Zinc))",
            "SExpr": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug.active_moieties) m.0hqwkyv))"
        }
    },
    "694": {
        "generations": "who wrote the book Uncle Vanya?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y7zqgv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y7zqgv ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0y7zqgv",
            "mid2name": {
                "ns:m.0y7zqgv": "Uncle Vanya"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Uncle Vanya))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0y7zqgv))"
        }
    },
    "695": {
        "generations": "Which asteroid group was discovered by Kitt Peak National Observatory?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04djz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04djz ns:astronomy.astronomical_observatory.discoveries ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.04djz",
            "mid2name": {
                "ns:m.04djz": "Kitt Peak National Observatory"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) Kitt Peak National Observatory))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) m.04djz))"
        }
    },
    "696": {
        "generations": "what is the gender of the fictional character based on samuel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y50btf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y50btf ns:fictional_universe.fictional_character.based_on ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0y50btf",
            "mid2name": {
                "ns:m.0y50btf": "Samuel"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R fictional_universe.fictional_character.based_on) Samuel))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R fictional_universe.fictional_character.based_on) m.0y50btf))"
        }
    },
    "697": {
        "generations": "who owns the brand G.I. Joe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gm69)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gm69 ns:business.brand.owner_s ?y .\n?y ns:business.company_brand_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.01gm69",
            "mid2name": {
                "ns:m.01gm69": "G.I. Joe"
            },
            "SExpr_w_name": "(JOIN (R business.company_brand_relationship.company) (JOIN (R business.brand.owner_s) G.I. Joe))",
            "SExpr": "(JOIN (R business.company_brand_relationship.company) (JOIN (R business.brand.owner_s) m.01gm69))"
        }
    },
    "698": {
        "generations": "How do you pronounce \"Antimalarial medication\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019j6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019j6f ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.019j6f",
            "mid2name": {
                "ns:m.019j6f": "Antimalarial medication"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Antimalarial medication))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.019j6f))"
        }
    },
    "699": {
        "generations": "Which company produces the 2005 Roessler \"Widdoes Vineyard\" Green Valley of Russian River Valley Pinot Noir?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04cc7hh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04cc7hh ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.04cc7hh",
            "mid2name": {
                "ns:m.04cc7hh": "2005 Roessler \"Widdoes Vineyard\" Green Valley of Russian River Valley Pinot Noir"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2005 Roessler \"Widdoes Vineyard\" Green Valley of Russian River Valley Pinot Noir))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.04cc7hh))"
        }
    },
    "700": {
        "generations": "what language class does edgar de wahl's created language belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_j33)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_j33 ns:language.language_creator.languages_created ?y .\n?y ns:base.rosetta.languoid.languoid_class ?x .\n}\n",
            "TopicEntityMid": "m.03_j33",
            "mid2name": {
                "ns:m.03_j33": "Edgar de Wahl"
            },
            "SExpr_w_name": "(JOIN (R base.rosetta.languoid.languoid_class) (JOIN (R language.language_creator.languages_created) Edgar de Wahl))",
            "SExpr": "(JOIN (R base.rosetta.languoid.languoid_class) (JOIN (R language.language_creator.languages_created) m.03_j33))"
        }
    },
    "701": {
        "generations": "where was ceramic founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01x5q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01x5q ns:business.industry.companies ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.01x5q",
            "mid2name": {
                "ns:m.01x5q": "Ceramic"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) Ceramic))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) m.01x5q))"
        }
    },
    "702": {
        "generations": "which characters have lived in the fictional setting possessed by Tempus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxj80p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxj80p ns:fictional_universe.fictional_character.has_possessed ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.0bxj80p",
            "mid2name": {
                "ns:m.0bxj80p": "Tempus"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.fictional_character.has_possessed) Tempus))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.fictional_character.has_possessed) m.0bxj80p))"
        }
    },
    "703": {
        "generations": "what language did robert l. snow write in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05ydwc5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05ydwc5 ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.05ydwc5",
            "mid2name": {
                "ns:m.05ydwc5": "Robert L. Snow"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Robert L. Snow))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.05ydwc5))"
        }
    },
    "704": {
        "generations": "What species appears in the fictional universe of Tug Mug?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04nrppr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04nrppr ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.species ?x .\n}\n",
            "TopicEntityMid": "m.04nrppr",
            "mid2name": {
                "ns:m.04nrppr": "Tug Mug"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Tug Mug))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.04nrppr))"
        }
    },
    "705": {
        "generations": "how do you pronounce bartitsu?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06jm_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06jm_r ns:martial_arts.martial_art.category ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.06jm_r",
            "mid2name": {
                "ns:m.06jm_r": "Bartitsu"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R martial_arts.martial_art.category) Bartitsu))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R martial_arts.martial_art.category) m.06jm_r))"
        }
    },
    "706": {
        "generations": "which computer games are distributed by x86?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.087hd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.087hd ns:computer.computer_processor.manufacturers ?y .\n?y ns:cvg.computer_game_distribution_system.games_distributed ?x .\n}\n",
            "TopicEntityMid": "m.087hd",
            "mid2name": {
                "ns:m.087hd": "x86"
            },
            "SExpr_w_name": "(JOIN (R cvg.computer_game_distribution_system.games_distributed) (JOIN (R computer.computer_processor.manufacturers) x86))",
            "SExpr": "(JOIN (R cvg.computer_game_distribution_system.games_distributed) (JOIN (R computer.computer_processor.manufacturers) m.087hd))"
        }
    },
    "707": {
        "generations": "what award was The Dining Room nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0w_v9z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0w_v9z6 ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0w_v9z6",
            "mid2name": {
                "ns:m.0w_v9z6": "The Dining Room"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) The Dining Room))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0w_v9z6))"
        }
    },
    "708": {
        "generations": "What are the dialects of the Balto-Slavic languages?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03jx39)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03jx39 ns:language.language_family.languages ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.03jx39",
            "mid2name": {
                "ns:m.03jx39": "Balto-Slavic languages"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) Balto-Slavic languages))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) m.03jx39))"
        }
    },
    "709": {
        "generations": "What is the locus of Chromosome 3 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgh9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgh9 ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgh9",
            "mid2name": {
                "ns:m.02kwgh9": "Chromosome 3 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 3 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgh9))"
        }
    },
    "710": {
        "generations": "How do you pronounce the word \"Understanding\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fndy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fndy ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01fndy",
            "mid2name": {
                "ns:m.01fndy": "Understanding"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Understanding))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01fndy))"
        }
    },
    "711": {
        "generations": "How do you pronounce the word \"skin\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06z04)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06z04 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06z04",
            "mid2name": {
                "ns:m.06z04": "Skin"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Skin))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06z04))"
        }
    },
    "712": {
        "generations": "How do you pronounce Adobe ImageReady?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04phl5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04phl5 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04phl5",
            "mid2name": {
                "ns:m.04phl5": "Adobe ImageReady"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Adobe ImageReady))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04phl5))"
        }
    },
    "713": {
        "generations": "what is the name of the TV series that has all of its episodes rated?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jqtf6h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jqtf6h ns:tv.tv_rating.tv_episodes ?y .\n?y ns:tv.tv_series_episode.series ?x .\n}\n",
            "TopicEntityMid": "m.0jqtf6h",
            "mid2name": {
                "ns:m.0jqtf6h": "All"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_rating.tv_episodes) All))",
            "SExpr": "(JOIN (R tv.tv_series_episode.series) (JOIN (R tv.tv_rating.tv_episodes) m.0jqtf6h))"
        }
    },
    "714": {
        "generations": "What genre of music does The Yearning Loins play and who is the composer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010vj9jd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010vj9jd ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.010vj9jd",
            "mid2name": {
                "ns:m.010vj9jd": "The Yearning Loins"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) The Yearning Loins))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) m.010vj9jd))"
        }
    },
    "715": {
        "generations": "What is a track on the album \"She Took a Bullet Meant for Me\" by the artist?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pl29g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pl29g ns:music.album.artist ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.01pl29g",
            "mid2name": {
                "ns:m.01pl29g": "She Took a Bullet Meant for Me"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) She Took a Bullet Meant for Me))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) m.01pl29g))"
        }
    },
    "716": {
        "generations": "What medical trials involve Alendronate and/or Parathyroid Hormone for Osteoporosis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbwc ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.03zbbwc",
            "mid2name": {
                "ns:m.03zbbwc": "Alendronate and/or Parathyroid Hormone for Osteoporosis"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Alendronate and/or Parathyroid Hormone for Osteoporosis))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbwc))"
        }
    },
    "717": {
        "generations": "how do you pronounce windows media video?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gt3p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gt3p ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01gt3p",
            "mid2name": {
                "ns:m.01gt3p": "Windows Media Video"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Windows Media Video))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01gt3p))"
        }
    },
    "718": {
        "generations": "who wrote lonely planet china?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051js7z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051js7z ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.051js7z",
            "mid2name": {
                "ns:m.051js7z": "Lonely Planet China"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Lonely Planet China))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.051js7z))"
        }
    },
    "719": {
        "generations": "which author has written for the new york times?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07k2d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07k2d ns:user.weel.default_domain.periodical.publisher ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.07k2d",
            "mid2name": {
                "ns:m.07k2d": "The New York Times"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R user.weel.default_domain.periodical.publisher) The New York Times))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R user.weel.default_domain.periodical.publisher) m.07k2d))"
        }
    },
    "720": {
        "generations": "who designed the spacecrafts in return of the jedi?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddjy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddjy ns:film.film.costume_design_by ?y .\n?y ns:base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed ?x .\n}\n",
            "TopicEntityMid": "m.0ddjy",
            "mid2name": {
                "ns:m.0ddjy": "Return of the Jedi"
            },
            "SExpr_w_name": "(JOIN (R base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed) (JOIN (R film.film.costume_design_by) Return of the Jedi))",
            "SExpr": "(JOIN (R base.fictionaluniverse.fictional_spacecraft_designer.spacecraft_classes_designed) (JOIN (R film.film.costume_design_by) m.0ddjy))"
        }
    },
    "721": {
        "generations": "How do you pronounce \"Refracting telescope\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ngs1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ngs1 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01ngs1",
            "mid2name": {
                "ns:m.01ngs1": "Refracting telescope"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Refracting telescope))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01ngs1))"
        }
    },
    "722": {
        "generations": "What industry does Ayala Land operate in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dgsq52)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dgsq52 ns:business.business_operation.industry ?y .\n?y ns:base.descriptive_names.names.descriptive_name ?x .\n}\n",
            "TopicEntityMid": "m.0dgsq52",
            "mid2name": {
                "ns:m.0dgsq52": "Ayala Land"
            },
            "SExpr_w_name": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) Ayala Land))",
            "SExpr": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) m.0dgsq52))"
        }
    },
    "723": {
        "generations": "what league did the akron indians play in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rrsy3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rrsy3 ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.06rrsy3",
            "mid2name": {
                "ns:m.06rrsy3": "Akron Indians"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Akron Indians))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.06rrsy3))"
        }
    },
    "724": {
        "generations": "what color pieces did garry kasparov play in his chess games?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03c5y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03c5y ns:chess.chess_player.games_played ?y .\n?y ns:chess.chess_game_participation.color ?x .\n}\n",
            "TopicEntityMid": "m.03c5y",
            "mid2name": {
                "ns:m.03c5y": "Garry Kasparov"
            },
            "SExpr_w_name": "(JOIN (R chess.chess_game_participation.color) (JOIN (R chess.chess_player.games_played) Garry Kasparov))",
            "SExpr": "(JOIN (R chess.chess_game_participation.color) (JOIN (R chess.chess_player.games_played) m.03c5y))"
        }
    },
    "725": {
        "generations": "How do you pronounce the word \"family\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fl35)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fl35 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0fl35",
            "mid2name": {
                "ns:m.0fl35": "Family"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Family))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0fl35))"
        }
    },
    "726": {
        "generations": "where is the headquarters of the home automation organization?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01987_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01987_ ns:organization.organization_sector.organizations_in_this_sector ?y .\n?y ns:organization.organization.headquarters ?x .\n}\n",
            "TopicEntityMid": "m.01987_",
            "mid2name": {
                "ns:m.01987_": "Home automation"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.headquarters) (JOIN (R organization.organization_sector.organizations_in_this_sector) Home automation))",
            "SExpr": "(JOIN (R organization.organization.headquarters) (JOIN (R organization.organization_sector.organizations_in_this_sector) m.01987_))"
        }
    },
    "727": {
        "generations": "who composed the track \"Tulenliekki\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zhkmk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zhkmk7 ns:music.composition.composer ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.0zhkmk7",
            "mid2name": {
                "ns:m.0zhkmk7": "Tulenliekki"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) Tulenliekki))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) m.0zhkmk7))"
        }
    },
    "728": {
        "generations": "How do you pronounce words in the Manx language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hwp0r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hwp0r ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02hwp0r",
            "mid2name": {
                "ns:m.02hwp0r": "Manx Language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Manx Language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02hwp0r))"
        }
    },
    "729": {
        "generations": "How do you pronounce Visual Basic?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fp_1y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fp_1y ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0fp_1y",
            "mid2name": {
                "ns:m.0fp_1y": "Visual Basic"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Visual Basic))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0fp_1y))"
        }
    },
    "730": {
        "generations": "What type of glass is typically used for cocktails with cinnamon garnish?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f0ch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f0ch ns:base.cocktails.cocktail_garnish.cocktails_with_this_garnish ?y .\n?y ns:base.cocktails.cocktail.standard_drinkware ?x .\n}\n",
            "TopicEntityMid": "m.0f0ch",
            "mid2name": {
                "ns:m.0f0ch": "Cinnamon"
            },
            "SExpr_w_name": "(JOIN (R base.cocktails.cocktail.standard_drinkware) (JOIN (R base.cocktails.cocktail_garnish.cocktails_with_this_garnish) Cinnamon))",
            "SExpr": "(JOIN (R base.cocktails.cocktail.standard_drinkware) (JOIN (R base.cocktails.cocktail_garnish.cocktails_with_this_garnish) m.0f0ch))"
        }
    },
    "731": {
        "generations": "what category of awards are given for polish literature?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cbmq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cbmq ns:award.award_discipline.awards_in_this_discipline ?y .\n?y ns:award.award_category.category_of ?x .\n}\n",
            "TopicEntityMid": "m.0cbmq",
            "mid2name": {
                "ns:m.0cbmq": "Polish literature"
            },
            "SExpr_w_name": "(JOIN (R award.award_category.category_of) (JOIN (R award.award_discipline.awards_in_this_discipline) Polish literature))",
            "SExpr": "(JOIN (R award.award_category.category_of) (JOIN (R award.award_discipline.awards_in_this_discipline) m.0cbmq))"
        }
    },
    "732": {
        "generations": "who created the XBRL file format?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hdn7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hdn7 ns:computer.file_format.extended_from ?y .\n?y ns:computer.file_format.format_creator ?x .\n}\n",
            "TopicEntityMid": "m.04hdn7",
            "mid2name": {
                "ns:m.04hdn7": "XBRL"
            },
            "SExpr_w_name": "(JOIN (R computer.file_format.format_creator) (JOIN (R computer.file_format.extended_from) XBRL))",
            "SExpr": "(JOIN (R computer.file_format.format_creator) (JOIN (R computer.file_format.extended_from) m.04hdn7))"
        }
    },
    "733": {
        "generations": "What farms serve eleventh grade education?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042_gh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042_gh ns:education.grade_level.locations_used ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.042_gh",
            "mid2name": {
                "ns:m.042_gh": "Eleventh grade"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R education.grade_level.locations_used) Eleventh grade))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R education.grade_level.locations_used) m.042_gh))"
        }
    },
    "734": {
        "generations": "how do you pronounce pithhelmet?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08rs8z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08rs8z ns:computer.web_browser_extension.works_on_web_browser ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.08rs8z",
            "mid2name": {
                "ns:m.08rs8z": "PithHelmet"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.web_browser_extension.works_on_web_browser) PithHelmet))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.web_browser_extension.works_on_web_browser) m.08rs8z))"
        }
    },
    "735": {
        "generations": "who designed the costumes for the film Varsity Show?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bj1xr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bj1xr ns:film.film.costume_design_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0bj1xr",
            "mid2name": {
                "ns:m.0bj1xr": "Varsity Show"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) Varsity Show))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R film.film.costume_design_by) m.0bj1xr))"
        }
    },
    "736": {
        "generations": "How do you pronounce the word \"Experience\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rhgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rhgl ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01rhgl",
            "mid2name": {
                "ns:m.01rhgl": "Experience"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Experience))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01rhgl))"
        }
    },
    "737": {
        "generations": "when was Nicolae Unt\u0103rescu's first book published?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09kjmr6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09kjmr6 ns:book.author.works_written ?y .\n?y ns:book.written_work.date_of_first_publication ?x .\n}\n",
            "TopicEntityMid": "m.09kjmr6",
            "mid2name": {
                "ns:m.09kjmr6": "Nicolae Unt\u0103rescu"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.date_of_first_publication) (JOIN (R book.author.works_written) Nicolae Unt\u0103rescu))",
            "SExpr": "(JOIN (R book.written_work.date_of_first_publication) (JOIN (R book.author.works_written) m.09kjmr6))"
        }
    },
    "738": {
        "generations": "where can you find amitiza?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j4t8qm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j4t8qm ns:business.brand.products ?y .\n?y ns:medicine.manufactured_drug_form.available_in ?x .\n}\n",
            "TopicEntityMid": "m.0j4t8qm",
            "mid2name": {
                "ns:m.0j4t8qm": "Amitiza"
            },
            "SExpr_w_name": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) Amitiza))",
            "SExpr": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) m.0j4t8qm))"
        }
    },
    "739": {
        "generations": "who is the artist of the artwork \"Still Life with Beer Glass\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cfkmq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cfkmq ns:visual_art.artwork.artist ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.05cfkmq",
            "mid2name": {
                "ns:m.05cfkmq": "Still Life with Beer Glass"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R visual_art.artwork.artist) Still Life with Beer Glass))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R visual_art.artwork.artist) m.05cfkmq))"
        }
    },
    "740": {
        "generations": "what is the latitude of the Carolina Goldrusher location?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gld98)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gld98 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.04gld98",
            "mid2name": {
                "ns:m.04gld98": "Carolina Goldrusher"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Carolina Goldrusher))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.04gld98))"
        }
    },
    "741": {
        "generations": "what is the equivalent instance of vestigial-sideband modulation in signal modulation mode?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05y1qyv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05y1qyv ns:engineering.signal_modulation_mode.parent_modulation ?y .\n?y ns:base.ontologies.ontology_instance.equivalent_instances ?x .\n}\n",
            "TopicEntityMid": "m.05y1qyv",
            "mid2name": {
                "ns:m.05y1qyv": "Vestigial-sideband modulation"
            },
            "SExpr_w_name": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R engineering.signal_modulation_mode.parent_modulation) Vestigial-sideband modulation))",
            "SExpr": "(JOIN (R base.ontologies.ontology_instance.equivalent_instances) (JOIN (R engineering.signal_modulation_mode.parent_modulation) m.05y1qyv))"
        }
    },
    "742": {
        "generations": "what is michael i mills' profession?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j5c023)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j5c023 ns:people.person.profession ?y .\n?y ns:people.profession.people_with_this_profession ?x .\n}\n",
            "TopicEntityMid": "m.0j5c023",
            "mid2name": {
                "ns:m.0j5c023": "Michael I Mills"
            },
            "SExpr_w_name": "(JOIN (R people.profession.people_with_this_profession) (JOIN (R people.person.profession) Michael I Mills))",
            "SExpr": "(JOIN (R people.profession.people_with_this_profession) (JOIN (R people.person.profession) m.0j5c023))"
        }
    },
    "743": {
        "generations": "where is the headquarters of Killington/Pico Ski Resort Partners LLC located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051lwsv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051lwsv ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.051lwsv",
            "mid2name": {
                "ns:m.051lwsv": "Killington/Pico Ski Resort Partners LLC"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) Killington/Pico Ski Resort Partners LLC))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R organization.organization.headquarters) m.051lwsv))"
        }
    },
    "744": {
        "generations": "What historical places of worship are associated with Catholicism?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c8wxp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c8wxp ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.0c8wxp",
            "mid2name": {
                "ns:m.0c8wxp": "Catholicism"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Catholicism))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.0c8wxp))"
        }
    },
    "745": {
        "generations": "What books are written about the deities of Thelema religion?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07grj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07grj ns:religion.religion.deities ?y .\n?y ns:book.book_subject.works ?x .\n}\n",
            "TopicEntityMid": "m.07grj",
            "mid2name": {
                "ns:m.07grj": "Thelema"
            },
            "SExpr_w_name": "(JOIN (R book.book_subject.works) (JOIN (R religion.religion.deities) Thelema))",
            "SExpr": "(JOIN (R book.book_subject.works) (JOIN (R religion.religion.deities) m.07grj))"
        }
    },
    "746": {
        "generations": "How do you pronounce Pseudotsuga?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dcbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dcbz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0dcbz",
            "mid2name": {
                "ns:m.0dcbz": "Pseudotsuga"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Pseudotsuga))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0dcbz))"
        }
    },
    "747": {
        "generations": "How do you pronounce the word \"Devil\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cr2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cr2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02cr2",
            "mid2name": {
                "ns:m.02cr2": "Devil"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Devil))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02cr2))"
        }
    },
    "748": {
        "generations": "How do you pronounce \"excessive grooming\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06wfzsb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06wfzsb ns:medicine.symptom.symptom_of ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.06wfzsb",
            "mid2name": {
                "ns:m.06wfzsb": "Excessive grooming"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.symptom.symptom_of) Excessive grooming))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.symptom.symptom_of) m.06wfzsb))"
        }
    },
    "749": {
        "generations": "How do you pronounce the word \"orange\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jc_p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jc_p ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0jc_p",
            "mid2name": {
                "ns:m.0jc_p": "Orange"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Orange))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0jc_p))"
        }
    },
    "750": {
        "generations": "What is the plural form of the word \"surgeon\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02y_93f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02y_93f ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.gender ?x .\n}\n",
            "TopicEntityMid": "m.02y_93f",
            "mid2name": {
                "ns:m.02y_93f": "Surgeon"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) Surgeon))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) m.02y_93f))"
        }
    },
    "751": {
        "generations": "What organization is the parent of NCAA Division II?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05g9q4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05g9q4 ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\n}\n",
            "TopicEntityMid": "m.05g9q4",
            "mid2name": {
                "ns:m.05g9q4": "NCAA Division II"
            },
            "SExpr_w_name": "(JOIN (R organization.organization_relationship.parent) (JOIN (R organization.organization.parent) NCAA Division II))",
            "SExpr": "(JOIN (R organization.organization_relationship.parent) (JOIN (R organization.organization.parent) m.05g9q4))"
        }
    },
    "752": {
        "generations": "how do you pronounce javascript?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p97 ns:computer.programming_language.dialects ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02p97",
            "mid2name": {
                "ns:m.02p97": "JavaScript"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) JavaScript))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) m.02p97))"
        }
    },
    "753": {
        "generations": "What books are related to the 2nd New Zealand Parliament?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_8z1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_8z1 ns:government.legislative_session.legislature ?y .\n?y ns:book.book_subject.works ?x .\n}\n",
            "TopicEntityMid": "m.03_8z1",
            "mid2name": {
                "ns:m.03_8z1": "2nd New Zealand Parliament"
            },
            "SExpr_w_name": "(JOIN (R book.book_subject.works) (JOIN (R government.legislative_session.legislature) 2nd New Zealand Parliament))",
            "SExpr": "(JOIN (R book.book_subject.works) (JOIN (R government.legislative_session.legislature) m.03_8z1))"
        }
    },
    "754": {
        "generations": "How do you pronounce ascorbic acid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y44)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y44 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0y44",
            "mid2name": {
                "ns:m.0y44": "Ascorbic acid"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Ascorbic acid))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0y44))"
        }
    },
    "755": {
        "generations": "when is the next game in the Iraqi Premier League?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bc1dq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bc1dq ns:time.recurring_event.instances ?y .\n?y ns:time.event.next_in_series ?x .\n}\n",
            "TopicEntityMid": "m.0bc1dq",
            "mid2name": {
                "ns:m.0bc1dq": "Iraqi Premier League"
            },
            "SExpr_w_name": "(JOIN (R time.event.next_in_series) (JOIN (R time.recurring_event.instances) Iraqi Premier League))",
            "SExpr": "(JOIN (R time.event.next_in_series) (JOIN (R time.recurring_event.instances) m.0bc1dq))"
        }
    },
    "756": {
        "generations": "what fictional universes did carl barks work on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.022p9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.022p9 ns:comic_books.comic_book_letterer.comic_stories_lettered ?y .\n?y ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.022p9",
            "mid2name": {
                "ns:m.022p9": "Carl Barks"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_letterer.comic_stories_lettered) Carl Barks))",
            "SExpr": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_letterer.comic_stories_lettered) m.022p9))"
        }
    },
    "757": {
        "generations": "Who wrote the Iliad?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03tt2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03tt2 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.03tt2",
            "mid2name": {
                "ns:m.03tt2": "Iliad"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Iliad))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.03tt2))"
        }
    },
    "758": {
        "generations": "What is the active ingredient in Populus trichocarpa pollen 0.05 injectable solution?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqsdxr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqsdxr ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:medicine.drug_ingredient.active_ingredient_of_formulation ?x .\n}\n",
            "TopicEntityMid": "m.0hqsdxr",
            "mid2name": {
                "ns:m.0hqsdxr": "Populus trichocarpa pollen 0.05 injectable solution"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Populus trichocarpa pollen 0.05 injectable solution))",
            "SExpr": "(JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqsdxr))"
        }
    },
    "759": {
        "generations": "what is the classification rank of a goat?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03fwl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03fwl ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.03fwl",
            "mid2name": {
                "ns:m.03fwl": "Goat"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Goat))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.03fwl))"
        }
    },
    "760": {
        "generations": "how do you pronounce chinese food?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xw9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xw9 ns:book.book_subject.works ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01xw9",
            "mid2name": {
                "ns:m.01xw9": "Chinese food"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.book_subject.works) Chinese food))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.book_subject.works) m.01xw9))"
        }
    },
    "761": {
        "generations": "Who is associated with the Count Basie Orchestra in the music genre?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r4szq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r4szq ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.01r4szq",
            "mid2name": {
                "ns:m.01r4szq": "Count Basie Orchestra"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Count Basie Orchestra))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.01r4szq))"
        }
    },
    "762": {
        "generations": "who wrote the book \"Conservation Easements: An Introductory Review for Wyoming\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051ss8h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051ss8h ns:book.written_work.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.051ss8h",
            "mid2name": {
                "ns:m.051ss8h": "Conservation Easements: An Introductory Review for Wyoming"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) Conservation Easements: An Introductory Review for Wyoming))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R book.written_work.author) m.051ss8h))"
        }
    },
    "763": {
        "generations": "What genre of music does the artist of the album \"What Mattered Most\" belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qh3v8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qh3v8 ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.02qh3v8",
            "mid2name": {
                "ns:m.02qh3v8": "What Mattered Most"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) What Mattered Most))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.02qh3v8))"
        }
    },
    "764": {
        "generations": "What is located within Crux?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wll)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wll ns:symbols.name_source.namesakes ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.01wll",
            "mid2name": {
                "ns:m.01wll": "Crux"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R symbols.name_source.namesakes) Crux))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R symbols.name_source.namesakes) m.01wll))"
        }
    },
    "765": {
        "generations": "How do you pronounce the word \"failure\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bm6b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bm6b ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0bm6b",
            "mid2name": {
                "ns:m.0bm6b": "Failure"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Failure))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0bm6b))"
        }
    },
    "766": {
        "generations": "Who curated the human genome build 36.2 and what data operations were used?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgby)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgby ns:biology.genome_build.curator ?y .\n?y ns:dataworld.information_source.data_operations ?x .\n}\n",
            "TopicEntityMid": "m.02kwgby",
            "mid2name": {
                "ns:m.02kwgby": "Human Genome Build 36.2"
            },
            "SExpr_w_name": "(JOIN (R dataworld.information_source.data_operations) (JOIN (R biology.genome_build.curator) Human Genome Build 36.2))",
            "SExpr": "(JOIN (R dataworld.information_source.data_operations) (JOIN (R biology.genome_build.curator) m.02kwgby))"
        }
    },
    "767": {
        "generations": "how do you pronounce Hans-Joachim Ellerbrock?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_rzgcj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_rzgcj ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0_rzgcj",
            "mid2name": {
                "ns:m.0_rzgcj": "Hans-Joachim Ellerbrock"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Hans-Joachim Ellerbrock))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0_rzgcj))"
        }
    },
    "768": {
        "generations": "What is the gender-neutral plural form of the title \"King of Spain\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cydp2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cydp2 ns:base.descriptive_names.names.descriptive_name ?y .\n?y ns:base.schemastaging.plural_form.gender ?x .\n}\n",
            "TopicEntityMid": "m.05cydp2",
            "mid2name": {
                "ns:m.05cydp2": "King of Spain"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) King of Spain))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.descriptive_names.names.descriptive_name) m.05cydp2))"
        }
    },
    "769": {
        "generations": "Who wrote the book \"Everything a Man Could Need\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y9f4_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y9f4_ ns:music.recording.artist ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0y9f4_",
            "mid2name": {
                "ns:m.0y9f4_": "Everything a Man Could Need"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.recording.artist) Everything a Man Could Need))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.recording.artist) m.0y9f4_))"
        }
    },
    "770": {
        "generations": "who worked at the European Molecular Biology Laboratory?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042tkq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042tkq ns:business.employer.employees ?y .\n?y ns:business.employment_tenure.person ?x .\n}\n",
            "TopicEntityMid": "m.042tkq",
            "mid2name": {
                "ns:m.042tkq": "European Molecular Biology Laboratory"
            },
            "SExpr_w_name": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) European Molecular Biology Laboratory))",
            "SExpr": "(JOIN (R business.employment_tenure.person) (JOIN (R business.employer.employees) m.042tkq))"
        }
    },
    "771": {
        "generations": "What file formats are included in the Ogg Media genre?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.1225dlhx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.1225dlhx ns:computer.file_format.genre ?y .\n?y ns:computer.file_format_genre.file_formats ?x .\n}\n",
            "TopicEntityMid": "g.1225dlhx",
            "mid2name": {
                "ns:g.1225dlhx": "Ogg Media"
            },
            "SExpr_w_name": "(JOIN (R computer.file_format_genre.file_formats) (JOIN (R computer.file_format.genre) Ogg Media))",
            "SExpr": "(JOIN (R computer.file_format_genre.file_formats) (JOIN (R computer.file_format.genre) g.1225dlhx))"
        }
    },
    "772": {
        "generations": "what events were held in montreal during the olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052p7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052p7 ns:olympics.olympic_host_city.olympics_hosted ?y .\n?y ns:time.event.includes_event ?x .\n}\n",
            "TopicEntityMid": "m.052p7",
            "mid2name": {
                "ns:m.052p7": "Montreal"
            },
            "SExpr_w_name": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) Montreal))",
            "SExpr": "(JOIN (R time.event.includes_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) m.052p7))"
        }
    },
    "773": {
        "generations": "how do you pronounce gollum's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gvf0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gvf0 ns:fictional_universe.fictional_character.has_possessed ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0gvf0",
            "mid2name": {
                "ns:m.0gvf0": "Gollum"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.has_possessed) Gollum))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.has_possessed) m.0gvf0))"
        }
    },
    "774": {
        "generations": "where was the women's doubles tournament held?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hdtlh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hdtlh ns:sports.tournament_event.competitions ?y .\n?y ns:time.event.locations ?x .\n}\n",
            "TopicEntityMid": "m.04hdtlh",
            "mid2name": {
                "ns:m.04hdtlh": "Women's doubles"
            },
            "SExpr_w_name": "(JOIN (R time.event.locations) (JOIN (R sports.tournament_event.competitions) Women's doubles))",
            "SExpr": "(JOIN (R time.event.locations) (JOIN (R sports.tournament_event.competitions) m.04hdtlh))"
        }
    },
    "775": {
        "generations": "How do you pronounce Sydney Symphony Orchestra?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_492)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_492 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01_492",
            "mid2name": {
                "ns:m.01_492": "Sydney Symphony Orchestra"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Sydney Symphony Orchestra))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01_492))"
        }
    },
    "776": {
        "generations": "How do you pronounce \"Shaded-pole motor\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04564x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04564x ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04564x",
            "mid2name": {
                "ns:m.04564x": "Shaded-pole motor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Shaded-pole motor))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04564x))"
        }
    },
    "777": {
        "generations": "What clubs are interested in the Charleston Marriott Town Center?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mvxm5c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mvxm5c ns:travel.accommodation.features ?y .\n?y ns:organization.club_interest.clubs ?x .\n}\n",
            "TopicEntityMid": "m.0mvxm5c",
            "mid2name": {
                "ns:m.0mvxm5c": "Charleston Marriott Town Center"
            },
            "SExpr_w_name": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) Charleston Marriott Town Center))",
            "SExpr": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) m.0mvxm5c))"
        }
    },
    "778": {
        "generations": "what is the latitude of the location of the speed monster?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z96lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z96lp ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.02z96lp",
            "mid2name": {
                "ns:m.02z96lp": "Speed Monster"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Speed Monster))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.02z96lp))"
        }
    },
    "779": {
        "generations": "What is the higher classification of the white breed in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083jv ns:biology.breed_coloring.breeds ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.083jv",
            "mid2name": {
                "ns:m.083jv": "White"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_coloring.breeds) White))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_coloring.breeds) m.083jv))"
        }
    },
    "780": {
        "generations": "What are the Canadian provincial parks?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hj_sv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hj_sv ns:protected_sites.park_system.member_parks ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.02hj_sv",
            "mid2name": {
                "ns:m.02hj_sv": "Canadian Provincial Parks"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R protected_sites.park_system.member_parks) Canadian Provincial Parks))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R protected_sites.park_system.member_parks) m.02hj_sv))"
        }
    },
    "781": {
        "generations": "how do you pronounce the brand name of apple products?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k8z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k8z ns:user.robert.mobile_phones.product_brand.products ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0k8z",
            "mid2name": {
                "ns:m.0k8z": "Apple Inc."
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.robert.mobile_phones.product_brand.products) Apple Inc.))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R user.robert.mobile_phones.product_brand.products) m.0k8z))"
        }
    },
    "782": {
        "generations": "How do you pronounce Mandriva Linux?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04x8h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04x8h ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04x8h",
            "mid2name": {
                "ns:m.04x8h": "Mandriva Linux"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Mandriva Linux))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04x8h))"
        }
    },
    "783": {
        "generations": "What cameras does Panasonic Lumix DMC-GF2 manufacture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gg75tc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gg75tc ns:business.consumer_product.brand ?y .\n?y ns:digicams.digital_camera_manufacturer.cameras ?x .\n}\n",
            "TopicEntityMid": "m.0gg75tc",
            "mid2name": {
                "ns:m.0gg75tc": "Panasonic Lumix DMC-GF2"
            },
            "SExpr_w_name": "(JOIN (R digicams.digital_camera_manufacturer.cameras) (JOIN (R business.consumer_product.brand) Panasonic Lumix DMC-GF2))",
            "SExpr": "(JOIN (R digicams.digital_camera_manufacturer.cameras) (JOIN (R business.consumer_product.brand) m.0gg75tc))"
        }
    },
    "784": {
        "generations": "What league is the Colonial Athletic Association a part of in football?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p6sl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p6sl ns:american_football.football_conference.teams ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.02p6sl",
            "mid2name": {
                "ns:m.02p6sl": "Colonial Athletic Association"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R american_football.football_conference.teams) Colonial Athletic Association))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R american_football.football_conference.teams) m.02p6sl))"
        }
    },
    "785": {
        "generations": "What dog breeds originated in Corsham Court?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05llqc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05llqc ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.05llqc",
            "mid2name": {
                "ns:m.05llqc": "Corsham Court"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Corsham Court))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.05llqc))"
        }
    },
    "786": {
        "generations": "What genre of music is Roy Jones Jr. associated with?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r_334)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r_334 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.01r_334",
            "mid2name": {
                "ns:m.01r_334": "Roy Jones Jr."
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Roy Jones Jr.))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.01r_334))"
        }
    },
    "787": {
        "generations": "what books did james mcneill whistler write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052trwk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052trwk ns:exhibitions.exhibition.curators ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.052trwk",
            "mid2name": {
                "ns:m.052trwk": "James McNeill Whistler"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R exhibitions.exhibition.curators) James McNeill Whistler))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R exhibitions.exhibition.curators) m.052trwk))"
        }
    },
    "788": {
        "generations": "what award was The Ballad of Peter Pumpkinhead nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v10824)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v10824 ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0v10824",
            "mid2name": {
                "ns:m.0v10824": "The Ballad of Peter Pumpkinhead"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) The Ballad of Peter Pumpkinhead))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0v10824))"
        }
    },
    "789": {
        "generations": "What is the purpose of the medical trial for Valganciclovir (Valcyte) in Chronic Fatigue Syndrome patients with elevated antibody titers against HHV-6 and EBV?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d3jh_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d3jh_ ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.04d3jh_",
            "mid2name": {
                "ns:m.04d3jh_": "Valganciclovir (Valcyte) for Chronic Fatigue Syndrome Patients Who Have Elevated Antibody Titers Against Human Herpes Virus 6 (HHV-6)and Epstein-Barr Virus (EBV)"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Valganciclovir (Valcyte) for Chronic Fatigue Syndrome Patients Who Have Elevated Antibody Titers Against Human Herpes Virus 6 (HHV-6)and Epstein-Barr Virus (EBV)))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.04d3jh_))"
        }
    },
    "790": {
        "generations": "who are the characters that have lived in Bandara in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxtry2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxtry2 ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.character_occupation.characters_with_this_occupation ?x .\n}\n",
            "TopicEntityMid": "m.0bxtry2",
            "mid2name": {
                "ns:m.0bxtry2": "Bandara"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Bandara))",
            "SExpr": "(JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.0bxtry2))"
        }
    },
    "791": {
        "generations": "What brand produces the Hollywood Movie Star Collection?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05hqr30)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05hqr30 ns:business.product_line.products ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.05hqr30",
            "mid2name": {
                "ns:m.05hqr30": "Hollywood Movie Star Collection"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R business.product_line.products) Hollywood Movie Star Collection))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R business.product_line.products) m.05hqr30))"
        }
    },
    "792": {
        "generations": "What book series is \"Who's Who of Australian Women\" a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vs68yc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vs68yc ns:book.book_edition_series.part_of_series ?y .\n?y ns:book.book_edition_series.sub_series ?x .\n}\n",
            "TopicEntityMid": "m.0vs68yc",
            "mid2name": {
                "ns:m.0vs68yc": "Who\u2019s Who of Australian Women"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition_series.sub_series) (JOIN (R book.book_edition_series.part_of_series) Who\u2019s Who of Australian Women))",
            "SExpr": "(JOIN (R book.book_edition_series.sub_series) (JOIN (R book.book_edition_series.part_of_series) m.0vs68yc))"
        }
    },
    "793": {
        "generations": "how do you pronounce english language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.dialects ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02h40lc",
            "mid2name": {
                "ns:m.02h40lc": "English Language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R language.human_language.dialects) English Language))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R language.human_language.dialects) m.02h40lc))"
        }
    },
    "794": {
        "generations": "What is laminated linen and leather used to make in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cfykqq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cfykqq ns:fictional_universe.fictional_substance.fictional_object ?y .\n?y ns:fictional_universe.fictional_object.composition ?x .\n}\n",
            "TopicEntityMid": "m.0cfykqq",
            "mid2name": {
                "ns:m.0cfykqq": "laminated linen and leather"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_substance.fictional_object) laminated linen and leather))",
            "SExpr": "(JOIN (R fictional_universe.fictional_object.composition) (JOIN (R fictional_universe.fictional_substance.fictional_object) m.0cfykqq))"
        }
    },
    "795": {
        "generations": "How do you pronounce RD-170?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ffmj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ffmj ns:spaceflight.bipropellant_rocket_engine.engine_cycle ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07ffmj",
            "mid2name": {
                "ns:m.07ffmj": "RD-170"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) RD-170))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) m.07ffmj))"
        }
    },
    "796": {
        "generations": "who wrote the book about cisco systems, inc.?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dmtp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dmtp ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0dmtp",
            "mid2name": {
                "ns:m.0dmtp": "Cisco Systems, Inc."
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Cisco Systems, Inc.))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.0dmtp))"
        }
    },
    "797": {
        "generations": "how do you pronounce the camera image ratio 3:2?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0220vcp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0220vcp ns:digicams.camera_image_ratio.cameras ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0220vcp",
            "mid2name": {
                "ns:m.0220vcp": "3:2"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R digicams.camera_image_ratio.cameras) 3:2))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R digicams.camera_image_ratio.cameras) m.0220vcp))"
        }
    },
    "798": {
        "generations": "what diseases are associated with helen of troy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h166)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h166 ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n}\n",
            "TopicEntityMid": "m.0h166",
            "mid2name": {
                "ns:m.0h166": "Helen of Troy"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R fictional_universe.fictional_character.gender) Helen of Troy))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R fictional_universe.fictional_character.gender) m.0h166))"
        }
    },
    "799": {
        "generations": "How do you pronounce \"Vietnamese food\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_19)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_19 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07_19",
            "mid2name": {
                "ns:m.07_19": "Vietnamese food"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Vietnamese food))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07_19))"
        }
    },
    "800": {
        "generations": "What books were written by the author of the Intel 8088 computer processor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wtm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wtm ns:computer.computer_processor.manufacturers ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.03wtm",
            "mid2name": {
                "ns:m.03wtm": "Intel 8088"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) Intel 8088))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) m.03wtm))"
        }
    },
    "801": {
        "generations": "how do you pronounce the name Anavel Gato?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.049hl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.049hl1 ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.049hl1",
            "mid2name": {
                "ns:m.049hl1": "Anavel Gato"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Anavel Gato))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.049hl1))"
        }
    },
    "802": {
        "generations": "How do you pronounce the word \"Cotton\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.095zt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.095zt ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.095zt",
            "mid2name": {
                "ns:m.095zt": "Cotton"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Cotton))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.095zt))"
        }
    },
    "803": {
        "generations": "how do you pronounce boeing 737?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0137k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0137k8 ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0137k8",
            "mid2name": {
                "ns:m.0137k8": "Boeing 737"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.aircraft_model.manufacturer) Boeing 737))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.aircraft_model.manufacturer) m.0137k8))"
        }
    },
    "804": {
        "generations": "What programming language was influenced by SuperPascal and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09gjwxg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09gjwxg ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.09gjwxg",
            "mid2name": {
                "ns:m.09gjwxg": "SuperPascal"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) SuperPascal))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.09gjwxg))"
        }
    },
    "805": {
        "generations": "who works for the United States Senate Foreign Relations Subcommittee on Africa and Global Health Policy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_r09)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_r09 ns:government.legislative_committee.subcommittee_of ?y .\n?y ns:business.employer.employees ?x .\n}\n",
            "TopicEntityMid": "m.07_r09",
            "mid2name": {
                "ns:m.07_r09": "United States Senate Foreign Relations Subcommittee on Africa and Global Health Policy"
            },
            "SExpr_w_name": "(JOIN (R business.employer.employees) (JOIN (R government.legislative_committee.subcommittee_of) United States Senate Foreign Relations Subcommittee on Africa and Global Health Policy))",
            "SExpr": "(JOIN (R business.employer.employees) (JOIN (R government.legislative_committee.subcommittee_of) m.07_r09))"
        }
    },
    "806": {
        "generations": "What award was A...My Name Is Alice nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_xtjgq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_xtjgq ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0_xtjgq",
            "mid2name": {
                "ns:m.0_xtjgq": "A...My Name Is Alice"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) A...My Name Is Alice))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0_xtjgq))"
        }
    },
    "807": {
        "generations": "How do you pronounce \"data mining\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0blvg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0blvg ns:dataworld.gardening_hint.split_to ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0blvg",
            "mid2name": {
                "ns:m.0blvg": "Data mining"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R dataworld.gardening_hint.split_to) Data mining))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R dataworld.gardening_hint.split_to) m.0blvg))"
        }
    },
    "808": {
        "generations": "What anime/manga franchises are classified as comedy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05p553)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05p553 ns:base.animemanga.anime_manga_genre.anime_manga_franchises ?y .\n?y ns:base.animemanga.anime_manga_franchise.genre ?x .\n}\n",
            "TopicEntityMid": "m.05p553",
            "mid2name": {
                "ns:m.05p553": "Comedy"
            },
            "SExpr_w_name": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) Comedy))",
            "SExpr": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) m.05p553))"
        }
    },
    "809": {
        "generations": "What animals are symbiotic with and eaten by cattle in the food web?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xq0k1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xq0k1 ns:base.ecology.food_web_member.eaten_by ?y .\n?y ns:base.ecology.food_web_member.symbiotic_with ?x .\n}\n",
            "TopicEntityMid": "m.01xq0k1",
            "mid2name": {
                "ns:m.01xq0k1": "Cattle"
            },
            "SExpr_w_name": "(JOIN (R base.ecology.food_web_member.symbiotic_with) (JOIN (R base.ecology.food_web_member.eaten_by) Cattle))",
            "SExpr": "(JOIN (R base.ecology.food_web_member.symbiotic_with) (JOIN (R base.ecology.food_web_member.eaten_by) m.01xq0k1))"
        }
    },
    "810": {
        "generations": "What organisms have a higher classification and originate from Armenia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgx ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0jgx",
            "mid2name": {
                "ns:m.0jgx": "Armenia"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Armenia))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.0jgx))"
        }
    },
    "811": {
        "generations": "How do you pronounce the name \"Gardener\" in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05srl9z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05srl9z ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05srl9z",
            "mid2name": {
                "ns:m.05srl9z": "Gardener"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Gardener))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.05srl9z))"
        }
    },
    "812": {
        "generations": "who founded the Ordre du Croissant?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03mcc5t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03mcc5t ns:royalty.order_of_chivalry.founders ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.03mcc5t",
            "mid2name": {
                "ns:m.03mcc5t": "Ordre du Croissant"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R royalty.order_of_chivalry.founders) Ordre du Croissant))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R royalty.order_of_chivalry.founders) m.03mcc5t))"
        }
    },
    "813": {
        "generations": "What dialects are spoken in the Ge-Kaingang language group?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tjwzr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tjwzr ns:language.language_family.languages ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.05tjwzr",
            "mid2name": {
                "ns:m.05tjwzr": "Ge-Kaingang Group"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) Ge-Kaingang Group))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) m.05tjwzr))"
        }
    },
    "814": {
        "generations": "what genre of music did mary lou williams play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mtg_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mtg_ ns:music.artist.genre ?y .\n?y ns:music.composition.recordings ?x .\n}\n",
            "TopicEntityMid": "m.01mtg_",
            "mid2name": {
                "ns:m.01mtg_": "Mary Lou Williams"
            },
            "SExpr_w_name": "(JOIN (R music.composition.recordings) (JOIN (R music.artist.genre) Mary Lou Williams))",
            "SExpr": "(JOIN (R music.composition.recordings) (JOIN (R music.artist.genre) m.01mtg_))"
        }
    },
    "815": {
        "generations": "who provides datasets to the food and drug administration?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.032mx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.032mx ns:dataworld.data_provider.datasets_provided ?y .\n?y ns:dataworld.information_source.authority ?x .\n}\n",
            "TopicEntityMid": "m.032mx",
            "mid2name": {
                "ns:m.032mx": "Food and Drug Administration"
            },
            "SExpr_w_name": "(JOIN (R dataworld.information_source.authority) (JOIN (R dataworld.data_provider.datasets_provided) Food and Drug Administration))",
            "SExpr": "(JOIN (R dataworld.information_source.authority) (JOIN (R dataworld.data_provider.datasets_provided) m.032mx))"
        }
    },
    "816": {
        "generations": "who wrote the vulgate?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_d4 ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.07_d4",
            "mid2name": {
                "ns:m.07_d4": "Vulgate"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Vulgate))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.07_d4))"
        }
    },
    "817": {
        "generations": "what is the gender of the author of the broccoli raab pasta recipe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07nhyx3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07nhyx3 ns:food.recipe.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.07nhyx3",
            "mid2name": {
                "ns:m.07nhyx3": "Broccoli Raab Pasta"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R food.recipe.author) Broccoli Raab Pasta))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R food.recipe.author) m.07nhyx3))"
        }
    },
    "818": {
        "generations": "Which artists belong to the genre Camo & Krooked?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dpsdw3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dpsdw3 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.0dpsdw3",
            "mid2name": {
                "ns:m.0dpsdw3": "Camo & Krooked"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Camo & Krooked))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.0dpsdw3))"
        }
    },
    "819": {
        "generations": "what fictional universe does bail organa appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.1237vxbv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.1237vxbv ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "g.1237vxbv",
            "mid2name": {
                "ns:g.1237vxbv": "Bail Organa"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Bail Organa))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) g.1237vxbv))"
        }
    },
    "820": {
        "generations": "who is the author of the book written by Jim Starlin?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024ksh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024ksh ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.024ksh",
            "mid2name": {
                "ns:m.024ksh": "Jim Starlin"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Jim Starlin))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.024ksh))"
        }
    },
    "821": {
        "generations": "who founded the future movement organization?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07x128)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07x128 ns:organization.organization.founders ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.07x128",
            "mid2name": {
                "ns:m.07x128": "Future Movement"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R organization.organization.founders) Future Movement))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R organization.organization.founders) m.07x128))"
        }
    },
    "822": {
        "generations": "What pet diseases are common in breeds originating from Russia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n}\n",
            "TopicEntityMid": "m.06bnz",
            "mid2name": {
                "ns:m.06bnz": "Russia"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R biology.breed_origin.breeds_originating_here) Russia))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R biology.breed_origin.breeds_originating_here) m.06bnz))"
        }
    },
    "823": {
        "generations": "how do you pronounce gregory wright's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rqw2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rqw2 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.09rqw2",
            "mid2name": {
                "ns:m.09rqw2": "Gregory Wright"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Gregory Wright))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.09rqw2))"
        }
    },
    "824": {
        "generations": "How do you pronounce \"Perseids\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01drjr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01drjr ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01drjr",
            "mid2name": {
                "ns:m.01drjr": "Perseids"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Perseids))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01drjr))"
        }
    },
    "825": {
        "generations": "How do you pronounce the word \"Amnesia\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j4hd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j4hd ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01j4hd",
            "mid2name": {
                "ns:m.01j4hd": "Amnesia"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Amnesia))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01j4hd))"
        }
    },
    "826": {
        "generations": "what art series is associated with printmaking?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bp7w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bp7w ns:visual_art.visual_art_form.artists ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.0bp7w",
            "mid2name": {
                "ns:m.0bp7w": "Printmaking"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) Printmaking))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) m.0bp7w))"
        }
    },
    "827": {
        "generations": "How do you pronounce \"Agricultural economics\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036n_g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036n_g ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.036n_g",
            "mid2name": {
                "ns:m.036n_g": "Agricultural economics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Agricultural economics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.036n_g))"
        }
    },
    "828": {
        "generations": "which congressional members voted on issues related to the anti-war movement?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fc50)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fc50 ns:base.activism.activism_issue.activists ?y .\n?y ns:user.alexbl.congressional_voting_records.congressional_member.voted_on ?x .\n}\n",
            "TopicEntityMid": "m.01fc50",
            "mid2name": {
                "ns:m.01fc50": "Anti-war movement"
            },
            "SExpr_w_name": "(JOIN (R user.alexbl.congressional_voting_records.congressional_member.voted_on) (JOIN (R base.activism.activism_issue.activists) Anti-war movement))",
            "SExpr": "(JOIN (R user.alexbl.congressional_voting_records.congressional_member.voted_on) (JOIN (R base.activism.activism_issue.activists) m.01fc50))"
        }
    },
    "829": {
        "generations": "who is the artist of the album \"Live at the Electric Factory (Philadelphia, PA March 28, 2003)\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038w_m8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038w_m8 ns:music.release.album ?y .\n?y ns:music.album.artist ?x .\n}\n",
            "TopicEntityMid": "m.038w_m8",
            "mid2name": {
                "ns:m.038w_m8": "Live at the Electric Factory (Philadelphia, PA March 28, 2003)"
            },
            "SExpr_w_name": "(JOIN (R music.album.artist) (JOIN (R music.release.album) Live at the Electric Factory (Philadelphia, PA March 28, 2003)))",
            "SExpr": "(JOIN (R music.album.artist) (JOIN (R music.release.album) m.038w_m8))"
        }
    },
    "830": {
        "generations": "what is the climate like in miami during which month?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2v0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2v0 ns:travel.travel_destination.climate ?y .\n?y ns:travel.travel_destination_monthly_climate.month ?x .\n}\n",
            "TopicEntityMid": "m.0f2v0",
            "mid2name": {
                "ns:m.0f2v0": "Miami"
            },
            "SExpr_w_name": "(JOIN (R travel.travel_destination_monthly_climate.month) (JOIN (R travel.travel_destination.climate) Miami))",
            "SExpr": "(JOIN (R travel.travel_destination_monthly_climate.month) (JOIN (R travel.travel_destination.climate) m.0f2v0))"
        }
    },
    "831": {
        "generations": "How do you pronounce \"Rho meson\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08lszy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08lszy ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.08lszy",
            "mid2name": {
                "ns:m.08lszy": "Rho meson"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Rho meson))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.08lszy))"
        }
    },
    "832": {
        "generations": "Which family rose to prominence after the House of Stuart?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lkky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lkky ns:royalty.royal_line.preceded_by ?y .\n?y ns:people.family.rise_to_prominence ?x .\n}\n",
            "TopicEntityMid": "m.01lkky",
            "mid2name": {
                "ns:m.01lkky": "House of Stuart"
            },
            "SExpr_w_name": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) House of Stuart))",
            "SExpr": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) m.01lkky))"
        }
    },
    "833": {
        "generations": "What industry is A\u00e9rospatiale Gazelle a manufacturer in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01zxdb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01zxdb ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.01zxdb",
            "mid2name": {
                "ns:m.01zxdb": "A\u00e9rospatiale Gazelle"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) A\u00e9rospatiale Gazelle))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.01zxdb))"
        }
    },
    "834": {
        "generations": "How do you pronounce words in Indo-European languages?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03v09)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03v09 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03v09",
            "mid2name": {
                "ns:m.03v09": "Indo-European languages"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Indo-European languages))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03v09))"
        }
    },
    "835": {
        "generations": "How do you pronounce \"Third Age\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hlj2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hlj2 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0hlj2",
            "mid2name": {
                "ns:m.0hlj2": "Third Age"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Third Age))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0hlj2))"
        }
    },
    "836": {
        "generations": "How do you pronounce the name \"Swift\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010sd4y3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010sd4y3 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.010sd4y3",
            "mid2name": {
                "ns:m.010sd4y3": "Swift"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Swift))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.010sd4y3))"
        }
    },
    "837": {
        "generations": "Who wrote a book and composed a piece of music called Maddalena?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051_nhv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051_nhv ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.051_nhv",
            "mid2name": {
                "ns:m.051_nhv": "Maddalena"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Maddalena))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.051_nhv))"
        }
    },
    "838": {
        "generations": "what product did cuba gooding jr buy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014v6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014v6f ns:base.popstra.celebrity.bought ?y .\n?y ns:base.popstra.product_choice.product ?x .\n}\n",
            "TopicEntityMid": "m.014v6f",
            "mid2name": {
                "ns:m.014v6f": "Cuba Gooding, Jr."
            },
            "SExpr_w_name": "(JOIN (R base.popstra.product_choice.product) (JOIN (R base.popstra.celebrity.bought) Cuba Gooding, Jr.))",
            "SExpr": "(JOIN (R base.popstra.product_choice.product) (JOIN (R base.popstra.celebrity.bought) m.014v6f))"
        }
    },
    "839": {
        "generations": "What genre of music does Love Sosa belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qdf36b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qdf36b ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0qdf36b",
            "mid2name": {
                "ns:m.0qdf36b": "Love Sosa"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Love Sosa))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0qdf36b))"
        }
    },
    "840": {
        "generations": "who illustrated the cover of the comic book issue inked by Joe Kubert?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hl6_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hl6_ ns:comic_books.comic_book_inker.comic_covers_inked ?y .\n?y ns:comic_books.comic_book_issue.cover_pencils ?x .\n}\n",
            "TopicEntityMid": "m.03hl6_",
            "mid2name": {
                "ns:m.03hl6_": "Joe Kubert"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_issue.cover_pencils) (JOIN (R comic_books.comic_book_inker.comic_covers_inked) Joe Kubert))",
            "SExpr": "(JOIN (R comic_books.comic_book_issue.cover_pencils) (JOIN (R comic_books.comic_book_inker.comic_covers_inked) m.03hl6_))"
        }
    },
    "841": {
        "generations": "What brand is The Goblin Wood book edition?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05q0g66)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05q0g66 ns:book.book_edition.binding ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.05q0g66",
            "mid2name": {
                "ns:m.05q0g66": "The Goblin Wood"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) The Goblin Wood))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) m.05q0g66))"
        }
    },
    "842": {
        "generations": "who created the character Marv in comic books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08z7q1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08z7q1 ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:comic_books.comic_book_inker.comic_covers_inked ?x .\n}\n",
            "TopicEntityMid": "m.08z7q1",
            "mid2name": {
                "ns:m.08z7q1": "Marv"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R fictional_universe.fictional_character.character_created_by) Marv))",
            "SExpr": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R fictional_universe.fictional_character.character_created_by) m.08z7q1))"
        }
    },
    "843": {
        "generations": "What dialects are spoken in the book \"The slopes of Lebanon\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06sfvct)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06sfvct ns:book.translation.language ?y .\n?y ns:language.human_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.06sfvct",
            "mid2name": {
                "ns:m.06sfvct": "The slopes of Lebanon"
            },
            "SExpr_w_name": "(JOIN (R language.human_language.dialects) (JOIN (R book.translation.language) The slopes of Lebanon))",
            "SExpr": "(JOIN (R language.human_language.dialects) (JOIN (R book.translation.language) m.06sfvct))"
        }
    },
    "844": {
        "generations": "where is depakene available?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j4thnh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j4thnh ns:business.brand.products ?y .\n?y ns:medicine.manufactured_drug_form.available_in ?x .\n}\n",
            "TopicEntityMid": "m.0j4thnh",
            "mid2name": {
                "ns:m.0j4thnh": "Depakene"
            },
            "SExpr_w_name": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) Depakene))",
            "SExpr": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) m.0j4thnh))"
        }
    },
    "845": {
        "generations": "What diseases are associated with the pet disease risk factor in fictional character Makoto?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05rhvq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05rhvq ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n}\n",
            "TopicEntityMid": "m.05rhvq",
            "mid2name": {
                "ns:m.05rhvq": "Makoto"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R fictional_universe.fictional_character.gender) Makoto))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R fictional_universe.fictional_character.gender) m.05rhvq))"
        }
    },
    "846": {
        "generations": "what books did rose schneiderman write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kr43)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kr43 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.05kr43",
            "mid2name": {
                "ns:m.05kr43": "Rose Schneiderman"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Rose Schneiderman))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05kr43))"
        }
    },
    "847": {
        "generations": "who created characters for the marvel universe in comic books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058nt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058nt ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:comic_books.comic_book_character.created_by ?x .\n}\n",
            "TopicEntityMid": "m.058nt",
            "mid2name": {
                "ns:m.058nt": "Marvel Universe"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.fictional_universe.organizations) Marvel Universe))",
            "SExpr": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.fictional_universe.organizations) m.058nt))"
        }
    },
    "848": {
        "generations": "Which athletes from Gold Coast participated in the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq_t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq_t ns:olympics.olympic_participating_country.athletes ?y .\n?y ns:olympics.olympic_athlete_affiliation.athlete ?x .\n}\n",
            "TopicEntityMid": "m.01bq_t",
            "mid2name": {
                "ns:m.01bq_t": "Gold Coast"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_athlete_affiliation.athlete) (JOIN (R olympics.olympic_participating_country.athletes) Gold Coast))",
            "SExpr": "(JOIN (R olympics.olympic_athlete_affiliation.athlete) (JOIN (R olympics.olympic_participating_country.athletes) m.01bq_t))"
        }
    },
    "849": {
        "generations": "how do you pronounce james hutcheson's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gdk4q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gdk4q ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04gdk4q",
            "mid2name": {
                "ns:m.04gdk4q": "James Hutcheson"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) James Hutcheson))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.04gdk4q))"
        }
    },
    "850": {
        "generations": "What caused the destruction of the structures in the location affected by aeroelastic flutter?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07xqdv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07xqdv4 ns:architecture.destruction_method.structures_destroyed ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.07xqdv4",
            "mid2name": {
                "ns:m.07xqdv4": "Aeroelastic flutter"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R architecture.destruction_method.structures_destroyed) Aeroelastic flutter))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R architecture.destruction_method.structures_destroyed) m.07xqdv4))"
        }
    },
    "851": {
        "generations": "who wrote the book for elton john and tim rice's aida?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hfbcq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hfbcq ns:music.album.artist ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01hfbcq",
            "mid2name": {
                "ns:m.01hfbcq": "Elton John and Tim Rice's Aida"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R music.album.artist) Elton John and Tim Rice's Aida))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R music.album.artist) m.01hfbcq))"
        }
    },
    "852": {
        "generations": "Who is the authority for data operations at the National Center for Biotechnology Information?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01358j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01358j ns:dataworld.information_source.data_operations ?y .\n?y ns:dataworld.mass_data_operation.authority ?x .\n}\n",
            "TopicEntityMid": "m.01358j",
            "mid2name": {
                "ns:m.01358j": "National Center for Biotechnology Information"
            },
            "SExpr_w_name": "(JOIN (R dataworld.mass_data_operation.authority) (JOIN (R dataworld.information_source.data_operations) National Center for Biotechnology Information))",
            "SExpr": "(JOIN (R dataworld.mass_data_operation.authority) (JOIN (R dataworld.information_source.data_operations) m.01358j))"
        }
    },
    "853": {
        "generations": "what league did the tennessee oilers belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f2k5d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f2k5d ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.06f2k5d",
            "mid2name": {
                "ns:m.06f2k5d": "Tennessee Oilers"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Tennessee Oilers))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.06f2k5d))"
        }
    },
    "854": {
        "generations": "What industry is KJ-2000 aircraft model manufacturer in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pgr5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pgr5j ns:aviation.aircraft_model.manufacturer ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.02pgr5j",
            "mid2name": {
                "ns:m.02pgr5j": "KJ-2000"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) KJ-2000))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.aircraft_model.manufacturer) m.02pgr5j))"
        }
    },
    "855": {
        "generations": "who composed the opera recording Ad\u00e8s: The Tempest?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zmvh1z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zmvh1z ns:opera.opera_recording.opera ?y .\n?y ns:music.composition.composer ?x .\n}\n",
            "TopicEntityMid": "m.0zmvh1z",
            "mid2name": {
                "ns:m.0zmvh1z": "Ad\u00e8s: The Tempest"
            },
            "SExpr_w_name": "(JOIN (R music.composition.composer) (JOIN (R opera.opera_recording.opera) Ad\u00e8s: The Tempest))",
            "SExpr": "(JOIN (R music.composition.composer) (JOIN (R opera.opera_recording.opera) m.0zmvh1z))"
        }
    },
    "856": {
        "generations": "How do you pronounce the word \"Safari\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0168s_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0168s_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0168s_",
            "mid2name": {
                "ns:m.0168s_": "Safari"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Safari))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0168s_))"
        }
    },
    "857": {
        "generations": "Which company produced the 2004 Rhys \"Alpine Vineyard\" Santa Cruz Mountains Estate Pinot Noir?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_xsdt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_xsdt ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.02_xsdt",
            "mid2name": {
                "ns:m.02_xsdt": "2004 Rhys \"Alpine Vineyard\" Santa Cruz Mountains Estate Pinot Noir"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2004 Rhys \"Alpine Vineyard\" Santa Cruz Mountains Estate Pinot Noir))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.02_xsdt))"
        }
    },
    "858": {
        "generations": "Where was the TV show Nut Cutters filmed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0kxxyml)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0kxxyml ns:tv.tv_series_episode.series ?y .\n?y ns:tv.tv_program.filming_locations ?x .\n}\n",
            "TopicEntityMid": "m.0kxxyml",
            "mid2name": {
                "ns:m.0kxxyml": "Nut Cutters?"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_program.filming_locations) (JOIN (R tv.tv_series_episode.series) Nut Cutters?))",
            "SExpr": "(JOIN (R tv.tv_program.filming_locations) (JOIN (R tv.tv_series_episode.series) m.0kxxyml))"
        }
    },
    "859": {
        "generations": "How do you pronounce \"Second Age\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hlj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hlj_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0hlj_",
            "mid2name": {
                "ns:m.0hlj_": "Second Age"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Second Age))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0hlj_))"
        }
    },
    "860": {
        "generations": "What country is the TV program about natural sciences from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d69h5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d69h5 ns:broadcast.genre.content ?y .\n?y ns:tv.tv_program.country_of_origin ?x .\n}\n",
            "TopicEntityMid": "m.03d69h5",
            "mid2name": {
                "ns:m.03d69h5": "Natural Sciences"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_program.country_of_origin) (JOIN (R broadcast.genre.content) Natural Sciences))",
            "SExpr": "(JOIN (R tv.tv_program.country_of_origin) (JOIN (R broadcast.genre.content) m.03d69h5))"
        }
    },
    "861": {
        "generations": "How do you pronounce the name of the Democratic Party in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d075m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d075m ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0d075m",
            "mid2name": {
                "ns:m.0d075m": "Democratic Party"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Democratic Party))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0d075m))"
        }
    },
    "862": {
        "generations": "what TV program is set in the Buffyverse universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02s3gw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02s3gw ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:tv.tv_character.appeared_in_tv_program ?x .\n}\n",
            "TopicEntityMid": "m.02s3gw",
            "mid2name": {
                "ns:m.02s3gw": "Buffyverse"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_character.appeared_in_tv_program) (JOIN (R fictional_universe.fictional_universe.organizations) Buffyverse))",
            "SExpr": "(JOIN (R tv.tv_character.appeared_in_tv_program) (JOIN (R fictional_universe.fictional_universe.organizations) m.02s3gw))"
        }
    },
    "863": {
        "generations": "How do you pronounce \"Civil aviation\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r8s3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r8s3 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01r8s3",
            "mid2name": {
                "ns:m.01r8s3": "Civil aviation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Civil aviation))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01r8s3))"
        }
    },
    "864": {
        "generations": "What is the atomic mass of the chemical element in the drug containing Calcium ascorbate, Calcium threonate, Cholecalciferol, alpha-tocopherol, Folic acid, Pyridoxine, Calcium, Iron, Ferrous asparto glycinate, Doconexent, Icosapent, and Linolenic acid?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqvml3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqvml3 ns:medicine.drug.active_moieties ?y .\n?y ns:chemistry.chemical_element.atomic_mass ?x .\n}\n",
            "TopicEntityMid": "m.0hqvml3",
            "mid2name": {
                "ns:m.0hqvml3": "Calcium ascorbate/Calcium threonate/Cholecalciferol/.alpha.-tocopherol/Folic acid/Pyridoxine/Calcium/Iron/Ferrous asparto glycinate/Doconexent/Icosapent/Linolenic acid"
            },
            "SExpr_w_name": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug.active_moieties) Calcium ascorbate/Calcium threonate/Cholecalciferol/.alpha.-tocopherol/Folic acid/Pyridoxine/Calcium/Iron/Ferrous asparto glycinate/Doconexent/Icosapent/Linolenic acid))",
            "SExpr": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug.active_moieties) m.0hqvml3))"
        }
    },
    "865": {
        "generations": "What concert tour has performed at Cynthia Woods Mitchell Pavilion?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dnw40)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dnw40 ns:music.performance_venue.concerts ?y .\n?y ns:music.concert.concert_tour ?x .\n}\n",
            "TopicEntityMid": "m.0dnw40",
            "mid2name": {
                "ns:m.0dnw40": "Cynthia Woods Mitchell Pavilion"
            },
            "SExpr_w_name": "(JOIN (R music.concert.concert_tour) (JOIN (R music.performance_venue.concerts) Cynthia Woods Mitchell Pavilion))",
            "SExpr": "(JOIN (R music.concert.concert_tour) (JOIN (R music.performance_venue.concerts) m.0dnw40))"
        }
    },
    "866": {
        "generations": "what is the annual circulation of the central library of the cuba circulating library association?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j9fdph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j9fdph ns:library.public_library.library_system ?y .\n?y ns:library.public_library_system.annual_circulation ?x .\n}\n",
            "TopicEntityMid": "m.0j9fdph",
            "mid2name": {
                "ns:m.0j9fdph": "Cuba Circulating Library Association Central Library"
            },
            "SExpr_w_name": "(JOIN (R library.public_library_system.annual_circulation) (JOIN (R library.public_library.library_system) Cuba Circulating Library Association Central Library))",
            "SExpr": "(JOIN (R library.public_library_system.annual_circulation) (JOIN (R library.public_library.library_system) m.0j9fdph))"
        }
    },
    "867": {
        "generations": "how do you pronounce Andi Gutmans' name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04x69r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04x69r ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04x69r",
            "mid2name": {
                "ns:m.04x69r": "Andi Gutmans"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Andi Gutmans))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.04x69r))"
        }
    },
    "868": {
        "generations": "Where is the Great Bear Express ski area located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nbl92)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nbl92 ns:skiing.ski_lift.ski_area ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.05nbl92",
            "mid2name": {
                "ns:m.05nbl92": "Great Bear Express"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) Great Bear Express))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R skiing.ski_lift.ski_area) m.05nbl92))"
        }
    },
    "869": {
        "generations": "What league does the Jazz Bear's team belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027w225)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027w225 ns:sports.mascot.team ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.027w225",
            "mid2name": {
                "ns:m.027w225": "Jazz Bear"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R sports.mascot.team) Jazz Bear))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R sports.mascot.team) m.027w225))"
        }
    },
    "870": {
        "generations": "how do you pronounce the name of the artwork series The Roulin Family?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g3w3h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g3w3h ns:visual_art.art_series.artworks ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0g3w3h",
            "mid2name": {
                "ns:m.0g3w3h": "The Roulin Family"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.art_series.artworks) The Roulin Family))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.art_series.artworks) m.0g3w3h))"
        }
    },
    "871": {
        "generations": "What genre of music does Tweeter and the Monkey Man play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lm1px)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lm1px ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0lm1px",
            "mid2name": {
                "ns:m.0lm1px": "Tweeter and the Monkey Man"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Tweeter and the Monkey Man))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0lm1px))"
        }
    },
    "872": {
        "generations": "what is the German Shepherd named after?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0km5c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0km5c ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?y .\n?y ns:symbols.namesake.named_after ?x .\n}\n",
            "TopicEntityMid": "m.0km5c",
            "mid2name": {
                "ns:m.0km5c": "German Shepherd"
            },
            "SExpr_w_name": "(JOIN (R symbols.namesake.named_after) (JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) German Shepherd))",
            "SExpr": "(JOIN (R symbols.namesake.named_after) (JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) m.0km5c))"
        }
    },
    "873": {
        "generations": "How do you pronounce Leeward Islands?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pfly)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pfly ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01pfly",
            "mid2name": {
                "ns:m.01pfly": "Leeward Islands"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Leeward Islands))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01pfly))"
        }
    },
    "874": {
        "generations": "What books has Rod Stewart written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qf11)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qf11 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.0qf11",
            "mid2name": {
                "ns:m.0qf11": "Rod Stewart"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Rod Stewart))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.0qf11))"
        }
    },
    "875": {
        "generations": "what is the climate like in the place where Soci\u00e9t\u00e9 Willebroeck was founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07m5k4x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07m5k4x ns:organization.organization.place_founded ?y .\n?y ns:travel.travel_destination.climate ?x .\n}\n",
            "TopicEntityMid": "m.07m5k4x",
            "mid2name": {
                "ns:m.07m5k4x": "Soci\u00e9t\u00e9 Willebroeck"
            },
            "SExpr_w_name": "(JOIN (R travel.travel_destination.climate) (JOIN (R organization.organization.place_founded) Soci\u00e9t\u00e9 Willebroeck))",
            "SExpr": "(JOIN (R travel.travel_destination.climate) (JOIN (R organization.organization.place_founded) m.07m5k4x))"
        }
    },
    "876": {
        "generations": "What historical places of worship are associated with the Quakers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025t7ly)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025t7ly ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.025t7ly",
            "mid2name": {
                "ns:m.025t7ly": "Quakers"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) Quakers))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) m.025t7ly))"
        }
    },
    "877": {
        "generations": "What is the lower rank of organisms classified as Infraclass?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sdf6x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sdf6x ns:biology.organism_classification_rank.higher_rank ?y .\n?y ns:biology.organism_classification_rank.lower_rank ?x .\n}\n",
            "TopicEntityMid": "m.02sdf6x",
            "mid2name": {
                "ns:m.02sdf6x": "Infraclass"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification_rank.lower_rank) (JOIN (R biology.organism_classification_rank.higher_rank) Infraclass))",
            "SExpr": "(JOIN (R biology.organism_classification_rank.lower_rank) (JOIN (R biology.organism_classification_rank.higher_rank) m.02sdf6x))"
        }
    },
    "878": {
        "generations": "How do you pronounce \"History of science\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q_5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q_5 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03q_5",
            "mid2name": {
                "ns:m.03q_5": "History of science"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) History of science))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03q_5))"
        }
    },
    "879": {
        "generations": "What genre of music does the artist Beautiful perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xzmc9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xzmc9 ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0xzmc9",
            "mid2name": {
                "ns:m.0xzmc9": "Beautiful"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Beautiful))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0xzmc9))"
        }
    },
    "880": {
        "generations": "who discovered the nebula?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fny ns:astronomy.celestial_object_category.objects ?y .\n?y ns:astronomy.astronomical_discovery.discoverer ?x .\n}\n",
            "TopicEntityMid": "m.05fny",
            "mid2name": {
                "ns:m.05fny": "Nebula"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.celestial_object_category.objects) Nebula))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.celestial_object_category.objects) m.05fny))"
        }
    },
    "881": {
        "generations": "Which fictional character has the ability to create temporary objects of all sorts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c1qd9d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c1qd9d ns:fictional_universe.character_powers.characters_with_this_ability ?y .\n?y ns:fictional_universe.fictional_character.has_possessed ?x .\n}\n",
            "TopicEntityMid": "m.0c1qd9d",
            "mid2name": {
                "ns:m.0c1qd9d": "create objects of all sorts temporarily"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.character_powers.characters_with_this_ability) create objects of all sorts temporarily))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.has_possessed) (JOIN (R fictional_universe.character_powers.characters_with_this_ability) m.0c1qd9d))"
        }
    },
    "882": {
        "generations": "How do you pronounce Demak Sultanate?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0br9kd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0br9kd ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0br9kd",
            "mid2name": {
                "ns:m.0br9kd": "Demak Sultanate"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Demak Sultanate))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0br9kd))"
        }
    },
    "883": {
        "generations": "what is the latitude of the Baikonur Cosmodrome Site 45?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04mz42m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04mz42m ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.04mz42m",
            "mid2name": {
                "ns:m.04mz42m": "Baikonur Cosmodrome Site 45"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Baikonur Cosmodrome Site 45))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.04mz42m))"
        }
    },
    "884": {
        "generations": "Which Olympic games were hosted at the Omni Atlanta Hotel at CNN Center?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012p0ddx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012p0ddx ns:location.location.containedby ?y .\n?y ns:olympics.olympic_host_city.olympics_hosted ?x .\n}\n",
            "TopicEntityMid": "m.012p0ddx",
            "mid2name": {
                "ns:m.012p0ddx": "Omni Atlanta Hotel at CNN Center"
            },
            "SExpr_w_name": "(JOIN (R olympics.olympic_host_city.olympics_hosted) (JOIN (R location.location.containedby) Omni Atlanta Hotel at CNN Center))",
            "SExpr": "(JOIN (R olympics.olympic_host_city.olympics_hosted) (JOIN (R location.location.containedby) m.012p0ddx))"
        }
    },
    "885": {
        "generations": "What genre of music does Rhythm'A'Ning play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p8ywvy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p8ywvy ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0p8ywvy",
            "mid2name": {
                "ns:m.0p8ywvy": "Rhythm'A'Ning"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Rhythm'A'Ning))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.0p8ywvy))"
        }
    },
    "886": {
        "generations": "What is the higher classification of the organism used to make Scallop 50 injectable solution?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqrw3x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqrw3x ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0hqrw3x",
            "mid2name": {
                "ns:m.0hqrw3x": "Scallop 50 injectable solution"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Scallop 50 injectable solution))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqrw3x))"
        }
    },
    "887": {
        "generations": "What religion did the Three Treasures branch into?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0577s8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0577s8 ns:religion.belief.belief_of ?y .\n?y ns:religion.religion.branched_into ?x .\n}\n",
            "TopicEntityMid": "m.0577s8",
            "mid2name": {
                "ns:m.0577s8": "Three Treasures"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.branched_into) (JOIN (R religion.belief.belief_of) Three Treasures))",
            "SExpr": "(JOIN (R religion.religion.branched_into) (JOIN (R religion.belief.belief_of) m.0577s8))"
        }
    },
    "888": {
        "generations": "Who inked the cover of Madman Atomic Comics #14?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kk22b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kk22b ns:comic_books.comic_book_issue.cover_inks ?y .\n?y ns:comic_books.comic_book_inker.comic_covers_inked ?x .\n}\n",
            "TopicEntityMid": "m.05kk22b",
            "mid2name": {
                "ns:m.05kk22b": "Madman Atomic Comics #14"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_issue.cover_inks) Madman Atomic Comics #14))",
            "SExpr": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_issue.cover_inks) m.05kk22b))"
        }
    },
    "889": {
        "generations": "Which programming language dialects were designed by Jonathan A. Rees?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrtql)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrtql ns:computer.programming_language_designer.languages_designed ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.01xrtql",
            "mid2name": {
                "ns:m.01xrtql": "Jonathan A. Rees"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_designer.languages_designed) Jonathan A. Rees))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_designer.languages_designed) m.01xrtql))"
        }
    },
    "890": {
        "generations": "What airline was involved in the Katanga Express accident and where was the flight headed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.11bcfcp37f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.11bcfcp37f ns:aviation.airline.accidents ?y .\n?y ns:aviation.airliner_accident.flight_destination ?x .\n}\n",
            "TopicEntityMid": "g.11bcfcp37f",
            "mid2name": {
                "ns:g.11bcfcp37f": "Katanga Express"
            },
            "SExpr_w_name": "(JOIN (R aviation.airliner_accident.flight_destination) (JOIN (R aviation.airline.accidents) Katanga Express))",
            "SExpr": "(JOIN (R aviation.airliner_accident.flight_destination) (JOIN (R aviation.airline.accidents) g.11bcfcp37f))"
        }
    },
    "891": {
        "generations": "What is the classification rank and higher classification of Sarracenia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03kb8c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03kb8c ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.03kb8c",
            "mid2name": {
                "ns:m.03kb8c": "Sarracenia"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Sarracenia))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.03kb8c))"
        }
    },
    "892": {
        "generations": "Which company produces the Casio Exilim EX-Z750 camera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q2mc4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q2mc4 ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03q2mc4",
            "mid2name": {
                "ns:m.03q2mc4": "Casio Exilim EX-Z750"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Casio Exilim EX-Z750))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03q2mc4))"
        }
    },
    "893": {
        "generations": "who wrote a book about intel core processors?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09b_4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09b_4m ns:computer.computer_processor.manufacturers ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.09b_4m",
            "mid2name": {
                "ns:m.09b_4m": "Intel Core"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) Intel Core))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) m.09b_4m))"
        }
    },
    "894": {
        "generations": "How do you pronounce the word \"hymn\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ky6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ky6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03ky6",
            "mid2name": {
                "ns:m.03ky6": "Hymn"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Hymn))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03ky6))"
        }
    },
    "895": {
        "generations": "What make is the predecessor to the ninth generation Ford F-Series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j442n4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j442n4 ns:automotive.generation.predecessor ?y .\n?y ns:base.cars_refactor.generation.make ?x .\n}\n",
            "TopicEntityMid": "m.0j442n4",
            "mid2name": {
                "ns:m.0j442n4": "Ninth Generation Ford F-Series"
            },
            "SExpr_w_name": "(JOIN (R base.cars_refactor.generation.make) (JOIN (R automotive.generation.predecessor) Ninth Generation Ford F-Series))",
            "SExpr": "(JOIN (R base.cars_refactor.generation.make) (JOIN (R automotive.generation.predecessor) m.0j442n4))"
        }
    },
    "896": {
        "generations": "who is Burr Truss named after?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ft3n6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ft3n6 ns:symbols.namesake.named_after ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0ft3n6",
            "mid2name": {
                "ns:m.0ft3n6": "Burr Truss"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R symbols.namesake.named_after) Burr Truss))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R symbols.namesake.named_after) m.0ft3n6))"
        }
    },
    "897": {
        "generations": "How do you pronounce MacBook Pro?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09tzfp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09tzfp ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.09tzfp",
            "mid2name": {
                "ns:m.09tzfp": "MacBook Pro"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) MacBook Pro))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.09tzfp))"
        }
    },
    "898": {
        "generations": "how do you pronounce C minor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05hcrh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05hcrh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.05hcrh",
            "mid2name": {
                "ns:m.05hcrh": "C minor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) C minor))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.05hcrh))"
        }
    },
    "899": {
        "generations": "What is the classification of Grenache in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02y9bw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02y9bw ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.child_classifications ?x .\n}\n",
            "TopicEntityMid": "m.02y9bw",
            "mid2name": {
                "ns:m.02y9bw": "Grenache"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) Grenache))",
            "SExpr": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) m.02y9bw))"
        }
    },
    "900": {
        "generations": "What antique stores feature items from the Counterpoint exhibition?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_ngp3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_ngp3 ns:exhibitions.exhibition.subjects ?y .\n?y ns:base.services.antique_time_period.antique_stores ?x .\n}\n",
            "TopicEntityMid": "m.04_ngp3",
            "mid2name": {
                "ns:m.04_ngp3": "Counterpoint"
            },
            "SExpr_w_name": "(JOIN (R base.services.antique_time_period.antique_stores) (JOIN (R exhibitions.exhibition.subjects) Counterpoint))",
            "SExpr": "(JOIN (R base.services.antique_time_period.antique_stores) (JOIN (R exhibitions.exhibition.subjects) m.04_ngp3))"
        }
    },
    "901": {
        "generations": "Who wrote a recipe that uses a wok as a culinary tool?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.084rd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.084rd ns:food.culinary_tool.used_in_recipes ?y .\n?y ns:food.recipe.author ?x .\n}\n",
            "TopicEntityMid": "m.084rd",
            "mid2name": {
                "ns:m.084rd": "Wok"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) Wok))",
            "SExpr": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) m.084rd))"
        }
    },
    "902": {
        "generations": "what type of objects are asteroids a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jvq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jvq ns:astronomy.celestial_object_category.objects ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.0jvq",
            "mid2name": {
                "ns:m.0jvq": "Asteroid"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.celestial_object_category.objects) Asteroid))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.celestial_object_category.objects) m.0jvq))"
        }
    },
    "903": {
        "generations": "who held the title of prince of asturias?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018q9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018q9p ns:royalty.noble_title.holders ?y .\n?y ns:royalty.noble_title_tenure.noble_person ?x .\n}\n",
            "TopicEntityMid": "m.018q9p",
            "mid2name": {
                "ns:m.018q9p": "Prince of Asturias"
            },
            "SExpr_w_name": "(JOIN (R royalty.noble_title_tenure.noble_person) (JOIN (R royalty.noble_title.holders) Prince of Asturias))",
            "SExpr": "(JOIN (R royalty.noble_title_tenure.noble_person) (JOIN (R royalty.noble_title.holders) m.018q9p))"
        }
    },
    "904": {
        "generations": "which comic book series did hera create a character for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p_5jy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p_5jy ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:comic_books.comic_book_penciler.comic_books_penciled ?x .\n}\n",
            "TopicEntityMid": "m.02p_5jy",
            "mid2name": {
                "ns:m.02p_5jy": "Hera"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R fictional_universe.fictional_character.character_created_by) Hera))",
            "SExpr": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R fictional_universe.fictional_character.character_created_by) m.02p_5jy))"
        }
    },
    "905": {
        "generations": "who advocates for the use of protease inhibitors in medical treatment?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_vrv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_vrv ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.activism.activism_issue.activists ?x .\n}\n",
            "TopicEntityMid": "m.02_vrv",
            "mid2name": {
                "ns:m.02_vrv": "Protease inhibitor"
            },
            "SExpr_w_name": "(JOIN (R base.activism.activism_issue.activists) (JOIN (R medicine.medical_treatment.used_to_treat) Protease inhibitor))",
            "SExpr": "(JOIN (R base.activism.activism_issue.activists) (JOIN (R medicine.medical_treatment.used_to_treat) m.02_vrv))"
        }
    },
    "906": {
        "generations": "who composed the star-spangled banner?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07mx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07mx2 ns:music.composition.composer ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.07mx2",
            "mid2name": {
                "ns:m.07mx2": "The Star-Spangled Banner"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) The Star-Spangled Banner))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) m.07mx2))"
        }
    },
    "907": {
        "generations": "How do you pronounce the word \"Warehouse\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02nzw0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02nzw0 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02nzw0",
            "mid2name": {
                "ns:m.02nzw0": "Warehouse"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Warehouse))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02nzw0))"
        }
    },
    "908": {
        "generations": "what is the gender breakdown of members in the methodist church?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gptwy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gptwy ns:religion.religion.organizations ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.05gptwy",
            "mid2name": {
                "ns:m.05gptwy": "Methodist"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R religion.religion.organizations) Methodist))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R religion.religion.organizations) m.05gptwy))"
        }
    },
    "909": {
        "generations": "how do you pronounce tahlequah municipal airport?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nhldjr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nhldjr ns:location.location.time_zones ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0nhldjr",
            "mid2name": {
                "ns:m.0nhldjr": "Tahlequah Municipal Airport"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.location.time_zones) Tahlequah Municipal Airport))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R location.location.time_zones) m.0nhldjr))"
        }
    },
    "910": {
        "generations": "who created the character super-soldier in comic books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.1211jmwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.1211jmwc ns:fictional_universe.fictional_character.character_created_by ?y .\n?y ns:comic_books.comic_book_inker.comic_covers_inked ?x .\n}\n",
            "TopicEntityMid": "g.1211jmwc",
            "mid2name": {
                "ns:g.1211jmwc": "Super-Soldier"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R fictional_universe.fictional_character.character_created_by) Super-Soldier))",
            "SExpr": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R fictional_universe.fictional_character.character_created_by) g.1211jmwc))"
        }
    },
    "911": {
        "generations": "where is Bay Terrace located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gr7gz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gr7gz ns:location.location.containedby ?y .\n?y ns:location.location.geolocation ?x .\n}\n",
            "TopicEntityMid": "m.03gr7gz",
            "mid2name": {
                "ns:m.03gr7gz": "Bay Terrace"
            },
            "SExpr_w_name": "(JOIN (R location.location.geolocation) (JOIN (R location.location.containedby) Bay Terrace))",
            "SExpr": "(JOIN (R location.location.geolocation) (JOIN (R location.location.containedby) m.03gr7gz))"
        }
    },
    "912": {
        "generations": "which album did dean watson engineer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07893ng)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07893ng ns:music.engineer.releases_engineered ?y .\n?y ns:music.release.album ?x .\n}\n",
            "TopicEntityMid": "m.07893ng",
            "mid2name": {
                "ns:m.07893ng": "Dean Watson"
            },
            "SExpr_w_name": "(JOIN (R music.release.album) (JOIN (R music.engineer.releases_engineered) Dean Watson))",
            "SExpr": "(JOIN (R music.release.album) (JOIN (R music.engineer.releases_engineered) m.07893ng))"
        }
    },
    "913": {
        "generations": "who are the richest sketch comedians?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dm00)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dm00 ns:base.americancomedy.comedy_genre.comedians_in_this_genre ?y .\n?y ns:celebrities.celebrity.net_worth ?x .\n}\n",
            "TopicEntityMid": "m.0dm00",
            "mid2name": {
                "ns:m.0dm00": "Sketch comedy"
            },
            "SExpr_w_name": "(JOIN (R celebrities.celebrity.net_worth) (JOIN (R base.americancomedy.comedy_genre.comedians_in_this_genre) Sketch comedy))",
            "SExpr": "(JOIN (R celebrities.celebrity.net_worth) (JOIN (R base.americancomedy.comedy_genre.comedians_in_this_genre) m.0dm00))"
        }
    },
    "914": {
        "generations": "which political parties are associated with the vanguard periodical?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03c9rmq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03c9rmq ns:book.periodical.subjects ?y .\n?y ns:government.political_ideology.political_parties ?x .\n}\n",
            "TopicEntityMid": "m.03c9rmq",
            "mid2name": {
                "ns:m.03c9rmq": "Vanguard"
            },
            "SExpr_w_name": "(JOIN (R government.political_ideology.political_parties) (JOIN (R book.periodical.subjects) Vanguard))",
            "SExpr": "(JOIN (R government.political_ideology.political_parties) (JOIN (R book.periodical.subjects) m.03c9rmq))"
        }
    },
    "915": {
        "generations": "What breeds of animals originated from the geographic scope of the People's Monarchist Party?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.069gcq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.069gcq ns:organization.organization.geographic_scope ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.069gcq",
            "mid2name": {
                "ns:m.069gcq": "People's Monarchist Party"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R organization.organization.geographic_scope) People's Monarchist Party))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R organization.organization.geographic_scope) m.069gcq))"
        }
    },
    "916": {
        "generations": "What is the locus of Chromosome 21 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgm7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgm7 ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgm7",
            "mid2name": {
                "ns:m.02kwgm7": "Chromosome 21 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 21 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgm7))"
        }
    },
    "917": {
        "generations": "who wrote the book review of Leonardo's Mountain of Clams and the Diet of Worms by Jim Walker?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bj4jxm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bj4jxm ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0bj4jxm",
            "mid2name": {
                "ns:m.0bj4jxm": "Review of Leonardo's Mountain of Clams and the Diet of Worms by Jim Walker"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Review of Leonardo's Mountain of Clams and the Diet of Worms by Jim Walker))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0bj4jxm))"
        }
    },
    "918": {
        "generations": "What is the status of astronomical discoveries made using Doppler spectroscopy (radial velocity)?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qvd94)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qvd94 ns:astronomy.astronomical_discovery_technique.astronomical_discoveries_by_this_method ?y .\n?y ns:astronomy.astronomical_discovery.status ?x .\n}\n",
            "TopicEntityMid": "m.02qvd94",
            "mid2name": {
                "ns:m.02qvd94": "Doppler spectroscopy (radial velocity)"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.astronomical_discovery_technique.astronomical_discoveries_by_this_method) Doppler spectroscopy (radial velocity)))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.astronomical_discovery_technique.astronomical_discoveries_by_this_method) m.02qvd94))"
        }
    },
    "919": {
        "generations": "In which fictional universes does Taskmaster appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ktd7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ktd7 ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.03ktd7",
            "mid2name": {
                "ns:m.03ktd7": "Taskmaster"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Taskmaster))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.03ktd7))"
        }
    },
    "920": {
        "generations": "what music videos feature the character \"Baby\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j217jm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j217jm ns:music.music_video_character.portrayed_in_music_videos ?y .\n?y ns:music.music_video_performance.music_video ?x .\n}\n",
            "TopicEntityMid": "m.0j217jm",
            "mid2name": {
                "ns:m.0j217jm": "Baby"
            },
            "SExpr_w_name": "(JOIN (R music.music_video_performance.music_video) (JOIN (R music.music_video_character.portrayed_in_music_videos) Baby))",
            "SExpr": "(JOIN (R music.music_video_performance.music_video) (JOIN (R music.music_video_character.portrayed_in_music_videos) m.0j217jm))"
        }
    },
    "921": {
        "generations": "what pet diseases are associated with elizabeth hamilton's gender?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yyw0s8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yyw0s8 ns:people.person.gender ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n}\n",
            "TopicEntityMid": "m.0yyw0s8",
            "mid2name": {
                "ns:m.0yyw0s8": "Elizabeth Hamilton"
            },
            "SExpr_w_name": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R people.person.gender) Elizabeth Hamilton))",
            "SExpr": "(JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R people.person.gender) m.0yyw0s8))"
        }
    },
    "922": {
        "generations": "What award was Channel 4 nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01w92)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01w92 ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.01w92",
            "mid2name": {
                "ns:m.01w92": "Channel 4"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) Channel 4))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.01w92))"
        }
    },
    "923": {
        "generations": "what award was the tennessee lady volunteers basketball team nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qm1zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qm1zq ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.02qm1zq",
            "mid2name": {
                "ns:m.02qm1zq": "Tennessee Lady Volunteers basketball"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) Tennessee Lady Volunteers basketball))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.02qm1zq))"
        }
    },
    "924": {
        "generations": "where was the Pegasus II rocket manufactured?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vpwz5q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vpwz5q ns:spaceflight.rocket.manufacturer ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.0vpwz5q",
            "mid2name": {
                "ns:m.0vpwz5q": "Pegasus II"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R spaceflight.rocket.manufacturer) Pegasus II))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R spaceflight.rocket.manufacturer) m.0vpwz5q))"
        }
    },
    "925": {
        "generations": "What genre of music does the artist who made the song \"Six Underground (Sneak's Kicker mix)\" belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0t8pkd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0t8pkd ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0t8pkd",
            "mid2name": {
                "ns:m.0t8pkd": "Six Underground (Sneak's Kicker mix)"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Six Underground (Sneak's Kicker mix)))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.0t8pkd))"
        }
    },
    "926": {
        "generations": "what books has sharon p. holland written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dgvrll)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dgvrll ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.0dgvrll",
            "mid2name": {
                "ns:m.0dgvrll": "Sharon P. Holland"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Sharon P. Holland))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.0dgvrll))"
        }
    },
    "927": {
        "generations": "How do you pronounce the word poliomyelitis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.068p_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.068p_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.068p_",
            "mid2name": {
                "ns:m.068p_": "Poliomyelitis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Poliomyelitis))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.068p_))"
        }
    },
    "928": {
        "generations": "What historical places of worship are associated with the Pearl of Great Price religious text?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0942mh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0942mh ns:religion.religious_text.religious_text_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n}\n",
            "TopicEntityMid": "m.0942mh",
            "mid2name": {
                "ns:m.0942mh": "Pearl of Great Price"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religious_text.religious_text_of) Pearl of Great Price))",
            "SExpr": "(JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religious_text.religious_text_of) m.0942mh))"
        }
    },
    "929": {
        "generations": "What is the name of the aircraft model known as Black Cat?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yp337r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yp337r ns:aviation.aircraft.model ?y .\n?y ns:aviation.aircraft_model.aircraft ?x .\n}\n",
            "TopicEntityMid": "m.0yp337r",
            "mid2name": {
                "ns:m.0yp337r": "Black Cat"
            },
            "SExpr_w_name": "(JOIN (R aviation.aircraft_model.aircraft) (JOIN (R aviation.aircraft.model) Black Cat))",
            "SExpr": "(JOIN (R aviation.aircraft_model.aircraft) (JOIN (R aviation.aircraft.model) m.0yp337r))"
        }
    },
    "930": {
        "generations": "what event did richard nixon speak at?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:base.inaugurations.inauguration_speaker.inauguration ?y .\n?y ns:time.event.instance_of_recurring_event ?x .\n}\n",
            "TopicEntityMid": "m.06c97",
            "mid2name": {
                "ns:m.06c97": "Richard Nixon"
            },
            "SExpr_w_name": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) Richard Nixon))",
            "SExpr": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) m.06c97))"
        }
    },
    "931": {
        "generations": "What products are associated with the Samsung Galaxy Mini product line?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gtt2xr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gtt2xr ns:business.product_line.parent_product_line ?y .\n?y ns:business.brand.products ?x .\n}\n",
            "TopicEntityMid": "m.0gtt2xr",
            "mid2name": {
                "ns:m.0gtt2xr": "Samsung Galaxy Mini"
            },
            "SExpr_w_name": "(JOIN (R business.brand.products) (JOIN (R business.product_line.parent_product_line) Samsung Galaxy Mini))",
            "SExpr": "(JOIN (R business.brand.products) (JOIN (R business.product_line.parent_product_line) m.0gtt2xr))"
        }
    },
    "932": {
        "generations": "What medical trials were sponsored by Pharmacia & Upjohn and what was their design?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04j3f8b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04j3f8b ns:medicine.medical_trial_sponsor.trials_sponsored ?y .\n?y ns:medicine.medical_trial.design ?x .\n}\n",
            "TopicEntityMid": "m.04j3f8b",
            "mid2name": {
                "ns:m.04j3f8b": "Pharmacia & Upjohn"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial.design) (JOIN (R medicine.medical_trial_sponsor.trials_sponsored) Pharmacia & Upjohn))",
            "SExpr": "(JOIN (R medicine.medical_trial.design) (JOIN (R medicine.medical_trial_sponsor.trials_sponsored) m.04j3f8b))"
        }
    },
    "933": {
        "generations": "Which company purchased grapes for their wine production?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ws9_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ws9_1 ns:wine.fruit_source.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.02ws9_1",
            "mid2name": {
                "ns:m.02ws9_1": "Purchased Grapes"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.fruit_source.wines) Purchased Grapes))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.fruit_source.wines) m.02ws9_1))"
        }
    },
    "934": {
        "generations": "how do you pronounce vibraphonist?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01663r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01663r ns:people.profession.people_with_this_profession ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01663r",
            "mid2name": {
                "ns:m.01663r": "Vibraphonist"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.profession.people_with_this_profession) Vibraphonist))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.profession.people_with_this_profession) m.01663r))"
        }
    },
    "935": {
        "generations": "What asteroid group is the Pallas family a founding member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06ngmy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06ngmy ns:astronomy.asteroid_family.founding_asteroid_family_member ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.06ngmy",
            "mid2name": {
                "ns:m.06ngmy": "Pallas family"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.asteroid_family.founding_asteroid_family_member) Pallas family))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.asteroid_family.founding_asteroid_family_member) m.06ngmy))"
        }
    },
    "936": {
        "generations": "what is the gender of the author of the recipe for spicy cauliflower with anchovy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09vj4c0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09vj4c0 ns:food.recipe.author ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.09vj4c0",
            "mid2name": {
                "ns:m.09vj4c0": "Spicy Cauliflower with Anchovy"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R food.recipe.author) Spicy Cauliflower with Anchovy))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R food.recipe.author) m.09vj4c0))"
        }
    },
    "937": {
        "generations": "What drugs increase platelet production?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqy9bw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqy9bw ns:medicine.drug_physiologic_effect.drugs_with_this_physiologic_effect ?y .\n?y ns:medicine.drug.active_moieties ?x .\n}\n",
            "TopicEntityMid": "m.0hqy9bw",
            "mid2name": {
                "ns:m.0hqy9bw": "Increased Platelet Production"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug.active_moieties) (JOIN (R medicine.drug_physiologic_effect.drugs_with_this_physiologic_effect) Increased Platelet Production))",
            "SExpr": "(JOIN (R medicine.drug.active_moieties) (JOIN (R medicine.drug_physiologic_effect.drugs_with_this_physiologic_effect) m.0hqy9bw))"
        }
    },
    "938": {
        "generations": "what is the setting of the work of fiction \"Come On Get Happy\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gktsd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gktsd ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:fictional_universe.fictional_setting.works_set_here ?x .\n}\n",
            "TopicEntityMid": "m.05gktsd",
            "mid2name": {
                "ns:m.05gktsd": "Come On Get Happy"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) Come On Get Happy))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) m.05gktsd))"
        }
    },
    "939": {
        "generations": "What is the active ingredient in Ceftaroline Fosamil Intravenous?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z3w0g3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z3w0g3 ns:medicine.routed_drug.marketed_formulations ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n}\n",
            "TopicEntityMid": "m.0z3w0g3",
            "mid2name": {
                "ns:m.0z3w0g3": "Ceftaroline Fosamil Intravenous"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.routed_drug.marketed_formulations) Ceftaroline Fosamil Intravenous))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.routed_drug.marketed_formulations) m.0z3w0g3))"
        }
    },
    "940": {
        "generations": "How do you pronounce \"Comparative politics\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p48sl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p48sl ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02p48sl",
            "mid2name": {
                "ns:m.02p48sl": "Comparative politics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Comparative politics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02p48sl))"
        }
    },
    "941": {
        "generations": "what type of internet videos does james ford create?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01x2810)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01x2810 ns:music.artist.genre ?y .\n?y ns:base.webvideo.internet_video_genre.internet_video ?x .\n}\n",
            "TopicEntityMid": "m.01x2810",
            "mid2name": {
                "ns:m.01x2810": "James Ford"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video_genre.internet_video) (JOIN (R music.artist.genre) James Ford))",
            "SExpr": "(JOIN (R base.webvideo.internet_video_genre.internet_video) (JOIN (R music.artist.genre) m.01x2810))"
        }
    },
    "942": {
        "generations": "what is the latitude of Vandenberg AFB Space Launch Complex 2?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d7ccq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d7ccq ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.03d7ccq",
            "mid2name": {
                "ns:m.03d7ccq": "Vandenberg AFB Space Launch Complex 2"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Vandenberg AFB Space Launch Complex 2))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.03d7ccq))"
        }
    },
    "943": {
        "generations": "What is the version of the Conkeror software license?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04dcjp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04dcjp ns:computer.software.license ?y .\n?y ns:computer.software_license.version_of ?x .\n}\n",
            "TopicEntityMid": "m.04dcjp",
            "mid2name": {
                "ns:m.04dcjp": "Conkeror"
            },
            "SExpr_w_name": "(JOIN (R computer.software_license.version_of) (JOIN (R computer.software.license) Conkeror))",
            "SExpr": "(JOIN (R computer.software_license.version_of) (JOIN (R computer.software.license) m.04dcjp))"
        }
    },
    "944": {
        "generations": "What are the different generations of Chrysler models?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r5gpq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r5gpq ns:automotive.make.model_s ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.02r5gpq",
            "mid2name": {
                "ns:m.02r5gpq": "Chrysler"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) Chrysler))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) m.02r5gpq))"
        }
    },
    "945": {
        "generations": "What highways are part of the A5 autoroute system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026ybsw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026ybsw ns:transportation.road.highway_system ?y .\n?y ns:transportation.highway_system.highways ?x .\n}\n",
            "TopicEntityMid": "m.026ybsw",
            "mid2name": {
                "ns:m.026ybsw": "A5 autoroute"
            },
            "SExpr_w_name": "(JOIN (R transportation.highway_system.highways) (JOIN (R transportation.road.highway_system) A5 autoroute))",
            "SExpr": "(JOIN (R transportation.highway_system.highways) (JOIN (R transportation.road.highway_system) m.026ybsw))"
        }
    },
    "946": {
        "generations": "what is the gender of the character Dean in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05k17c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05k17c ns:fictional_universe.character_occupation.characters_with_this_occupation ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.05k17c",
            "mid2name": {
                "ns:m.05k17c": "Dean"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) Dean))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) m.05k17c))"
        }
    },
    "947": {
        "generations": "What dog breeds originated near Beni Mellal Airport?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010vrfjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010vrfjd ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.010vrfjd",
            "mid2name": {
                "ns:m.010vrfjd": "Beni Mellal Airport"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Beni Mellal Airport))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.010vrfjd))"
        }
    },
    "948": {
        "generations": "What farms in Santa Fe are served by CSA Farms?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064l2zh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064l2zh ns:film.film.country ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.064l2zh",
            "mid2name": {
                "ns:m.064l2zh": "Santa Fe"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) Santa Fe))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) m.064l2zh))"
        }
    },
    "949": {
        "generations": "where is jeopardy filmed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014l6l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014l6l ns:tv.tv_program.filming_locations ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.014l6l",
            "mid2name": {
                "ns:m.014l6l": "Jeopardy!"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R tv.tv_program.filming_locations) Jeopardy!))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R tv.tv_program.filming_locations) m.014l6l))"
        }
    },
    "950": {
        "generations": "What farms are located near Iowa State University?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03v6t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03v6t ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.03v6t",
            "mid2name": {
                "ns:m.03v6t": "Iowa State University"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Iowa State University))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.03v6t))"
        }
    },
    "951": {
        "generations": "Which aircraft designer created models comparable to Vladimir Gribovski's?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hvwhc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hvwhc ns:aviation.aircraft_designer.aircraft_models_designed ?y .\n?y ns:aviation.aircraft_model.comparable_aircraft ?x .\n}\n",
            "TopicEntityMid": "m.02hvwhc",
            "mid2name": {
                "ns:m.02hvwhc": "Vladimir Gribovski"
            },
            "SExpr_w_name": "(JOIN (R aviation.aircraft_model.comparable_aircraft) (JOIN (R aviation.aircraft_designer.aircraft_models_designed) Vladimir Gribovski))",
            "SExpr": "(JOIN (R aviation.aircraft_model.comparable_aircraft) (JOIN (R aviation.aircraft_designer.aircraft_models_designed) m.02hvwhc))"
        }
    },
    "952": {
        "generations": "What dog breeds originated in Morro Alto?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cc0cp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cc0cp ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.03cc0cp",
            "mid2name": {
                "ns:m.03cc0cp": "Morro Alto"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Morro Alto))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.03cc0cp))"
        }
    },
    "953": {
        "generations": "What award nominations did the video game developer Boogie receive?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02whhvc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02whhvc ns:base.wikipedia_infobox.video_game.developer ?y .\n?y ns:award.award_nominee.award_nominations ?x .\n}\n",
            "TopicEntityMid": "m.02whhvc",
            "mid2name": {
                "ns:m.02whhvc": "Boogie"
            },
            "SExpr_w_name": "(JOIN (R award.award_nominee.award_nominations) (JOIN (R base.wikipedia_infobox.video_game.developer) Boogie))",
            "SExpr": "(JOIN (R award.award_nominee.award_nominations) (JOIN (R base.wikipedia_infobox.video_game.developer) m.02whhvc))"
        }
    },
    "954": {
        "generations": "What award was the Harry Potter literary series nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.078ffw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.078ffw ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.078ffw",
            "mid2name": {
                "ns:m.078ffw": "Harry Potter literary series"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Harry Potter literary series))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.078ffw))"
        }
    },
    "955": {
        "generations": "What is the version of the Midgard software license?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0211s8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0211s8 ns:computer.software.license ?y .\n?y ns:computer.software_license.version_of ?x .\n}\n",
            "TopicEntityMid": "m.0211s8",
            "mid2name": {
                "ns:m.0211s8": "Midgard"
            },
            "SExpr_w_name": "(JOIN (R computer.software_license.version_of) (JOIN (R computer.software.license) Midgard))",
            "SExpr": "(JOIN (R computer.software_license.version_of) (JOIN (R computer.software.license) m.0211s8))"
        }
    },
    "956": {
        "generations": "what are the latitude coordinates of Ekoji Buddhist Temple?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026zwbp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026zwbp ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.026zwbp",
            "mid2name": {
                "ns:m.026zwbp": "Ekoji Buddhist Temple"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Ekoji Buddhist Temple))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.026zwbp))"
        }
    },
    "957": {
        "generations": "How do you pronounce the name of the Society Islands?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d77ry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d77ry ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0d77ry",
            "mid2name": {
                "ns:m.0d77ry": "Society Islands"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Society Islands))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0d77ry))"
        }
    },
    "958": {
        "generations": "What are some popular podcasts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04058p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04058p ns:internet.website.category ?y .\n?y ns:internet.website_category.sites ?x .\n}\n",
            "TopicEntityMid": "m.04058p",
            "mid2name": {
                "ns:m.04058p": "Podcast"
            },
            "SExpr_w_name": "(JOIN (R internet.website_category.sites) (JOIN (R internet.website.category) Podcast))",
            "SExpr": "(JOIN (R internet.website_category.sites) (JOIN (R internet.website.category) m.04058p))"
        }
    },
    "959": {
        "generations": "How do you pronounce the word \"Transsexualism\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07qkc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07qkc ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07qkc",
            "mid2name": {
                "ns:m.07qkc": "Transsexualism"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Transsexualism))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07qkc))"
        }
    },
    "960": {
        "generations": "What is the processor family of the Macintosh Quadra 605?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bsdpr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bsdpr ns:computer.computer.processor ?y .\n?y ns:computer.computer_processor.processor_family ?x .\n}\n",
            "TopicEntityMid": "m.0bsdpr",
            "mid2name": {
                "ns:m.0bsdpr": "Macintosh Quadra 605"
            },
            "SExpr_w_name": "(JOIN (R computer.computer_processor.processor_family) (JOIN (R computer.computer.processor) Macintosh Quadra 605))",
            "SExpr": "(JOIN (R computer.computer_processor.processor_family) (JOIN (R computer.computer.processor) m.0bsdpr))"
        }
    },
    "961": {
        "generations": "What brand of camera does Panasonic Corporation manufacture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nk5b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nk5b ns:digicams.camera_sensor_manufacturer.cameras ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.0nk5b",
            "mid2name": {
                "ns:m.0nk5b": "Panasonic Corporation"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_sensor_manufacturer.cameras) Panasonic Corporation))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_sensor_manufacturer.cameras) m.0nk5b))"
        }
    },
    "962": {
        "generations": "how do you pronounce the name Theseus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pdy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pdy ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07pdy",
            "mid2name": {
                "ns:m.07pdy": "Theseus"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Theseus))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.07pdy))"
        }
    },
    "963": {
        "generations": "What league does the Malaysia national cricket team participate in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b7_mm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b7_mm ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.0b7_mm",
            "mid2name": {
                "ns:m.0b7_mm": "Malaysia national cricket team"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Malaysia national cricket team))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.0b7_mm))"
        }
    },
    "964": {
        "generations": "who wrote the book \"Love takes wing\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wdjp2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wdjp2 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04wdjp2",
            "mid2name": {
                "ns:m.04wdjp2": "Love takes wing"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Love takes wing))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.04wdjp2))"
        }
    },
    "965": {
        "generations": "What is the scheme for pediatric cardiology gardening hints?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bp2y5h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bp2y5h ns:dataworld.gardening_hint.split_to ?y .\n?y ns:base.skosbase.skos_concept.in_scheme ?x .\n}\n",
            "TopicEntityMid": "m.0bp2y5h",
            "mid2name": {
                "ns:m.0bp2y5h": "Pediatric cardiology"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.skos_concept.in_scheme) (JOIN (R dataworld.gardening_hint.split_to) Pediatric cardiology))",
            "SExpr": "(JOIN (R base.skosbase.skos_concept.in_scheme) (JOIN (R dataworld.gardening_hint.split_to) m.0bp2y5h))"
        }
    },
    "966": {
        "generations": "who edited the issue before X-Men #29 in the comic book series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h2c1ll)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h2c1ll ns:comic_books.comic_book_issue.previous_issue ?y .\n?y ns:comic_books.comic_book_issue.editor ?x .\n}\n",
            "TopicEntityMid": "m.0h2c1ll",
            "mid2name": {
                "ns:m.0h2c1ll": "X-Men #29"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_issue.editor) (JOIN (R comic_books.comic_book_issue.previous_issue) X-Men #29))",
            "SExpr": "(JOIN (R comic_books.comic_book_issue.editor) (JOIN (R comic_books.comic_book_issue.previous_issue) m.0h2c1ll))"
        }
    },
    "967": {
        "generations": "who is the authority for data operations in freebase?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.021ympy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.021ympy ns:dataworld.information_source.data_operations ?y .\n?y ns:dataworld.mass_data_operation.authority ?x .\n}\n",
            "TopicEntityMid": "m.021ympy",
            "mid2name": {
                "ns:m.021ympy": "Freebase"
            },
            "SExpr_w_name": "(JOIN (R dataworld.mass_data_operation.authority) (JOIN (R dataworld.information_source.data_operations) Freebase))",
            "SExpr": "(JOIN (R dataworld.mass_data_operation.authority) (JOIN (R dataworld.information_source.data_operations) m.021ympy))"
        }
    },
    "968": {
        "generations": "what operations are performed on data from apple blossom mall's owner?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l_xg7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l_xg7 ns:business.shopping_center.owner ?y .\n?y ns:dataworld.information_source.data_operations ?x .\n}\n",
            "TopicEntityMid": "m.03l_xg7",
            "mid2name": {
                "ns:m.03l_xg7": "Apple Blossom Mall"
            },
            "SExpr_w_name": "(JOIN (R dataworld.information_source.data_operations) (JOIN (R business.shopping_center.owner) Apple Blossom Mall))",
            "SExpr": "(JOIN (R dataworld.information_source.data_operations) (JOIN (R business.shopping_center.owner) m.03l_xg7))"
        }
    },
    "969": {
        "generations": "What dog breeds originated in Ukraine according to the Ministry of Foreign Affairs?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gpzyc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gpzyc ns:government.government_agency.jurisdiction ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.04gpzyc",
            "mid2name": {
                "ns:m.04gpzyc": "Ukraine Ministry of Foreign Affairs"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R government.government_agency.jurisdiction) Ukraine Ministry of Foreign Affairs))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R government.government_agency.jurisdiction) m.04gpzyc))"
        }
    },
    "970": {
        "generations": "What genre of music does the artist Blasphemy play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rxr8x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rxr8x ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.09rxr8x",
            "mid2name": {
                "ns:m.09rxr8x": "Blasphemy"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Blasphemy))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.09rxr8x))"
        }
    },
    "971": {
        "generations": "What country is Ginny Weasley's family from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.076ydym)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.076ydym ns:user.pak21.default_domain.fictional_family_member.family ?y .\n?y ns:people.family.country ?x .\n}\n",
            "TopicEntityMid": "m.076ydym",
            "mid2name": {
                "ns:m.076ydym": "Ginny Weasley"
            },
            "SExpr_w_name": "(JOIN (R people.family.country) (JOIN (R user.pak21.default_domain.fictional_family_member.family) Ginny Weasley))",
            "SExpr": "(JOIN (R people.family.country) (JOIN (R user.pak21.default_domain.fictional_family_member.family) m.076ydym))"
        }
    },
    "972": {
        "generations": "How do you pronounce Mirtazapine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lts4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lts4 ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02lts4",
            "mid2name": {
                "ns:m.02lts4": "Mirtazapine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Mirtazapine))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.02lts4))"
        }
    },
    "973": {
        "generations": "What anime/manga franchise features sex and nudity in video games?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05rs5x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05rs5x ns:cvg.cvg_genre.games ?y .\n?y ns:base.animemanga.anime_manga_franchise.anime_title ?x .\n}\n",
            "TopicEntityMid": "m.05rs5x",
            "mid2name": {
                "ns:m.05rs5x": "Sex and nudity in video games"
            },
            "SExpr_w_name": "(JOIN (R base.animemanga.anime_manga_franchise.anime_title) (JOIN (R cvg.cvg_genre.games) Sex and nudity in video games))",
            "SExpr": "(JOIN (R base.animemanga.anime_manga_franchise.anime_title) (JOIN (R cvg.cvg_genre.games) m.05rs5x))"
        }
    },
    "974": {
        "generations": "How do you pronounce soy milk in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02dz6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02dz6q ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02dz6q",
            "mid2name": {
                "ns:m.02dz6q": "Soy milk"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Soy milk))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02dz6q))"
        }
    },
    "975": {
        "generations": "which political party did Cage-Barile belong to during the 2008 assembly election?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03yx5_g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03yx5_g ns:government.election_campaign.candidate ?y .\n?y ns:government.politician.party ?x .\n}\n",
            "TopicEntityMid": "m.03yx5_g",
            "mid2name": {
                "ns:m.03yx5_g": "Cage-Barile for Assembly 2008"
            },
            "SExpr_w_name": "(JOIN (R government.politician.party) (JOIN (R government.election_campaign.candidate) Cage-Barile for Assembly 2008))",
            "SExpr": "(JOIN (R government.politician.party) (JOIN (R government.election_campaign.candidate) m.03yx5_g))"
        }
    },
    "976": {
        "generations": "What religion includes the belief of irresistible grace?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ncyj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ncyj ns:religion.belief.belief_of ?y .\n?y ns:religion.religion.includes ?x .\n}\n",
            "TopicEntityMid": "m.03ncyj",
            "mid2name": {
                "ns:m.03ncyj": "Irresistible grace"
            },
            "SExpr_w_name": "(JOIN (R religion.religion.includes) (JOIN (R religion.belief.belief_of) Irresistible grace))",
            "SExpr": "(JOIN (R religion.religion.includes) (JOIN (R religion.belief.belief_of) m.03ncyj))"
        }
    },
    "977": {
        "generations": "What fictional organization is featured in Chapter Six: Husbands and Wives?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04c_f9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04c_f9k ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.04c_f9k",
            "mid2name": {
                "ns:m.04c_f9k": "Chapter Six: Husbands and Wives"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) Chapter Six: Husbands and Wives))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) m.04c_f9k))"
        }
    },
    "978": {
        "generations": "How do you pronounce \"Cultural geography\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07xc_j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07xc_j ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.07xc_j",
            "mid2name": {
                "ns:m.07xc_j": "Cultural geography"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Cultural geography))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.07xc_j))"
        }
    },
    "979": {
        "generations": "What is the openlibrary ID for the book \"Japanese propaganda: selected readings\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qzjhb3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qzjhb3 ns:book.book_edition_series.sub_series ?y .\n?y ns:book.book_edition.openlibrary_id ?x .\n}\n",
            "TopicEntityMid": "m.0qzjhb3",
            "mid2name": {
                "ns:m.0qzjhb3": "Japanese propaganda : selected readings"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.openlibrary_id) (JOIN (R book.book_edition_series.sub_series) Japanese propaganda : selected readings))",
            "SExpr": "(JOIN (R book.book_edition.openlibrary_id) (JOIN (R book.book_edition_series.sub_series) m.0qzjhb3))"
        }
    },
    "980": {
        "generations": "who developed the content management system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k23c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k23c ns:internet.website_category.sites ?y .\n?y ns:computer.software.developer ?x .\n}\n",
            "TopicEntityMid": "m.0k23c",
            "mid2name": {
                "ns:m.0k23c": "Content management system"
            },
            "SExpr_w_name": "(JOIN (R computer.software.developer) (JOIN (R internet.website_category.sites) Content management system))",
            "SExpr": "(JOIN (R computer.software.developer) (JOIN (R internet.website_category.sites) m.0k23c))"
        }
    },
    "981": {
        "generations": "What award was Martha Stewart Living: Potato Pierogies nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_7fmf1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_7fmf1 ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0_7fmf1",
            "mid2name": {
                "ns:m.0_7fmf1": "Martha Stewart Living: Potato Pierogies"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Martha Stewart Living: Potato Pierogies))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0_7fmf1))"
        }
    },
    "982": {
        "generations": "who are the members of the fictional organization in stargate?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039bz5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039bz5 ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:fictional_universe.fictional_organization.members ?x .\n}\n",
            "TopicEntityMid": "m.039bz5",
            "mid2name": {
                "ns:m.039bz5": "Stargate"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_organization.members) (JOIN (R fictional_universe.fictional_universe.organizations) Stargate))",
            "SExpr": "(JOIN (R fictional_universe.fictional_organization.members) (JOIN (R fictional_universe.fictional_universe.organizations) m.039bz5))"
        }
    },
    "983": {
        "generations": "when was paul laune's first book published?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xpj0zh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xpj0zh ns:book.author.works_written ?y .\n?y ns:book.written_work.date_of_first_publication ?x .\n}\n",
            "TopicEntityMid": "m.0xpj0zh",
            "mid2name": {
                "ns:m.0xpj0zh": "Paul Laune"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.date_of_first_publication) (JOIN (R book.author.works_written) Paul Laune))",
            "SExpr": "(JOIN (R book.written_work.date_of_first_publication) (JOIN (R book.author.works_written) m.0xpj0zh))"
        }
    },
    "984": {
        "generations": "What award was Big Switch nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09v3f6j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09v3f6j ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.09v3f6j",
            "mid2name": {
                "ns:m.09v3f6j": "Big Switch"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Big Switch))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.09v3f6j))"
        }
    },
    "985": {
        "generations": "How do you pronounce \"Japanese architecture\" in Japanese?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yjfd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yjfd ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01yjfd",
            "mid2name": {
                "ns:m.01yjfd": "Japanese architecture"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Japanese architecture))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01yjfd))"
        }
    },
    "986": {
        "generations": "which company produces the 2005 Bourassa Napa Valley Zinfandel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gl5_3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gl5_3 ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.03gl5_3",
            "mid2name": {
                "ns:m.03gl5_3": "2005 Bourassa Napa Valley Zinfandel"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) 2005 Bourassa Napa Valley Zinfandel))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.03gl5_3))"
        }
    },
    "987": {
        "generations": "what book was published in the magazine of fantasy and science fiction in june 1954?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hj0cmb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hj0cmb ns:book.publication.contents ?y .\n?y ns:book.contents.work ?x .\n}\n",
            "TopicEntityMid": "m.0hj0cmb",
            "mid2name": {
                "ns:m.0hj0cmb": "The Magazine of Fantasy and Science Fiction, June 1954"
            },
            "SExpr_w_name": "(JOIN (R book.contents.work) (JOIN (R book.publication.contents) The Magazine of Fantasy and Science Fiction, June 1954))",
            "SExpr": "(JOIN (R book.contents.work) (JOIN (R book.publication.contents) m.0hj0cmb))"
        }
    },
    "988": {
        "generations": "what degree do you need to become a teacher in the UK?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051y3r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051y3r ns:education.educational_degree.people_with_this_degree ?y .\n?y ns:education.education.institution ?x .\n}\n",
            "TopicEntityMid": "m.051y3r",
            "mid2name": {
                "ns:m.051y3r": "Postgraduate Certificate in Education"
            },
            "SExpr_w_name": "(JOIN (R education.education.institution) (JOIN (R education.educational_degree.people_with_this_degree) Postgraduate Certificate in Education))",
            "SExpr": "(JOIN (R education.education.institution) (JOIN (R education.educational_degree.people_with_this_degree) m.051y3r))"
        }
    },
    "989": {
        "generations": "when is the next \u00darvalsdeild event in the series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06vvwm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06vvwm ns:time.recurring_event.instances ?y .\n?y ns:time.event.next_in_series ?x .\n}\n",
            "TopicEntityMid": "m.06vvwm",
            "mid2name": {
                "ns:m.06vvwm": "\u00darvalsdeild"
            },
            "SExpr_w_name": "(JOIN (R time.event.next_in_series) (JOIN (R time.recurring_event.instances) \u00darvalsdeild))",
            "SExpr": "(JOIN (R time.event.next_in_series) (JOIN (R time.recurring_event.instances) m.06vvwm))"
        }
    },
    "990": {
        "generations": "What is the API for OpenSocial protocol?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cqlyc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cqlyc ns:internet.api.protocols ?y .\n?y ns:internet.protocol.api ?x .\n}\n",
            "TopicEntityMid": "m.03cqlyc",
            "mid2name": {
                "ns:m.03cqlyc": "OpenSocial"
            },
            "SExpr_w_name": "(JOIN (R internet.protocol.api) (JOIN (R internet.api.protocols) OpenSocial))",
            "SExpr": "(JOIN (R internet.protocol.api) (JOIN (R internet.api.protocols) m.03cqlyc))"
        }
    },
    "991": {
        "generations": "What is the gender-neutral plural form of \"Speaker of the United States House of Representatives\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cgqx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cgqx ns:base.schemastaging.context_name.plural ?y .\n?y ns:base.schemastaging.plural_form.gender ?x .\n}\n",
            "TopicEntityMid": "m.0cgqx",
            "mid2name": {
                "ns:m.0cgqx": "Speaker of the United States House of Representatives"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.schemastaging.context_name.plural) Speaker of the United States House of Representatives))",
            "SExpr": "(JOIN (R base.schemastaging.plural_form.gender) (JOIN (R base.schemastaging.context_name.plural) m.0cgqx))"
        }
    },
    "992": {
        "generations": "where is alma heights eagle school located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k_xh0p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k_xh0p ns:education.school_mascot.school ?y .\n?y ns:location.location.geolocation ?x .\n}\n",
            "TopicEntityMid": "m.0k_xh0p",
            "mid2name": {
                "ns:m.0k_xh0p": "Alma Heights Eagle"
            },
            "SExpr_w_name": "(JOIN (R location.location.geolocation) (JOIN (R education.school_mascot.school) Alma Heights Eagle))",
            "SExpr": "(JOIN (R location.location.geolocation) (JOIN (R education.school_mascot.school) m.0k_xh0p))"
        }
    },
    "993": {
        "generations": "What genre of music is the album \"Mama Said\" and who composed it?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cz6dr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cz6dr ns:music.composition.composer ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0cz6dr",
            "mid2name": {
                "ns:m.0cz6dr": "Mama Said"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) Mama Said))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.composition.composer) m.0cz6dr))"
        }
    },
    "994": {
        "generations": "What is the origin of the name \"Cricket\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09xp_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09xp_ ns:symbols.name_source.namesakes ?y .\n?y ns:symbols.namesake.named_after ?x .\n}\n",
            "TopicEntityMid": "m.09xp_",
            "mid2name": {
                "ns:m.09xp_": "Cricket"
            },
            "SExpr_w_name": "(JOIN (R symbols.namesake.named_after) (JOIN (R symbols.name_source.namesakes) Cricket))",
            "SExpr": "(JOIN (R symbols.namesake.named_after) (JOIN (R symbols.name_source.namesakes) m.09xp_))"
        }
    },
    "995": {
        "generations": "who invented the reflecting telescope and what books did they write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01nhc9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01nhc9 ns:law.invention.inventor ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01nhc9",
            "mid2name": {
                "ns:m.01nhc9": "Reflecting telescope"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) Reflecting telescope))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) m.01nhc9))"
        }
    },
    "996": {
        "generations": "what books did david mcclelland write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018pq1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018pq1 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.018pq1",
            "mid2name": {
                "ns:m.018pq1": "David McClelland"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) David McClelland))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.018pq1))"
        }
    },
    "997": {
        "generations": "Which company produces cameras with an unknown sensor manufacturer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrf_0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrf_0 ns:digicams.camera_sensor_manufacturer.cameras ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.01xrf_0",
            "mid2name": {
                "ns:m.01xrf_0": "Unknown"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_sensor_manufacturer.cameras) Unknown))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_sensor_manufacturer.cameras) m.01xrf_0))"
        }
    },
    "998": {
        "generations": "How do you pronounce the word \"pork\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0frq6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0frq6 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0frq6",
            "mid2name": {
                "ns:m.0frq6": "Pork"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Pork))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0frq6))"
        }
    },
    "999": {
        "generations": "How do you pronounce \"Physical medicine and rehabilitation\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047qnf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047qnf ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.047qnf",
            "mid2name": {
                "ns:m.047qnf": "Physical medicine and rehabilitation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Physical medicine and rehabilitation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.047qnf))"
        }
    },
    "1000": {
        "generations": "who recorded a song featuring Cilla Caine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012_7htx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012_7htx ns:music.featured_artist.recordings ?y .\n?y ns:music.recording.artist ?x .\n}\n",
            "TopicEntityMid": "m.012_7htx",
            "mid2name": {
                "ns:m.012_7htx": "Cilla Caine"
            },
            "SExpr_w_name": "(JOIN (R music.recording.artist) (JOIN (R music.featured_artist.recordings) Cilla Caine))",
            "SExpr": "(JOIN (R music.recording.artist) (JOIN (R music.featured_artist.recordings) m.012_7htx))"
        }
    },
    "1001": {
        "generations": "Who wrote the book referenced in the medical trial for oral collagen for rheumatoid arthritis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbwj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbwj ns:medicine.medical_trial.references ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03zbbwj",
            "mid2name": {
                "ns:m.03zbbwj": "Oral Collagen for Rheumatoid Arthritis"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) Oral Collagen for Rheumatoid Arthritis))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R medicine.medical_trial.references) m.03zbbwj))"
        }
    },
    "1002": {
        "generations": "How do you pronounce \"Direct contact transmission\" in medical terminology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05bm186)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05bm186 ns:medicine.transmission_route.infections_that_travel_this_way ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05bm186",
            "mid2name": {
                "ns:m.05bm186": "Direct contact transmission"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.transmission_route.infections_that_travel_this_way) Direct contact transmission))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.transmission_route.infections_that_travel_this_way) m.05bm186))"
        }
    },
    "1003": {
        "generations": "How do you pronounce Phthirus pubis infestation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dc5_q2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dc5_q2 ns:medicine.disease.medical_specialties ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0dc5_q2",
            "mid2name": {
                "ns:m.0dc5_q2": "Phthirus pubis infestation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.disease.medical_specialties) Phthirus pubis infestation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.disease.medical_specialties) m.0dc5_q2))"
        }
    },
    "1004": {
        "generations": "what is the atomic mass of aluminum?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027vj2v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027vj2v ns:chemistry.chemical_element.atomic_mass ?y .\n?y ns:chemistry.atomic_mass.mass ?x .\n}\n",
            "TopicEntityMid": "m.027vj2v",
            "mid2name": {
                "ns:m.027vj2v": "Aluminium"
            },
            "SExpr_w_name": "(JOIN (R chemistry.atomic_mass.mass) (JOIN (R chemistry.chemical_element.atomic_mass) Aluminium))",
            "SExpr": "(JOIN (R chemistry.atomic_mass.mass) (JOIN (R chemistry.chemical_element.atomic_mass) m.027vj2v))"
        }
    },
    "1005": {
        "generations": "What software did DreamSpec develop?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rktx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rktx2 ns:computer.software.developer ?y .\n?y ns:computer.software_developer.software ?x .\n}\n",
            "TopicEntityMid": "m.09rktx2",
            "mid2name": {
                "ns:m.09rktx2": "DreamSpec"
            },
            "SExpr_w_name": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) DreamSpec))",
            "SExpr": "(JOIN (R computer.software_developer.software) (JOIN (R computer.software.developer) m.09rktx2))"
        }
    },
    "1006": {
        "generations": "Who is the author of the book Restri\u015fti?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hl_t5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hl_t5 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.07hl_t5",
            "mid2name": {
                "ns:m.07hl_t5": "Restri\u015fti"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Restri\u015fti))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.07hl_t5))"
        }
    },
    "1007": {
        "generations": "What songs did The Globetrotters record?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dm8rvg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dm8rvg ns:music.artist.track ?y .\n?y ns:music.recording.tracks ?x .\n}\n",
            "TopicEntityMid": "m.0dm8rvg",
            "mid2name": {
                "ns:m.0dm8rvg": "The Globetrotters"
            },
            "SExpr_w_name": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) The Globetrotters))",
            "SExpr": "(JOIN (R music.recording.tracks) (JOIN (R music.artist.track) m.0dm8rvg))"
        }
    },
    "1008": {
        "generations": "Which areas were affected by the strongest storm in the 1990 Atlantic hurricane season?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d987)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d987 ns:meteorology.tropical_cyclone_season.strongest_storm ?y .\n?y ns:meteorology.tropical_cyclone.affected_areas ?x .\n}\n",
            "TopicEntityMid": "m.03d987",
            "mid2name": {
                "ns:m.03d987": "1990 Atlantic hurricane season"
            },
            "SExpr_w_name": "(JOIN (R meteorology.tropical_cyclone.affected_areas) (JOIN (R meteorology.tropical_cyclone_season.strongest_storm) 1990 Atlantic hurricane season))",
            "SExpr": "(JOIN (R meteorology.tropical_cyclone.affected_areas) (JOIN (R meteorology.tropical_cyclone_season.strongest_storm) m.03d987))"
        }
    },
    "1009": {
        "generations": "what event did james a. garfield speak at?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b22w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b22w ns:base.inaugurations.inauguration_speaker.inauguration ?y .\n?y ns:time.event.instance_of_recurring_event ?x .\n}\n",
            "TopicEntityMid": "m.0b22w",
            "mid2name": {
                "ns:m.0b22w": "James A. Garfield"
            },
            "SExpr_w_name": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) James A. Garfield))",
            "SExpr": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R base.inaugurations.inauguration_speaker.inauguration) m.0b22w))"
        }
    },
    "1010": {
        "generations": "What award was Sunday in the Park With George (2006 London revival cast) nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jzhl0l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jzhl0l ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.0jzhl0l",
            "mid2name": {
                "ns:m.0jzhl0l": "Sunday in the Park With George (2006 London revival cast)"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Sunday in the Park With George (2006 London revival cast)))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0jzhl0l))"
        }
    },
    "1011": {
        "generations": "what is the latitude of cape canaveral air force station space launch complex 17?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ds2k1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ds2k1 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0ds2k1",
            "mid2name": {
                "ns:m.0ds2k1": "Cape Canaveral Air Force Station Space Launch Complex 17"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Cape Canaveral Air Force Station Space Launch Complex 17))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0ds2k1))"
        }
    },
    "1012": {
        "generations": "which tracks did ian parsons contribute to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ksfst3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ksfst3 ns:music.artist.track_contributions ?y .\n?y ns:music.track_contribution.track ?x .\n}\n",
            "TopicEntityMid": "m.0ksfst3",
            "mid2name": {
                "ns:m.0ksfst3": "Ian Parsons"
            },
            "SExpr_w_name": "(JOIN (R music.track_contribution.track) (JOIN (R music.artist.track_contributions) Ian Parsons))",
            "SExpr": "(JOIN (R music.track_contribution.track) (JOIN (R music.artist.track_contributions) m.0ksfst3))"
        }
    },
    "1013": {
        "generations": "What genre of music is played on KZUW radio station?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s80tw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s80tw ns:broadcast.radio_station.format ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.07s80tw",
            "mid2name": {
                "ns:m.07s80tw": "KZUW"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R broadcast.radio_station.format) KZUW))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R broadcast.radio_station.format) m.07s80tw))"
        }
    },
    "1014": {
        "generations": "Who designed the ship class that Chris Mitchell worked on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.062z8_z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.062z8_z ns:boats.ship_designer.ship_classes_designed ?y .\n?y ns:boats.ship_class.designer ?x .\n}\n",
            "TopicEntityMid": "m.062z8_z",
            "mid2name": {
                "ns:m.062z8_z": "Chris Mitchell"
            },
            "SExpr_w_name": "(JOIN (R boats.ship_class.designer) (JOIN (R boats.ship_designer.ship_classes_designed) Chris Mitchell))",
            "SExpr": "(JOIN (R boats.ship_class.designer) (JOIN (R boats.ship_designer.ship_classes_designed) m.062z8_z))"
        }
    },
    "1015": {
        "generations": "What category does the London Control Tower Sim website belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01260hf3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01260hf3 ns:internet.website.parent_web_property ?y .\n?y ns:internet.website.category ?x .\n}\n",
            "TopicEntityMid": "m.01260hf3",
            "mid2name": {
                "ns:m.01260hf3": "London Control Tower Sim"
            },
            "SExpr_w_name": "(JOIN (R internet.website.category) (JOIN (R internet.website.parent_web_property) London Control Tower Sim))",
            "SExpr": "(JOIN (R internet.website.category) (JOIN (R internet.website.parent_web_property) m.01260hf3))"
        }
    },
    "1016": {
        "generations": "where is Stonyhurst Magazine located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0987lf0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0987lf0 ns:education.school_magazine.school ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0987lf0",
            "mid2name": {
                "ns:m.0987lf0": "Stonyhurst Magazine"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.school_magazine.school) Stonyhurst Magazine))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.school_magazine.school) m.0987lf0))"
        }
    },
    "1017": {
        "generations": "what asteroid group does 7769 Okuni belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03y7v76)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03y7v76 ns:astronomy.asteroid.member_of_asteroid_group ?y .\n?y ns:astronomy.asteroid_group.asteroid_group_members ?x .\n}\n",
            "TopicEntityMid": "m.03y7v76",
            "mid2name": {
                "ns:m.03y7v76": "7769 Okuni"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) 7769 Okuni))",
            "SExpr": "(JOIN (R astronomy.asteroid_group.asteroid_group_members) (JOIN (R astronomy.asteroid.member_of_asteroid_group) m.03y7v76))"
        }
    },
    "1018": {
        "generations": "which holidays were proposed by john lubbock, 1st baron avebury?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01zslg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01zslg ns:law.constitutional_amendment_proposer.constitutional_amendments_proposed ?y .\n?y ns:time.holiday_category.holidays ?x .\n}\n",
            "TopicEntityMid": "m.01zslg",
            "mid2name": {
                "ns:m.01zslg": "John Lubbock, 1st Baron Avebury"
            },
            "SExpr_w_name": "(JOIN (R time.holiday_category.holidays) (JOIN (R law.constitutional_amendment_proposer.constitutional_amendments_proposed) John Lubbock, 1st Baron Avebury))",
            "SExpr": "(JOIN (R time.holiday_category.holidays) (JOIN (R law.constitutional_amendment_proposer.constitutional_amendments_proposed) m.01zslg))"
        }
    },
    "1019": {
        "generations": "What event in the fictional universe is related to the creation of the Stepsons?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0lqhz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0lqhz ns:fictional_universe.event_in_fiction.included_by_these_events ?y .\n?y ns:fictional_universe.event_in_fiction.includes_events ?x .\n}\n",
            "TopicEntityMid": "m.0c0lqhz",
            "mid2name": {
                "ns:m.0c0lqhz": "Creation of the Stepsons"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.event_in_fiction.includes_events) (JOIN (R fictional_universe.event_in_fiction.included_by_these_events) Creation of the Stepsons))",
            "SExpr": "(JOIN (R fictional_universe.event_in_fiction.includes_events) (JOIN (R fictional_universe.event_in_fiction.included_by_these_events) m.0c0lqhz))"
        }
    },
    "1020": {
        "generations": "what genre of music is popular among afro-filipino people?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09gm6w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09gm6w ns:people.ethnicity.people ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.09gm6w",
            "mid2name": {
                "ns:m.09gm6w": "Afro-Filipino"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R people.ethnicity.people) Afro-Filipino))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R people.ethnicity.people) m.09gm6w))"
        }
    },
    "1021": {
        "generations": "How do you pronounce the title \"Chief Technology Officer\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02211by)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02211by ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02211by",
            "mid2name": {
                "ns:m.02211by": "Chief Technology Officer"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Chief Technology Officer))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02211by))"
        }
    },
    "1022": {
        "generations": "What category does the Elixir product line belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z6qhwq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z6qhwq ns:business.product_line.category ?y .\n?y ns:business.product_category.product_lines ?x .\n}\n",
            "TopicEntityMid": "m.0z6qhwq",
            "mid2name": {
                "ns:m.0z6qhwq": "Elixir"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) Elixir))",
            "SExpr": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) m.0z6qhwq))"
        }
    },
    "1023": {
        "generations": "who collects items from the Roseville Artcraft product line?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ztrc1l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ztrc1l ns:business.product_line.parent_product_line ?y .\n?y ns:interests.collection_category.collectors ?x .\n}\n",
            "TopicEntityMid": "m.0ztrc1l",
            "mid2name": {
                "ns:m.0ztrc1l": "Roseville Artcraft"
            },
            "SExpr_w_name": "(JOIN (R interests.collection_category.collectors) (JOIN (R business.product_line.parent_product_line) Roseville Artcraft))",
            "SExpr": "(JOIN (R interests.collection_category.collectors) (JOIN (R business.product_line.parent_product_line) m.0ztrc1l))"
        }
    },
    "1024": {
        "generations": "how do you pronounce Enock Molefe's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0mf6j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0mf6j ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0c0mf6j",
            "mid2name": {
                "ns:m.0c0mf6j": "Enock Molefe"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Enock Molefe))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0c0mf6j))"
        }
    },
    "1025": {
        "generations": "How do you pronounce RD-171?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xlvv5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xlvv5 ns:spaceflight.bipropellant_rocket_engine.engine_cycle ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02xlvv5",
            "mid2name": {
                "ns:m.02xlvv5": "RD-171"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) RD-171))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) m.02xlvv5))"
        }
    },
    "1026": {
        "generations": "who ran in the 2008 primary election for california's 4th congressional district?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03yxftc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03yxftc ns:government.election.primaries ?y .\n?y ns:government.election.campaigns ?x .\n}\n",
            "TopicEntityMid": "m.03yxftc",
            "mid2name": {
                "ns:m.03yxftc": "California\u2019s 4th congressional district election, 2008"
            },
            "SExpr_w_name": "(JOIN (R government.election.campaigns) (JOIN (R government.election.primaries) California\u2019s 4th congressional district election, 2008))",
            "SExpr": "(JOIN (R government.election.campaigns) (JOIN (R government.election.primaries) m.03yxftc))"
        }
    },
    "1027": {
        "generations": "what objects are in the same category as venus in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09bcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09bcm ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.09bcm",
            "mid2name": {
                "ns:m.09bcm": "Venus"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) Venus))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) m.09bcm))"
        }
    },
    "1028": {
        "generations": "who wrote books associated with florentine painting?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q1f4l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q1f4l ns:visual_art.art_period_movement.associated_artists ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02q1f4l",
            "mid2name": {
                "ns:m.02q1f4l": "Florentine painting"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R visual_art.art_period_movement.associated_artists) Florentine painting))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R visual_art.art_period_movement.associated_artists) m.02q1f4l))"
        }
    },
    "1029": {
        "generations": "where is the origin of the composer of the greek passion?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rv_gb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rv_gb ns:music.composition.composer ?y .\n?y ns:music.artist.origin ?x .\n}\n",
            "TopicEntityMid": "m.02rv_gb",
            "mid2name": {
                "ns:m.02rv_gb": "The Greek Passion"
            },
            "SExpr_w_name": "(JOIN (R music.artist.origin) (JOIN (R music.composition.composer) The Greek Passion))",
            "SExpr": "(JOIN (R music.artist.origin) (JOIN (R music.composition.composer) m.02rv_gb))"
        }
    },
    "1030": {
        "generations": "What classification does the wild turkey belong to in the Aubrey-Maturin series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rd7k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rd7k ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.aubreymaturin.species.mentioned_in ?x .\n}\n",
            "TopicEntityMid": "m.01rd7k",
            "mid2name": {
                "ns:m.01rd7k": "Wild turkey"
            },
            "SExpr_w_name": "(JOIN (R base.aubreymaturin.species.mentioned_in) (JOIN (R biology.organism_classification.higher_classification) Wild turkey))",
            "SExpr": "(JOIN (R base.aubreymaturin.species.mentioned_in) (JOIN (R biology.organism_classification.higher_classification) m.01rd7k))"
        }
    },
    "1031": {
        "generations": "Who recorded a track with Sepalot?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03f6x70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03f6x70 ns:music.artist.track ?y .\n?y ns:music.recording.artist ?x .\n}\n",
            "TopicEntityMid": "m.03f6x70",
            "mid2name": {
                "ns:m.03f6x70": "Sepalot"
            },
            "SExpr_w_name": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) Sepalot))",
            "SExpr": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) m.03f6x70))"
        }
    },
    "1032": {
        "generations": "who is on the roster for the cincinnati bengals?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027l8g3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027l8g3 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n}\n",
            "TopicEntityMid": "m.027l8g3",
            "mid2name": {
                "ns:m.027l8g3": "Cincinnati Bengals"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team_roster.player) (JOIN (R sports.sports_team.roster) Cincinnati Bengals))",
            "SExpr": "(JOIN (R sports.sports_team_roster.player) (JOIN (R sports.sports_team.roster) m.027l8g3))"
        }
    },
    "1033": {
        "generations": "Where is Street press magazine published?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.046jry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.046jry ns:book.magazine_genre.magazines_in_this_genre ?y .\n?y ns:book.magazine.place_of_publication ?x .\n}\n",
            "TopicEntityMid": "m.046jry",
            "mid2name": {
                "ns:m.046jry": "Street press"
            },
            "SExpr_w_name": "(JOIN (R book.magazine.place_of_publication) (JOIN (R book.magazine_genre.magazines_in_this_genre) Street press))",
            "SExpr": "(JOIN (R book.magazine.place_of_publication) (JOIN (R book.magazine_genre.magazines_in_this_genre) m.046jry))"
        }
    },
    "1034": {
        "generations": "How do you pronounce \"Newport-class tank landing ship\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.089hpt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.089hpt ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.089hpt",
            "mid2name": {
                "ns:m.089hpt": "Newport-class tank landing ship\""
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Newport-class tank landing ship\"))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.089hpt))"
        }
    },
    "1035": {
        "generations": "What farms are located in Riley Towers II?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0wfhp5p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0wfhp5p ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.0wfhp5p",
            "mid2name": {
                "ns:m.0wfhp5p": "Riley Towers II"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) Riley Towers II))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.0wfhp5p))"
        }
    },
    "1036": {
        "generations": "Which operas has Katie Mitchell directed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qkrdx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qkrdx ns:opera.opera_director.operas_directed ?y .\n?y ns:opera.opera_production.opera ?x .\n}\n",
            "TopicEntityMid": "m.03qkrdx",
            "mid2name": {
                "ns:m.03qkrdx": "Katie Mitchell"
            },
            "SExpr_w_name": "(JOIN (R opera.opera_production.opera) (JOIN (R opera.opera_director.operas_directed) Katie Mitchell))",
            "SExpr": "(JOIN (R opera.opera_production.opera) (JOIN (R opera.opera_director.operas_directed) m.03qkrdx))"
        }
    },
    "1037": {
        "generations": "What industry is DAT in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02yx78)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02yx78 ns:aviation.icao_airline_designator.airline ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.02yx78",
            "mid2name": {
                "ns:m.02yx78": "DAT"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.icao_airline_designator.airline) DAT))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R aviation.icao_airline_designator.airline) m.02yx78))"
        }
    },
    "1038": {
        "generations": "What fictional universe does Yellowjacket appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034q4v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034q4v ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.034q4v",
            "mid2name": {
                "ns:m.034q4v": "Yellowjacket"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Yellowjacket))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.034q4v))"
        }
    },
    "1039": {
        "generations": "What is the atomic mass of tribasic calcium phosphate, matricaria recutita, and arabica coffee bean in a 0.000214/0.000214/0.000214 pellet drug formulation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqv3wh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqv3wh ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:chemistry.chemical_element.atomic_mass ?x .\n}\n",
            "TopicEntityMid": "m.0hqv3wh",
            "mid2name": {
                "ns:m.0hqv3wh": "Tribasic calcium phosphate - matricaria recutita - arabica coffee bean 0.000214/0.000214/0.000214 pellet"
            },
            "SExpr_w_name": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Tribasic calcium phosphate - matricaria recutita - arabica coffee bean 0.000214/0.000214/0.000214 pellet))",
            "SExpr": "(JOIN (R chemistry.chemical_element.atomic_mass) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqv3wh))"
        }
    },
    "1040": {
        "generations": "What awards has Michael Hopkins Architects won for their projects in architecture?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c93tt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c93tt ns:architecture.architecture_firm.projects ?y .\n?y ns:award.award_winner.awards_won ?x .\n}\n",
            "TopicEntityMid": "m.05c93tt",
            "mid2name": {
                "ns:m.05c93tt": "Michael Hopkins Architects"
            },
            "SExpr_w_name": "(JOIN (R award.award_winner.awards_won) (JOIN (R architecture.architecture_firm.projects) Michael Hopkins Architects))",
            "SExpr": "(JOIN (R award.award_winner.awards_won) (JOIN (R architecture.architecture_firm.projects) m.05c93tt))"
        }
    },
    "1041": {
        "generations": "how do you pronounce wood panel?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qrc67)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qrc67 ns:visual_art.visual_art_medium.artworks ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03qrc67",
            "mid2name": {
                "ns:m.03qrc67": "Wood panel"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.visual_art_medium.artworks) Wood panel))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R visual_art.visual_art_medium.artworks) m.03qrc67))"
        }
    },
    "1042": {
        "generations": "What industry does Chemical Automatics Design Bureau belong to and what product lines do they have?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03c_441)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03c_441 ns:business.business_operation.industry ?y .\n?y ns:business.product_category.product_lines ?x .\n}\n",
            "TopicEntityMid": "m.03c_441",
            "mid2name": {
                "ns:m.03c_441": "Chemical Automatics Design Bureau"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.product_lines) (JOIN (R business.business_operation.industry) Chemical Automatics Design Bureau))",
            "SExpr": "(JOIN (R business.product_category.product_lines) (JOIN (R business.business_operation.industry) m.03c_441))"
        }
    },
    "1043": {
        "generations": "who invented Xiao Lin Li?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j5c2s1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j5c2s1 ns:law.inventor.inventions ?y .\n?y ns:law.invention.inventor ?x .\n}\n",
            "TopicEntityMid": "m.0j5c2s1",
            "mid2name": {
                "ns:m.0j5c2s1": "Xiao Lin Li"
            },
            "SExpr_w_name": "(JOIN (R law.invention.inventor) (JOIN (R law.inventor.inventions) Xiao Lin Li))",
            "SExpr": "(JOIN (R law.invention.inventor) (JOIN (R law.inventor.inventions) m.0j5c2s1))"
        }
    },
    "1044": {
        "generations": "What category does the Lycoming O-320-A1A engine belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cs_nly)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cs_nly ns:engineering.engine.category ?y .\n?y ns:engineering.engine_category.engines ?x .\n}\n",
            "TopicEntityMid": "m.0cs_nly",
            "mid2name": {
                "ns:m.0cs_nly": "Lycoming O-320-A1A"
            },
            "SExpr_w_name": "(JOIN (R engineering.engine_category.engines) (JOIN (R engineering.engine.category) Lycoming O-320-A1A))",
            "SExpr": "(JOIN (R engineering.engine_category.engines) (JOIN (R engineering.engine.category) m.0cs_nly))"
        }
    },
    "1045": {
        "generations": "How do you pronounce Lazy ML?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hjb_9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hjb_9 ns:computer.programming_language.language_paradigms ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03hjb_9",
            "mid2name": {
                "ns:m.03hjb_9": "Lazy ML"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.language_paradigms) Lazy ML))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.language_paradigms) m.03hjb_9))"
        }
    },
    "1046": {
        "generations": "What programming language has dialects and belongs to the paradigm of generic programming?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qjrr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qjrr ns:computer.programming_language_paradigm.languages ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0qjrr",
            "mid2name": {
                "ns:m.0qjrr": "Generic programming"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_paradigm.languages) Generic programming))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_paradigm.languages) m.0qjrr))"
        }
    },
    "1047": {
        "generations": "What programming language was influenced by Standard ML of New Jersey and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0641x3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0641x3 ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0641x3",
            "mid2name": {
                "ns:m.0641x3": "Standard ML of New Jersey"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) Standard ML of New Jersey))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.0641x3))"
        }
    },
    "1048": {
        "generations": "What dog breed is popular in France?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:base.petbreeds.dog_breed.cities_where_this_dog_is_popular ?x .\n}\n",
            "TopicEntityMid": "m.0f8l9c",
            "mid2name": {
                "ns:m.0f8l9c": "France"
            },
            "SExpr_w_name": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (JOIN (R biology.breed_origin.breeds_originating_here) France))",
            "SExpr": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (JOIN (R biology.breed_origin.breeds_originating_here) m.0f8l9c))"
        }
    },
    "1049": {
        "generations": "What anime/manga franchises belong to the romance novel genre?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qxvh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qxvh ns:base.animemanga.anime_manga_genre.anime_manga_franchises ?y .\n?y ns:base.animemanga.anime_manga_franchise.genre ?x .\n}\n",
            "TopicEntityMid": "m.01qxvh",
            "mid2name": {
                "ns:m.01qxvh": "Romance novel"
            },
            "SExpr_w_name": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) Romance novel))",
            "SExpr": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R base.animemanga.anime_manga_genre.anime_manga_franchises) m.01qxvh))"
        }
    },
    "1050": {
        "generations": "What programming language influenced Kotlin and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_lcrx4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_lcrx4 ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.0_lcrx4",
            "mid2name": {
                "ns:m.0_lcrx4": "Kotlin"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) Kotlin))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.0_lcrx4))"
        }
    },
    "1051": {
        "generations": "What was the predecessor to Daewoo's model?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sjth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sjth ns:automotive.make.model_s ?y .\n?y ns:automotive.model.predecessor ?x .\n}\n",
            "TopicEntityMid": "m.01sjth",
            "mid2name": {
                "ns:m.01sjth": "Daewoo"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.predecessor) (JOIN (R automotive.make.model_s) Daewoo))",
            "SExpr": "(JOIN (R automotive.model.predecessor) (JOIN (R automotive.make.model_s) m.01sjth))"
        }
    },
    "1052": {
        "generations": "where do slovaks live?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n94b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n94b ns:people.ethnicity.geographic_distribution ?y .\n?y ns:location.country.administrative_divisions ?x .\n}\n",
            "TopicEntityMid": "m.01n94b",
            "mid2name": {
                "ns:m.01n94b": "Slovaks"
            },
            "SExpr_w_name": "(JOIN (R location.country.administrative_divisions) (JOIN (R people.ethnicity.geographic_distribution) Slovaks))",
            "SExpr": "(JOIN (R location.country.administrative_divisions) (JOIN (R people.ethnicity.geographic_distribution) m.01n94b))"
        }
    },
    "1053": {
        "generations": "Which brand of camera has an ISO of 800?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrg58)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrg58 ns:digicams.camera_iso.cameras ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.01xrg58",
            "mid2name": {
                "ns:m.01xrg58": "800"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) 800))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) m.01xrg58))"
        }
    },
    "1054": {
        "generations": "What are the Canadian national parks?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hj_s_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hj_s_ ns:protected_sites.park_system.member_parks ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.02hj_s_",
            "mid2name": {
                "ns:m.02hj_s_": "Canadian National Parks"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R protected_sites.park_system.member_parks) Canadian National Parks))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R protected_sites.park_system.member_parks) m.02hj_s_))"
        }
    },
    "1055": {
        "generations": "What dog breeds originated at the University of Leeds?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bzs9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bzs9 ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.01bzs9",
            "mid2name": {
                "ns:m.01bzs9": "University of Leeds"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) University of Leeds))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.01bzs9))"
        }
    },
    "1056": {
        "generations": "when was the language created by francois sudre?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cj25l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cj25l ns:language.language_creator.languages_created ?y .\n?y ns:language.conlang.date_created ?x .\n}\n",
            "TopicEntityMid": "m.0cj25l",
            "mid2name": {
                "ns:m.0cj25l": "Fran\u00e7ois Sudre"
            },
            "SExpr_w_name": "(JOIN (R language.conlang.date_created) (JOIN (R language.language_creator.languages_created) Fran\u00e7ois Sudre))",
            "SExpr": "(JOIN (R language.conlang.date_created) (JOIN (R language.language_creator.languages_created) m.0cj25l))"
        }
    },
    "1057": {
        "generations": "who wrote the book man of la mancha?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0184k_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0184k_ ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0184k_",
            "mid2name": {
                "ns:m.0184k_": "Man of La Mancha"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Man of La Mancha))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0184k_))"
        }
    },
    "1058": {
        "generations": "What is the purpose of the Phase III study on Ganciclovir for treating symptomatic CNS congenital CMV infections?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbyd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbyd ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n}\n",
            "TopicEntityMid": "m.03zbbyd",
            "mid2name": {
                "ns:m.03zbbyd": "A Phase III Study to Evaluate the Safety and Efficacy of Ganciclovir (Dihydroxypropoxymethyl Guanine [DHPG]) Treatment of Symptomatic Central Nervous System (CNS) Congenital Cytomegalovirus (CMV) Infections."
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) A Phase III Study to Evaluate the Safety and Efficacy of Ganciclovir (Dihydroxypropoxymethyl Guanine [DHPG]) Treatment of Symptomatic Central Nervous System (CNS) Congenital Cytomegalovirus (CMV) Infections.))",
            "SExpr": "(JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbyd))"
        }
    },
    "1059": {
        "generations": "which publishing company released the comic book series Give Me Liberty?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0712k5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0712k5 ns:comic_books.comic_book_series.publisher ?y .\n?y ns:book.publishing_company.books_published ?x .\n}\n",
            "TopicEntityMid": "m.0712k5",
            "mid2name": {
                "ns:m.0712k5": "Give Me Liberty"
            },
            "SExpr_w_name": "(JOIN (R book.publishing_company.books_published) (JOIN (R comic_books.comic_book_series.publisher) Give Me Liberty))",
            "SExpr": "(JOIN (R book.publishing_company.books_published) (JOIN (R comic_books.comic_book_series.publisher) m.0712k5))"
        }
    },
    "1060": {
        "generations": "what books did john philip sousa write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09xcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09xcm ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.09xcm",
            "mid2name": {
                "ns:m.09xcm": "John Philip Sousa"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) John Philip Sousa))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.09xcm))"
        }
    },
    "1061": {
        "generations": "Which exhibitions were curated by Gretchen A. Hirschauer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065p9vp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065p9vp ns:exhibitions.exhibition_curator.exhibitions_curated ?y .\n?y ns:exhibitions.exhibition.curators ?x .\n}\n",
            "TopicEntityMid": "m.065p9vp",
            "mid2name": {
                "ns:m.065p9vp": "Gretchen A. Hirschauer"
            },
            "SExpr_w_name": "(JOIN (R exhibitions.exhibition.curators) (JOIN (R exhibitions.exhibition_curator.exhibitions_curated) Gretchen A. Hirschauer))",
            "SExpr": "(JOIN (R exhibitions.exhibition.curators) (JOIN (R exhibitions.exhibition_curator.exhibitions_curated) m.065p9vp))"
        }
    },
    "1062": {
        "generations": "who wrote the x-files books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04t4fy2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04t4fy2 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04t4fy2",
            "mid2name": {
                "ns:m.04t4fy2": "The x-files"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The x-files))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.04t4fy2))"
        }
    },
    "1063": {
        "generations": "What is the opposite gender equivalent of Knight Commander in chivalric rank?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qhqyt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qhqyt ns:royalty.chivalric_rank.opposite_gender_equivalent ?y .\n?y ns:royalty.chivalric_rank_gender_equivalence.rank ?x .\n}\n",
            "TopicEntityMid": "m.02qhqyt",
            "mid2name": {
                "ns:m.02qhqyt": "Knight Commander"
            },
            "SExpr_w_name": "(JOIN (R royalty.chivalric_rank_gender_equivalence.rank) (JOIN (R royalty.chivalric_rank.opposite_gender_equivalent) Knight Commander))",
            "SExpr": "(JOIN (R royalty.chivalric_rank_gender_equivalence.rank) (JOIN (R royalty.chivalric_rank.opposite_gender_equivalent) m.02qhqyt))"
        }
    },
    "1064": {
        "generations": "who wrote the book \"The Lost Mind\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04t1h6h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04t1h6h ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.04t1h6h",
            "mid2name": {
                "ns:m.04t1h6h": "The lost mind"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The lost mind))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.04t1h6h))"
        }
    },
    "1065": {
        "generations": "What farms are located in the country where the film Cocksucker Blues was made?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j8qj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j8qj ns:film.film.country ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.01j8qj",
            "mid2name": {
                "ns:m.01j8qj": "Cocksucker Blues"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) Cocksucker Blues))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R film.film.country) m.01j8qj))"
        }
    },
    "1066": {
        "generations": "How do you pronounce Ningxia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01921y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01921y ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01921y",
            "mid2name": {
                "ns:m.01921y": "Ningxia"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Ningxia))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01921y))"
        }
    },
    "1067": {
        "generations": "who composed a musical composition about repression?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.048knd8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.048knd8 ns:book.book_subject.musical_compositions_about_this_topic ?y .\n?y ns:music.composition.composer ?x .\n}\n",
            "TopicEntityMid": "m.048knd8",
            "mid2name": {
                "ns:m.048knd8": "Repression"
            },
            "SExpr_w_name": "(JOIN (R music.composition.composer) (JOIN (R book.book_subject.musical_compositions_about_this_topic) Repression))",
            "SExpr": "(JOIN (R music.composition.composer) (JOIN (R book.book_subject.musical_compositions_about_this_topic) m.048knd8))"
        }
    },
    "1068": {
        "generations": "who directed the music video featuring the artist Mike Mansfield?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j2163g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j2163g ns:music.music_video_director.music_videos_directed ?y .\n?y ns:music.music_video.artist ?x .\n}\n",
            "TopicEntityMid": "m.0j2163g",
            "mid2name": {
                "ns:m.0j2163g": "Mike Mansfield"
            },
            "SExpr_w_name": "(JOIN (R music.music_video.artist) (JOIN (R music.music_video_director.music_videos_directed) Mike Mansfield))",
            "SExpr": "(JOIN (R music.music_video.artist) (JOIN (R music.music_video_director.music_videos_directed) m.0j2163g))"
        }
    },
    "1069": {
        "generations": "what city is Esszimmer located in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011tyq8q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011tyq8q ns:business.business_location.address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.011tyq8q",
            "mid2name": {
                "ns:m.011tyq8q": "Esszimmer"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) Esszimmer))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R business.business_location.address) m.011tyq8q))"
        }
    },
    "1070": {
        "generations": "What dog breed is popular in Austria?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7x ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:base.petbreeds.dog_breed.cities_where_this_dog_is_popular ?x .\n}\n",
            "TopicEntityMid": "m.0h7x",
            "mid2name": {
                "ns:m.0h7x": "Austria"
            },
            "SExpr_w_name": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (JOIN (R biology.breed_origin.breeds_originating_here) Austria))",
            "SExpr": "(JOIN (R base.petbreeds.dog_breed.cities_where_this_dog_is_popular) (JOIN (R biology.breed_origin.breeds_originating_here) m.0h7x))"
        }
    },
    "1071": {
        "generations": "what books did W. V. D. Hodge write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.021_rz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.021_rz ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.021_rz",
            "mid2name": {
                "ns:m.021_rz": "W. V. D. Hodge"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) W. V. D. Hodge))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.021_rz))"
        }
    },
    "1072": {
        "generations": "What were the rounds of the 2010 FIFA World Cup Group C match between USA and ALG?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c44msd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c44msd ns:time.event.included_in_event ?y .\n?y ns:base.tournaments.tournament.rounds ?x .\n}\n",
            "TopicEntityMid": "m.0c44msd",
            "mid2name": {
                "ns:m.0c44msd": "2010 FIFA World Cup Group C - USA ./. ALG"
            },
            "SExpr_w_name": "(JOIN (R base.tournaments.tournament.rounds) (JOIN (R time.event.included_in_event) 2010 FIFA World Cup Group C - USA ./. ALG))",
            "SExpr": "(JOIN (R base.tournaments.tournament.rounds) (JOIN (R time.event.included_in_event) m.0c44msd))"
        }
    },
    "1073": {
        "generations": "What agency oversees the National Landscape Conservation System?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09qx9m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09qx9m ns:protected_sites.natural_or_cultural_site_designation.listing_agency ?y .\n?y ns:organization.organization.parent ?x .\n}\n",
            "TopicEntityMid": "m.09qx9m",
            "mid2name": {
                "ns:m.09qx9m": "National Landscape Conservation System"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.parent) (JOIN (R protected_sites.natural_or_cultural_site_designation.listing_agency) National Landscape Conservation System))",
            "SExpr": "(JOIN (R organization.organization.parent) (JOIN (R protected_sites.natural_or_cultural_site_designation.listing_agency) m.09qx9m))"
        }
    },
    "1074": {
        "generations": "Who composed the track \"Wide Open Spaces\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04dzsff)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04dzsff ns:music.composition.composer ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.04dzsff",
            "mid2name": {
                "ns:m.04dzsff": "Wide Open Spaces"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) Wide Open Spaces))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) m.04dzsff))"
        }
    },
    "1075": {
        "generations": "how do you pronounce cuccidati?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059_xgm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059_xgm ns:food.dish.cuisine ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.059_xgm",
            "mid2name": {
                "ns:m.059_xgm": "Cuccidati"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R food.dish.cuisine) Cuccidati))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R food.dish.cuisine) m.059_xgm))"
        }
    },
    "1076": {
        "generations": "which fictional characters have lived in greenpoint?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02372m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02372m ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.02372m",
            "mid2name": {
                "ns:m.02372m": "Greenpoint"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Greenpoint))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.02372m))"
        }
    },
    "1077": {
        "generations": "What type of rocket engine is the RS-27A?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07tczt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07tczt ns:spaceflight.bipropellant_rocket_engine.engine_cycle ?y .\n?y ns:spaceflight.rocket_engine_cycle.rocket_engines ?x .\n}\n",
            "TopicEntityMid": "m.07tczt",
            "mid2name": {
                "ns:m.07tczt": "RS-27A"
            },
            "SExpr_w_name": "(JOIN (R spaceflight.rocket_engine_cycle.rocket_engines) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) RS-27A))",
            "SExpr": "(JOIN (R spaceflight.rocket_engine_cycle.rocket_engines) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) m.07tczt))"
        }
    },
    "1078": {
        "generations": "what books did william t. rowe write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vgy2x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vgy2x ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05vgy2x",
            "mid2name": {
                "ns:m.05vgy2x": "William T. Rowe"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) William T. Rowe))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05vgy2x))"
        }
    },
    "1079": {
        "generations": "What dog breeds originated in the location where Year Seven education grade level is used?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q22dq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q22dq ns:education.grade_level.locations_used ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.02q22dq",
            "mid2name": {
                "ns:m.02q22dq": "Year Seven"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R education.grade_level.locations_used) Year Seven))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R education.grade_level.locations_used) m.02q22dq))"
        }
    },
    "1080": {
        "generations": "which book did Reinhard Laube contribute to as an author?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08b2_l3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08b2_l3 ns:book.author.contributing_author_to ?y .\n?y ns:book.book_edition.book ?x .\n}\n",
            "TopicEntityMid": "m.08b2_l3",
            "mid2name": {
                "ns:m.08b2_l3": "Reinhard Laube"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.book) (JOIN (R book.author.contributing_author_to) Reinhard Laube))",
            "SExpr": "(JOIN (R book.book_edition.book) (JOIN (R book.author.contributing_author_to) m.08b2_l3))"
        }
    },
    "1081": {
        "generations": "What fictional universe does the character who works at Rearden Steel appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047k6md)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047k6md ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.047k6md",
            "mid2name": {
                "ns:m.047k6md": "Worker at Rearden Steel Character"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Worker at Rearden Steel Character))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.047k6md))"
        }
    },
    "1082": {
        "generations": "how do you pronounce the word sheep?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bgp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bgp ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07bgp",
            "mid2name": {
                "ns:m.07bgp": "Sheep"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) Sheep))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) m.07bgp))"
        }
    },
    "1083": {
        "generations": "Which company produces the Pentax K110D camera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pm0z5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pm0z5 ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n}\n",
            "TopicEntityMid": "m.02pm0z5",
            "mid2name": {
                "ns:m.02pm0z5": "Pentax K110D"
            },
            "SExpr_w_name": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Pentax K110D))",
            "SExpr": "(JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.02pm0z5))"
        }
    },
    "1084": {
        "generations": "what books did adele goldberg write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01knz8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01knz8 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.01knz8",
            "mid2name": {
                "ns:m.01knz8": "Adele Goldberg"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Adele Goldberg))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.01knz8))"
        }
    },
    "1085": {
        "generations": "who is the chairperson of the house committee that susan davis is a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024xs5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024xs5 ns:user.robert.us_congress.us_representative.committee_memberships ?y .\n?y ns:user.robert.us_congress.house_committee.chairperson ?x .\n}\n",
            "TopicEntityMid": "m.024xs5",
            "mid2name": {
                "ns:m.024xs5": "Susan Davis"
            },
            "SExpr_w_name": "(JOIN (R user.robert.us_congress.house_committee.chairperson) (JOIN (R user.robert.us_congress.us_representative.committee_memberships) Susan Davis))",
            "SExpr": "(JOIN (R user.robert.us_congress.house_committee.chairperson) (JOIN (R user.robert.us_congress.us_representative.committee_memberships) m.024xs5))"
        }
    },
    "1086": {
        "generations": "What are the team colors of Middle Tennessee Blue Raiders football?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027sz65)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027sz65 ns:sports.sports_team.colors ?y .\n?y ns:biology.breed_coloring.breeds ?x .\n}\n",
            "TopicEntityMid": "m.027sz65",
            "mid2name": {
                "ns:m.027sz65": "Middle Tennessee Blue Raiders football"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_coloring.breeds) (JOIN (R sports.sports_team.colors) Middle Tennessee Blue Raiders football))",
            "SExpr": "(JOIN (R biology.breed_coloring.breeds) (JOIN (R sports.sports_team.colors) m.027sz65))"
        }
    },
    "1087": {
        "generations": "What asteroid group is the Nysa family a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027ktwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027ktwc ns:astronomy.asteroid_family.founding_asteroid_family_member ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.027ktwc",
            "mid2name": {
                "ns:m.027ktwc": "Nysa family"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.asteroid_family.founding_asteroid_family_member) Nysa family))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.asteroid_family.founding_asteroid_family_member) m.027ktwc))"
        }
    },
    "1088": {
        "generations": "What historical places of worship are associated with Mahayana religion?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05301)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05301 ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.05301",
            "mid2name": {
                "ns:m.05301": "Mahayana"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Mahayana))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.05301))"
        }
    },
    "1089": {
        "generations": "How do you pronounce \"Midday Meal Scheme\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03kr44)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03kr44 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03kr44",
            "mid2name": {
                "ns:m.03kr44": "Midday Meal Scheme"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Midday Meal Scheme))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03kr44))"
        }
    },
    "1090": {
        "generations": "What drug form is Tofranil available in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j4tb1q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j4tb1q ns:business.brand.products ?y .\n?y ns:medicine.manufactured_drug_form.available_in ?x .\n}\n",
            "TopicEntityMid": "m.0j4tb1q",
            "mid2name": {
                "ns:m.0j4tb1q": "Tofranil"
            },
            "SExpr_w_name": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) Tofranil))",
            "SExpr": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) m.0j4tb1q))"
        }
    },
    "1091": {
        "generations": "What is the jurisdiction of the South Dakota House of Representatives?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p8vvc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p8vvc ns:government.governmental_body.body_this_is_a_component_of ?y .\n?y ns:government.governmental_body.jurisdiction ?x .\n}\n",
            "TopicEntityMid": "m.02p8vvc",
            "mid2name": {
                "ns:m.02p8vvc": "South Dakota House of Representatives"
            },
            "SExpr_w_name": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.governmental_body.body_this_is_a_component_of) South Dakota House of Representatives))",
            "SExpr": "(JOIN (R government.governmental_body.jurisdiction) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.02p8vvc))"
        }
    },
    "1092": {
        "generations": "What anime/manga franchise features characters who are thieves?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wszg3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wszg3 ns:fictional_universe.character_occupation.characters_with_this_occupation ?y .\n?y ns:base.animemanga.anime_manga_franchise.genre ?x .\n}\n",
            "TopicEntityMid": "m.02wszg3",
            "mid2name": {
                "ns:m.02wszg3": "Thief"
            },
            "SExpr_w_name": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) Thief))",
            "SExpr": "(JOIN (R base.animemanga.anime_manga_franchise.genre) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) m.02wszg3))"
        }
    },
    "1093": {
        "generations": "What is the make and model of the 2014 car Ford Focus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_v8m4q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_v8m4q ns:automotive.model_year.make ?y .\n?y ns:automotive.make.model_s ?x .\n}\n",
            "TopicEntityMid": "m.0_v8m4q",
            "mid2name": {
                "ns:m.0_v8m4q": "2014 Ford Focus"
            },
            "SExpr_w_name": "(JOIN (R automotive.make.model_s) (JOIN (R automotive.model_year.make) 2014 Ford Focus))",
            "SExpr": "(JOIN (R automotive.make.model_s) (JOIN (R automotive.model_year.make) m.0_v8m4q))"
        }
    },
    "1094": {
        "generations": "what type of martial art is taught at Song Moo Kwan?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2yp6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2yp6 ns:martial_arts.martial_arts_organization.martial_arts ?y .\n?y ns:martial_arts.martial_art.category ?x .\n}\n",
            "TopicEntityMid": "m.0f2yp6",
            "mid2name": {
                "ns:m.0f2yp6": "Song Moo Kwan"
            },
            "SExpr_w_name": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_arts_organization.martial_arts) Song Moo Kwan))",
            "SExpr": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_arts_organization.martial_arts) m.0f2yp6))"
        }
    },
    "1095": {
        "generations": "who is the current mayor of chino hills?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gwmrf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gwmrf ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n}\n",
            "TopicEntityMid": "m.04gwmrf",
            "mid2name": {
                "ns:m.04gwmrf": "Mayor of Chino Hills"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) Mayor of Chino Hills))",
            "SExpr": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) m.04gwmrf))"
        }
    },
    "1096": {
        "generations": "What is the classification rank and higher classification of cardamom in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gk0z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gk0z ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.0gk0z",
            "mid2name": {
                "ns:m.0gk0z": "Cardamom"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Cardamom))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.0gk0z))"
        }
    },
    "1097": {
        "generations": "How do you pronounce babesiosis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xj6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xj6f ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01xj6f",
            "mid2name": {
                "ns:m.01xj6f": "Babesiosis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Babesiosis))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01xj6f))"
        }
    },
    "1098": {
        "generations": "what is the gender of most production department managers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h6kr_v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h6kr_v ns:people.profession.people_with_this_profession ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0h6kr_v",
            "mid2name": {
                "ns:m.0h6kr_v": "Production Department Manager"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) Production Department Manager))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R people.profession.people_with_this_profession) m.0h6kr_v))"
        }
    },
    "1099": {
        "generations": "What farms are located within 200 Vesey Street?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07w4bj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07w4bj ns:location.location.containedby ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.07w4bj",
            "mid2name": {
                "ns:m.07w4bj": "200 Vesey Street"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) 200 Vesey Street))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R location.location.containedby) m.07w4bj))"
        }
    },
    "1100": {
        "generations": "which operating systems are compatible with lenovo thinkpad edge 11?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h2n7tg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h2n7tg ns:computer.computer.compatible_oses ?y .\n?y ns:computer.os_compatibility.operating_system ?x .\n}\n",
            "TopicEntityMid": "m.0h2n7tg",
            "mid2name": {
                "ns:m.0h2n7tg": "Lenovo Thinkpad Edge 11"
            },
            "SExpr_w_name": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) Lenovo Thinkpad Edge 11))",
            "SExpr": "(JOIN (R computer.os_compatibility.operating_system) (JOIN (R computer.computer.compatible_oses) m.0h2n7tg))"
        }
    },
    "1101": {
        "generations": "What category does grappling belong to in martial arts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039cp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039cp ns:martial_arts.martial_art_category.martial_arts ?y .\n?y ns:martial_arts.martial_art.category ?x .\n}\n",
            "TopicEntityMid": "m.039cp",
            "mid2name": {
                "ns:m.039cp": "Grappling"
            },
            "SExpr_w_name": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_art_category.martial_arts) Grappling))",
            "SExpr": "(JOIN (R martial_arts.martial_art.category) (JOIN (R martial_arts.martial_art_category.martial_arts) m.039cp))"
        }
    },
    "1102": {
        "generations": "What genre of music does Puss'n Boots play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018q21l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018q21l ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.018q21l",
            "mid2name": {
                "ns:m.018q21l": "Puss'n Boots"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Puss'n Boots))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.018q21l))"
        }
    },
    "1103": {
        "generations": "How do you pronounce \"open source\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wtqd4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wtqd4 ns:base.technologyofdoing.knowledge_worker_practice.parent_practice ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02wtqd4",
            "mid2name": {
                "ns:m.02wtqd4": "Open source"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.technologyofdoing.knowledge_worker_practice.parent_practice) Open source))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.technologyofdoing.knowledge_worker_practice.parent_practice) m.02wtqd4))"
        }
    },
    "1104": {
        "generations": "where was john beech born?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03q7fgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03q7fgl ns:people.person.place_of_birth ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.03q7fgl",
            "mid2name": {
                "ns:m.03q7fgl": "John Beech"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R people.person.place_of_birth) John Beech))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R people.person.place_of_birth) m.03q7fgl))"
        }
    },
    "1105": {
        "generations": "who participated in the design of the Rolls-Royce Olympus project?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05g_y_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05g_y_r ns:projects.project.participants ?y .\n?y ns:projects.project_participation.participant ?x .\n}\n",
            "TopicEntityMid": "m.05g_y_r",
            "mid2name": {
                "ns:m.05g_y_r": "Design of the Rolls-Royce Olympus"
            },
            "SExpr_w_name": "(JOIN (R projects.project_participation.participant) (JOIN (R projects.project.participants) Design of the Rolls-Royce Olympus))",
            "SExpr": "(JOIN (R projects.project_participation.participant) (JOIN (R projects.project.participants) m.05g_y_r))"
        }
    },
    "1106": {
        "generations": "where do light heavyweight boxing matches take place?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v7n_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v7n_ ns:sports.boxing_weight_division.matches ?y .\n?y ns:time.event.locations ?x .\n}\n",
            "TopicEntityMid": "m.04v7n_",
            "mid2name": {
                "ns:m.04v7n_": "Light heavyweight"
            },
            "SExpr_w_name": "(JOIN (R time.event.locations) (JOIN (R sports.boxing_weight_division.matches) Light heavyweight))",
            "SExpr": "(JOIN (R time.event.locations) (JOIN (R sports.boxing_weight_division.matches) m.04v7n_))"
        }
    },
    "1107": {
        "generations": "What breeds of animals originate in the jurisdiction of the Supreme Court of Cassation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09n9r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09n9r3 ns:government.governmental_body.jurisdiction ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n}\n",
            "TopicEntityMid": "m.09n9r3",
            "mid2name": {
                "ns:m.09n9r3": "Supreme Court of Cassation"
            },
            "SExpr_w_name": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R government.governmental_body.jurisdiction) Supreme Court of Cassation))",
            "SExpr": "(JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R government.governmental_body.jurisdiction) m.09n9r3))"
        }
    },
    "1108": {
        "generations": "How do you pronounce \"poor wound healing\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c4xv3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c4xv3 ns:medicine.symptom.symptom_of ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.06c4xv3",
            "mid2name": {
                "ns:m.06c4xv3": "Poor wound healing"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.symptom.symptom_of) Poor wound healing))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.symptom.symptom_of) m.06c4xv3))"
        }
    },
    "1109": {
        "generations": "where can you find forteo?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05sq_nf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05sq_nf ns:business.brand.products ?y .\n?y ns:medicine.manufactured_drug_form.available_in ?x .\n}\n",
            "TopicEntityMid": "m.05sq_nf",
            "mid2name": {
                "ns:m.05sq_nf": "Forteo"
            },
            "SExpr_w_name": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) Forteo))",
            "SExpr": "(JOIN (R medicine.manufactured_drug_form.available_in) (JOIN (R business.brand.products) m.05sq_nf))"
        }
    },
    "1110": {
        "generations": "how do you pronounce zilog z80?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0898v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0898v ns:computer.computer_processor.manufacturers ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0898v",
            "mid2name": {
                "ns:m.0898v": "Zilog Z80"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.computer_processor.manufacturers) Zilog Z80))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.computer_processor.manufacturers) m.0898v))"
        }
    },
    "1111": {
        "generations": "What genre of music is Regional Mexican?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ggcc9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ggcc9 ns:music.genre.artists ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.04ggcc9",
            "mid2name": {
                "ns:m.04ggcc9": "Regional Mexican"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) Regional Mexican))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) m.04ggcc9))"
        }
    },
    "1112": {
        "generations": "how do you pronounce dihydrofolate reductase inhibitor antibacterial?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqyz4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqyz4m ns:medicine.drug_class.drugs ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0hqyz4m",
            "mid2name": {
                "ns:m.0hqyz4m": "Dihydrofolate Reductase Inhibitor Antibacterial"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.drug_class.drugs) Dihydrofolate Reductase Inhibitor Antibacterial))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.drug_class.drugs) m.0hqyz4m))"
        }
    },
    "1113": {
        "generations": "How do you pronounce Yeniseian languages?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k7zm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k7zm ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02k7zm",
            "mid2name": {
                "ns:m.02k7zm": "Yeniseian languages"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Yeniseian languages))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02k7zm))"
        }
    },
    "1114": {
        "generations": "How do you pronounce the word \"email\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02nf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02nf_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02nf_",
            "mid2name": {
                "ns:m.02nf_": "Email"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Email))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02nf_))"
        }
    },
    "1115": {
        "generations": "what is the descriptive name for BL Publishing's industry?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05jdmv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05jdmv ns:business.business_operation.industry ?y .\n?y ns:base.descriptive_names.names.descriptive_name ?x .\n}\n",
            "TopicEntityMid": "m.05jdmv",
            "mid2name": {
                "ns:m.05jdmv": "BL Publishing"
            },
            "SExpr_w_name": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) BL Publishing))",
            "SExpr": "(JOIN (R base.descriptive_names.names.descriptive_name) (JOIN (R business.business_operation.industry) m.05jdmv))"
        }
    },
    "1116": {
        "generations": "what is the higher classification of the white-tip reef shark?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j0xd8g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j0xd8g ns:zoos.zoo_exhibit.species ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0j0xd8g",
            "mid2name": {
                "ns:m.0j0xd8g": "White-Tip Reef Shark"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R zoos.zoo_exhibit.species) White-Tip Reef Shark))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R zoos.zoo_exhibit.species) m.0j0xd8g))"
        }
    },
    "1117": {
        "generations": "what profession involves working in food and beverage service?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0116tdt3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0116tdt3 ns:base.lightweight.profession.specialization ?y .\n?y ns:people.profession.people_with_this_profession ?x .\n}\n",
            "TopicEntityMid": "m.0116tdt3",
            "mid2name": {
                "ns:m.0116tdt3": "Food and Beverage Serving and Related Workers"
            },
            "SExpr_w_name": "(JOIN (R people.profession.people_with_this_profession) (JOIN (R base.lightweight.profession.specialization) Food and Beverage Serving and Related Workers))",
            "SExpr": "(JOIN (R people.profession.people_with_this_profession) (JOIN (R base.lightweight.profession.specialization) m.0116tdt3))"
        }
    },
    "1118": {
        "generations": "Who wrote the book about an assay system that uses estrogen receptor (ER) intramolecular folding as a sensor for distinguishing agonists and antagonists in living animals?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hd3gl7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hd3gl7 ns:law.invention.inventor ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0hd3gl7",
            "mid2name": {
                "ns:m.0hd3gl7": "An assay system that uses estrogen receptor (ER) intramolecular folding as a sensor for distinguishing agonists and antagonists in living animals"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) An assay system that uses estrogen receptor (ER) intramolecular folding as a sensor for distinguishing agonists and antagonists in living animals))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) m.0hd3gl7))"
        }
    },
    "1119": {
        "generations": "What awards or rankings does Osgood Fielding III appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047y05g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047y05g ns:fictional_universe.fictional_character.quotations ?y .\n?y ns:award.ranked_item.appears_in_ranked_lists ?x .\n}\n",
            "TopicEntityMid": "m.047y05g",
            "mid2name": {
                "ns:m.047y05g": "Osgood Fielding III"
            },
            "SExpr_w_name": "(JOIN (R award.ranked_item.appears_in_ranked_lists) (JOIN (R fictional_universe.fictional_character.quotations) Osgood Fielding III))",
            "SExpr": "(JOIN (R award.ranked_item.appears_in_ranked_lists) (JOIN (R fictional_universe.fictional_character.quotations) m.047y05g))"
        }
    },
    "1120": {
        "generations": "which artists belong to the genre krewella?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q6r984)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q6r984 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.0q6r984",
            "mid2name": {
                "ns:m.0q6r984": "Krewella"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Krewella))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.0q6r984))"
        }
    },
    "1121": {
        "generations": "where is the aviation hall of fame located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fzyg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fzyg ns:award.hall_of_fame_discipline.halls_of_fame ?y .\n?y ns:location.location.geolocation ?x .\n}\n",
            "TopicEntityMid": "m.0fzyg",
            "mid2name": {
                "ns:m.0fzyg": "Aviation"
            },
            "SExpr_w_name": "(JOIN (R location.location.geolocation) (JOIN (R award.hall_of_fame_discipline.halls_of_fame) Aviation))",
            "SExpr": "(JOIN (R location.location.geolocation) (JOIN (R award.hall_of_fame_discipline.halls_of_fame) m.0fzyg))"
        }
    },
    "1122": {
        "generations": "who wrote the book Wizard Wars?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0clv4sk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0clv4sk ns:base.militaryinfiction.recurring_event_in_fiction.instances ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0clv4sk",
            "mid2name": {
                "ns:m.0clv4sk": "Wizard Wars"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R base.militaryinfiction.recurring_event_in_fiction.instances) Wizard Wars))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R base.militaryinfiction.recurring_event_in_fiction.instances) m.0clv4sk))"
        }
    },
    "1123": {
        "generations": "how do you pronounce D minor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bhsw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bhsw ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06bhsw",
            "mid2name": {
                "ns:m.06bhsw": "D minor"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) D minor))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06bhsw))"
        }
    },
    "1124": {
        "generations": "How do you pronounce the word \"painter\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02nxqmh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02nxqmh ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02nxqmh",
            "mid2name": {
                "ns:m.02nxqmh": "Painter"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Painter))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02nxqmh))"
        }
    },
    "1125": {
        "generations": "How do you pronounce the word \"Insomnia\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddwt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddwt ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0ddwt",
            "mid2name": {
                "ns:m.0ddwt": "Insomnia"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Insomnia))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0ddwt))"
        }
    },
    "1126": {
        "generations": "How do you pronounce Public Interest Registry?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.022clc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.022clc ns:organization.organization.legal_structure ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.022clc",
            "mid2name": {
                "ns:m.022clc": "Public Interest Registry"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R organization.organization.legal_structure) Public Interest Registry))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R organization.organization.legal_structure) m.022clc))"
        }
    },
    "1127": {
        "generations": "What is located within Krotz Springs Bridge?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rqp63)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rqp63 ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.02rqp63",
            "mid2name": {
                "ns:m.02rqp63": "Krotz Springs Bridge"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Krotz Springs Bridge))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.02rqp63))"
        }
    },
    "1128": {
        "generations": "Who created the language Basic English and wrote books in it?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kbj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kbj ns:language.conlang.created_by ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01kbj",
            "mid2name": {
                "ns:m.01kbj": "Basic English"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R language.conlang.created_by) Basic English))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R language.conlang.created_by) m.01kbj))"
        }
    },
    "1129": {
        "generations": "who is the author of the book written by Antony Johnston?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05w1v62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05w1v62 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05w1v62",
            "mid2name": {
                "ns:m.05w1v62": "Antony Johnston"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Antony Johnston))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05w1v62))"
        }
    },
    "1130": {
        "generations": "What is the classification rank and higher classification of Utricularia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03k9_p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03k9_p ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.03k9_p",
            "mid2name": {
                "ns:m.03k9_p": "Utricularia"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Utricularia))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.03k9_p))"
        }
    },
    "1131": {
        "generations": "who succeeded the house of nassau-weilburg in the royal line?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b7zx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b7zx2 ns:royalty.royal_line.preceded_by ?y .\n?y ns:people.family.members ?x .\n}\n",
            "TopicEntityMid": "m.0b7zx2",
            "mid2name": {
                "ns:m.0b7zx2": "House of Nassau-Weilburg"
            },
            "SExpr_w_name": "(JOIN (R people.family.members) (JOIN (R royalty.royal_line.preceded_by) House of Nassau-Weilburg))",
            "SExpr": "(JOIN (R people.family.members) (JOIN (R royalty.royal_line.preceded_by) m.0b7zx2))"
        }
    },
    "1132": {
        "generations": "who wrote the book on the Tinkertoy Tic-Tac-Toe Computer?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0290ktf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0290ktf ns:computer.computer.key_designers ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0290ktf",
            "mid2name": {
                "ns:m.0290ktf": "Tinkertoy Tic-Tac-Toe Computer"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R computer.computer.key_designers) Tinkertoy Tic-Tac-Toe Computer))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R computer.computer.key_designers) m.0290ktf))"
        }
    },
    "1133": {
        "generations": "what language is spoken at william mckinley high school?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07rxhhc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07rxhhc ns:fictional_universe.fictional_setting.works_set_here ?y .\n?y ns:tv.tv_program.languages ?x .\n}\n",
            "TopicEntityMid": "m.07rxhhc",
            "mid2name": {
                "ns:m.07rxhhc": "William McKinley High School"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_program.languages) (JOIN (R fictional_universe.fictional_setting.works_set_here) William McKinley High School))",
            "SExpr": "(JOIN (R tv.tv_program.languages) (JOIN (R fictional_universe.fictional_setting.works_set_here) m.07rxhhc))"
        }
    },
    "1134": {
        "generations": "What book did the author of \"Human\" write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c00_q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c00_q ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0c00_q",
            "mid2name": {
                "ns:m.0c00_q": "Human"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Human))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.0c00_q))"
        }
    },
    "1135": {
        "generations": "What cricket league does the Cayman Islands national cricket team participate in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07mgkz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07mgkz ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
            "TopicEntityMid": "m.07mgkz",
            "mid2name": {
                "ns:m.07mgkz": "Cayman Islands national cricket team"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) Cayman Islands national cricket team))",
            "SExpr": "(JOIN (R sports.sports_league_participation.league) (JOIN (R sports.sports_team.league) m.07mgkz))"
        }
    },
    "1136": {
        "generations": "What is the contents of the book according to the Amazon Review?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cvh0bz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cvh0bz ns:book.publication.contents ?y .\n?y ns:book.contents.work ?x .\n}\n",
            "TopicEntityMid": "m.0cvh0bz",
            "mid2name": {
                "ns:m.0cvh0bz": "Amazon Review"
            },
            "SExpr_w_name": "(JOIN (R book.contents.work) (JOIN (R book.publication.contents) Amazon Review))",
            "SExpr": "(JOIN (R book.contents.work) (JOIN (R book.publication.contents) m.0cvh0bz))"
        }
    },
    "1137": {
        "generations": "What genre of music does the artist of the album \"A Keg Full of Dynamite\" play?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q9f50)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q9f50 ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.02q9f50",
            "mid2name": {
                "ns:m.02q9f50": "A Keg Full of Dynamite"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) A Keg Full of Dynamite))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.02q9f50))"
        }
    },
    "1138": {
        "generations": "What genre of music does DJ Ras Cue support?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g9nbxz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g9nbxz ns:music.group_member.artists_supported ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.0g9nbxz",
            "mid2name": {
                "ns:m.0g9nbxz": "DJ Ras Cue"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.group_member.artists_supported) DJ Ras Cue))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.group_member.artists_supported) m.0g9nbxz))"
        }
    },
    "1139": {
        "generations": "What is the classification rank and higher classification of rye in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cl3b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cl3b ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.0cl3b",
            "mid2name": {
                "ns:m.0cl3b": "Rye"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Rye))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.0cl3b))"
        }
    },
    "1140": {
        "generations": "What is the classification rank and higher classification of coriander?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y4xf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y4xf ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.01y4xf",
            "mid2name": {
                "ns:m.01y4xf": "Coriander"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Coriander))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.01y4xf))"
        }
    },
    "1141": {
        "generations": "who won the ted lindsay award?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ns1z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ns1z ns:award.award_category.winners ?y .\n?y ns:award.award_honor.award_winner ?x .\n}\n",
            "TopicEntityMid": "m.01ns1z",
            "mid2name": {
                "ns:m.01ns1z": "Ted Lindsay Award"
            },
            "SExpr_w_name": "(JOIN (R award.award_honor.award_winner) (JOIN (R award.award_category.winners) Ted Lindsay Award))",
            "SExpr": "(JOIN (R award.award_honor.award_winner) (JOIN (R award.award_category.winners) m.01ns1z))"
        }
    },
    "1142": {
        "generations": "What type of glass is typically used for cocktails with sugar garnish?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06x4c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06x4c ns:base.cocktails.cocktail_garnish.cocktails_with_this_garnish ?y .\n?y ns:base.cocktails.cocktail.standard_drinkware ?x .\n}\n",
            "TopicEntityMid": "m.06x4c",
            "mid2name": {
                "ns:m.06x4c": "Sugar"
            },
            "SExpr_w_name": "(JOIN (R base.cocktails.cocktail.standard_drinkware) (JOIN (R base.cocktails.cocktail_garnish.cocktails_with_this_garnish) Sugar))",
            "SExpr": "(JOIN (R base.cocktails.cocktail.standard_drinkware) (JOIN (R base.cocktails.cocktail_garnish.cocktails_with_this_garnish) m.06x4c))"
        }
    },
    "1143": {
        "generations": "What is a narrower concept of beef brain and what is its broader concept?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gndbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gndbz ns:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?y .\n?y ns:base.skosbase.skos_concept.broader ?x .\n}\n",
            "TopicEntityMid": "m.0gndbz",
            "mid2name": {
                "ns:m.0gndbz": "Beef brain"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.skos_concept.broader) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) Beef brain))",
            "SExpr": "(JOIN (R base.skosbase.skos_concept.broader) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) m.0gndbz))"
        }
    },
    "1144": {
        "generations": "What art form do sculptors typically work in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06msq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06msq ns:visual_art.visual_art_form.artists ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.06msq",
            "mid2name": {
                "ns:m.06msq": "Sculpture"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) Sculpture))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) m.06msq))"
        }
    },
    "1145": {
        "generations": "How do you pronounce \"Kounotori 4\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0wfxzh9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0wfxzh9 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0wfxzh9",
            "mid2name": {
                "ns:m.0wfxzh9": "Kounotori 4"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Kounotori 4))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0wfxzh9))"
        }
    },
    "1146": {
        "generations": "what language did ricky ponting write his books in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cdqb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cdqb ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.02cdqb",
            "mid2name": {
                "ns:m.02cdqb": "Ricky Ponting"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Ricky Ponting))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.02cdqb))"
        }
    },
    "1147": {
        "generations": "What awards has Maestro Orpheus and the World Clock won in its discipline?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v0kzm7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v0kzm7 ns:book.book_edition.binding ?y .\n?y ns:award.award_discipline.awards_in_this_discipline ?x .\n}\n",
            "TopicEntityMid": "m.0v0kzm7",
            "mid2name": {
                "ns:m.0v0kzm7": "Maestro Orpheus and the World Clock"
            },
            "SExpr_w_name": "(JOIN (R award.award_discipline.awards_in_this_discipline) (JOIN (R book.book_edition.binding) Maestro Orpheus and the World Clock))",
            "SExpr": "(JOIN (R award.award_discipline.awards_in_this_discipline) (JOIN (R book.book_edition.binding) m.0v0kzm7))"
        }
    },
    "1148": {
        "generations": "who created the comic book character inked by bruce wayne?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d5g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d5g ns:comic_books.comic_book_character.created_by ?y .\n?y ns:comic_books.comic_book_inker.comic_covers_inked ?x .\n}\n",
            "TopicEntityMid": "m.01d5g",
            "mid2name": {
                "ns:m.01d5g": "Bruce Wayne"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_character.created_by) Bruce Wayne))",
            "SExpr": "(JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_character.created_by) m.01d5g))"
        }
    },
    "1149": {
        "generations": "which album features the track by the artist Once Upon a Christmas: The Original Story?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qdw44)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qdw44 ns:music.album.artist ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.02qdw44",
            "mid2name": {
                "ns:m.02qdw44": "Once Upon a Christmas: The Original Story"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) Once Upon a Christmas: The Original Story))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.album.artist) m.02qdw44))"
        }
    },
    "1150": {
        "generations": "What brand of camera has an ISO of 2500?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h27q8w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h27q8w ns:digicams.camera_iso.cameras ?y .\n?y ns:business.consumer_product.brand ?x .\n}\n",
            "TopicEntityMid": "m.0h27q8w",
            "mid2name": {
                "ns:m.0h27q8w": "2500"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) 2500))",
            "SExpr": "(JOIN (R business.consumer_product.brand) (JOIN (R digicams.camera_iso.cameras) m.0h27q8w))"
        }
    },
    "1151": {
        "generations": "What is contained within Town Brook?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02x2t29)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02x2t29 ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.02x2t29",
            "mid2name": {
                "ns:m.02x2t29": "Town Brook"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Town Brook))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.02x2t29))"
        }
    },
    "1152": {
        "generations": "How do you pronounce \"Experimental music\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ckfl9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ckfl9 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03ckfl9",
            "mid2name": {
                "ns:m.03ckfl9": "Experimental music"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Experimental music))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03ckfl9))"
        }
    },
    "1153": {
        "generations": "who recorded a track with Elphomega?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03f0z_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03f0z_r ns:music.artist.track ?y .\n?y ns:music.recording.artist ?x .\n}\n",
            "TopicEntityMid": "m.03f0z_r",
            "mid2name": {
                "ns:m.03f0z_r": "Elphomega"
            },
            "SExpr_w_name": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) Elphomega))",
            "SExpr": "(JOIN (R music.recording.artist) (JOIN (R music.artist.track) m.03f0z_r))"
        }
    },
    "1154": {
        "generations": "What is the locus of chromosome 10 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgjv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgjv ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwgjv",
            "mid2name": {
                "ns:m.02kwgjv": "Chromosome 10 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 10 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgjv))"
        }
    },
    "1155": {
        "generations": "What programming language is influenced by Qi and has dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02prj6h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02prj6h ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.02prj6h",
            "mid2name": {
                "ns:m.02prj6h": "Qi"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) Qi))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.02prj6h))"
        }
    },
    "1156": {
        "generations": "What amusement park is located in Grizzly Peak?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r51lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r51lh ns:amusement_parks.amusement_park_area.parks ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.02r51lh",
            "mid2name": {
                "ns:m.02r51lh": "Grizzly Peak"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R amusement_parks.amusement_park_area.parks) Grizzly Peak))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R amusement_parks.amusement_park_area.parks) m.02r51lh))"
        }
    },
    "1157": {
        "generations": "who wrote the travel guidebook series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01314940)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01314940 ns:travel.guidebook_series.guidebooks ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.01314940",
            "mid2name": {
                "ns:m.01314940": "Travel"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R travel.guidebook_series.guidebooks) Travel))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R travel.guidebook_series.guidebooks) m.01314940))"
        }
    },
    "1158": {
        "generations": "what fictional universes did morry hollowell work on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ypbnq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ypbnq ns:comic_books.comic_book_colorist.comic_stories_colored ?y .\n?y ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.03ypbnq",
            "mid2name": {
                "ns:m.03ypbnq": "Morry Hollowell"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_colorist.comic_stories_colored) Morry Hollowell))",
            "SExpr": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_colorist.comic_stories_colored) m.03ypbnq))"
        }
    },
    "1159": {
        "generations": "Which company produces cameras that use the JPEG (EXIF 2.21) compressed format?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h4lt3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h4lt3 ns:digicams.camera_compressed_format.cameras ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.03h4lt3",
            "mid2name": {
                "ns:m.03h4lt3": "JPEG (EXIF 2.21)"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_compressed_format.cameras) JPEG (EXIF 2.21)))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_compressed_format.cameras) m.03h4lt3))"
        }
    },
    "1160": {
        "generations": "Which fictional characters have lived in the Marriott World Trade Center?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hcxy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hcxy ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.03hcxy",
            "mid2name": {
                "ns:m.03hcxy": "Marriott World Trade Center"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Marriott World Trade Center))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.03hcxy))"
        }
    },
    "1161": {
        "generations": "Which characters have lived in the setting of The Legend of the Batman - Who He is, and How he Came to Be?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030scwl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030scwl ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.030scwl",
            "mid2name": {
                "ns:m.030scwl": "The Legend of the Batman - Who He is, and How he Came to Be"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.work_of_fiction.setting) The Legend of the Batman - Who He is, and How he Came to Be))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.work_of_fiction.setting) m.030scwl))"
        }
    },
    "1162": {
        "generations": "who is the artist of the album \"Very Together\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03999ct)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03999ct ns:music.release.album ?y .\n?y ns:music.album.artist ?x .\n}\n",
            "TopicEntityMid": "m.03999ct",
            "mid2name": {
                "ns:m.03999ct": "Very Together"
            },
            "SExpr_w_name": "(JOIN (R music.album.artist) (JOIN (R music.release.album) Very Together))",
            "SExpr": "(JOIN (R music.album.artist) (JOIN (R music.release.album) m.03999ct))"
        }
    },
    "1163": {
        "generations": "Which royal house succeeded the House of Ascania?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zk5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zk5 ns:royalty.royal_line.preceded_by ?y .\n?y ns:royalty.royal_line.succeeded_by ?x .\n}\n",
            "TopicEntityMid": "m.0zk5",
            "mid2name": {
                "ns:m.0zk5": "House of Ascania"
            },
            "SExpr_w_name": "(JOIN (R royalty.royal_line.succeeded_by) (JOIN (R royalty.royal_line.preceded_by) House of Ascania))",
            "SExpr": "(JOIN (R royalty.royal_line.succeeded_by) (JOIN (R royalty.royal_line.preceded_by) m.0zk5))"
        }
    },
    "1164": {
        "generations": "What awards did the horse My Charmer win?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05h3gxh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05h3gxh ns:base.thoroughbredracing.thoroughbred_racehorse.foal_if_this_horse_is_dam ?y .\n?y ns:award.award_winner.awards_won ?x .\n}\n",
            "TopicEntityMid": "m.05h3gxh",
            "mid2name": {
                "ns:m.05h3gxh": "My Charmer"
            },
            "SExpr_w_name": "(JOIN (R award.award_winner.awards_won) (JOIN (R base.thoroughbredracing.thoroughbred_racehorse.foal_if_this_horse_is_dam) My Charmer))",
            "SExpr": "(JOIN (R award.award_winner.awards_won) (JOIN (R base.thoroughbredracing.thoroughbred_racehorse.foal_if_this_horse_is_dam) m.05h3gxh))"
        }
    },
    "1165": {
        "generations": "What programming language includes the Forth dialect and what are its language paradigms?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z81)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z81 ns:computer.programming_language.dialects ?y .\n?y ns:computer.programming_language.language_paradigms ?x .\n}\n",
            "TopicEntityMid": "m.02z81",
            "mid2name": {
                "ns:m.02z81": "Forth"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.language_paradigms) (JOIN (R computer.programming_language.dialects) Forth))",
            "SExpr": "(JOIN (R computer.programming_language.language_paradigms) (JOIN (R computer.programming_language.dialects) m.02z81))"
        }
    },
    "1166": {
        "generations": "who is the author of the literary series set in alagaesia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wcyf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wcyf ns:fictional_universe.fictional_universe.literary_series_set_here ?y .\n?y ns:book.literary_series.author_s ?x .\n}\n",
            "TopicEntityMid": "m.02wcyf",
            "mid2name": {
                "ns:m.02wcyf": "Alaga\u00ebsia"
            },
            "SExpr_w_name": "(JOIN (R book.literary_series.author_s) (JOIN (R fictional_universe.fictional_universe.literary_series_set_here) Alaga\u00ebsia))",
            "SExpr": "(JOIN (R book.literary_series.author_s) (JOIN (R fictional_universe.fictional_universe.literary_series_set_here) m.02wcyf))"
        }
    },
    "1167": {
        "generations": "How do you pronounce the word \"law\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gb7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gb7 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04gb7",
            "mid2name": {
                "ns:m.04gb7": "Law"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Law))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04gb7))"
        }
    },
    "1168": {
        "generations": "What are the different generations of Chevrolet models?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xm0m9r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xm0m9r ns:automotive.make.model_s ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.0xm0m9r",
            "mid2name": {
                "ns:m.0xm0m9r": "Chevrolet"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) Chevrolet))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.make.model_s) m.0xm0m9r))"
        }
    },
    "1169": {
        "generations": "What genre of music is Love You Live by?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hmz0g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hmz0g ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01hmz0g",
            "mid2name": {
                "ns:m.01hmz0g": "Love You Live"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Love You Live))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01hmz0g))"
        }
    },
    "1170": {
        "generations": "how do you pronounce prince kael'thas?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n9nl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n9nl ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04n9nl",
            "mid2name": {
                "ns:m.04n9nl": "Prince Kael'thas"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Prince Kael'thas))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.04n9nl))"
        }
    },
    "1171": {
        "generations": "who illustrated the cover of the book edition with Tom Hallman's binding?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0css1zh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0css1zh ns:book.illustrator.book_edition_covers ?y .\n?y ns:book.book_edition.binding ?x .\n}\n",
            "TopicEntityMid": "m.0css1zh",
            "mid2name": {
                "ns:m.0css1zh": "Tom Hallman"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.binding) (JOIN (R book.illustrator.book_edition_covers) Tom Hallman))",
            "SExpr": "(JOIN (R book.book_edition.binding) (JOIN (R book.illustrator.book_edition_covers) m.0css1zh))"
        }
    },
    "1172": {
        "generations": "what books did david burliuk write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08788c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08788c ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.08788c",
            "mid2name": {
                "ns:m.08788c": "David Burliuk"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) David Burliuk))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.08788c))"
        }
    },
    "1173": {
        "generations": "who appeared in the web series Childrens Hospital?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0y98c69)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0y98c69 ns:tv.sequence_of_tv_episode_segments.segments ?y .\n?y ns:base.webvideo.internet_video.performances ?x .\n}\n",
            "TopicEntityMid": "m.0y98c69",
            "mid2name": {
                "ns:m.0y98c69": "Childrens Hospital (web series)"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R tv.sequence_of_tv_episode_segments.segments) Childrens Hospital (web series)))",
            "SExpr": "(JOIN (R base.webvideo.internet_video.performances) (JOIN (R tv.sequence_of_tv_episode_segments.segments) m.0y98c69))"
        }
    },
    "1174": {
        "generations": "What is the composition of the \u0394\u207b hadron particle in physics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.093bc4h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.093bc4h ns:physics.hadron.composition ?y .\n?y ns:physics.subatomic_particle_composition.particle ?x .\n}\n",
            "TopicEntityMid": "m.093bc4h",
            "mid2name": {
                "ns:m.093bc4h": "\u0394\u207b"
            },
            "SExpr_w_name": "(JOIN (R physics.subatomic_particle_composition.particle) (JOIN (R physics.hadron.composition) \u0394\u207b))",
            "SExpr": "(JOIN (R physics.subatomic_particle_composition.particle) (JOIN (R physics.hadron.composition) m.093bc4h))"
        }
    },
    "1175": {
        "generations": "How do you pronounce \"stamp collecting\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06my8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06my8 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.06my8",
            "mid2name": {
                "ns:m.06my8": "Stamp collecting"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Stamp collecting))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.06my8))"
        }
    },
    "1176": {
        "generations": "how do you pronounce gunsmith cats?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04932y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04932y ns:comic_books.comic_book_series.publisher ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04932y",
            "mid2name": {
                "ns:m.04932y": "Gunsmith Cats"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R comic_books.comic_book_series.publisher) Gunsmith Cats))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R comic_books.comic_book_series.publisher) m.04932y))"
        }
    },
    "1177": {
        "generations": "who created characters in the Liefeld Universe comic book series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040_1kv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040_1kv ns:comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe ?y .\n?y ns:comic_books.comic_book_character.created_by ?x .\n}\n",
            "TopicEntityMid": "m.040_1kv",
            "mid2name": {
                "ns:m.040_1kv": "Liefeld Universe"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe) Liefeld Universe))",
            "SExpr": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe) m.040_1kv))"
        }
    },
    "1178": {
        "generations": "What website was targeted in a viral software attack that affected Facebook developers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k9b2h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k9b2h ns:internet.api.site ?y .\n?y ns:base.infection.computer_crime_victim.viral_software_attack ?x .\n}\n",
            "TopicEntityMid": "m.02k9b2h",
            "mid2name": {
                "ns:m.02k9b2h": "Developers.facebook.com"
            },
            "SExpr_w_name": "(JOIN (R base.infection.computer_crime_victim.viral_software_attack) (JOIN (R internet.api.site) Developers.facebook.com))",
            "SExpr": "(JOIN (R base.infection.computer_crime_victim.viral_software_attack) (JOIN (R internet.api.site) m.02k9b2h))"
        }
    },
    "1179": {
        "generations": "What fictional universe is New Heather a part of and which fictional characters were born there?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09jy7m5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09jy7m5 ns:fictional_universe.fictional_setting.fictional_characters_born_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.09jy7m5",
            "mid2name": {
                "ns:m.09jy7m5": "New Heather"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.fictional_characters_born_here) New Heather))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.fictional_characters_born_here) m.09jy7m5))"
        }
    },
    "1180": {
        "generations": "How do you pronounce words in the Danish language?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0295r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0295r ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0295r",
            "mid2name": {
                "ns:m.0295r": "Danish Language"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Danish Language))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0295r))"
        }
    },
    "1181": {
        "generations": "What medical condition is treated with Tolterodine tartrate 4 extended release capsule?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqtwz_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqtwz_ ns:medicine.drug_formulation.active_ingredient_moieties ?y .\n?y ns:medicine.medical_treatment.used_to_treat ?x .\n}\n",
            "TopicEntityMid": "m.0hqtwz_",
            "mid2name": {
                "ns:m.0hqtwz_": "Tolterodine tartrate 4 extended release capsule"
            },
            "SExpr_w_name": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) Tolterodine tartrate 4 extended release capsule))",
            "SExpr": "(JOIN (R medicine.medical_treatment.used_to_treat) (JOIN (R medicine.drug_formulation.active_ingredient_moieties) m.0hqtwz_))"
        }
    },
    "1182": {
        "generations": "What are the parts that make up the Beardmore 160 hp engine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.080b77k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.080b77k ns:engineering.engine.category ?y .\n?y ns:base.engineeringdraft.manufactured_component_category.meronyms ?x .\n}\n",
            "TopicEntityMid": "m.080b77k",
            "mid2name": {
                "ns:m.080b77k": "Beardmore 160 hp"
            },
            "SExpr_w_name": "(JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) (JOIN (R engineering.engine.category) Beardmore 160 hp))",
            "SExpr": "(JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) (JOIN (R engineering.engine.category) m.080b77k))"
        }
    },
    "1183": {
        "generations": "Who wrote the book \"Private Lives\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029r4b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029r4b ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.029r4b",
            "mid2name": {
                "ns:m.029r4b": "Private Lives"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Private Lives))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.029r4b))"
        }
    },
    "1184": {
        "generations": "How do you pronounce \"Horror comics\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.080k2rj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.080k2rj ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.080k2rj",
            "mid2name": {
                "ns:m.080k2rj": "Horror comics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Horror comics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.080k2rj))"
        }
    },
    "1185": {
        "generations": "What farms serve second grade education grade levels?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042_bx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042_bx ns:education.grade_level.locations_used ?y .\n?y ns:base.csafarms.area_served.farms ?x .\n}\n",
            "TopicEntityMid": "m.042_bx",
            "mid2name": {
                "ns:m.042_bx": "Second grade"
            },
            "SExpr_w_name": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R education.grade_level.locations_used) Second grade))",
            "SExpr": "(JOIN (R base.csafarms.area_served.farms) (JOIN (R education.grade_level.locations_used) m.042_bx))"
        }
    },
    "1186": {
        "generations": "what comic book setting did sheldon moldoff work on?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dt6rc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dt6rc ns:comic_books.comic_book_letterer.comic_stories_lettered ?y .\n?y ns:fictional_universe.work_of_fiction.setting ?x .\n}\n",
            "TopicEntityMid": "m.0dt6rc",
            "mid2name": {
                "ns:m.0dt6rc": "Sheldon Moldoff"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.work_of_fiction.setting) (JOIN (R comic_books.comic_book_letterer.comic_stories_lettered) Sheldon Moldoff))",
            "SExpr": "(JOIN (R fictional_universe.work_of_fiction.setting) (JOIN (R comic_books.comic_book_letterer.comic_stories_lettered) m.0dt6rc))"
        }
    },
    "1187": {
        "generations": "what books did eva schloss write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06vwtty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06vwtty ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.06vwtty",
            "mid2name": {
                "ns:m.06vwtty": "Eva Schloss"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Eva Schloss))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.06vwtty))"
        }
    },
    "1188": {
        "generations": "Who built the ship named Dorado?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02c1x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02c1x ns:symbols.name_source.namesakes ?y .\n?y ns:boats.ship.ship_builder ?x .\n}\n",
            "TopicEntityMid": "m.02c1x",
            "mid2name": {
                "ns:m.02c1x": "Dorado"
            },
            "SExpr_w_name": "(JOIN (R boats.ship.ship_builder) (JOIN (R symbols.name_source.namesakes) Dorado))",
            "SExpr": "(JOIN (R boats.ship.ship_builder) (JOIN (R symbols.name_source.namesakes) m.02c1x))"
        }
    },
    "1189": {
        "generations": "what operating systems are compatible with the R800 processor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033z4p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033z4p ns:computer.computer_processor.used_in_computers ?y .\n?y ns:computer.computer.compatible_oses ?x .\n}\n",
            "TopicEntityMid": "m.033z4p",
            "mid2name": {
                "ns:m.033z4p": "R800"
            },
            "SExpr_w_name": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_processor.used_in_computers) R800))",
            "SExpr": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_processor.used_in_computers) m.033z4p))"
        }
    },
    "1190": {
        "generations": "What type of accommodation does Marina Bay Sands have?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dd903)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dd903 ns:architecture.building_complex.complex_function ?y .\n?y ns:travel.accommodation_feature.accommodation_with_this_feature ?x .\n}\n",
            "TopicEntityMid": "m.0dd903",
            "mid2name": {
                "ns:m.0dd903": "Marina Bay Sands"
            },
            "SExpr_w_name": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R architecture.building_complex.complex_function) Marina Bay Sands))",
            "SExpr": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R architecture.building_complex.complex_function) m.0dd903))"
        }
    },
    "1191": {
        "generations": "what books did stephen jay gould write on understanding evolution?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0blj4pc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0blj4pc ns:book.interview.interviewee ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0blj4pc",
            "mid2name": {
                "ns:m.0blj4pc": "Stephen Jay Gould: Understanding Evolution"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.interview.interviewee) Stephen Jay Gould: Understanding Evolution))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.interview.interviewee) m.0blj4pc))"
        }
    },
    "1192": {
        "generations": "How do you pronounce \"Radio telescope\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0clmf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0clmf ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0clmf",
            "mid2name": {
                "ns:m.0clmf": "Radio telescope"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Radio telescope))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0clmf))"
        }
    },
    "1193": {
        "generations": "Which league is the East Division hockey teams a part of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ch9f9g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ch9f9g ns:ice_hockey.hockey_division.teams ?y .\n?y ns:sports.sports_team.league ?x .\n}\n",
            "TopicEntityMid": "m.0ch9f9g",
            "mid2name": {
                "ns:m.0ch9f9g": "East Division"
            },
            "SExpr_w_name": "(JOIN (R sports.sports_team.league) (JOIN (R ice_hockey.hockey_division.teams) East Division))",
            "SExpr": "(JOIN (R sports.sports_team.league) (JOIN (R ice_hockey.hockey_division.teams) m.0ch9f9g))"
        }
    },
    "1194": {
        "generations": "What is the higher classification of organisms originating in Bosnia and Herzegovina?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0166b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0166b ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.0166b",
            "mid2name": {
                "ns:m.0166b": "Bosnia and Herzegovina"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Bosnia and Herzegovina))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.0166b))"
        }
    },
    "1195": {
        "generations": "What song did the character Gofer perform in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06t_m3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06t_m3 ns:fictional_universe.character_occupation.characters_with_this_occupation ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.06t_m3",
            "mid2name": {
                "ns:m.06t_m3": "Gofer"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) Gofer))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) m.06t_m3))"
        }
    },
    "1196": {
        "generations": "where was american gladiators filmed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rltk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rltk ns:tv.tv_program.filming_locations ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.02rltk",
            "mid2name": {
                "ns:m.02rltk": "American Gladiators"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R tv.tv_program.filming_locations) American Gladiators))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R tv.tv_program.filming_locations) m.02rltk))"
        }
    },
    "1197": {
        "generations": "how do you pronounce the name of the author E. Nesbit?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015r7d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015r7d ns:book.author.works_written ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.015r7d",
            "mid2name": {
                "ns:m.015r7d": "E. Nesbit"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.author.works_written) E. Nesbit))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R book.author.works_written) m.015r7d))"
        }
    },
    "1198": {
        "generations": "how do you pronounce wally berger's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n4k90b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n4k90b ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0n4k90b",
            "mid2name": {
                "ns:m.0n4k90b": "Wally Berger"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Wally Berger))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0n4k90b))"
        }
    },
    "1199": {
        "generations": "Who wrote about the Bauer thesis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06jv6fc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06jv6fc ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.06jv6fc",
            "mid2name": {
                "ns:m.06jv6fc": "The Bauer thesis examined"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Bauer thesis examined))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.06jv6fc))"
        }
    },
    "1200": {
        "generations": "How do you pronounce the name \"April\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lkm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lkm ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0lkm",
            "mid2name": {
                "ns:m.0lkm": "April"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) April))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0lkm))"
        }
    },
    "1201": {
        "generations": "What breed of animal is associated with the Ministry of General Machine Building's astronauts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gg5ss4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gg5ss4 ns:spaceflight.space_agency.astronauts ?y .\n?y ns:biology.pedigreed_animal.breed ?x .\n}\n",
            "TopicEntityMid": "m.0gg5ss4",
            "mid2name": {
                "ns:m.0gg5ss4": "Ministry of General Machine Building"
            },
            "SExpr_w_name": "(JOIN (R biology.pedigreed_animal.breed) (JOIN (R spaceflight.space_agency.astronauts) Ministry of General Machine Building))",
            "SExpr": "(JOIN (R biology.pedigreed_animal.breed) (JOIN (R spaceflight.space_agency.astronauts) m.0gg5ss4))"
        }
    },
    "1202": {
        "generations": "how do you pronounce salvia officinalis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027_l3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027_l3 ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.027_l3",
            "mid2name": {
                "ns:m.027_l3": "Salvia officinalis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) Salvia officinalis))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) m.027_l3))"
        }
    },
    "1203": {
        "generations": "How do you pronounce \"Yellow tea\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058vrl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058vrl ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.058vrl",
            "mid2name": {
                "ns:m.058vrl": "Yellow tea"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Yellow tea))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.058vrl))"
        }
    },
    "1204": {
        "generations": "What is the higher classification of the organism that causes bubonic plague?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03y05ty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03y05ty ns:medicine.infectious_disease.vector ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.03y05ty",
            "mid2name": {
                "ns:m.03y05ty": "Bubonic plague"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R medicine.infectious_disease.vector) Bubonic plague))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R medicine.infectious_disease.vector) m.03y05ty))"
        }
    },
    "1205": {
        "generations": "What genre of music is featured in the album \"Music as a Weapon II\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fkfkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fkfkh ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01fkfkh",
            "mid2name": {
                "ns:m.01fkfkh": "Music as a Weapon II"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) Music as a Weapon II))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01fkfkh))"
        }
    },
    "1206": {
        "generations": "What products are in the same category as the IKEA PS 2012 9\" Bowl?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nblxz8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nblxz8 ns:business.consumer_product.category ?y .\n?y ns:business.product_category.products ?x .\n}\n",
            "TopicEntityMid": "m.0nblxz8",
            "mid2name": {
                "ns:m.0nblxz8": "IKEA PS 2012 9\" Bowl"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.products) (JOIN (R business.consumer_product.category) IKEA PS 2012 9\" Bowl))",
            "SExpr": "(JOIN (R business.product_category.products) (JOIN (R business.consumer_product.category) m.0nblxz8))"
        }
    },
    "1207": {
        "generations": "Where is the school with the mascot \"Green Terror\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mtpmm5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mtpmm5 ns:education.school_mascot.school ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0mtpmm5",
            "mid2name": {
                "ns:m.0mtpmm5": "Green terror Green terror"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.school_mascot.school) Green terror Green terror))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.school_mascot.school) m.0mtpmm5))"
        }
    },
    "1208": {
        "generations": "who is a member of the Lancashire Hustler music group?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m8231)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m8231 ns:music.album.artist ?y .\n?y ns:music.group_member.membership ?x .\n}\n",
            "TopicEntityMid": "m.03m8231",
            "mid2name": {
                "ns:m.03m8231": "Lancashire Hustler"
            },
            "SExpr_w_name": "(JOIN (R music.group_member.membership) (JOIN (R music.album.artist) Lancashire Hustler))",
            "SExpr": "(JOIN (R music.group_member.membership) (JOIN (R music.album.artist) m.03m8231))"
        }
    },
    "1209": {
        "generations": "Who wrote the book Trilby?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jzmgpp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jzmgpp ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0jzmgpp",
            "mid2name": {
                "ns:m.0jzmgpp": "Trilby"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Trilby))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0jzmgpp))"
        }
    },
    "1210": {
        "generations": "How do you pronounce \"Voskhod programme\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq9m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq9m ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01bq9m",
            "mid2name": {
                "ns:m.01bq9m": "Voskhod programme"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Voskhod programme))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01bq9m))"
        }
    },
    "1211": {
        "generations": "who illustrated the cover of the book edition with a specific binding?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04dxskc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04dxskc ns:book.illustrator.book_edition_covers ?y .\n?y ns:book.book_edition.binding ?x .\n}\n",
            "TopicEntityMid": "m.04dxskc",
            "mid2name": {
                "ns:m.04dxskc": "Ervin Serrano"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.binding) (JOIN (R book.illustrator.book_edition_covers) Ervin Serrano))",
            "SExpr": "(JOIN (R book.book_edition.binding) (JOIN (R book.illustrator.book_edition_covers) m.04dxskc))"
        }
    },
    "1212": {
        "generations": "What music group was Barry Devlin a member of?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065yt2y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065yt2y ns:music.group_member.membership ?y .\n?y ns:music.group_membership.group ?x .\n}\n",
            "TopicEntityMid": "m.065yt2y",
            "mid2name": {
                "ns:m.065yt2y": "Barry Devlin"
            },
            "SExpr_w_name": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) Barry Devlin))",
            "SExpr": "(JOIN (R music.group_membership.group) (JOIN (R music.group_member.membership) m.065yt2y))"
        }
    },
    "1213": {
        "generations": "What are the parts and components of an electric motor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k335)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k335 ns:base.engineeringdraft.manufactured_component_category.meronyms ?y .\n?y ns:base.engineeringdraft.manufactured_component_category.holonyms ?x .\n}\n",
            "TopicEntityMid": "m.0k335",
            "mid2name": {
                "ns:m.0k335": "Electric motor"
            },
            "SExpr_w_name": "(JOIN (R base.engineeringdraft.manufactured_component_category.holonyms) (JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) Electric motor))",
            "SExpr": "(JOIN (R base.engineeringdraft.manufactured_component_category.holonyms) (JOIN (R base.engineeringdraft.manufactured_component_category.meronyms) m.0k335))"
        }
    },
    "1214": {
        "generations": "how do you pronounce the name Edgar Quintero?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_h36d6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_h36d6 ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0_h36d6",
            "mid2name": {
                "ns:m.0_h36d6": "Edgar Quintero"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Edgar Quintero))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.0_h36d6))"
        }
    },
    "1215": {
        "generations": "Which astronomical observatory discovered the asteroid that belongs to a certain asteroid group?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pv3dj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pv3dj ns:astronomy.astronomical_observatory.discoveries ?y .\n?y ns:astronomy.asteroid.member_of_asteroid_group ?x .\n}\n",
            "TopicEntityMid": "m.02pv3dj",
            "mid2name": {
                "ns:m.02pv3dj": "Landessternwarte Heidelberg-K\u00f6nigstuhl"
            },
            "SExpr_w_name": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) Landessternwarte Heidelberg-K\u00f6nigstuhl))",
            "SExpr": "(JOIN (R astronomy.asteroid.member_of_asteroid_group) (JOIN (R astronomy.astronomical_observatory.discoveries) m.02pv3dj))"
        }
    },
    "1216": {
        "generations": "what art series is associated with the artwork \"The Piano Body\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012nwrt8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012nwrt8 ns:visual_art.artwork.artist ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.012nwrt8",
            "mid2name": {
                "ns:m.012nwrt8": "The Piano Body"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.artwork.artist) The Piano Body))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.artwork.artist) m.012nwrt8))"
        }
    },
    "1217": {
        "generations": "What is the latitude of Eshkol Regional Council?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027cwjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027cwjd ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.027cwjd",
            "mid2name": {
                "ns:m.027cwjd": "Eshkol Regional Council"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Eshkol Regional Council))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.027cwjd))"
        }
    },
    "1218": {
        "generations": "What historical places of worship are associated with Islam?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n}\n",
            "TopicEntityMid": "m.0flw86",
            "mid2name": {
                "ns:m.0flw86": "Islam"
            },
            "SExpr_w_name": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Islam))",
            "SExpr": "(JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.0flw86))"
        }
    },
    "1219": {
        "generations": "How do you pronounce sulfasalazine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jy5g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jy5g ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04jy5g",
            "mid2name": {
                "ns:m.04jy5g": "Sulfasalazine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Sulfasalazine))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.04jy5g))"
        }
    },
    "1220": {
        "generations": "How do you pronounce \"boiled egg\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09x374)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09x374 ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.09x374",
            "mid2name": {
                "ns:m.09x374": "Boiled egg"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Boiled egg))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.09x374))"
        }
    },
    "1221": {
        "generations": "Which celebrity bought a Lyric coloratura soprano?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02r0x0g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02r0x0g ns:music.voice.singers ?y .\n?y ns:base.popstra.celebrity.bought ?x .\n}\n",
            "TopicEntityMid": "m.02r0x0g",
            "mid2name": {
                "ns:m.02r0x0g": "Lyric coloratura soprano"
            },
            "SExpr_w_name": "(JOIN (R base.popstra.celebrity.bought) (JOIN (R music.voice.singers) Lyric coloratura soprano))",
            "SExpr": "(JOIN (R base.popstra.celebrity.bought) (JOIN (R music.voice.singers) m.02r0x0g))"
        }
    },
    "1222": {
        "generations": "What genre of music does Antonio Pappano perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07dk60)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07dk60 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.07dk60",
            "mid2name": {
                "ns:m.07dk60": "Antonio Pappano"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Antonio Pappano))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.07dk60))"
        }
    },
    "1223": {
        "generations": "who wrote the book \"The Heart of the Matter\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vbvlp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vbvlp ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.04vbvlp",
            "mid2name": {
                "ns:m.04vbvlp": "The heart of the matter"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) The heart of the matter))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.04vbvlp))"
        }
    },
    "1224": {
        "generations": "How do you pronounce \"panic disorder\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025s_q_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025s_q_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.025s_q_",
            "mid2name": {
                "ns:m.025s_q_": "Panic disorder"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Panic disorder))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.025s_q_))"
        }
    },
    "1225": {
        "generations": "what is the isbn of lucian volume 5?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vx8vgb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vx8vgb ns:book.book.editions ?y .\n?y ns:book.book_edition.isbn ?x .\n}\n",
            "TopicEntityMid": "m.0vx8vgb",
            "mid2name": {
                "ns:m.0vx8vgb": "Lucian. Volume 5"
            },
            "SExpr_w_name": "(JOIN (R book.book_edition.isbn) (JOIN (R book.book.editions) Lucian. Volume 5))",
            "SExpr": "(JOIN (R book.book_edition.isbn) (JOIN (R book.book.editions) m.0vx8vgb))"
        }
    },
    "1226": {
        "generations": "Who are some artists in the singing genre of music?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015lz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015lz1 ns:music.genre.artists ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.015lz1",
            "mid2name": {
                "ns:m.015lz1": "Singing"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) Singing))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.genre.artists) m.015lz1))"
        }
    },
    "1227": {
        "generations": "who wrote poems in the tercet form?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dmwg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dmwg ns:book.poetic_verse_form.poems_of_this_form ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.0dmwg",
            "mid2name": {
                "ns:m.0dmwg": "Tercet"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.poetic_verse_form.poems_of_this_form) Tercet))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.poetic_verse_form.poems_of_this_form) m.0dmwg))"
        }
    },
    "1228": {
        "generations": "What breed does Matford Vic belong to and what are some examples of animals of that breed?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rt17f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rt17f ns:biology.pedigreed_animal.breed ?y .\n?y ns:biology.animal_breed.examples ?x .\n}\n",
            "TopicEntityMid": "m.09rt17f",
            "mid2name": {
                "ns:m.09rt17f": "Matford Vic"
            },
            "SExpr_w_name": "(JOIN (R biology.animal_breed.examples) (JOIN (R biology.pedigreed_animal.breed) Matford Vic))",
            "SExpr": "(JOIN (R biology.animal_breed.examples) (JOIN (R biology.pedigreed_animal.breed) m.09rt17f))"
        }
    },
    "1229": {
        "generations": "What is the higher classification of organisms originating in Czechoslovakia?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mk6 ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.organism_classification.higher_classification ?x .\n}\n",
            "TopicEntityMid": "m.01mk6",
            "mid2name": {
                "ns:m.01mk6": "Czechoslovakia"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) Czechoslovakia))",
            "SExpr": "(JOIN (R biology.organism_classification.higher_classification) (JOIN (R biology.breed_origin.breeds_originating_here) m.01mk6))"
        }
    },
    "1230": {
        "generations": "What is a techno-thriller book and who are some of its authors?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017rf8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017rf8 ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.017rf8",
            "mid2name": {
                "ns:m.017rf8": "Techno-thriller"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Techno-thriller))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.017rf8))"
        }
    },
    "1231": {
        "generations": "What books has the government of South Africa written?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058s_5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058s_5 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n}\n",
            "TopicEntityMid": "m.058s_5",
            "mid2name": {
                "ns:m.058s_5": "Government of South Africa"
            },
            "SExpr_w_name": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) Government of South Africa))",
            "SExpr": "(JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.058s_5))"
        }
    },
    "1232": {
        "generations": "How do you pronounce Sony Alpha?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dlt3j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dlt3j ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0dlt3j",
            "mid2name": {
                "ns:m.0dlt3j": "Sony Alpha"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Sony Alpha))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0dlt3j))"
        }
    },
    "1233": {
        "generations": "who wrote a book about ice hockey?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03tmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03tmr ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.03tmr",
            "mid2name": {
                "ns:m.03tmr": "Ice Hockey"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Ice Hockey))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.03tmr))"
        }
    },
    "1234": {
        "generations": "what is the latitude of malibu beach?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0489v9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0489v9k ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.0489v9k",
            "mid2name": {
                "ns:m.0489v9k": "Malibu Beach"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Malibu Beach))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.0489v9k))"
        }
    },
    "1235": {
        "generations": "how do you pronounce hal luftig's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k1j4k_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k1j4k_ ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0k1j4k_",
            "mid2name": {
                "ns:m.0k1j4k_": "Hal Luftig"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Hal Luftig))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0k1j4k_))"
        }
    },
    "1236": {
        "generations": "What is the evidence for citrate transporter activity in gene groups?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l4bp1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l4bp1 ns:biology.gene_group.gene ?y .\n?y ns:biology.gene_group_membership.evidence ?x .\n}\n",
            "TopicEntityMid": "m.02l4bp1",
            "mid2name": {
                "ns:m.02l4bp1": "citrate transporter activity"
            },
            "SExpr_w_name": "(JOIN (R biology.gene_group_membership.evidence) (JOIN (R biology.gene_group.gene) citrate transporter activity))",
            "SExpr": "(JOIN (R biology.gene_group_membership.evidence) (JOIN (R biology.gene_group.gene) m.02l4bp1))"
        }
    },
    "1237": {
        "generations": "What beer styles fall under the Wood-Aged Beer BJCP style category?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hv23g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hv23g ns:food.beer_style.bjcp_style_category ?y .\n?y ns:food.beer_style_category.styles ?x .\n}\n",
            "TopicEntityMid": "m.02hv23g",
            "mid2name": {
                "ns:m.02hv23g": "Wood-Aged Beer"
            },
            "SExpr_w_name": "(JOIN (R food.beer_style_category.styles) (JOIN (R food.beer_style.bjcp_style_category) Wood-Aged Beer))",
            "SExpr": "(JOIN (R food.beer_style_category.styles) (JOIN (R food.beer_style.bjcp_style_category) m.02hv23g))"
        }
    },
    "1238": {
        "generations": "who designed the 1961-1964 studebaker avanti and wrote books?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l1rzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l1rzp ns:automotive.generation.designer ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.02l1rzp",
            "mid2name": {
                "ns:m.02l1rzp": "1961-1964 Studebaker Avanti"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R automotive.generation.designer) 1961-1964 Studebaker Avanti))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R automotive.generation.designer) m.02l1rzp))"
        }
    },
    "1239": {
        "generations": "What category does the Sugar-free Haystack product line belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011cjfqd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011cjfqd ns:business.product_line.category ?y .\n?y ns:business.product_category.product_lines ?x .\n}\n",
            "TopicEntityMid": "m.011cjfqd",
            "mid2name": {
                "ns:m.011cjfqd": "Sugar-free Haystack"
            },
            "SExpr_w_name": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) Sugar-free Haystack))",
            "SExpr": "(JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) m.011cjfqd))"
        }
    },
    "1240": {
        "generations": "What is the locus of chromosome 4 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwghj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwghj ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n}\n",
            "TopicEntityMid": "m.02kwghj",
            "mid2name": {
                "ns:m.02kwghj": "Chromosome 4 (human)"
            },
            "SExpr_w_name": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 4 (human)))",
            "SExpr": "(JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwghj))"
        }
    },
    "1241": {
        "generations": "what language did dejan stojanovic write in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crdtyf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crdtyf ns:book.author.works_written ?y .\n?y ns:book.written_work.original_language ?x .\n}\n",
            "TopicEntityMid": "m.0crdtyf",
            "mid2name": {
                "ns:m.0crdtyf": "Dejan Stojanovi\u0107"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) Dejan Stojanovi\u0107))",
            "SExpr": "(JOIN (R book.written_work.original_language) (JOIN (R book.author.works_written) m.0crdtyf))"
        }
    },
    "1242": {
        "generations": "who owns a maxi yacht?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pllk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pllk ns:boats.ship_class.ships_in_class ?y .\n?y ns:boats.ship.owners ?x .\n}\n",
            "TopicEntityMid": "m.01pllk",
            "mid2name": {
                "ns:m.01pllk": "Maxi yacht"
            },
            "SExpr_w_name": "(JOIN (R boats.ship.owners) (JOIN (R boats.ship_class.ships_in_class) Maxi yacht))",
            "SExpr": "(JOIN (R boats.ship.owners) (JOIN (R boats.ship_class.ships_in_class) m.01pllk))"
        }
    },
    "1243": {
        "generations": "How do you pronounce Mikoyan-Gurevich MiG-15?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018z5l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018z5l ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.018z5l",
            "mid2name": {
                "ns:m.018z5l": "Mikoyan-Gurevich MiG-15"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Mikoyan-Gurevich MiG-15))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.018z5l))"
        }
    },
    "1244": {
        "generations": "what fictional universe is glee set in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sgg90)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sgg90 ns:fictional_universe.fictional_universe.organizations ?y .\n?y ns:fictional_universe.fictional_setting.works_set_here ?x .\n}\n",
            "TopicEntityMid": "m.07sgg90",
            "mid2name": {
                "ns:m.07sgg90": "Glee Universe"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.fictional_universe.organizations) Glee Universe))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.fictional_universe.organizations) m.07sgg90))"
        }
    },
    "1245": {
        "generations": "Where do Hallertauer Mittelfr\u00fch hops come from?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0115gxy5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0115gxy5 ns:base.lightweight.beer_hop.hops_similar ?y .\n?y ns:base.lightweight.beer_hop.origin ?x .\n}\n",
            "TopicEntityMid": "m.0115gxy5",
            "mid2name": {
                "ns:m.0115gxy5": "Hallertauer Mittelfr\u00fch"
            },
            "SExpr_w_name": "(JOIN (R base.lightweight.beer_hop.origin) (JOIN (R base.lightweight.beer_hop.hops_similar) Hallertauer Mittelfr\u00fch))",
            "SExpr": "(JOIN (R base.lightweight.beer_hop.origin) (JOIN (R base.lightweight.beer_hop.hops_similar) m.0115gxy5))"
        }
    },
    "1246": {
        "generations": "what books did david puttnam write?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025y54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025y54 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.025y54",
            "mid2name": {
                "ns:m.025y54": "David Puttnam"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) David Puttnam))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.025y54))"
        }
    },
    "1247": {
        "generations": "How do you pronounce the IATA airline designator \"JQ\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047kv5f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047kv5f ns:aviation.iata_airline_designator.airline ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.047kv5f",
            "mid2name": {
                "ns:m.047kv5f": "JQ"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.iata_airline_designator.airline) JQ))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R aviation.iata_airline_designator.airline) m.047kv5f))"
        }
    },
    "1248": {
        "generations": "how do you pronounce hyderabad state's royal line predecessor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rlc0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rlc0 ns:royalty.royal_line.preceded_by ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01rlc0",
            "mid2name": {
                "ns:m.01rlc0": "Hyderabad State"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R royalty.royal_line.preceded_by) Hyderabad State))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R royalty.royal_line.preceded_by) m.01rlc0))"
        }
    },
    "1249": {
        "generations": "How do you pronounce Santana Formation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05rw82)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05rw82 ns:geology.geological_formation.formed_during_period ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05rw82",
            "mid2name": {
                "ns:m.05rw82": "Santana Formation"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R geology.geological_formation.formed_during_period) Santana Formation))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R geology.geological_formation.formed_during_period) m.05rw82))"
        }
    },
    "1250": {
        "generations": "How do you pronounce Cuban food?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02km6c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02km6c ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02km6c",
            "mid2name": {
                "ns:m.02km6c": "Cuban food"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Cuban food))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02km6c))"
        }
    },
    "1251": {
        "generations": "how do you pronounce fentanyl?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011w3r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011w3r ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.011w3r",
            "mid2name": {
                "ns:m.011w3r": "Fentanyl"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Fentanyl))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.011w3r))"
        }
    },
    "1252": {
        "generations": "who choreographed the music video for this artist Stephanie Gluck?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j216zp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j216zp ns:music.music_video_choreographer.music_videos_choreographed ?y .\n?y ns:music.music_video.artist ?x .\n}\n",
            "TopicEntityMid": "m.0j216zp",
            "mid2name": {
                "ns:m.0j216zp": "Stephanie Gluck"
            },
            "SExpr_w_name": "(JOIN (R music.music_video.artist) (JOIN (R music.music_video_choreographer.music_videos_choreographed) Stephanie Gluck))",
            "SExpr": "(JOIN (R music.music_video.artist) (JOIN (R music.music_video_choreographer.music_videos_choreographed) m.0j216zp))"
        }
    },
    "1253": {
        "generations": "What species habitats are found in Pyramid Mountain?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052f7k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052f7k ns:location.location.containedby ?y .\n?y ns:base.litcentral.focal_location.species_habitat_relationships ?x .\n}\n",
            "TopicEntityMid": "m.052f7k",
            "mid2name": {
                "ns:m.052f7k": "Pyramid Mountain"
            },
            "SExpr_w_name": "(JOIN (R base.litcentral.focal_location.species_habitat_relationships) (JOIN (R location.location.containedby) Pyramid Mountain))",
            "SExpr": "(JOIN (R base.litcentral.focal_location.species_habitat_relationships) (JOIN (R location.location.containedby) m.052f7k))"
        }
    },
    "1254": {
        "generations": "who owns dogbert's new ruling class?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_2ld)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_2ld ns:organization.club.areas_of_interest ?y .\n?y ns:business.brand.owner_s ?x .\n}\n",
            "TopicEntityMid": "m.01_2ld",
            "mid2name": {
                "ns:m.01_2ld": "Dogbert's New Ruling Class"
            },
            "SExpr_w_name": "(JOIN (R business.brand.owner_s) (JOIN (R organization.club.areas_of_interest) Dogbert's New Ruling Class))",
            "SExpr": "(JOIN (R business.brand.owner_s) (JOIN (R organization.club.areas_of_interest) m.01_2ld))"
        }
    },
    "1255": {
        "generations": "What features does the Courtyard Fresno hotel have?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0wrhcgb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0wrhcgb ns:travel.accommodation.features ?y .\n?y ns:travel.accommodation_feature.accommodation_with_this_feature ?x .\n}\n",
            "TopicEntityMid": "m.0wrhcgb",
            "mid2name": {
                "ns:m.0wrhcgb": "Courtyard Fresno"
            },
            "SExpr_w_name": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R travel.accommodation.features) Courtyard Fresno))",
            "SExpr": "(JOIN (R travel.accommodation_feature.accommodation_with_this_feature) (JOIN (R travel.accommodation.features) m.0wrhcgb))"
        }
    },
    "1256": {
        "generations": "Which programming language dialects were designed by Leo Geurts?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kdkwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kdkwc ns:computer.programming_language_designer.languages_designed ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.02kdkwc",
            "mid2name": {
                "ns:m.02kdkwc": "Leo Geurts"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_designer.languages_designed) Leo Geurts))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language_designer.languages_designed) m.02kdkwc))"
        }
    },
    "1257": {
        "generations": "What genre of video game does NoPayPOKER develop?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kk2qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kk2qy ns:cvg.cvg_developer.games_developed ?y .\n?y ns:cvg.computer_videogame.cvg_genre ?x .\n}\n",
            "TopicEntityMid": "m.05kk2qy",
            "mid2name": {
                "ns:m.05kk2qy": "NoPayPOKER"
            },
            "SExpr_w_name": "(JOIN (R cvg.computer_videogame.cvg_genre) (JOIN (R cvg.cvg_developer.games_developed) NoPayPOKER))",
            "SExpr": "(JOIN (R cvg.computer_videogame.cvg_genre) (JOIN (R cvg.cvg_developer.games_developed) m.05kk2qy))"
        }
    },
    "1258": {
        "generations": "What industry does Direct Life, Health, and Medical Insurance Carriers belong to?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qbn8c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qbn8c ns:business.industry.companies ?y .\n?y ns:business.business_operation.industry ?x .\n}\n",
            "TopicEntityMid": "m.03qbn8c",
            "mid2name": {
                "ns:m.03qbn8c": "Direct Life, Health, and Medical Insurance Carriers"
            },
            "SExpr_w_name": "(JOIN (R business.business_operation.industry) (JOIN (R business.industry.companies) Direct Life, Health, and Medical Insurance Carriers))",
            "SExpr": "(JOIN (R business.business_operation.industry) (JOIN (R business.industry.companies) m.03qbn8c))"
        }
    },
    "1259": {
        "generations": "how do you pronounce the location of origin for the Beyond Sanctuary Series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxj80x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxj80x ns:base.folklore.mythology.location_of_origin ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0bxj80x",
            "mid2name": {
                "ns:m.0bxj80x": "Beyond Sanctuary Series"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.folklore.mythology.location_of_origin) Beyond Sanctuary Series))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R base.folklore.mythology.location_of_origin) m.0bxj80x))"
        }
    },
    "1260": {
        "generations": "Which clubs are interested in the JW Marriott Hotel in Quito?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0myxcx0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0myxcx0 ns:travel.accommodation.features ?y .\n?y ns:organization.club_interest.clubs ?x .\n}\n",
            "TopicEntityMid": "m.0myxcx0",
            "mid2name": {
                "ns:m.0myxcx0": "JW Marriott Hotel Quito"
            },
            "SExpr_w_name": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) JW Marriott Hotel Quito))",
            "SExpr": "(JOIN (R organization.club_interest.clubs) (JOIN (R travel.accommodation.features) m.0myxcx0))"
        }
    },
    "1261": {
        "generations": "how do you pronounce the names of characters from japan in a fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.03_3d",
            "mid2name": {
                "ns:m.03_3d": "Japan"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Japan))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.03_3d))"
        }
    },
    "1262": {
        "generations": "What company produces Vinho Verde wine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02crn_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02crn_ ns:wine.wine_region.wines ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.02crn_",
            "mid2name": {
                "ns:m.02crn_": "Vinho Verde"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_region.wines) Vinho Verde))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R wine.wine_region.wines) m.02crn_))"
        }
    },
    "1263": {
        "generations": "What fictional universe does Super Macho Man appear in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0czc60b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0czc60b ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.0czc60b",
            "mid2name": {
                "ns:m.0czc60b": "Super Macho Man"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Super Macho Man))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.0czc60b))"
        }
    },
    "1264": {
        "generations": "What drugs belong to the histone deacetylase inhibitor drug class?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vrn33)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vrn33 ns:medicine.drug_class.drugs ?y .\n?y ns:medicine.drug.active_moieties ?x .\n}\n",
            "TopicEntityMid": "m.02vrn33",
            "mid2name": {
                "ns:m.02vrn33": "Histone deacetylase inhibitor"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug.active_moieties) (JOIN (R medicine.drug_class.drugs) Histone deacetylase inhibitor))",
            "SExpr": "(JOIN (R medicine.drug.active_moieties) (JOIN (R medicine.drug_class.drugs) m.02vrn33))"
        }
    },
    "1265": {
        "generations": "How do you pronounce Capetian House of Anjou?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qghf1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qghf1 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02qghf1",
            "mid2name": {
                "ns:m.02qghf1": "Capetian House of Anjou"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Capetian House of Anjou))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.02qghf1))"
        }
    },
    "1266": {
        "generations": "who is the current mayor of beverly hills?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04g75m_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04g75m_ ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n}\n",
            "TopicEntityMid": "m.04g75m_",
            "mid2name": {
                "ns:m.04g75m_": "Mayor of Beverly Hills"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) Mayor of Beverly Hills))",
            "SExpr": "(JOIN (R government.government_position_held.office_holder) (JOIN (R government.government_office_or_title.office_holders) m.04g75m_))"
        }
    },
    "1267": {
        "generations": "In which fictional universes does Principal Snyder appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kth5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kth5 ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.01kth5",
            "mid2name": {
                "ns:m.01kth5": "Principal Snyder"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Principal Snyder))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.01kth5))"
        }
    },
    "1268": {
        "generations": "What genre of music is the album \"World Without Tears\" by?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01m8r10)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01m8r10 ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n}\n",
            "TopicEntityMid": "m.01m8r10",
            "mid2name": {
                "ns:m.01m8r10": "World Without Tears"
            },
            "SExpr_w_name": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) World Without Tears))",
            "SExpr": "(JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01m8r10))"
        }
    },
    "1269": {
        "generations": "What work of fiction is set in Mutie Block (Part 1) in the Judge Dredd universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kcx2j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kcx2j ns:fictional_universe.work_of_fiction.setting ?y .\n?y ns:fictional_universe.fictional_setting.works_set_here ?x .\n}\n",
            "TopicEntityMid": "m.04kcx2j",
            "mid2name": {
                "ns:m.04kcx2j": "Judge Dredd: Mutie Block (Part 1)"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) Judge Dredd: Mutie Block (Part 1)))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.works_set_here) (JOIN (R fictional_universe.work_of_fiction.setting) m.04kcx2j))"
        }
    },
    "1270": {
        "generations": "Which fictional characters have lived on Mount Konocti?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09_wr5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09_wr5 ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.09_wr5",
            "mid2name": {
                "ns:m.09_wr5": "Mount Konocti"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Mount Konocti))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.09_wr5))"
        }
    },
    "1271": {
        "generations": "what are the administrative divisions of nicaragua?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c74)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c74 ns:location.country.administrative_divisions ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.05c74",
            "mid2name": {
                "ns:m.05c74": "Nicaragua"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.country.administrative_divisions) Nicaragua))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.country.administrative_divisions) m.05c74))"
        }
    },
    "1272": {
        "generations": "What award nominations were received for performances at Finsbury Park?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0171yy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0171yy ns:music.performance_venue.concerts ?y .\n?y ns:award.award_nominated_work.award_nominations ?x .\n}\n",
            "TopicEntityMid": "m.0171yy",
            "mid2name": {
                "ns:m.0171yy": "Finsbury Park"
            },
            "SExpr_w_name": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R music.performance_venue.concerts) Finsbury Park))",
            "SExpr": "(JOIN (R award.award_nominated_work.award_nominations) (JOIN (R music.performance_venue.concerts) m.0171yy))"
        }
    },
    "1273": {
        "generations": "How do you pronounce the name of the fictional character Marcus Junius Brutus?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08z_2r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08z_2r ns:fictional_universe.fictional_character.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.08z_2r",
            "mid2name": {
                "ns:m.08z_2r": "Marcus Junius Brutus"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) Marcus Junius Brutus))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R fictional_universe.fictional_character.gender) m.08z_2r))"
        }
    },
    "1274": {
        "generations": "how do you pronounce W.W. Cargill's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04yk_w5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04yk_w5 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.04yk_w5",
            "mid2name": {
                "ns:m.04yk_w5": "W.W. Cargill"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) W.W. Cargill))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.04yk_w5))"
        }
    },
    "1275": {
        "generations": "how do you pronounce windows 3.0?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016jsf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016jsf ns:computer.software.license ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.016jsf",
            "mid2name": {
                "ns:m.016jsf": "Windows 3.0"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software.license) Windows 3.0))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.software.license) m.016jsf))"
        }
    },
    "1276": {
        "generations": "What city is Collingsworth General Hospital located in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04g3blk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04g3blk ns:medicine.hospital.address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
            "TopicEntityMid": "m.04g3blk",
            "mid2name": {
                "ns:m.04g3blk": "Collingsworth General Hospital"
            },
            "SExpr_w_name": "(JOIN (R location.mailing_address.citytown) (JOIN (R medicine.hospital.address) Collingsworth General Hospital))",
            "SExpr": "(JOIN (R location.mailing_address.citytown) (JOIN (R medicine.hospital.address) m.04g3blk))"
        }
    },
    "1277": {
        "generations": "which comic book character was created by a jewish person?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041rx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041rx ns:fictional_universe.ethnicity_in_fiction.characters_of_this_ethnicity ?y .\n?y ns:comic_books.comic_book_character.created_by ?x .\n}\n",
            "TopicEntityMid": "m.041rx",
            "mid2name": {
                "ns:m.041rx": "Jewish people"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.ethnicity_in_fiction.characters_of_this_ethnicity) Jewish people))",
            "SExpr": "(JOIN (R comic_books.comic_book_character.created_by) (JOIN (R fictional_universe.ethnicity_in_fiction.characters_of_this_ethnicity) m.041rx))"
        }
    },
    "1278": {
        "generations": "what is the equivalent concept of a denim skirt in fashion?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d19j3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d19j3 ns:fashion.garment.specialization_of ?y .\n?y ns:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?x .\n}\n",
            "TopicEntityMid": "m.0d19j3",
            "mid2name": {
                "ns:m.0d19j3": "Denim skirt"
            },
            "SExpr_w_name": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) (JOIN (R fashion.garment.specialization_of) Denim skirt))",
            "SExpr": "(JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) (JOIN (R fashion.garment.specialization_of) m.0d19j3))"
        }
    },
    "1279": {
        "generations": "Where is the Faculty of Mathematical, Physical, and Natural Sciences located within the University of Catania?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d36zh9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d36zh9 ns:education.department.institution ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.0d36zh9",
            "mid2name": {
                "ns:m.0d36zh9": "Faculty of Mathematical, Physical, and Natural Sciences, University of Catania"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.department.institution) Faculty of Mathematical, Physical, and Natural Sciences, University of Catania))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.department.institution) m.0d36zh9))"
        }
    },
    "1280": {
        "generations": "How do you pronounce \"National Council\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tzg_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tzg_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01tzg_",
            "mid2name": {
                "ns:m.01tzg_": "National Council"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) National Council))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01tzg_))"
        }
    },
    "1281": {
        "generations": "What was the automotive class of the Plymouth Caravelle's predecessor?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03jbwv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03jbwv ns:automotive.model.predecessor ?y .\n?y ns:automotive.model.automotive_class ?x .\n}\n",
            "TopicEntityMid": "m.03jbwv",
            "mid2name": {
                "ns:m.03jbwv": "Plymouth Caravelle"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.automotive_class) (JOIN (R automotive.model.predecessor) Plymouth Caravelle))",
            "SExpr": "(JOIN (R automotive.model.automotive_class) (JOIN (R automotive.model.predecessor) m.03jbwv))"
        }
    },
    "1282": {
        "generations": "What category does Theta Centauri belong to in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057sh8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057sh8 ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.057sh8",
            "mid2name": {
                "ns:m.057sh8": "Theta Centauri"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) Theta Centauri))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) m.057sh8))"
        }
    },
    "1283": {
        "generations": "What models are included in the Mercedes-Benz W169 generation?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05w000)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05w000 ns:automotive.generation.models ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.05w000",
            "mid2name": {
                "ns:m.05w000": "Mercedes-Benz W169"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) Mercedes-Benz W169))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) m.05w000))"
        }
    },
    "1284": {
        "generations": "When did Sarajevo host the Olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06n8j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06n8j ns:olympics.olympic_host_city.olympics_hosted ?y .\n?y ns:time.event.instance_of_recurring_event ?x .\n}\n",
            "TopicEntityMid": "m.06n8j",
            "mid2name": {
                "ns:m.06n8j": "Sarajevo"
            },
            "SExpr_w_name": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) Sarajevo))",
            "SExpr": "(JOIN (R time.event.instance_of_recurring_event) (JOIN (R olympics.olympic_host_city.olympics_hosted) m.06n8j))"
        }
    },
    "1285": {
        "generations": "which artists are associated with the music genre of the muppets?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05335)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05335 ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.05335",
            "mid2name": {
                "ns:m.05335": "The Muppets"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) The Muppets))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.05335))"
        }
    },
    "1286": {
        "generations": "what is the latitude of the bah\u00e1'\u00ed house of worship?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019f07)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019f07 ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.019f07",
            "mid2name": {
                "ns:m.019f07": "Bah\u00e1'\u00ed House of Worship"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Bah\u00e1'\u00ed House of Worship))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.019f07))"
        }
    },
    "1287": {
        "generations": "How do you pronounce the name \"Fig\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fw9d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fw9d ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0fw9d",
            "mid2name": {
                "ns:m.0fw9d": "Fig"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Fig))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0fw9d))"
        }
    },
    "1288": {
        "generations": "who founded the farms in the united states of america?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:base.csafarms.area_served.farms ?y .\n?y ns:organization.organization.founders ?x .\n}\n",
            "TopicEntityMid": "m.09c7w0",
            "mid2name": {
                "ns:m.09c7w0": "United States of America"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.founders) (JOIN (R base.csafarms.area_served.farms) United States of America))",
            "SExpr": "(JOIN (R organization.organization.founders) (JOIN (R base.csafarms.area_served.farms) m.09c7w0))"
        }
    },
    "1289": {
        "generations": "who wrote books that elizabeth vaughan authored?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qdk18)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qdk18 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.05qdk18",
            "mid2name": {
                "ns:m.05qdk18": "Elizabeth Vaughan"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Elizabeth Vaughan))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.05qdk18))"
        }
    },
    "1290": {
        "generations": "who created the History of Maine Labor Mural artwork?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gkg825)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gkg825 ns:visual_art.art_series.artworks ?y .\n?y ns:visual_art.artwork.artist ?x .\n}\n",
            "TopicEntityMid": "m.0gkg825",
            "mid2name": {
                "ns:m.0gkg825": "History of Maine Labor Mural"
            },
            "SExpr_w_name": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) History of Maine Labor Mural))",
            "SExpr": "(JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) m.0gkg825))"
        }
    },
    "1291": {
        "generations": "how do you pronounce tokyo dome city attractions?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ydqbx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ydqbx ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.04ydqbx",
            "mid2name": {
                "ns:m.04ydqbx": "Tokyo Dome City Attractions"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Tokyo Dome City Attractions))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.04ydqbx))"
        }
    },
    "1292": {
        "generations": "how do you pronounce chuck alston's name?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h4skz0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h4skz0 ns:people.person.gender ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0h4skz0",
            "mid2name": {
                "ns:m.0h4skz0": "Chuck Alston"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) Chuck Alston))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R people.person.gender) m.0h4skz0))"
        }
    },
    "1293": {
        "generations": "Who created a recipe using a Silpat?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k248)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k248 ns:food.culinary_tool.used_in_recipes ?y .\n?y ns:food.recipe.author ?x .\n}\n",
            "TopicEntityMid": "m.09k248",
            "mid2name": {
                "ns:m.09k248": "Silpat"
            },
            "SExpr_w_name": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) Silpat))",
            "SExpr": "(JOIN (R food.recipe.author) (JOIN (R food.culinary_tool.used_in_recipes) m.09k248))"
        }
    },
    "1294": {
        "generations": "What is the Beaufort wind force category for a Very Severe Cyclonic Storm (IMD)?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0256dr6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0256dr6 ns:meteorology.tropical_cyclone_category.Beaufort_scale ?y .\n?y ns:meteorology.beaufort_wind_force.tropical_cyclone_categories ?x .\n}\n",
            "TopicEntityMid": "m.0256dr6",
            "mid2name": {
                "ns:m.0256dr6": "Very Severe Cyclonic Storm (IMD)"
            },
            "SExpr_w_name": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) Very Severe Cyclonic Storm (IMD)))",
            "SExpr": "(JOIN (R meteorology.beaufort_wind_force.tropical_cyclone_categories) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) m.0256dr6))"
        }
    },
    "1295": {
        "generations": "Who was involved in infidelity in the music video \"Russian Roulette\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h3dnrc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h3dnrc ns:music.music_video.artist ?y .\n?y ns:base.popstra.celebrity.infidelity_participant ?x .\n}\n",
            "TopicEntityMid": "m.0h3dnrc",
            "mid2name": {
                "ns:m.0h3dnrc": "Russian Roulette"
            },
            "SExpr_w_name": "(JOIN (R base.popstra.celebrity.infidelity_participant) (JOIN (R music.music_video.artist) Russian Roulette))",
            "SExpr": "(JOIN (R base.popstra.celebrity.infidelity_participant) (JOIN (R music.music_video.artist) m.0h3dnrc))"
        }
    },
    "1296": {
        "generations": "What is the antiparticle of the up quark in physics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jzqz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jzqz ns:physics.particle.antiparticle ?y .\n?y ns:physics.particle_antiparticle.particle ?x .\n}\n",
            "TopicEntityMid": "m.01jzqz",
            "mid2name": {
                "ns:m.01jzqz": "Up quark"
            },
            "SExpr_w_name": "(JOIN (R physics.particle_antiparticle.particle) (JOIN (R physics.particle.antiparticle) Up quark))",
            "SExpr": "(JOIN (R physics.particle_antiparticle.particle) (JOIN (R physics.particle.antiparticle) m.01jzqz))"
        }
    },
    "1297": {
        "generations": "who composed the track \"Singin' in the Rain\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.063hnt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.063hnt ns:music.composition.composer ?y .\n?y ns:music.artist.track ?x .\n}\n",
            "TopicEntityMid": "m.063hnt",
            "mid2name": {
                "ns:m.063hnt": "Singin' in the Rain"
            },
            "SExpr_w_name": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) Singin' in the Rain))",
            "SExpr": "(JOIN (R music.artist.track) (JOIN (R music.composition.composer) m.063hnt))"
        }
    },
    "1298": {
        "generations": "What animal breeds originated in Portugal?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r4w ns:biology.breed_origin.breeds_originating_here ?y .\n?y ns:biology.animal_breed.examples ?x .\n}\n",
            "TopicEntityMid": "m.05r4w",
            "mid2name": {
                "ns:m.05r4w": "Portugal"
            },
            "SExpr_w_name": "(JOIN (R biology.animal_breed.examples) (JOIN (R biology.breed_origin.breeds_originating_here) Portugal))",
            "SExpr": "(JOIN (R biology.animal_breed.examples) (JOIN (R biology.breed_origin.breeds_originating_here) m.05r4w))"
        }
    },
    "1299": {
        "generations": "when was the first issue of Il Progresso Italo-Americano published?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h2z_k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h2z_k ns:book.periodical.first_issue_date ?y .\n?y ns:book.periodical_publication_date.date ?x .\n}\n",
            "TopicEntityMid": "m.03h2z_k",
            "mid2name": {
                "ns:m.03h2z_k": "Il Progresso Italo-Americano"
            },
            "SExpr_w_name": "(JOIN (R book.periodical_publication_date.date) (JOIN (R book.periodical.first_issue_date) Il Progresso Italo-Americano))",
            "SExpr": "(JOIN (R book.periodical_publication_date.date) (JOIN (R book.periodical.first_issue_date) m.03h2z_k))"
        }
    },
    "1300": {
        "generations": "which comedians have been involved in infidelity scandals and are known for black comedy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vgkd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vgkd ns:base.americancomedy.comedy_genre.comedians_in_this_genre ?y .\n?y ns:base.popstra.celebrity.infidelity_participant ?x .\n}\n",
            "TopicEntityMid": "m.0vgkd",
            "mid2name": {
                "ns:m.0vgkd": "Black comedy"
            },
            "SExpr_w_name": "(JOIN (R base.popstra.celebrity.infidelity_participant) (JOIN (R base.americancomedy.comedy_genre.comedians_in_this_genre) Black comedy))",
            "SExpr": "(JOIN (R base.popstra.celebrity.infidelity_participant) (JOIN (R base.americancomedy.comedy_genre.comedians_in_this_genre) m.0vgkd))"
        }
    },
    "1301": {
        "generations": "what genre of internet videos does graham gouldman create?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_3qd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_3qd ns:music.artist.genre ?y .\n?y ns:base.webvideo.internet_video_genre.internet_video ?x .\n}\n",
            "TopicEntityMid": "m.07_3qd",
            "mid2name": {
                "ns:m.07_3qd": "Graham Gouldman"
            },
            "SExpr_w_name": "(JOIN (R base.webvideo.internet_video_genre.internet_video) (JOIN (R music.artist.genre) Graham Gouldman))",
            "SExpr": "(JOIN (R base.webvideo.internet_video_genre.internet_video) (JOIN (R music.artist.genre) m.07_3qd))"
        }
    },
    "1302": {
        "generations": "How do you pronounce the word \"Android\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wxtgw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wxtgw ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02wxtgw",
            "mid2name": {
                "ns:m.02wxtgw": "Android"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Android))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02wxtgw))"
        }
    },
    "1303": {
        "generations": "What is the location of the band on human chromosome 12p12.2?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kws53)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kws53 ns:biology.cytogenetic_band.chromosome ?y .\n?y ns:biology.chromosome.band ?x .\n}\n",
            "TopicEntityMid": "m.02kws53",
            "mid2name": {
                "ns:m.02kws53": "Human Cytogenetic Band 12p12.2"
            },
            "SExpr_w_name": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) Human Cytogenetic Band 12p12.2))",
            "SExpr": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) m.02kws53))"
        }
    },
    "1304": {
        "generations": "which organizations use system software 6 license?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02bssm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02bssm ns:computer.software.license ?y .\n?y ns:organization.organization_sector.organizations_in_this_sector ?x .\n}\n",
            "TopicEntityMid": "m.02bssm",
            "mid2name": {
                "ns:m.02bssm": "System Software 6"
            },
            "SExpr_w_name": "(JOIN (R organization.organization_sector.organizations_in_this_sector) (JOIN (R computer.software.license) System Software 6))",
            "SExpr": "(JOIN (R organization.organization_sector.organizations_in_this_sector) (JOIN (R computer.software.license) m.02bssm))"
        }
    },
    "1305": {
        "generations": "In which fictional universes does Princess Aura appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s0lm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s0lm ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.characters ?x .\n}\n",
            "TopicEntityMid": "m.07s0lm",
            "mid2name": {
                "ns:m.07s0lm": "Princess Aura"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Princess Aura))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.07s0lm))"
        }
    },
    "1306": {
        "generations": "where is the Magistrates' Court of Victoria located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.063spf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.063spf ns:government.governmental_body.jurisdiction ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.063spf",
            "mid2name": {
                "ns:m.063spf": "Magistrates' Court of Victoria"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R government.governmental_body.jurisdiction) Magistrates' Court of Victoria))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R government.governmental_body.jurisdiction) m.063spf))"
        }
    },
    "1307": {
        "generations": "What are the subcategories of a glacier cave?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dz_x9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dz_x9 ns:geography.geographical_feature_category.subcategory_of ?y .\n?y ns:geography.geographical_feature_category.subcategories ?x .\n}\n",
            "TopicEntityMid": "m.0dz_x9",
            "mid2name": {
                "ns:m.0dz_x9": "Glacier cave"
            },
            "SExpr_w_name": "(JOIN (R geography.geographical_feature_category.subcategories) (JOIN (R geography.geographical_feature_category.subcategory_of) Glacier cave))",
            "SExpr": "(JOIN (R geography.geographical_feature_category.subcategories) (JOIN (R geography.geographical_feature_category.subcategory_of) m.0dz_x9))"
        }
    },
    "1308": {
        "generations": "how do you pronounce piano?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r5c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r5c ns:music.genre.artists ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.05r5c",
            "mid2name": {
                "ns:m.05r5c": "Piano"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R music.genre.artists) Piano))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R music.genre.artists) m.05r5c))"
        }
    },
    "1309": {
        "generations": "which characters have lived in the filming location of american idol?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01b7h8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01b7h8 ns:tv.tv_program.filming_locations ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.01b7h8",
            "mid2name": {
                "ns:m.01b7h8": "American Idol"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R tv.tv_program.filming_locations) American Idol))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R tv.tv_program.filming_locations) m.01b7h8))"
        }
    },
    "1310": {
        "generations": "What is the evidence for positive regulation of caspase activity in gene group membership?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l7pjl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l7pjl ns:biology.gene_group.gene ?y .\n?y ns:biology.gene_group_membership.evidence ?x .\n}\n",
            "TopicEntityMid": "m.02l7pjl",
            "mid2name": {
                "ns:m.02l7pjl": "positive regulation of caspase activity"
            },
            "SExpr_w_name": "(JOIN (R biology.gene_group_membership.evidence) (JOIN (R biology.gene_group.gene) positive regulation of caspase activity))",
            "SExpr": "(JOIN (R biology.gene_group_membership.evidence) (JOIN (R biology.gene_group.gene) m.02l7pjl))"
        }
    },
    "1311": {
        "generations": "who is M. Anderson named after?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09zp0z3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09zp0z3 ns:symbols.namesake.named_after ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.09zp0z3",
            "mid2name": {
                "ns:m.09zp0z3": "M. Anderson"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R symbols.namesake.named_after) M. Anderson))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R symbols.namesake.named_after) m.09zp0z3))"
        }
    },
    "1312": {
        "generations": "how do you pronounce java?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sbkfb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sbkfb ns:computer.programming_language.dialects ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07sbkfb",
            "mid2name": {
                "ns:m.07sbkfb": "Java"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) Java))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R computer.programming_language.dialects) m.07sbkfb))"
        }
    },
    "1313": {
        "generations": "who succeeded the house of Braganza-Saxe-Coburg and Gotha in the royal line?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gtdhp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gtdhp ns:royalty.royal_line.preceded_by ?y .\n?y ns:people.family.members ?x .\n}\n",
            "TopicEntityMid": "m.04gtdhp",
            "mid2name": {
                "ns:m.04gtdhp": "House of Braganza-Saxe-Coburg and Gotha"
            },
            "SExpr_w_name": "(JOIN (R people.family.members) (JOIN (R royalty.royal_line.preceded_by) House of Braganza-Saxe-Coburg and Gotha))",
            "SExpr": "(JOIN (R people.family.members) (JOIN (R royalty.royal_line.preceded_by) m.04gtdhp))"
        }
    },
    "1314": {
        "generations": "What governmental body does a member of the Scottish Parliament hold a position in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n30b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n30b ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.governmental_body ?x .\n}\n",
            "TopicEntityMid": "m.01n30b",
            "mid2name": {
                "ns:m.01n30b": "Member of the Scottish Parliament"
            },
            "SExpr_w_name": "(JOIN (R government.government_position_held.governmental_body) (JOIN (R government.government_office_or_title.office_holders) Member of the Scottish Parliament))",
            "SExpr": "(JOIN (R government.government_position_held.governmental_body) (JOIN (R government.government_office_or_title.office_holders) m.01n30b))"
        }
    },
    "1315": {
        "generations": "who wrote the tv episode that Savage Steve Holland performed in?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06gf7_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06gf7_ ns:tv.tv_writer.tv_segments_written ?y .\n?y ns:tv.tv_episode_segment.performances ?x .\n}\n",
            "TopicEntityMid": "m.06gf7_",
            "mid2name": {
                "ns:m.06gf7_": "Savage Steve Holland"
            },
            "SExpr_w_name": "(JOIN (R tv.tv_episode_segment.performances) (JOIN (R tv.tv_writer.tv_segments_written) Savage Steve Holland))",
            "SExpr": "(JOIN (R tv.tv_episode_segment.performances) (JOIN (R tv.tv_writer.tv_segments_written) m.06gf7_))"
        }
    },
    "1316": {
        "generations": "what is the gender of artists who create bas-relief art?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pkk0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pkk0 ns:visual_art.visual_art_form.artists ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.01pkk0",
            "mid2name": {
                "ns:m.01pkk0": "Bas-relief"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R visual_art.visual_art_form.artists) Bas-relief))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R visual_art.visual_art_form.artists) m.01pkk0))"
        }
    },
    "1317": {
        "generations": "What magazine topic is featured on the website www.stern.de?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qqm6x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qqm6x ns:internet.website.category ?y .\n?y ns:user.techgnostic.default_domain.magazine_topic.periodical ?x .\n}\n",
            "TopicEntityMid": "m.03qqm6x",
            "mid2name": {
                "ns:m.03qqm6x": "www.stern.de"
            },
            "SExpr_w_name": "(JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) (JOIN (R internet.website.category) www.stern.de))",
            "SExpr": "(JOIN (R user.techgnostic.default_domain.magazine_topic.periodical) (JOIN (R internet.website.category) m.03qqm6x))"
        }
    },
    "1318": {
        "generations": "What is the active ingredient in Agathosma betulina leaf medication?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqwttk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqwttk ns:medicine.drug_ingredient.active_ingredient_of_formulation ?y .\n?y ns:medicine.drug_formulation.active_ingredient_moieties ?x .\n}\n",
            "TopicEntityMid": "m.0hqwttk",
            "mid2name": {
                "ns:m.0hqwttk": "Agathosma betulina leaf"
            },
            "SExpr_w_name": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) Agathosma betulina leaf))",
            "SExpr": "(JOIN (R medicine.drug_formulation.active_ingredient_moieties) (JOIN (R medicine.drug_ingredient.active_ingredient_of_formulation) m.0hqwttk))"
        }
    },
    "1319": {
        "generations": "How do you pronounce the word \"cylinder\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h_4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h_4m ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03h_4m",
            "mid2name": {
                "ns:m.03h_4m": "Cylinder"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Cylinder))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03h_4m))"
        }
    },
    "1320": {
        "generations": "how do you pronounce facial nerve disorders?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07vt_nm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07vt_nm ns:medicine.disease.includes_diseases ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07vt_nm",
            "mid2name": {
                "ns:m.07vt_nm": "Facial nerve disorders"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.disease.includes_diseases) Facial nerve disorders))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.disease.includes_diseases) m.07vt_nm))"
        }
    },
    "1321": {
        "generations": "who wrote the book \"How to Make Friends and then Kill Them\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0zdf79d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0zdf79d ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.0zdf79d",
            "mid2name": {
                "ns:m.0zdf79d": "How to Make Friends and then Kill Them"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) How to Make Friends and then Kill Them))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0zdf79d))"
        }
    },
    "1322": {
        "generations": "what award is given in the audio production industry?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04j55j0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04j55j0 ns:organization.organization_sector.organizations_in_this_sector ?y .\n?y ns:award.award_honor.award ?x .\n}\n",
            "TopicEntityMid": "m.04j55j0",
            "mid2name": {
                "ns:m.04j55j0": "Audio Production"
            },
            "SExpr_w_name": "(JOIN (R award.award_honor.award) (JOIN (R organization.organization_sector.organizations_in_this_sector) Audio Production))",
            "SExpr": "(JOIN (R award.award_honor.award) (JOIN (R organization.organization_sector.organizations_in_this_sector) m.04j55j0))"
        }
    },
    "1323": {
        "generations": "Which characters are in a book written by David Anthony Kraft?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vp_8z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vp_8z ns:book.author.works_written ?y .\n?y ns:book.book.characters ?x .\n}\n",
            "TopicEntityMid": "m.02vp_8z",
            "mid2name": {
                "ns:m.02vp_8z": "David Anthony Kraft"
            },
            "SExpr_w_name": "(JOIN (R book.book.characters) (JOIN (R book.author.works_written) David Anthony Kraft))",
            "SExpr": "(JOIN (R book.book.characters) (JOIN (R book.author.works_written) m.02vp_8z))"
        }
    },
    "1324": {
        "generations": "In which fictional universes does Mary Russell appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0375_h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0375_h ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.characters ?x .\n}\n",
            "TopicEntityMid": "m.0375_h",
            "mid2name": {
                "ns:m.0375_h": "Mary Russell"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Mary Russell))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.0375_h))"
        }
    },
    "1325": {
        "generations": "What brand and model is the Buick LaCrosse?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hlv1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hlv1 ns:business.consumer_product.brand ?y .\n?y ns:automotive.make.model_s ?x .\n}\n",
            "TopicEntityMid": "m.03hlv1",
            "mid2name": {
                "ns:m.03hlv1": "Buick LaCrosse"
            },
            "SExpr_w_name": "(JOIN (R automotive.make.model_s) (JOIN (R business.consumer_product.brand) Buick LaCrosse))",
            "SExpr": "(JOIN (R automotive.make.model_s) (JOIN (R business.consumer_product.brand) m.03hlv1))"
        }
    },
    "1326": {
        "generations": "who wrote a book about wrestling?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036vg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036vg6 ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.036vg6",
            "mid2name": {
                "ns:m.036vg6": "Wrestling"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Wrestling))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.036vg6))"
        }
    },
    "1327": {
        "generations": "What is the classification rank and higher classification of the passenger pigeon in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05zlw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05zlw ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.rank ?x .\n}\n",
            "TopicEntityMid": "m.05zlw",
            "mid2name": {
                "ns:m.05zlw": "Passenger pigeon"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) Passenger pigeon))",
            "SExpr": "(JOIN (R biology.organism_classification.rank) (JOIN (R biology.organism_classification.higher_classification) m.05zlw))"
        }
    },
    "1328": {
        "generations": "how do you pronounce rasmussen?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0m3j_6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0m3j_6f ns:government.election_poll.election ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.0m3j_6f",
            "mid2name": {
                "ns:m.0m3j_6f": "Rasmussen, 2012 presidential election, 2012-08-13"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R government.election_poll.election) Rasmussen, 2012 presidential election, 2012-08-13))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R government.election_poll.election) m.0m3j_6f))"
        }
    },
    "1329": {
        "generations": "How do you pronounce the word \"Sukkot\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.072qz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.072qz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.072qz",
            "mid2name": {
                "ns:m.072qz": "Sukkot"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Sukkot))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.072qz))"
        }
    },
    "1330": {
        "generations": "Which operating system was developed by Peter Wagner's company and is a parent to another operating system?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ncy_1d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ncy_1d ns:computer.operating_system_developer.operating_systems_developed ?y .\n?y ns:computer.operating_system.parent_os ?x .\n}\n",
            "TopicEntityMid": "m.0ncy_1d",
            "mid2name": {
                "ns:m.0ncy_1d": "Peter Wagner"
            },
            "SExpr_w_name": "(JOIN (R computer.operating_system.parent_os) (JOIN (R computer.operating_system_developer.operating_systems_developed) Peter Wagner))",
            "SExpr": "(JOIN (R computer.operating_system.parent_os) (JOIN (R computer.operating_system_developer.operating_systems_developed) m.0ncy_1d))"
        }
    },
    "1331": {
        "generations": "How do you pronounce the word \"historian\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03jgz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03jgz ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03jgz",
            "mid2name": {
                "ns:m.03jgz": "Historian"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Historian))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03jgz))"
        }
    },
    "1332": {
        "generations": "How do you pronounce digitoxin?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xc6w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xc6w ns:medicine.medical_treatment.used_to_treat ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01xc6w",
            "mid2name": {
                "ns:m.01xc6w": "Digitoxin"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) Digitoxin))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R medicine.medical_treatment.used_to_treat) m.01xc6w))"
        }
    },
    "1333": {
        "generations": "what was the title system in the kingdom of hawaii?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hlvc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hlvc ns:royalty.system_of_nobility.titles ?y .\n?y ns:royalty.system_title_relationship.title ?x .\n}\n",
            "TopicEntityMid": "m.01hlvc",
            "mid2name": {
                "ns:m.01hlvc": "Kingdom of Hawaii"
            },
            "SExpr_w_name": "(JOIN (R royalty.system_title_relationship.title) (JOIN (R royalty.system_of_nobility.titles) Kingdom of Hawaii))",
            "SExpr": "(JOIN (R royalty.system_title_relationship.title) (JOIN (R royalty.system_of_nobility.titles) m.01hlvc))"
        }
    },
    "1334": {
        "generations": "How do you pronounce \"barbed wire\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0blzr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0blzr ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0blzr",
            "mid2name": {
                "ns:m.0blzr": "Barbed wire"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Barbed wire))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0blzr))"
        }
    },
    "1335": {
        "generations": "who discovered the Amor asteroid group?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0290nk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0290nk ns:astronomy.asteroid_group.asteroid_group_members ?y .\n?y ns:astronomy.astronomical_discovery.discoverer ?x .\n}\n",
            "TopicEntityMid": "m.0290nk",
            "mid2name": {
                "ns:m.0290nk": "Amor asteroid"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.asteroid_group.asteroid_group_members) Amor asteroid))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.asteroid_group.asteroid_group_members) m.0290nk))"
        }
    },
    "1336": {
        "generations": "what is the latitude of the Submarine Voyage location?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s33k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s33k ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.07s33k",
            "mid2name": {
                "ns:m.07s33k": "Submarine Voyage"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Submarine Voyage))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.07s33k))"
        }
    },
    "1337": {
        "generations": "Which artists are associated with the Chicago Symphony Chorus genre of music?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wj5lk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wj5lk ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.03wj5lk",
            "mid2name": {
                "ns:m.03wj5lk": "Chicago Symphony Chorus"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Chicago Symphony Chorus))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.03wj5lk))"
        }
    },
    "1338": {
        "generations": "how do you pronounce staphylococcus epidermidis?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07v882)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07v882 ns:biology.organism_classification.higher_classification ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.07v882",
            "mid2name": {
                "ns:m.07v882": "Staphylococcus epidermidis"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) Staphylococcus epidermidis))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R biology.organism_classification.higher_classification) m.07v882))"
        }
    },
    "1339": {
        "generations": "What fictional organization is associated with the Cloak of Invisibility?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02649zv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02649zv ns:fictional_universe.fictional_object.featured_in_fictional_universe ?y .\n?y ns:fictional_universe.fictional_universe.organizations ?x .\n}\n",
            "TopicEntityMid": "m.02649zv",
            "mid2name": {
                "ns:m.02649zv": "Cloak of invisibility"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_object.featured_in_fictional_universe) Cloak of invisibility))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.organizations) (JOIN (R fictional_universe.fictional_object.featured_in_fictional_universe) m.02649zv))"
        }
    },
    "1340": {
        "generations": "What are the different generations and models of the Ford Fiesta Mark VI?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09dv82l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09dv82l ns:automotive.generation.models ?y .\n?y ns:automotive.model.generations ?x .\n}\n",
            "TopicEntityMid": "m.09dv82l",
            "mid2name": {
                "ns:m.09dv82l": "Ford Fiesta Mark VI"
            },
            "SExpr_w_name": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) Ford Fiesta Mark VI))",
            "SExpr": "(JOIN (R automotive.model.generations) (JOIN (R automotive.generation.models) m.09dv82l))"
        }
    },
    "1341": {
        "generations": "What countries are part of the basin of Cirque lake?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gllvhx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gllvhx ns:geography.geographical_feature_category.features ?y .\n?y ns:geography.lake.basin_countries ?x .\n}\n",
            "TopicEntityMid": "m.0gllvhx",
            "mid2name": {
                "ns:m.0gllvhx": "Cirque lake"
            },
            "SExpr_w_name": "(JOIN (R geography.lake.basin_countries) (JOIN (R geography.geographical_feature_category.features) Cirque lake))",
            "SExpr": "(JOIN (R geography.lake.basin_countries) (JOIN (R geography.geographical_feature_category.features) m.0gllvhx))"
        }
    },
    "1342": {
        "generations": "what was the beaufort scale category of hurricane gloria?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wcnw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wcnw ns:meteorology.tropical_cyclone.category ?y .\n?y ns:meteorology.tropical_cyclone_category.Beaufort_scale ?x .\n}\n",
            "TopicEntityMid": "m.03wcnw",
            "mid2name": {
                "ns:m.03wcnw": "Hurricane Gloria"
            },
            "SExpr_w_name": "(JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) Hurricane Gloria))",
            "SExpr": "(JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) m.03wcnw))"
        }
    },
    "1343": {
        "generations": "Which artists created concept art for an art series?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0426yt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0426yt ns:visual_art.visual_art_form.artists ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n}\n",
            "TopicEntityMid": "m.0426yt",
            "mid2name": {
                "ns:m.0426yt": "Concept art"
            },
            "SExpr_w_name": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) Concept art))",
            "SExpr": "(JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.visual_art_form.artists) m.0426yt))"
        }
    },
    "1344": {
        "generations": "what awards have been won by turbofan engines?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q03_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q03_ ns:engineering.engine_category.engines ?y .\n?y ns:award.award_winning_work.awards_won ?x .\n}\n",
            "TopicEntityMid": "m.0q03_",
            "mid2name": {
                "ns:m.0q03_": "Turbofan"
            },
            "SExpr_w_name": "(JOIN (R award.award_winning_work.awards_won) (JOIN (R engineering.engine_category.engines) Turbofan))",
            "SExpr": "(JOIN (R award.award_winning_work.awards_won) (JOIN (R engineering.engine_category.engines) m.0q03_))"
        }
    },
    "1345": {
        "generations": "who created the comic book character storm?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01htfz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01htfz ns:comic_books.comic_book_character.created_by ?y .\n?y ns:comic_books.comic_book_penciler.comic_books_penciled ?x .\n}\n",
            "TopicEntityMid": "m.01htfz",
            "mid2name": {
                "ns:m.01htfz": "Ororo Munroe / Storm"
            },
            "SExpr_w_name": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) Ororo Munroe / Storm))",
            "SExpr": "(JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) m.01htfz))"
        }
    },
    "1346": {
        "generations": "What wines does Grupo Sogevinus SGPS SA produce?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064hyyh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064hyyh ns:business.business_operation.industry ?y .\n?y ns:food.wine_style.wines ?x .\n}\n",
            "TopicEntityMid": "m.064hyyh",
            "mid2name": {
                "ns:m.064hyyh": "Grupo Sogevinus SGPS SA"
            },
            "SExpr_w_name": "(JOIN (R food.wine_style.wines) (JOIN (R business.business_operation.industry) Grupo Sogevinus SGPS SA))",
            "SExpr": "(JOIN (R food.wine_style.wines) (JOIN (R business.business_operation.industry) m.064hyyh))"
        }
    },
    "1347": {
        "generations": "How do you pronounce the word \"Geriatrics\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.028dfg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.028dfg ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.028dfg",
            "mid2name": {
                "ns:m.028dfg": "Geriatrics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Geriatrics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.028dfg))"
        }
    },
    "1348": {
        "generations": "where was the host analytics epm suite founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0129l8g7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0129l8g7 ns:business.consumer_product.brand ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.0129l8g7",
            "mid2name": {
                "ns:m.0129l8g7": "Host Analytics EPM Suite"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R business.consumer_product.brand) Host Analytics EPM Suite))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R business.consumer_product.brand) m.0129l8g7))"
        }
    },
    "1349": {
        "generations": "who wrote books about x86-64 processors?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kdmy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kdmy ns:computer.computer_processor.manufacturers ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.01kdmy",
            "mid2name": {
                "ns:m.01kdmy": "x86-64"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) x86-64))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R computer.computer_processor.manufacturers) m.01kdmy))"
        }
    },
    "1350": {
        "generations": "How do you pronounce \"gumball machine\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zvtv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zvtv ns:interests.collection_category.parent_category ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.02zvtv",
            "mid2name": {
                "ns:m.02zvtv": "Gumball machine"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R interests.collection_category.parent_category) Gumball machine))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R interests.collection_category.parent_category) m.02zvtv))"
        }
    },
    "1351": {
        "generations": "Which company produces the High ISO Auto camera?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02nqg65)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02nqg65 ns:digicams.camera_iso.cameras ?y .\n?y ns:business.consumer_product.company ?x .\n}\n",
            "TopicEntityMid": "m.02nqg65",
            "mid2name": {
                "ns:m.02nqg65": "High ISO Auto"
            },
            "SExpr_w_name": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_iso.cameras) High ISO Auto))",
            "SExpr": "(JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_iso.cameras) m.02nqg65))"
        }
    },
    "1352": {
        "generations": "who wrote the book The Gates of Rome?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.028y50h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.028y50h ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n}\n",
            "TopicEntityMid": "m.028y50h",
            "mid2name": {
                "ns:m.028y50h": "The Gates of Rome"
            },
            "SExpr_w_name": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) The Gates of Rome))",
            "SExpr": "(JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.028y50h))"
        }
    },
    "1353": {
        "generations": "What is the location of the band on chromosome 6q26 in humans?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwndd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwndd ns:biology.cytogenetic_band.chromosome ?y .\n?y ns:biology.chromosome.band ?x .\n}\n",
            "TopicEntityMid": "m.02kwndd",
            "mid2name": {
                "ns:m.02kwndd": "Human Cytogenetic Band 6q26"
            },
            "SExpr_w_name": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) Human Cytogenetic Band 6q26))",
            "SExpr": "(JOIN (R biology.chromosome.band) (JOIN (R biology.cytogenetic_band.chromosome) m.02kwndd))"
        }
    },
    "1354": {
        "generations": "Who wrote the book \"Easy Money\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c3fk4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c3fk4 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n}\n",
            "TopicEntityMid": "m.05c3fk4",
            "mid2name": {
                "ns:m.05c3fk4": "Easy Money"
            },
            "SExpr_w_name": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Easy Money))",
            "SExpr": "(JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.05c3fk4))"
        }
    },
    "1355": {
        "generations": "who founded the world mission society church of god and what is their gender?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q21kx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q21kx ns:religion.religion.founding_figures ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.02q21kx",
            "mid2name": {
                "ns:m.02q21kx": "World Mission Society Church of God"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R religion.religion.founding_figures) World Mission Society Church of God))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R religion.religion.founding_figures) m.02q21kx))"
        }
    },
    "1356": {
        "generations": "What is the vector for blood disorders?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0djy52r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0djy52r ns:medicine.disease.includes_diseases ?y .\n?y ns:medicine.infectious_disease.vector ?x .\n}\n",
            "TopicEntityMid": "m.0djy52r",
            "mid2name": {
                "ns:m.0djy52r": "Blood disorder"
            },
            "SExpr_w_name": "(JOIN (R medicine.infectious_disease.vector) (JOIN (R medicine.disease.includes_diseases) Blood disorder))",
            "SExpr": "(JOIN (R medicine.infectious_disease.vector) (JOIN (R medicine.disease.includes_diseases) m.0djy52r))"
        }
    },
    "1357": {
        "generations": "What is the classification of Catarratto in biology?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04q8pyc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04q8pyc ns:biology.organism_classification.higher_classification ?y .\n?y ns:biology.organism_classification.child_classifications ?x .\n}\n",
            "TopicEntityMid": "m.04q8pyc",
            "mid2name": {
                "ns:m.04q8pyc": "Catarratto"
            },
            "SExpr_w_name": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) Catarratto))",
            "SExpr": "(JOIN (R biology.organism_classification.child_classifications) (JOIN (R biology.organism_classification.higher_classification) m.04q8pyc))"
        }
    },
    "1358": {
        "generations": "How do you pronounce \"Shueisha\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pnvq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pnvq ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.03pnvq",
            "mid2name": {
                "ns:m.03pnvq": "Shueisha"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Shueisha))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.03pnvq))"
        }
    },
    "1359": {
        "generations": "How do you pronounce Frequency-division multiple access?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01cprt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01cprt ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01cprt",
            "mid2name": {
                "ns:m.01cprt": "Frequency-division multiple access"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Frequency-division multiple access))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01cprt))"
        }
    },
    "1360": {
        "generations": "What species is Donatello from in the fictional universe?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mwy0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mwy0 ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.species ?x .\n}\n",
            "TopicEntityMid": "m.02mwy0",
            "mid2name": {
                "ns:m.02mwy0": "Donatello"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Donatello))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.02mwy0))"
        }
    },
    "1361": {
        "generations": "What restaurants are near Candlestick Park?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017grj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017grj ns:location.location.containedby ?y .\n?y ns:user.faye.default_domain.travel_destination.restaurants ?x .\n}\n",
            "TopicEntityMid": "m.017grj",
            "mid2name": {
                "ns:m.017grj": "Candlestick Park"
            },
            "SExpr_w_name": "(JOIN (R user.faye.default_domain.travel_destination.restaurants) (JOIN (R location.location.containedby) Candlestick Park))",
            "SExpr": "(JOIN (R user.faye.default_domain.travel_destination.restaurants) (JOIN (R location.location.containedby) m.017grj))"
        }
    },
    "1362": {
        "generations": "what is the second amendment to the united states constitution about?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07shq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07shq ns:law.constitutional_amendment.constitution ?y .\n?y ns:law.constitution.country ?x .\n}\n",
            "TopicEntityMid": "m.07shq",
            "mid2name": {
                "ns:m.07shq": "Second Amendment to the United States Constitution"
            },
            "SExpr_w_name": "(JOIN (R law.constitution.country) (JOIN (R law.constitutional_amendment.constitution) Second Amendment to the United States Constitution))",
            "SExpr": "(JOIN (R law.constitution.country) (JOIN (R law.constitutional_amendment.constitution) m.07shq))"
        }
    },
    "1363": {
        "generations": "how do you pronounce the term \"Retreating\" in relation to glaciers?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y2jnj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y2jnj ns:geography.glacier_status.glaciers_of_this_status ?y .\n?y ns:base.schemastaging.context_name.pronunciation ?x .\n}\n",
            "TopicEntityMid": "m.01y2jnj",
            "mid2name": {
                "ns:m.01y2jnj": "Retreating"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R geography.glacier_status.glaciers_of_this_status) Retreating))",
            "SExpr": "(JOIN (R base.schemastaging.context_name.pronunciation) (JOIN (R geography.glacier_status.glaciers_of_this_status) m.01y2jnj))"
        }
    },
    "1364": {
        "generations": "Which fictional characters have lived in the James D. and Alice Butler House?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xll_4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xll_4 ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n}\n",
            "TopicEntityMid": "m.01xll_4",
            "mid2name": {
                "ns:m.01xll_4": "James D. and Alice Butler House"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) James D. and Alice Butler House))",
            "SExpr": "(JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.01xll_4))"
        }
    },
    "1365": {
        "generations": "what school offers a major in general internal medicine?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vn0c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vn0c97 ns:education.field_of_study.students_majoring ?y .\n?y ns:education.education.institution ?x .\n}\n",
            "TopicEntityMid": "m.0vn0c97",
            "mid2name": {
                "ns:m.0vn0c97": "General Internal Medicine"
            },
            "SExpr_w_name": "(JOIN (R education.education.institution) (JOIN (R education.field_of_study.students_majoring) General Internal Medicine))",
            "SExpr": "(JOIN (R education.education.institution) (JOIN (R education.field_of_study.students_majoring) m.0vn0c97))"
        }
    },
    "1366": {
        "generations": "What operating systems are compatible with ARM Cortex-A8 processors?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fq0kgf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fq0kgf ns:computer.computer_processor.used_in_computers ?y .\n?y ns:computer.computer.compatible_oses ?x .\n}\n",
            "TopicEntityMid": "m.0fq0kgf",
            "mid2name": {
                "ns:m.0fq0kgf": "ARM Cortex-A8"
            },
            "SExpr_w_name": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_processor.used_in_computers) ARM Cortex-A8))",
            "SExpr": "(JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer_processor.used_in_computers) m.0fq0kgf))"
        }
    },
    "1367": {
        "generations": "In which fictional universes does Dr. Watson appear?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014_w4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014_w4 ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?y .\n?y ns:fictional_universe.fictional_universe.characters ?x .\n}\n",
            "TopicEntityMid": "m.014_w4",
            "mid2name": {
                "ns:m.014_w4": "Dr. Watson"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) Dr. Watson))",
            "SExpr": "(JOIN (R fictional_universe.fictional_universe.characters) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) m.014_w4))"
        }
    },
    "1368": {
        "generations": "What is the status of dwarf planets in the solar system according to astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06p5g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06p5g ns:astronomy.star_system.dwarf_planets ?y .\n?y ns:astronomy.astronomical_discovery.status ?x .\n}\n",
            "TopicEntityMid": "m.06p5g",
            "mid2name": {
                "ns:m.06p5g": "Solar System"
            },
            "SExpr_w_name": "(JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.star_system.dwarf_planets) Solar System))",
            "SExpr": "(JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.star_system.dwarf_planets) m.06p5g))"
        }
    },
    "1369": {
        "generations": "which fictional universes are part of the Spore comic book story arc?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wlz7_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wlz7_ ns:comic_books.comic_book_story_arc.spanning ?y .\n?y ns:fictional_universe.work_of_fiction.part_of_these_fictional_universes ?x .\n}\n",
            "TopicEntityMid": "m.02wlz7_",
            "mid2name": {
                "ns:m.02wlz7_": "Spore"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_story_arc.spanning) Spore))",
            "SExpr": "(JOIN (R fictional_universe.work_of_fiction.part_of_these_fictional_universes) (JOIN (R comic_books.comic_book_story_arc.spanning) m.02wlz7_))"
        }
    },
    "1370": {
        "generations": "What are examples of interacting galaxies in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08ybdz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08ybdz ns:astronomy.celestial_object_category.subcategory_of ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.08ybdz",
            "mid2name": {
                "ns:m.08ybdz": "Interacting galaxy"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object_category.subcategory_of) Interacting galaxy))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object_category.subcategory_of) m.08ybdz))"
        }
    },
    "1371": {
        "generations": "what animals did john scott-ellis, 9th baron howard de walden own?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09v7gjw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09v7gjw ns:biology.animal_owner.animals_owned ?y .\n?y ns:biology.animal_ownership.animal ?x .\n}\n",
            "TopicEntityMid": "m.09v7gjw",
            "mid2name": {
                "ns:m.09v7gjw": "John Scott-Ellis, 9th Baron Howard de Walden"
            },
            "SExpr_w_name": "(JOIN (R biology.animal_ownership.animal) (JOIN (R biology.animal_owner.animals_owned) John Scott-Ellis, 9th Baron Howard de Walden))",
            "SExpr": "(JOIN (R biology.animal_ownership.animal) (JOIN (R biology.animal_owner.animals_owned) m.09v7gjw))"
        }
    },
    "1372": {
        "generations": "What is the location of Yichun Mingyueshan Airport?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hgl6sj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hgl6sj ns:location.location.containedby ?y .\n?y ns:location.location.contains ?x .\n}\n",
            "TopicEntityMid": "m.0hgl6sj",
            "mid2name": {
                "ns:m.0hgl6sj": "Yichun Mingyueshan Airport"
            },
            "SExpr_w_name": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) Yichun Mingyueshan Airport))",
            "SExpr": "(JOIN (R location.location.contains) (JOIN (R location.location.containedby) m.0hgl6sj))"
        }
    },
    "1373": {
        "generations": "What genre of music does Steve Blevins perform?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011j6ntg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011j6ntg ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n}\n",
            "TopicEntityMid": "m.011j6ntg",
            "mid2name": {
                "ns:m.011j6ntg": "Steve Blevins"
            },
            "SExpr_w_name": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Steve Blevins))",
            "SExpr": "(JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.011j6ntg))"
        }
    },
    "1374": {
        "generations": "What programming language is influenced by Modula-3 and has multiple dialects?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01k159)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01k159 ns:computer.programming_language.influenced_by ?y .\n?y ns:computer.programming_language.dialects ?x .\n}\n",
            "TopicEntityMid": "m.01k159",
            "mid2name": {
                "ns:m.01k159": "Modula-3"
            },
            "SExpr_w_name": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) Modula-3))",
            "SExpr": "(JOIN (R computer.programming_language.dialects) (JOIN (R computer.programming_language.influenced_by) m.01k159))"
        }
    },
    "1375": {
        "generations": "who created the character in the short story \"How Kid Brady Assisted a Damsel in Distress\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010p_7n0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010p_7n0 ns:book.short_story.characters ?y .\n?y ns:fictional_universe.fictional_character.character_created_by ?x .\n}\n",
            "TopicEntityMid": "m.010p_7n0",
            "mid2name": {
                "ns:m.010p_7n0": "How Kid Brady Assisted a Damsel in Distress"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.character_created_by) (JOIN (R book.short_story.characters) How Kid Brady Assisted a Damsel in Distress))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.character_created_by) (JOIN (R book.short_story.characters) m.010p_7n0))"
        }
    },
    "1376": {
        "generations": "how fast can tasmanian devils run?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j0z3z4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j0z3z4 ns:zoos.zoo_exhibit.species ?y .\n?y ns:base.animal_synopses.animal_synopsis.speed ?x .\n}\n",
            "TopicEntityMid": "m.0j0z3z4",
            "mid2name": {
                "ns:m.0j0z3z4": "Tasmanian Devils"
            },
            "SExpr_w_name": "(JOIN (R base.animal_synopses.animal_synopsis.speed) (JOIN (R zoos.zoo_exhibit.species) Tasmanian Devils))",
            "SExpr": "(JOIN (R base.animal_synopses.animal_synopsis.speed) (JOIN (R zoos.zoo_exhibit.species) m.0j0z3z4))"
        }
    },
    "1377": {
        "generations": "where is the school for C101.5 student radio station located?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09rjsp0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09rjsp0 ns:education.student_radio_station.school ?y .\n?y ns:location.location.containedby ?x .\n}\n",
            "TopicEntityMid": "m.09rjsp0",
            "mid2name": {
                "ns:m.09rjsp0": "C101.5"
            },
            "SExpr_w_name": "(JOIN (R location.location.containedby) (JOIN (R education.student_radio_station.school) C101.5))",
            "SExpr": "(JOIN (R location.location.containedby) (JOIN (R education.student_radio_station.school) m.09rjsp0))"
        }
    },
    "1378": {
        "generations": "What awards has the Brazil national football team been nominated for?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01352_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01352_ ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n}\n",
            "TopicEntityMid": "m.01352_",
            "mid2name": {
                "ns:m.01352_": "Brazil national football team"
            },
            "SExpr_w_name": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) Brazil national football team))",
            "SExpr": "(JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.01352_))"
        }
    },
    "1379": {
        "generations": "What family rose to prominence after the House of Orange-Nassau?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jg1q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jg1q ns:royalty.royal_line.preceded_by ?y .\n?y ns:people.family.rise_to_prominence ?x .\n}\n",
            "TopicEntityMid": "m.0jg1q",
            "mid2name": {
                "ns:m.0jg1q": "House of Orange-Nassau"
            },
            "SExpr_w_name": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) House of Orange-Nassau))",
            "SExpr": "(JOIN (R people.family.rise_to_prominence) (JOIN (R royalty.royal_line.preceded_by) m.0jg1q))"
        }
    },
    "1380": {
        "generations": "how do you pronounce the yomigana for the 1972 winter olympics?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f1jy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f1jy ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.01f1jy",
            "mid2name": {
                "ns:m.01f1jy": "1972 Winter Olympics"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) 1972 Winter Olympics))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.01f1jy))"
        }
    },
    "1381": {
        "generations": "What is the gender of the characters in Middleverse?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0zq_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0zq_ ns:fictional_universe.fictional_universe.characters ?y .\n?y ns:fictional_universe.fictional_character.gender ?x .\n}\n",
            "TopicEntityMid": "m.0d0zq_",
            "mid2name": {
                "ns:m.0d0zq_": "Middleverse"
            },
            "SExpr_w_name": "(JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_universe.characters) Middleverse))",
            "SExpr": "(JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_universe.characters) m.0d0zq_))"
        }
    },
    "1382": {
        "generations": "where was the confectionery and nut stores company founded?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qblsl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qblsl ns:business.industry.companies ?y .\n?y ns:organization.organization.place_founded ?x .\n}\n",
            "TopicEntityMid": "m.03qblsl",
            "mid2name": {
                "ns:m.03qblsl": "Confectionery and Nut Stores"
            },
            "SExpr_w_name": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) Confectionery and Nut Stores))",
            "SExpr": "(JOIN (R organization.organization.place_founded) (JOIN (R business.industry.companies) m.03qblsl))"
        }
    },
    "1383": {
        "generations": "how do you pronounce Fujimi Shobo?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qtzt_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qtzt_ ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.02qtzt_",
            "mid2name": {
                "ns:m.02qtzt_": "Fujimi Shobo"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Fujimi Shobo))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.02qtzt_))"
        }
    },
    "1384": {
        "generations": "What category does Alnilam belong to in astronomy?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02np26)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02np26 ns:astronomy.celestial_object.category ?y .\n?y ns:astronomy.celestial_object_category.objects ?x .\n}\n",
            "TopicEntityMid": "m.02np26",
            "mid2name": {
                "ns:m.02np26": "Alnilam"
            },
            "SExpr_w_name": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) Alnilam))",
            "SExpr": "(JOIN (R astronomy.celestial_object_category.objects) (JOIN (R astronomy.celestial_object.category) m.02np26))"
        }
    },
    "1385": {
        "generations": "what is the latitude of the roman catholic archdiocese of chicago?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036wsw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036wsw ns:location.location.geolocation ?y .\n?y ns:location.geocode.latitude ?x .\n}\n",
            "TopicEntityMid": "m.036wsw",
            "mid2name": {
                "ns:m.036wsw": "Roman Catholic Archdiocese of Chicago"
            },
            "SExpr_w_name": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) Roman Catholic Archdiocese of Chicago))",
            "SExpr": "(JOIN (R location.geocode.latitude) (JOIN (R location.location.geolocation) m.036wsw))"
        }
    },
    "1386": {
        "generations": "Who created the comic book series \"Jacky's Diary\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jsr8n2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jsr8n2 ns:comic_books.comic_book_series.created_by ?y .\n?y ns:people.person.gender ?x .\n}\n",
            "TopicEntityMid": "m.0jsr8n2",
            "mid2name": {
                "ns:m.0jsr8n2": "Jacky's Diary"
            },
            "SExpr_w_name": "(JOIN (R people.person.gender) (JOIN (R comic_books.comic_book_series.created_by) Jacky's Diary))",
            "SExpr": "(JOIN (R people.person.gender) (JOIN (R comic_books.comic_book_series.created_by) m.0jsr8n2))"
        }
    },
    "1387": {
        "generations": "How do you pronounce the word \"Contrail\"?",
        "ori_data_item": {
            "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0csfb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0csfb ns:base.schemastaging.context_name.pronunciation ?y .\n?y ns:base.schemastaging.pronunciation.yomigana ?x .\n}\n",
            "TopicEntityMid": "m.0csfb",
            "mid2name": {
                "ns:m.0csfb": "Contrail"
            },
            "SExpr_w_name": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) Contrail))",
            "SExpr": "(JOIN (R base.schemastaging.pronunciation.yomigana) (JOIN (R base.schemastaging.context_name.pronunciation) m.0csfb))"
        }
    }
}