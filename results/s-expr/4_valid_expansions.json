[
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06tpfgv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06tpfgv ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.05y9250 .\n}\n",
        "TopicEntityMid": "m.06tpfgv",
        "mid2name": {
            "ns:m.06tpfgv": "The Village of Round and Square Houses",
            "ns:m.05y9250": "Ann Grifalconi"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Ann Grifalconi) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) The Village of Round and Square Houses)))",
        "SExpr": "(AND (JOIN book.written_work.author m.05y9250) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.06tpfgv)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02llgt2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02llgt2 ns:biology.genomic_locus.annotation ?y .\n?y ns:biology.gene.chromosome ?x .\n?x ns:biology.chromosome.band ns:m.02kwgnb .\n}\n",
        "TopicEntityMid": "m.02llgt2",
        "mid2name": {
            "ns:m.02llgt2": "1 + [16566306,16595450]",
            "ns:m.02kwgnb": "Human Cytogenetic Band 1p36.33"
        },
        "SExpr_w_name": "(AND (JOIN biology.chromosome.band Human Cytogenetic Band 1p36.33) (JOIN (R biology.gene.chromosome) (JOIN (R biology.genomic_locus.annotation) 1 + [16566306,16595450])))",
        "SExpr": "(AND (JOIN biology.chromosome.band m.02kwgnb) (JOIN (R biology.gene.chromosome) (JOIN (R biology.genomic_locus.annotation) m.02llgt2)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dqm9kt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dqm9kt ns:music.record_label.releases ?y .\n?y ns:music.release.album ?x .\n?x ns:music.album.artist ns:m.01vkhxm .\n}\n",
        "TopicEntityMid": "m.0dqm9kt",
        "mid2name": {
            "ns:m.0dqm9kt": "Newsic",
            "ns:m.01vkhxm": "Dumb Type"
        },
        "SExpr_w_name": "(AND (JOIN music.album.artist Dumb Type) (JOIN (R music.release.album) (JOIN (R music.record_label.releases) Newsic)))",
        "SExpr": "(AND (JOIN music.album.artist m.01vkhxm) (JOIN (R music.release.album) (JOIN (R music.record_label.releases) m.0dqm9kt)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.082hp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.082hp ns:law.invention.inventor ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.07d5b .\n}\n",
        "TopicEntityMid": "m.082hp",
        "mid2name": {
            "ns:m.082hp": "Web browser",
            "ns:m.07d5b": "Tim Berners-Lee"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Tim Berners-Lee) (JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) Web browser)))",
        "SExpr": "(AND (JOIN book.written_work.author m.07d5b) (JOIN (R book.author.works_written) (JOIN (R law.invention.inventor) m.082hp)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hmtk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hmtk ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?x ns:award.award_category.category_of ns:m.02wth1 .\n}\n",
        "TopicEntityMid": "m.0hmtk",
        "mid2name": {
            "ns:m.0hmtk": "New York Rangers",
            "ns:m.02wth1": "ESPY Award"
        },
        "SExpr_w_name": "(AND (JOIN award.award_category.category_of ESPY Award) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) New York Rangers)))",
        "SExpr": "(AND (JOIN award.award_category.category_of m.02wth1) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.0hmtk)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011xcykw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011xcykw ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n?x ns:music.genre.artists ns:m.09k7dj0 .\n}\n",
        "TopicEntityMid": "m.011xcykw",
        "mid2name": {
            "ns:m.011xcykw": "Campfire Stories",
            "ns:m.09k7dj0": "The Knockouts"
        },
        "SExpr_w_name": "(AND (JOIN music.genre.artists The Knockouts) (JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Campfire Stories)))",
        "SExpr": "(AND (JOIN music.genre.artists m.09k7dj0) (JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.011xcykw)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02w9jr1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02w9jr1 ns:automotive.model.make ?y .\n?y ns:automotive.make.model_s ?x .\n?x ns:automotive.model.generations ns:m.04hdqql .\n}\n",
        "TopicEntityMid": "m.02w9jr1",
        "mid2name": {
            "ns:m.02w9jr1": "Pontiac Can Am",
            "ns:m.04hdqql": "Fourth Generation Pontiac Grand Prix"
        },
        "SExpr_w_name": "(AND (JOIN automotive.model.generations Fourth Generation Pontiac Grand Prix) (JOIN (R automotive.make.model_s) (JOIN (R automotive.model.make) Pontiac Can Am)))",
        "SExpr": "(AND (JOIN automotive.model.generations m.04hdqql) (JOIN (R automotive.make.model_s) (JOIN (R automotive.model.make) m.02w9jr1)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vdgk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vdgk6 ns:book.book_edition.binding ?y .\n?y ns:business.consumer_product.brand ?x .\n?x ns:business.brand.products ns:m.01jm4n .\n}\n",
        "TopicEntityMid": "m.04vdgk6",
        "mid2name": {
            "ns:m.04vdgk6": "Peony",
            "ns:m.01jm4n": "Paperback"
        },
        "SExpr_w_name": "(AND (JOIN business.brand.products Paperbackn) (JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) Peony)))",
        "SExpr": "(AND (JOIN business.brand.products m.01jm4n) (JOIN (R business.consumer_product.brand) (JOIN (R book.book_edition.binding) m.04vdgk6)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrlm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrlm ns:location.location.containedby ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n?x ns:fictional_universe.fictional_character.places_lived ns:m.01s3v .\n}\n",
        "TopicEntityMid": "m.01xrlm",
        "mid2name": {
            "ns:m.01xrlm": "Cardiff University",
            "ns:m.01s3v": "Cardiff"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.fictional_character.places_lived Cardiff) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) Cardiff University)))",
        "SExpr": "(AND (JOIN fictional_universe.fictional_character.places_lived m.01s3v) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R location.location.containedby) m.01xrlm)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bhhzt5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bhhzt5 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.06y7d .\n}\n",
        "TopicEntityMid": "m.0bhhzt5",
        "mid2name": {
            "ns:m.0bhhzt5": "Darwin's untimely burial",
            "ns:m.06y7d": "Stephen Jay Gould"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Stephen Jay Gould) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Darwin's untimely burial)))",
        "SExpr": "(AND (JOIN book.written_work.author m.06y7d) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0bhhzt5)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j_bfx4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j_bfx4 ns:fictional_universe.fictional_universe.characters ?y .\n?y ns:fictional_universe.fictional_character.gender ?x .\n?x ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ns:m.04yhgxn .\n}\n",
        "TopicEntityMid": "m.0j_bfx4",
        "mid2name": {
            "ns:m.0j_bfx4": "The Elder Scrolls",
            "ns:m.04yhgxn": "Hypoadrenocorticism in dogs"
        },
        "SExpr_w_name": "(AND (JOIN base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor Hypoadrenocorticism in dogsn) (JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_universe.characters) The Elder Scrolls)))",
        "SExpr": "(AND (JOIN base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor m.04yhgxn) (JOIN (R fictional_universe.fictional_character.gender) (JOIN (R fictional_universe.fictional_universe.characters) m.0j_bfx4)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b8y8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b8y8 ns:book.author.works_written ?y .\n?y ns:book.book.editions ?x .\n?x ns:book.book_edition.binding ns:m.023rr3 .\n}\n",
        "TopicEntityMid": "m.05b8y8",
        "mid2name": {
            "ns:m.05b8y8": "Clayton Eshleman",
            "ns:m.023rr3": "Hardcover"
        },
        "SExpr_w_name": "(AND (JOIN book.book_edition.binding Hardcover) (JOIN (R book.book.editions) (JOIN (R book.author.works_written) Clayton Eshleman)))",
        "SExpr": "(AND (JOIN book.book_edition.binding m.023rr3) (JOIN (R book.book.editions) (JOIN (R book.author.works_written) m.05b8y8)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043lrs2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043lrs2 ns:people.person.gender ?y .\n?y ns:base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor ?x .\n?x ns:base.pethealth.pet_disease_or_medical_condition.causes ns:m.064dl3z .\n}\n",
        "TopicEntityMid": "m.043lrs2",
        "mid2name": {
            "ns:m.043lrs2": "Nica Burns",
            "ns:m.064dl3z": "Mineralocorticoid deficiency"
        },
        "SExpr_w_name": "(AND (JOIN base.pethealth.pet_disease_or_medical_condition.causes Mineralocorticoid deficiency) (JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R people.person.gender) Nica Burns)))",
        "SExpr": "(AND (JOIN base.pethealth.pet_disease_or_medical_condition.causes m.064dl3z) (JOIN (R base.pethealth.pet_disease_risk_factor.pet_diseases_with_this_risk_factor) (JOIN (R people.person.gender) m.043lrs2)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.087kpqg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.087kpqg ns:book.book_edition.book ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.06rs8gw .\n}\n",
        "TopicEntityMid": "m.087kpqg",
        "mid2name": {
            "ns:m.087kpqg": "Pecos Bill",
            "ns:m.06rs8gw": "Home sweet home page"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Home sweet home page) (JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) Pecos Bill)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06rs8gw) (JOIN (R book.written_work.author) (JOIN (R book.book_edition.book) m.087kpqg)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09fj8w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09fj8w ns:soccer.football_league.league_system ?y .\n?y ns:soccer.football_league_system.leagues ?x .\n?x ns:soccer.football_league.governing_body ns:m.03308v .\n}\n",
        "TopicEntityMid": "m.09fj8w",
        "mid2name": {
            "ns:m.09fj8w": "2. Bundesliga",
            "ns:m.03308v": "German Football Association"
        },
        "SExpr_w_name": "(AND (JOIN soccer.football_league.governing_body German Football Association) (JOIN (R soccer.football_league_system.leagues) (JOIN (R soccer.football_league.league_system) 2. Bundesliga)))",
        "SExpr": "(AND (JOIN soccer.football_league.governing_body m.03308v) (JOIN (R soccer.football_league_system.leagues) (JOIN (R soccer.football_league.league_system) m.09fj8w)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lcy_7g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lcy_7g ns:book.book.interior_illustrations_by ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.048tyb .\n}\n",
        "TopicEntityMid": "m.0lcy_7g",
        "mid2name": {
            "ns:m.0lcy_7g": "Walter and Margaret Keane: They Give Shape to the Unseen (Tomorrow's masters series)",
            "ns:m.048tyb": "Margaret Keane"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Margaret Keane) (JOIN (R book.author.works_written) (JOIN (R book.book.interior_illustrations_by) Walter and Margaret Keane: They Give Shape to the Unseen (Tomorrow's masters series))))",
        "SExpr": "(AND (JOIN book.written_work.author m.048tyb) (JOIN (R book.author.works_written) (JOIN (R book.book.interior_illustrations_by) m.0lcy_7g)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_1m4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_1m4 ns:theater.play.orchestrator ?y .\n?y ns:music.artist.track ?x .\n?x ns:music.recording.artist ns:m.06w5x3l .\n}\n",
        "TopicEntityMid": "m.01_1m4",
        "mid2name": {
            "ns:m.01_1m4": "Annie",
            "ns:m.06w5x3l": "Michael Starobin"
        },
        "SExpr_w_name": "(AND (JOIN music.recording.artist Michael Starobin) (JOIN (R music.artist.track) (JOIN (R theater.play.orchestrator) Annie)))",
        "SExpr": "(AND (JOIN music.recording.artist m.06w5x3l) (JOIN (R music.artist.track) (JOIN (R theater.play.orchestrator) m.01_1m4)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043jfp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043jfp ns:spaceflight.bipropellant_rocket_engine.engine_cycle ?y .\n?y ns:spaceflight.rocket_engine_cycle.rocket_engines ?x .\n?x ns:spaceflight.bipropellant_rocket_engine.engine_cycle ns:m.04qqvv .\n}\n",
        "TopicEntityMid": "m.043jfp",
        "mid2name": {
            "ns:m.043jfp": "RS-68",
            "ns:m.04qqvv": "Gas-generator cycle"
        },
        "SExpr_w_name": "(AND (JOIN spaceflight.bipropellant_rocket_engine.engine_cycle Gas-generator cycle) (JOIN (R spaceflight.rocket_engine_cycle.rocket_engines) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) RS-68)))",
        "SExpr": "(AND (JOIN spaceflight.bipropellant_rocket_engine.engine_cycle m.04qqvv) (JOIN (R spaceflight.rocket_engine_cycle.rocket_engines) (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) m.043jfp)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ppq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ppq ns:location.country.administrative_divisions ?y .\n?y ns:location.location.containedby ?x .\n?x ns:location.country.currency_formerly_used ns:m.04dq0w .\n}\n",
        "TopicEntityMid": "m.01ppq",
        "mid2name": {
            "ns:m.01ppq": "Cyprus",
            "ns:m.04dq0w": "Turkish lira"
        },
        "SExpr_w_name": "(AND (JOIN location.country.currency_formerly_used Turkish lira) (JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) Cyprus)))",
        "SExpr": "(AND (JOIN location.country.currency_formerly_used m.04dq0w) (JOIN (R location.location.containedby) (JOIN (R location.country.administrative_divisions) m.01ppq)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tjwzr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tjwzr ns:language.language_family.languages ?y .\n?y ns:language.human_language.dialects ?x .\n?x ns:language.language_dialect.language ns:m.051vv3s .\n}\n",
        "TopicEntityMid": "m.05tjwzr",
        "mid2name": {
            "ns:m.05tjwzr": "Ge-Kaingang Group",
            "ns:m.051vv3s": "Kaingang language"
        },
        "SExpr_w_name": "(AND (JOIN language.language_dialect.language Kaingang languages) (JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) Ge-Kaingang Group)))",
        "SExpr": "(AND (JOIN language.language_dialect.language m.051vv3s) (JOIN (R language.human_language.dialects) (JOIN (R language.language_family.languages) m.05tjwzr)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016f5d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016f5d ns:people.ethnicity.geographic_distribution ?y .\n?y ns:base.litcentral.focal_location.species_habitat_relationships ?x .\n?x ns:base.litcentral.source_feature_taxa.location ns:m.0j95 .\n}\n",
        "TopicEntityMid": "m.016f5d",
        "mid2name": {
            "ns:m.016f5d": "Blackfoot Confederacy",
            "ns:m.0j95": "Alberta"
        },
        "SExpr_w_name": "(AND (JOIN base.litcentral.source_feature_taxa.location Alberta) (JOIN (R base.litcentral.focal_location.species_habitat_relationships) (JOIN (R people.ethnicity.geographic_distribution) Blackfoot Confederacy)))",
        "SExpr": "(AND (JOIN base.litcentral.source_feature_taxa.location m.0j95) (JOIN (R base.litcentral.focal_location.species_habitat_relationships) (JOIN (R people.ethnicity.geographic_distribution) m.016f5d)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fplp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fplp ns:visual_art.art_subject.artwork_on_the_subject ?y .\n?y ns:visual_art.artwork.artist ?x .\n?x ns:visual_art.visual_artist.art_series ns:m.04xd4hd .\n}\n",
        "TopicEntityMid": "m.05fplp",
        "mid2name": {
            "ns:m.05fplp": "Astrology and the classical elements",
            "ns:m.04xd4hd": "Zauber Tondos"
        },
        "SExpr_w_name": "(AND (JOIN visual_art.visual_artist.art_series Zauber Tondos) (JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_subject.artwork_on_the_subject) Astrology and the classical elements)))",
        "SExpr": "(AND (JOIN visual_art.visual_artist.art_series m.04xd4hd) (JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_subject.artwork_on_the_subject) m.05fplp)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040fp9d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040fp9d ns:automotive.make.model_s ?y .\n?y ns:user.alecf.car_sharing.vehicle.pickup_location ?x .\n?x ns:user.alecf.car_sharing.vehicle_location_value.location ns:m.02qkl65 .\n}\n",
        "TopicEntityMid": "m.040fp9d",
        "mid2name": {
            "ns:m.040fp9d": "Scion",
            "ns:m.02qkl65": "St. Mary's Medical Center"
        },
        "SExpr_w_name": "(AND (JOIN user.alecf.car_sharing.vehicle_location_value.location St. Mary's Medical Center) (JOIN (R user.alecf.car_sharing.vehicle.pickup_location) (JOIN (R automotive.make.model_s) Scion)))",
        "SExpr": "(AND (JOIN user.alecf.car_sharing.vehicle_location_value.location m.02qkl65) (JOIN (R user.alecf.car_sharing.vehicle.pickup_location) (JOIN (R automotive.make.model_s) m.040fp9d)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1tg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1tg ns:dataworld.gardening_hint.split_to ?y .\n?y ns:award.award_discipline.awards_in_this_discipline ?x .\n?x ns:award.award_category.category_of ns:m.01q_dd .\n}\n",
        "TopicEntityMid": "m.0f1tg",
        "mid2name": {
            "ns:m.0f1tg": "Strategy game",
            "ns:m.01q_dd": "The Interactive Achievement Awards"
        },
        "SExpr_w_name": "(AND (JOIN award.award_category.category_of The Interactive Achievement Awards) (JOIN (R award.award_discipline.awards_in_this_discipline) (JOIN (R dataworld.gardening_hint.split_to) Strategy game)))",
        "SExpr": "(AND (JOIN award.award_category.category_of m.01q_dd) (JOIN (R award.award_discipline.awards_in_this_discipline) (JOIN (R dataworld.gardening_hint.split_to) m.0f1tg)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm6x4l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm6x4l ns:fictional_universe.fictional_setting.works_set_here ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.05qcwfh .\n}\n",
        "TopicEntityMid": "m.0cm6x4l",
        "mid2name": {
            "ns:m.0cm6x4l": "Sanctuary Mageguild",
            "ns:m.05qcwfh": "Hellburner"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Hellburner) (JOIN (R book.written_work.author) (JOIN (R fictional_universe.fictional_setting.works_set_here) Sanctuary Mageguild)))",
        "SExpr": "(AND (JOIN book.author.works_written m.05qcwfh) (JOIN (R book.written_work.author) (JOIN (R fictional_universe.fictional_setting.works_set_here) m.0cm6x4l)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:book.author.works_written ?y .\n?y ns:theater.play.orchestrator ?x .\n?x ns:book.author.works_written ns:m.06k9cft .\n}\n",
        "TopicEntityMid": "m.081k8",
        "mid2name": {
            "ns:m.081k8": "William Shakespeare",
            "ns:m.06k9cft": "Logicism and the Philosophy of Language"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Logicism and the Philosophy of Language) (JOIN (R theater.play.orchestrator) (JOIN (R book.author.works_written) William Shakespeare)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06k9cft) (JOIN (R theater.play.orchestrator) (JOIN (R book.author.works_written) m.081k8)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02933)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02933 ns:book.author.works_written ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.06_z1r .\n}\n",
        "TopicEntityMid": "m.02933",
        "mid2name": {
            "ns:m.02933": "Dennis Ritchie",
            "ns:m.06_z1r": "The Unix Programming Environment"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written The Unix Programming Environment) (JOIN (R book.written_work.author) (JOIN (R book.author.works_written) Dennis Ritchie)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06_z1r) (JOIN (R book.written_work.author) (JOIN (R book.author.works_written) m.02933)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0641nbv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0641nbv ns:soccer.football_league_season.league ?y .\n?y ns:time.recurring_event.instances ?x .\n?x ns:time.event.instance_of_recurring_event ns:m.06n2y2 .\n}\n",
        "TopicEntityMid": "m.0641nbv",
        "mid2name": {
            "ns:m.0641nbv": "2009–10 FA Women's Premier League",
            "ns:m.06n2y2": "FA Women's Premier League"
        },
        "SExpr_w_name": "(AND (JOIN time.event.instance_of_recurring_event FA Women's Premier League) (JOIN (R time.recurring_event.instances) (JOIN (R soccer.football_league_season.league) 2009–10 FA Women's Premier League)))",
        "SExpr": "(AND (JOIN time.event.instance_of_recurring_event m.06n2y2) (JOIN (R time.recurring_event.instances) (JOIN (R soccer.football_league_season.league) m.0641nbv)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04154n1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04154n1 ns:interests.collection_category.parent_category ?y .\n?y ns:business.product_category.product_lines ?x .\n?x ns:business.product_line.category ns:m.0167gd .\n}\n",
        "TopicEntityMid": "m.04154n1",
        "mid2name": {
            "ns:m.04154n1": "Li'l Missy Beaded Dolls",
            "ns:m.0167gd": "Doll"
        },
        "SExpr_w_name": "(AND (JOIN business.product_line.category Doll) (JOIN (R business.product_category.product_lines) (JOIN (R interests.collection_category.parent_category) Li'l Missy Beaded Dolls)))",
        "SExpr": "(AND (JOIN business.product_line.category m.0167gd) (JOIN (R business.product_category.product_lines) (JOIN (R interests.collection_category.parent_category) m.04154n1)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qcqj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qcqj3 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.043nzc .\n}\n",
        "TopicEntityMid": "m.05qcqj3",
        "mid2name": {
            "ns:m.05qcqj3": "Shadow on the Stones",
            "ns:m.043nzc": "Moyra Caldecott"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Moyra Caldecott) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Shadow on the Stones)))",
        "SExpr": "(AND (JOIN book.written_work.author m.043nzc) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.05qcqj3)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04kcxf0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04kcxf0 ns:fictional_universe.fictional_universe.works_set_here ?y .\n?y ns:comic_books.comic_book_story.script ?x .\n?x ns:book.author.works_written ns:m.06ckz2r .\n}\n",
        "TopicEntityMid": "m.04kcxf0",
        "mid2name": {
            "ns:m.04kcxf0": "Defoe",
            "ns:m.06ckz2r": "Marshal Law"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Marshal Law) (JOIN (R comic_books.comic_book_story.script) (JOIN (R fictional_universe.fictional_universe.works_set_here) Defoe)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06ckz2r) (JOIN (R comic_books.comic_book_story.script) (JOIN (R fictional_universe.fictional_universe.works_set_here) m.04kcxf0)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nvz8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nvz8 ns:comic_books.comic_book_character.created_by ?y .\n?y ns:comic_books.comic_book_penciler.comic_books_penciled ?x .\n?x ns:fictional_universe.work_of_fiction.setting ns:m.05gvmb .\n}\n",
        "TopicEntityMid": "m.05nvz8",
        "mid2name": {
            "ns:m.05nvz8": "Abin Sur",
            "ns:m.05gvmb": "Coast City"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.work_of_fiction.setting Coast City) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) Abin Sur)))",
        "SExpr": "(AND (JOIN fictional_universe.work_of_fiction.setting m.05gvmb) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) (JOIN (R comic_books.comic_book_character.created_by) m.05nvz8)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05w5d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05w5d ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n?x ns:religion.place_of_worship_historical_use.religion ns:m.05sfs .\n}\n",
        "TopicEntityMid": "m.05w5d",
        "mid2name": {
            "ns:m.05w5d": "Pentecostalism",
            "ns:m.05sfs": "Protestantism"
        },
        "SExpr_w_name": "(AND (JOIN religion.place_of_worship_historical_use.religion Protestantisms) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) Pentecostalism)))",
        "SExpr": "(AND (JOIN religion.place_of_worship_historical_use.religion m.05sfs) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) m.05w5d)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qd4t3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qd4t3 ns:music.composition.composer ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.0161sp .\n}\n",
        "TopicEntityMid": "m.02qd4t3",
        "mid2name": {
            "ns:m.02qd4t3": "Real Girl",
            "ns:m.0161sp": "Lenny Kravitz"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Lenny Kravitz) (JOIN (R book.author.works_written) (JOIN (R music.composition.composer) Real Girl)))",
        "SExpr": "(AND (JOIN book.written_work.author m.0161sp) (JOIN (R book.author.works_written) (JOIN (R music.composition.composer) m.02qd4t3)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xk5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xk5g9 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:fictional_universe.school_in_fiction.students_graduates ns:m.0_gvs41 .\n}\n",
        "TopicEntityMid": "m.03xk5g9",
        "mid2name": {
            "ns:m.03xk5g9": "Brian Silverman",
            "ns:m.0_gvs41": "Gilfoyle"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.school_in_fiction.students_graduates Gilfoyle) (JOIN (R education.education.institution) (JOIN (R people.person.education) Brian Silverman)))",
        "SExpr": "(AND (JOIN fictional_universe.school_in_fiction.students_graduates m.0_gvs41) (JOIN (R education.education.institution) (JOIN (R people.person.education) m.03xk5g9)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxj80p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxj80p ns:fictional_universe.fictional_character.has_possessed ?y .\n?y ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?x .\n?x ns:fictional_universe.fictional_character.has_possessed ns:m.03rxrf .\n}\n",
        "TopicEntityMid": "m.0bxj80p",
        "mid2name": {
            "ns:m.0bxj80p": "Tempus",
            "ns:m.03rxrf": "Kopis"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.fictional_character.has_possessed Kopis) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.fictional_character.has_possessed) Tempus)))",
        "SExpr": "(AND (JOIN fictional_universe.fictional_character.has_possessed m.03rxrf) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) (JOIN (R fictional_universe.fictional_character.has_possessed) m.0bxj80p)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qqx6r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qqx6r ns:visual_art.artwork.artist ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n?x ns:visual_art.art_series.artworks ns:m.02pb39q .\n}\n",
        "TopicEntityMid": "m.03qqx6r",
        "mid2name": {
            "ns:m.03qqx6r": "The Back (III)",
            "ns:m.02pb39q": "Blue Nude II"
        },
        "SExpr_w_name": "(AND (JOIN visual_art.art_series.artworks Blue Nude II) (JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.artwork.artist) The Back (III))))",
        "SExpr": "(AND (JOIN visual_art.art_series.artworks m.02pb39q) (JOIN (R visual_art.visual_artist.art_series) (JOIN (R visual_art.artwork.artist) m.03qqx6r)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j1t2ng)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j1t2ng ns:biology.pedigreed_animal.breed ?y .\n?y ns:biology.animal_breed.examples ?x .\n?x ns:biology.pedigreed_animal.breed ns:m.03_vn4 .\n}\n",
        "TopicEntityMid": "m.0j1t2ng",
        "mid2name": {
            "ns:m.0j1t2ng": "Conejo Wycollar Boy",
            "ns:m.03_vn4": "Wire Hair Fox Terrier"
        },
        "SExpr_w_name": "(AND (JOIN biology.pedigreed_animal.breed Wire Hair Fox Terrier) (JOIN (R biology.animal_breed.examples) (JOIN (R biology.pedigreed_animal.breed) Conejo Wycollar Boy)))",
        "SExpr": "(AND (JOIN biology.pedigreed_animal.breed m.03_vn4) (JOIN (R biology.animal_breed.examples) (JOIN (R biology.pedigreed_animal.breed) m.0j1t2ng)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pmfw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pmfw ns:base.filmcameras.camera_manufacturer.cameras_manufactured ?y .\n?y ns:business.consumer_product.category ?x .\n?x ns:organization.club_interest.clubs ns:m.03w3cfc .\n}\n",
        "TopicEntityMid": "m.03pmfw",
        "mid2name": {
            "ns:m.03pmfw": "Nikon Corporation",
            "ns:m.03w3cfc": "Fundy Camera Club"
        },
        "SExpr_w_name": "(AND (JOIN organization.club_interest.clubs Fundy Camera Club) (JOIN (R business.consumer_product.category) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) Nikon Corporation)))",
        "SExpr": "(AND (JOIN organization.club_interest.clubs m.03w3cfc) (JOIN (R business.consumer_product.category) (JOIN (R base.filmcameras.camera_manufacturer.cameras_manufactured) m.03pmfw)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05q_9w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05q_9w ns:music.artist.genre ?y .\n?y ns:music.genre.artists ?x .\n?x ns:user.jschell.default_domain.music_performer.concerts ns:m.02gwszr .\n}\n",
        "TopicEntityMid": "m.05q_9w",
        "mid2name": {
            "ns:m.05q_9w": "Arctic Monkeys",
            "ns:m.02gwszr": "Dave Matthews 8-15-95"
        },
        "SExpr_w_name": "(AND (JOIN user.jschell.default_domain.music_performer.concerts Dave Matthews 8-15-95) (JOIN (R music.genre.artists) (JOIN (R music.artist.genre) Arctic Monkeys)))",
        "SExpr": "(AND (JOIN user.jschell.default_domain.music_performer.concerts m.02gwszr) (JOIN (R music.genre.artists) (JOIN (R music.artist.genre) m.05q_9w)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qvrpw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qvrpw ns:people.ethnicity.languages_spoken ?y .\n?y ns:language.human_language.dialects ?x .\n?x ns:language.language_dialect.language ns:m.014267 .\n}\n",
        "TopicEntityMid": "m.02qvrpw",
        "mid2name": {
            "ns:m.02qvrpw": "Armenians in Georgia",
            "ns:m.014267": "Georgian Language"
        },
        "SExpr_w_name": "(AND (JOIN language.language_dialect.language Georgian Language) (JOIN (R language.human_language.dialects) (JOIN (R people.ethnicity.languages_spoken) Armenians in Georgia)))",
        "SExpr": "(AND (JOIN language.language_dialect.language m.014267) (JOIN (R language.human_language.dialects) (JOIN (R people.ethnicity.languages_spoken) m.02qvrpw)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pd6ghh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pd6ghh ns:astronomy.telescope.housed_in ?y .\n?y ns:astronomy.astronomical_observatory.discoveries ?x .\n?x ns:astronomy.asteroid.member_of_asteroid_group ns:m.03hftwv .\n}\n",
        "TopicEntityMid": "m.0pd6ghh",
        "mid2name": {
            "ns:m.0pd6ghh": "Hooker Telescope",
            "ns:m.03hftwv": "Cybele asteroid"
        },
        "SExpr_w_name": "(AND (JOIN astronomy.asteroid.member_of_asteroid_group Cybele asteroid) (JOIN (R astronomy.astronomical_observatory.discoveries) (JOIN (R astronomy.telescope.housed_in) Hooker Telescope)))",
        "SExpr": "(AND (JOIN astronomy.asteroid.member_of_asteroid_group m.03hftwv) (JOIN (R astronomy.astronomical_observatory.discoveries) (JOIN (R astronomy.telescope.housed_in) m.0pd6ghh)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kwgk8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kwgk8 ns:biology.chromosome.band ?y .\n?y ns:biology.cytogenetic_band.locus ?x .\n?x ns:biology.genomic_locus.annotation ns:m.02kwsrb .\n}\n",
        "TopicEntityMid": "m.02kwgk8",
        "mid2name": {
            "ns:m.02kwgk8": "Chromosome 12 (human)",
            "ns:m.02kwsrb": "Human Cytogenetic Band 12q24.31"
        },
        "SExpr_w_name": "(AND (JOIN biology.genomic_locus.annotation Human Cytogenetic Band 12q24.31) (JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) Chromosome 12 (human))))",
        "SExpr": "(AND (JOIN biology.genomic_locus.annotation m.02kwsrb) (JOIN (R biology.cytogenetic_band.locus) (JOIN (R biology.chromosome.band) m.02kwgk8)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051lw0_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051lw0_ ns:skiing.ski_area_owner.ski_areas_owned ?y .\n?y ns:skiing.ski_area_ownership.ski_area ?x .\n?x ns:location.location.containedby ns:m.04c4760 .\n}\n",
        "TopicEntityMid": "m.051lw0_",
        "mid2name": {
            "ns:m.051lw0_": "Ginn Company",
            "ns:m.04c4760": "East Burke, Vermont"
        },
        "SExpr_w_name": "(AND (JOIN location.location.containedby East Burke, Vermont) (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) Ginn Company)))",
        "SExpr": "(AND (JOIN location.location.containedby m.04c4760) (JOIN (R skiing.ski_area_ownership.ski_area) (JOIN (R skiing.ski_area_owner.ski_areas_owned) m.051lw0_)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h_qp5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h_qp5 ns:olympics.olympic_event.competitions ?y .\n?y ns:olympics.olympic_event_competition.medalists ?x .\n?x ns:olympics.olympic_medal_honor.event ns:m.04f29sk .\n}\n",
        "TopicEntityMid": "m.07h_qp5",
        "mid2name": {
            "ns:m.07h_qp5": "Men's freestyle Wrestling, Welterweight 68-74 kg",
            "ns:m.04f29sk": "Wrestling at the 1988 Summer Olympics - Men's Freestyle Welterweight"
        },
        "SExpr_w_name": "(AND (JOIN olympics.olympic_medal_honor.event Wrestling at the 1988 Summer Olympics - Men's Freestyle Welterweight) (JOIN (R olympics.olympic_event_competition.medalists) (JOIN (R olympics.olympic_event.competitions) Men's freestyle Wrestling, Welterweight 68-74 kg)))",
        "SExpr": "(AND (JOIN olympics.olympic_medal_honor.event m.04f29sk) (JOIN (R olympics.olympic_event_competition.medalists) (JOIN (R olympics.olympic_event.competitions) m.07h_qp5)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yj4krl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yj4krl ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?x ns:award.award_category.category_of ns:m.01p5gl .\n}\n",
        "TopicEntityMid": "m.0yj4krl",
        "mid2name": {
            "ns:m.0yj4krl": "Martin Guerre",
            "ns:m.01p5gl": "Laurence Olivier Award"
        },
        "SExpr_w_name": "(AND (JOIN award.award_category.category_of Laurence Olivier Award) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) Martin Guerre)))",
        "SExpr": "(AND (JOIN award.award_category.category_of m.01p5gl) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0yj4krl)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lsv3c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lsv3c ns:music.recording.artist ?y .\n?y ns:music.artist.track ?x .\n?x ns:music.recording.artist ns:m.01nd7nr .\n}\n",
        "TopicEntityMid": "m.0lsv3c",
        "mid2name": {
            "ns:m.0lsv3c": "I Stand Accused",
            "ns:m.01nd7nr": "Elvis Costello & The Attractions"
        },
        "SExpr_w_name": "(AND (JOIN music.recording.artist Elvis Costello & The Attractions) (JOIN (R music.artist.track) (JOIN (R music.recording.artist) I Stand Accused)))",
        "SExpr": "(AND (JOIN music.recording.artist m.01nd7nr) (JOIN (R music.artist.track) (JOIN (R music.recording.artist) m.0lsv3c)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fny ns:astronomy.celestial_object_category.objects ?y .\n?y ns:astronomy.astronomical_discovery.discoverer ?x .\n?x ns:book.author.works_written ns:m.0l35hrr .\n}\n",
        "TopicEntityMid": "m.05fny",
        "mid2name": {
            "ns:m.05fny": "Nebula",
            "ns:m.0l35hrr": "Theoremata de quadratura hyperboles, ellipsis et circuli"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Theoremata de quadratura hyperboles, ellipsis et circuli) (JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.celestial_object_category.objects) Nebula)))",
        "SExpr": "(AND (JOIN book.author.works_written m.0l35hrr) (JOIN (R astronomy.astronomical_discovery.discoverer) (JOIN (R astronomy.celestial_object_category.objects) m.05fny)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mwcsx4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mwcsx4 ns:award.award_nominated_work.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?x ns:award.award_category.category_of ns:m.01r470 .\n}\n",
        "TopicEntityMid": "m.0mwcsx4",
        "mid2name": {
            "ns:m.0mwcsx4": "03 Bonnie & Clyde",
            "ns:m.01r470": "MTV Video Music Award"
        },
        "SExpr_w_name": "(AND (JOIN award.award_category.category_of MTV Video Music Award) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) 03 Bonnie & Clyde)))",
        "SExpr": "(AND (JOIN award.award_category.category_of m.01r470) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominated_work.award_nominations) m.0mwcsx4)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gvpk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gvpk ns:comic_books.comic_book_penciler.comic_books_penciled ?y .\n?y ns:fictional_universe.work_of_fiction.setting ?x .\n?x ns:fictional_universe.fictional_setting.works_set_here ns:m.03ywk1z .\n}\n",
        "TopicEntityMid": "m.03gvpk",
        "mid2name": {
            "ns:m.03gvpk": "Gil Kane",
            "ns:m.03ywk1z": "Menace of the Runaway Missile!"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.fictional_setting.works_set_here Menace of the Runaway Missile!) (JOIN (R fictional_universe.work_of_fiction.setting) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) Gil Kane)))",
        "SExpr": "(AND (JOIN fictional_universe.fictional_setting.works_set_here m.03ywk1z) (JOIN (R fictional_universe.work_of_fiction.setting) (JOIN (R comic_books.comic_book_penciler.comic_books_penciled) m.03gvpk)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rvv5m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rvv5m ns:book.magazine.place_of_publication ?y .\n?y ns:book.place_of_publication_period.place_of_publication ?x .\n?x ns:biology.breed_origin.breeds_originating_here ns:m.02232 .\n}\n",
        "TopicEntityMid": "m.02rvv5m",
        "mid2name": {
            "ns:m.02rvv5m": "G Magazine",
            "ns:m.02232": "Canchim"
        },
        "SExpr_w_name": "(AND (JOIN biology.breed_origin.breeds_originating_here Canchim) (JOIN (R book.place_of_publication_period.place_of_publication) (JOIN (R book.magazine.place_of_publication) G Magazine)))",
        "SExpr": "(AND (JOIN biology.breed_origin.breeds_originating_here m.02232) (JOIN (R book.place_of_publication_period.place_of_publication) (JOIN (R book.magazine.place_of_publication) m.02rvv5m)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xrf_0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xrf_0 ns:digicams.camera_sensor_manufacturer.cameras ?y .\n?y ns:business.consumer_product.company ?x .\n?x ns:business.company_product_relationship.company ns:m.01bvx1 .\n}\n",
        "TopicEntityMid": "m.01xrf_0",
        "mid2name": {
            "ns:m.01xrf_0": "Unknown",
            "ns:m.01bvx1": "Canon Inc."
        },
        "SExpr_w_name": "(AND (JOIN business.company_product_relationship.company Canon Inc.) (JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_sensor_manufacturer.cameras) Unknown)))",
        "SExpr": "(AND (JOIN business.company_product_relationship.company m.01bvx1) (JOIN (R business.consumer_product.company) (JOIN (R digicams.camera_sensor_manufacturer.cameras) m.01xrf_0)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wkc7r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wkc7r ns:comic_books.comic_book_issue.cover_colors ?y .\n?y ns:comic_books.comic_book_inker.comic_covers_inked ?x .\n?x ns:comic_books.comic_book_issue.cover_colors ns:m.03h0l7 .\n}\n",
        "TopicEntityMid": "m.02wkc7r",
        "mid2name": {
            "ns:m.02wkc7r": "Batman #426",
            "ns:m.03h0l7": "Mike Mignola"
        },
        "SExpr_w_name": "(AND (JOIN comic_books.comic_book_issue.cover_colors Mike Mignola) (JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_issue.cover_colors) Batman #426)))",
        "SExpr": "(AND (JOIN comic_books.comic_book_issue.cover_colors m.03h0l7) (JOIN (R comic_books.comic_book_inker.comic_covers_inked) (JOIN (R comic_books.comic_book_issue.cover_colors) m.02wkc7r)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.092bf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.092bf5 ns:religion.religion.places_of_worship_historical ?y .\n?y ns:religion.place_of_worship_historical_use.place_of_worship ?x .\n?x ns:location.location.containedby ns:m.01xbgx .\n}\n",
        "TopicEntityMid": "m.092bf5",
        "mid2name": {
            "ns:m.092bf5": "Buddhism",
            "ns:m.01xbgx": "Cambodia"
        },
        "SExpr_w_name": "(AND (JOIN location.location.containedby Cambodia) (JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) Buddhism)))",
        "SExpr": "(AND (JOIN location.location.containedby m.01xbgx) (JOIN (R religion.place_of_worship_historical_use.place_of_worship) (JOIN (R religion.religion.places_of_worship_historical) m.092bf5)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pcq52k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pcq52k ns:sports.defunct_sports_team.later_known_as ?y .\n?y ns:sports.sports_team.league ?x .\n?x ns:sports.sports_league_participation.league ns:m.0j2pw .\n}\n",
        "TopicEntityMid": "m.0pcq52k",
        "mid2name": {
            "ns:m.0pcq52k": "Tacoma Yankees",
            "ns:m.0j2pw": "Pacific Coast League"
        },
        "SExpr_w_name": "(AND (JOIN sports.sports_league_participation.league Pacific Coast League) (JOIN (R sports.sports_team.league) (JOIN (R sports.defunct_sports_team.later_known_as) Tacoma Yankees)))",
        "SExpr": "(AND (JOIN sports.sports_league_participation.league m.0j2pw) (JOIN (R sports.sports_team.league) (JOIN (R sports.defunct_sports_team.later_known_as) m.0pcq52k)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lzy0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lzy0 ns:award.award_discipline.awards_in_this_discipline ?y .\n?y ns:award.award_category.category_of ?x .\n?x ns:award.award.category ns:m.0g5nf_0 .\n}\n",
        "TopicEntityMid": "m.02lzy0",
        "mid2name": {
            "ns:m.02lzy0": "Massively multiplayer online game",
            "ns:m.0g5nf_0": "Interactive Achievement Award for Sports Game of the Year"
        },
        "SExpr_w_name": "(AND (JOIN award.award.category Interactive Achievement Award for Sports Game of the Year) (JOIN (R award.award_category.category_of) (JOIN (R award.award_discipline.awards_in_this_discipline) Massively multiplayer online game)))",
        "SExpr": "(AND (JOIN award.award.category m.0g5nf_0) (JOIN (R award.award_category.category_of) (JOIN (R award.award_discipline.awards_in_this_discipline) m.02lzy0)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cnb47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cnb47 ns:visual_art.art_series.artworks ?y .\n?y ns:visual_art.artwork.artist ?x .\n?x ns:visual_art.visual_artist.art_series ns:m.0271rlf .\n}\n",
        "TopicEntityMid": "m.0cnb47",
        "mid2name": {
            "ns:m.0cnb47": "Humours of an Election",
            "ns:m.0271rlf": "Industry and Idleness"
        },
        "SExpr_w_name": "(AND (JOIN visual_art.visual_artist.art_series Industry and Idleness) (JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) Humours of an Election)))",
        "SExpr": "(AND (JOIN visual_art.visual_artist.art_series m.0271rlf) (JOIN (R visual_art.artwork.artist) (JOIN (R visual_art.art_series.artworks) m.0cnb47)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271wg7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271wg7 ns:visual_art.artwork.artist ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.01jl09 .\n}\n",
        "TopicEntityMid": "m.0271wg7",
        "mid2name": {
            "ns:m.0271wg7": "Watson and the Shark",
            "ns:m.01jl09": "John Singleton Copley"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author John Singleton Copley) (JOIN (R book.author.works_written) (JOIN (R visual_art.artwork.artist) Watson and the Shark)))",
        "SExpr": "(AND (JOIN book.written_work.author m.01jl09) (JOIN (R book.author.works_written) (JOIN (R visual_art.artwork.artist) m.0271wg7)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d2sb_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d2sb_ ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n?x ns:medicine.medical_trial.references ns:m.040fv9t .\n}\n",
        "TopicEntityMid": "m.04d2sb_",
        "mid2name": {
            "ns:m.04d2sb_": "The Study of the Safety and Efficacy of Ampligen in Chronic Fatigue Syndrome",
            "ns:m.040fv9t": "What is the best perfusion temperature for coronary revascularization?"
        },
        "SExpr_w_name": "(AND (JOIN medicine.medical_trial.references What is the best perfusion temperature for coronary revascularization?) (JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) The Study of the Safety and Efficacy of Ampligen in Chronic Fatigue Syndrome)))",
        "SExpr": "(AND (JOIN medicine.medical_trial.references m.040fv9t) (JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.04d2sb_)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wcnw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wcnw ns:meteorology.tropical_cyclone.category ?y .\n?y ns:meteorology.tropical_cyclone_category.Beaufort_scale ?x .\n?x ns:meteorology.beaufort_wind_force.tropical_cyclone_categories ns:m.02wv9xd .\n}\n",
        "TopicEntityMid": "m.03wcnw",
        "mid2name": {
            "ns:m.03wcnw": "Hurricane Gloria",
            "ns:m.02wv9xd": "Typhoon"
        },
        "SExpr_w_name": "(AND (JOIN meteorology.beaufort_wind_force.tropical_cyclone_categories Typhoon) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) Hurricane Gloria)))",
        "SExpr": "(AND (JOIN meteorology.beaufort_wind_force.tropical_cyclone_categories m.02wv9xd) (JOIN (R meteorology.tropical_cyclone_category.Beaufort_scale) (JOIN (R meteorology.tropical_cyclone.category) m.03wcnw)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02t63)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02t63 ns:spaceflight.space_agency.astronauts ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.069kw2 .\n}\n",
        "TopicEntityMid": "m.02t63",
        "mid2name": {
            "ns:m.02t63": "European Space Agency",
            "ns:m.069kw2": "Christer Fuglesang"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Christer Fuglesang) (JOIN (R book.author.works_written) (JOIN (R spaceflight.space_agency.astronauts) European Space Agency)))",
        "SExpr": "(AND (JOIN book.written_work.author m.069kw2) (JOIN (R book.author.works_written) (JOIN (R spaceflight.space_agency.astronauts) m.02t63)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dtdq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dtdq ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n?x ns:religion.place_of_worship_historical_use.religion ns:m.01lp8 .\n}\n",
        "TopicEntityMid": "m.0dtdq",
        "mid2name": {
            "ns:m.0dtdq": "Jehovah's Witnesses",
            "ns:m.01lp8": "Christianity"
        },
        "SExpr_w_name": "(AND (JOIN religion.place_of_worship_historical_use.religion Christianity) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) Jehovah's Witnesses)))",
        "SExpr": "(AND (JOIN religion.place_of_worship_historical_use.religion m.01lp8) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.religion.is_part_of) m.0dtdq)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011cjd16)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011cjd16 ns:business.product_line.category ?y .\n?y ns:business.product_category.product_lines ?x .\n?x ns:business.product_line.category ns:m.0gm28 .\n}\n",
        "TopicEntityMid": "m.011cjd16",
        "mid2name": {
            "ns:m.011cjd16": "Sugar-free Brazil Cluster",
            "ns:m.0gm28": "Candy"
        },
        "SExpr_w_name": "(AND (JOIN business.product_line.category Candy) (JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) Sugar-free Brazil Cluster)))",
        "SExpr": "(AND (JOIN business.product_line.category m.0gm28) (JOIN (R business.product_category.product_lines) (JOIN (R business.product_line.category) m.011cjd16)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h27mv7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h27mv7 ns:automotive.engine.fuels_used ?y .\n?y ns:base.skosbase.vocabulary_equivalent_topic.narrower_concept ?x .\n?x ns:base.skosbase.skos_concept.broader_topic ns:m.05wy2 .\n}\n",
        "TopicEntityMid": "m.0h27mv7",
        "mid2name": {
            "ns:m.0h27mv7": "Lamborghini 5.2L 10 Cylinder 562 hp 398 ft-lbs",
            "ns:m.05wy2": "Gasoline"
        },
        "SExpr_w_name": "(AND (JOIN base.skosbase.skos_concept.broader_topic Gasoline) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) (JOIN (R automotive.engine.fuels_used) Lamborghini 5.2L 10 Cylinder 562 hp 398 ft-lbs)))",
        "SExpr": "(AND (JOIN base.skosbase.skos_concept.broader_topic m.05wy2) (JOIN (R base.skosbase.vocabulary_equivalent_topic.narrower_concept) (JOIN (R automotive.engine.fuels_used) m.0h27mv7)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01srj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01srj ns:astronomy.celestial_object_category.objects ?y .\n?y ns:astronomy.astronomical_discovery.status ?x .\n?x ns:astronomy.astronomical_discovery_status.objects ns:m.03wngpn .\n}\n",
        "TopicEntityMid": "m.01srj",
        "mid2name": {
            "ns:m.01srj": "Comet",
            "ns:m.03wngpn": "2M1207 b"
        },
        "SExpr_w_name": "(AND (JOIN astronomy.astronomical_discovery_status.objects 2M1207 bn) (JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.celestial_object_category.objects) Comet)))",
        "SExpr": "(AND (JOIN astronomy.astronomical_discovery_status.objects m.03wngpn) (JOIN (R astronomy.astronomical_discovery.status) (JOIN (R astronomy.celestial_object_category.objects) m.01srj)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09kkywh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09kkywh ns:book.literary_series.works_in_this_series ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.06t0zcn .\n}\n",
        "TopicEntityMid": "m.09kkywh",
        "mid2name": {
            "ns:m.09kkywh": "Wilt",
            "ns:m.06t0zcn": "Le bâtard récalcitrant"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Le bâtard récalcitrantn) (JOIN (R book.written_work.author) (JOIN (R book.literary_series.works_in_this_series) Wilt)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06t0zcn) (JOIN (R book.written_work.author) (JOIN (R book.literary_series.works_in_this_series) m.09kkywh)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016clz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016clz ns:music.genre.artists ?y .\n?y ns:user.jschell.default_domain.music_performer.concerts ?x .\n?x ns:user.jschell.default_domain.musical_event.set_list ns:m.025xhn9 .\n}\n",
        "TopicEntityMid": "m.016clz",
        "mid2name": {
            "ns:m.016clz": "Alternative rock",
            "ns:m.025xhn9": "The Best of What's Around"
        },
        "SExpr_w_name": "(AND (JOIN user.jschell.default_domain.musical_event.set_list The Best of What's Around) (JOIN (R user.jschell.default_domain.music_performer.concerts) (JOIN (R music.genre.artists) Alternative rock)))",
        "SExpr": "(AND (JOIN user.jschell.default_domain.musical_event.set_list m.025xhn9) (JOIN (R user.jschell.default_domain.music_performer.concerts) (JOIN (R music.genre.artists) m.016clz)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h87b6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h87b6 ns:computer.computer.parent_model ?y .\n?y ns:computer.computer.compatible_oses ?x .\n?x ns:computer.os_compatibility.computer ns:m.0x35 .\n}\n",
        "TopicEntityMid": "m.02h87b6",
        "mid2name": {
            "ns:m.02h87b6": "Atari 260 ST",
            "ns:m.0x35": "Atari ST"
        },
        "SExpr_w_name": "(AND (JOIN computer.os_compatibility.computer Atari ST) (JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer.parent_model) Atari 260 ST)))",
        "SExpr": "(AND (JOIN computer.os_compatibility.computer m.0x35) (JOIN (R computer.computer.compatible_oses) (JOIN (R computer.computer.parent_model) m.02h87b6)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hv6xb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hv6xb ns:comic_strips.comic_strip_genre.comic_strips_of_this_genre ?y .\n?y ns:comic_strips.comic_strip.creator_of_strip ?x .\n?x ns:comic_strips.comic_strip_creator_duration.comic_strip ns:m.02p25r .\n}\n",
        "TopicEntityMid": "m.02hv6xb",
        "mid2name": {
            "ns:m.02hv6xb": "Women",
            "ns:m.02p25r": "Cathy"
        },
        "SExpr_w_name": "(AND (JOIN comic_strips.comic_strip_creator_duration.comic_strip Cathy) (JOIN (R comic_strips.comic_strip.creator_of_strip) (JOIN (R comic_strips.comic_strip_genre.comic_strips_of_this_genre) Women)))",
        "SExpr": "(AND (JOIN comic_strips.comic_strip_creator_duration.comic_strip m.02p25r) (JOIN (R comic_strips.comic_strip.creator_of_strip) (JOIN (R comic_strips.comic_strip_genre.comic_strips_of_this_genre) m.02hv6xb)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k_ykj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k_ykj ns:automotive.model.generations ?y .\n?y ns:automotive.generation.designer ?x .\n?x ns:automotive.make.model_s ns:m.03jhcx .\n}\n",
        "TopicEntityMid": "m.02k_ykj",
        "mid2name": {
            "ns:m.02k_ykj": "Shelby GT500",
            "ns:m.03jhcx": "Shelby Charger"
        },
        "SExpr_w_name": "(AND (JOIN automotive.make.model_s Shelby Charger) (JOIN (R automotive.generation.designer) (JOIN (R automotive.model.generations) Shelby GT500)))",
        "SExpr": "(AND (JOIN automotive.make.model_s m.03jhcx) (JOIN (R automotive.generation.designer) (JOIN (R automotive.model.generations) m.02k_ykj)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j52z54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j52z54 ns:aviation.aircraft_model.part_of_line ?y .\n?y ns:aviation.aircraft_model.manufacturer ?x .\n?x ns:business.business_operation.industry ns:m.0w7s .\n}\n",
        "TopicEntityMid": "m.0j52z54",
        "mid2name": {
            "ns:m.0j52z54": "Bombardier CRJ700",
            "ns:m.0w7s": "Aerospace Engineering"
        },
        "SExpr_w_name": "(AND (JOIN business.business_operation.industry Aerospace Engineerings) (JOIN (R aviation.aircraft_model.manufacturer) (JOIN (R aviation.aircraft_model.part_of_line) Bombardier CRJ700)))",
        "SExpr": "(AND (JOIN business.business_operation.industry m.0w7s) (JOIN (R aviation.aircraft_model.manufacturer) (JOIN (R aviation.aircraft_model.part_of_line) m.0j52z54)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0267zj6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0267zj6 ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.07dspq .\n}\n",
        "TopicEntityMid": "m.0267zj6",
        "mid2name": {
            "ns:m.0267zj6": "Your Arms Too Short to Box with God",
            "ns:m.07dspq": "Vinnette Justine Carroll"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Vinnette Justine Carroll) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Your Arms Too Short to Box with God)))",
        "SExpr": "(AND (JOIN book.written_work.author m.07dspq) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.0267zj6)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010l8kt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010l8kt ns:music.recording.artist ?y .\n?y ns:music.artist.genre ?x .\n?x ns:music.genre.artists ns:m.0113zhtw .\n}\n",
        "TopicEntityMid": "m.010l8kt",
        "mid2name": {
            "ns:m.010l8kt": "Outro",
            "ns:m.0113zhtw": "Illbliss"
        },
        "SExpr_w_name": "(AND (JOIN music.genre.artists Illbliss) (JOIN (R music.artist.genre) (JOIN (R music.recording.artist) Outro)))",
        "SExpr": "(AND (JOIN music.genre.artists m.0113zhtw) (JOIN (R music.artist.genre) (JOIN (R music.recording.artist) m.010l8kt)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.065vyd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.065vyd ns:base.argumentmaps.original_idea.innovator ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.028fl6 .\n}\n",
        "TopicEntityMid": "m.065vyd",
        "mid2name": {
            "ns:m.065vyd": "Identity crisis",
            "ns:m.028fl6": "Erik Erikson"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author Erik Erikson) (JOIN (R book.author.works_written) (JOIN (R base.argumentmaps.original_idea.innovator) Identity crisis)))",
        "SExpr": "(AND (JOIN book.written_work.author m.028fl6) (JOIN (R book.author.works_written) (JOIN (R base.argumentmaps.original_idea.innovator) m.065vyd)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06_wx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06_wx ns:religion.religion.is_part_of ?y .\n?y ns:religion.religion.branched_into ?x .\n?x ns:symbols.namesake.named_after ns:m.0629m9 .\n}\n",
        "TopicEntityMid": "m.06_wx",
        "mid2name": {
            "ns:m.06_wx": "Sufism",
            "ns:m.0629m9": "Abu al-Hasan al-Ash'ari"
        },
        "SExpr_w_name": "(AND (JOIN symbols.namesake.named_after Abu al-Hasan al-Ash'ari) (JOIN (R religion.religion.branched_into) (JOIN (R religion.religion.is_part_of) Sufism)))",
        "SExpr": "(AND (JOIN symbols.namesake.named_after m.0629m9) (JOIN (R religion.religion.branched_into) (JOIN (R religion.religion.is_part_of) m.06_wx)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fkfkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fkfkh ns:music.album.artist ?y .\n?y ns:music.artist.genre ?x .\n?x ns:base.webvideo.internet_video_genre.internet_video ns:m.0p7hzcs .\n}\n",
        "TopicEntityMid": "m.01fkfkh",
        "mid2name": {
            "ns:m.01fkfkh": "Music as a Weapon II",
            "ns:m.0p7hzcs": "Faction (a1,s2)"
        },
        "SExpr_w_name": "(AND (JOIN base.webvideo.internet_video_genre.internet_video Faction (a1,s2)s) (JOIN (R music.artist.genre) (JOIN (R music.album.artist) Music as a Weapon II)))",
        "SExpr": "(AND (JOIN base.webvideo.internet_video_genre.internet_video m.0p7hzcs) (JOIN (R music.artist.genre) (JOIN (R music.album.artist) m.01fkfkh)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047dlbj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047dlbj ns:sports.sports_team.location ?y .\n?y ns:travel.travel_destination.accommodation ?x .\n?x ns:location.location.containedby ns:m.05kr_ .\n}\n",
        "TopicEntityMid": "m.047dlbj",
        "mid2name": {
            "ns:m.047dlbj": "Ottawa Swans",
            "ns:m.05kr_": "Ontario"
        },
        "SExpr_w_name": "(AND (JOIN location.location.containedby Ontario) (JOIN (R travel.travel_destination.accommodation) (JOIN (R sports.sports_team.location) Ottawa Swans)))",
        "SExpr": "(AND (JOIN location.location.containedby m.05kr_) (JOIN (R travel.travel_destination.accommodation) (JOIN (R sports.sports_team.location) m.047dlbj)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mv6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mv6 ns:organization.club_interest.clubs ?y .\n?y ns:organization.organization.child ?x .\n?x ns:organization.organization_relationship.child ns:m.031lfh .\n}\n",
        "TopicEntityMid": "m.06mv6",
        "mid2name": {
            "ns:m.06mv6": "Star Trek",
            "ns:m.031lfh": "USS Thagard NCC-652"
        },
        "SExpr_w_name": "(AND (JOIN organization.organization_relationship.child USS Thagard NCC-652) (JOIN (R organization.organization.child) (JOIN (R organization.club_interest.clubs) Star Trek)))",
        "SExpr": "(AND (JOIN organization.organization_relationship.child m.031lfh) (JOIN (R organization.organization.child) (JOIN (R organization.club_interest.clubs) m.06mv6)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0w8jh7c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0w8jh7c ns:book.poem.characters ?y .\n?y ns:visual_art.visual_artist.art_series ?x .\n?x ns:visual_art.art_series.artworks ns:m.0bj7hwy .\n}\n",
        "TopicEntityMid": "m.0w8jh7c",
        "mid2name": {
            "ns:m.0w8jh7c": "After Aberjhani",
            "ns:m.0bj7hwy": "Bright Skylark Literary Productions"
        },
        "SExpr_w_name": "(AND (JOIN visual_art.art_series.artworks Bright Skylark Literary Productions) (JOIN (R visual_art.visual_artist.art_series) (JOIN (R book.poem.characters) After Aberjhani)))",
        "SExpr": "(AND (JOIN visual_art.art_series.artworks m.0bj7hwy) (JOIN (R visual_art.visual_artist.art_series) (JOIN (R book.poem.characters) m.0w8jh7c)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035rfz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035rfz ns:book.book_subject.works ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.06cfj1w .\n}\n",
        "TopicEntityMid": "m.035rfz",
        "mid2name": {
            "ns:m.035rfz": "Soviet space program",
            "ns:m.06cfj1w": "Sputnik and the Soviet Space Challenge"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Sputnik and the Soviet Space Challenge) (JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) Soviet space program)))",
        "SExpr": "(AND (JOIN book.author.works_written m.06cfj1w) (JOIN (R book.written_work.author) (JOIN (R book.book_subject.works) m.035rfz)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040ftwk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040ftwk ns:book.written_work.author ?y .\n?y ns:book.author.works_written ?x .\n?x ns:book.written_work.author ns:m.04mkn76 .\n}\n",
        "TopicEntityMid": "m.040ftwk",
        "mid2name": {
            "ns:m.040ftwk": "Can we induce tolerance in rheumatoid arthritis?",
            "ns:m.04mkn76": "L. D. Carbone"
        },
        "SExpr_w_name": "(AND (JOIN book.written_work.author L. D. Carbone) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) Can we induce tolerance in rheumatoid arthritis?)))",
        "SExpr": "(AND (JOIN book.written_work.author m.04mkn76) (JOIN (R book.author.works_written) (JOIN (R book.written_work.author) m.040ftwk)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zbbwc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zbbwc ns:medicine.medical_trial.phase ?y .\n?y ns:medicine.medical_trial_phase.medical_trials ?x .\n?x ns:medicine.medical_trial.references ns:m.040v961 .\n}\n",
        "TopicEntityMid": "m.03zbbwc",
        "mid2name": {
            "ns:m.03zbbwc": "Alendronate and/or Parathyroid Hormone for Osteoporosis",
            "ns:m.040v961": "Preirradiation chemotherapy with cyclophosphamide, doxorubicin, vincristine, and dexamethasone for primary CNS lymphomas: initial report of radiation therapy oncology group protocol 88-06"
        },
        "SExpr_w_name": "(AND (JOIN medicine.medical_trial.references Preirradiation chemotherapy with cyclophosphamide, doxorubicin, vincristine, and dexamethasone for primary CNS lymphomas: initial report of radiation therapy oncology group protocol 88-06) (JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) Alendronate and/or Parathyroid Hormone for Osteoporosis)))",
        "SExpr": "(AND (JOIN medicine.medical_trial.references m.040v961) (JOIN (R medicine.medical_trial_phase.medical_trials) (JOIN (R medicine.medical_trial.phase) m.03zbbwc)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:fictional_universe.fictional_setting.characters_that_have_lived_here ?y .\n?y ns:fictional_universe.fictional_character.appears_in_these_fictional_universes ?x .\n?x ns:fictional_universe.fictional_universe.organizations ns:m.02r0nqz .\n}\n",
        "TopicEntityMid": "m.0b90_r",
        "mid2name": {
            "ns:m.0b90_r": "Mexico",
            "ns:m.02r0nqz": "Company"
        },
        "SExpr_w_name": "(AND (JOIN fictional_universe.fictional_universe.organizations Company) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) Mexico)))",
        "SExpr": "(AND (JOIN fictional_universe.fictional_universe.organizations m.02r0nqz) (JOIN (R fictional_universe.fictional_character.appears_in_these_fictional_universes) (JOIN (R fictional_universe.fictional_setting.characters_that_have_lived_here) m.0b90_r)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hgt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hgt ns:internet.protocol.api ?y .\n?y ns:computer.internet_protocol.software_used_by ?x .\n?x ns:computer.software.developer ns:m.07vqmqv .\n}\n",
        "TopicEntityMid": "m.03hgt",
        "mid2name": {
            "ns:m.03hgt": "Hypertext Transfer Protocol",
            "ns:m.07vqmqv": "Mark Smith"
        },
        "SExpr_w_name": "(AND (JOIN computer.software.developer Mark Smith) (JOIN (R computer.internet_protocol.software_used_by) (JOIN (R internet.protocol.api) Hypertext Transfer Protocol)))",
        "SExpr": "(AND (JOIN computer.software.developer m.07vqmqv) (JOIN (R computer.internet_protocol.software_used_by) (JOIN (R internet.protocol.api) m.03hgt)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02qypr_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02qypr_ ns:book.author.works_written ?y .\n?y ns:award.award_winning_work.awards_won ?x .\n?x ns:award.award_honor.award ns:m.0641hm6 .\n}\n",
        "TopicEntityMid": "m.02qypr_",
        "mid2name": {
            "ns:m.02qypr_": "Gerard Alessandrini",
            "ns:m.0641hm6": "Tony Honors for Excellence in Theatre"
        },
        "SExpr_w_name": "(AND (JOIN award.award_honor.award Tony Honors for Excellence in Theatre) (JOIN (R award.award_winning_work.awards_won) (JOIN (R book.author.works_written) Gerard Alessandrini)))",
        "SExpr": "(AND (JOIN award.award_honor.award m.0641hm6) (JOIN (R award.award_winning_work.awards_won) (JOIN (R book.author.works_written) m.02qypr_)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zpl5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zpl5 ns:religion.belief.belief_of ?y .\n?y ns:religion.religion.places_of_worship_historical ?x .\n?x ns:religion.place_of_worship_historical_use.religion ns:m.03_gx .\n}\n",
        "TopicEntityMid": "m.02zpl5",
        "mid2name": {
            "ns:m.02zpl5": "Tikkun olam",
            "ns:m.03_gx": "Judaism"
        },
        "SExpr_w_name": "(AND (JOIN religion.place_of_worship_historical_use.religion Judaism) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.belief.belief_of) Tikkun olam)))",
        "SExpr": "(AND (JOIN religion.place_of_worship_historical_use.religion m.03_gx) (JOIN (R religion.religion.places_of_worship_historical) (JOIN (R religion.belief.belief_of) m.02zpl5)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g_h6j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g_h6j ns:business.consumer_product.company ?y .\n?y ns:business.company_product_relationship.company ?x .\n?x ns:base.filmcameras.camera_manufacturer.cameras_manufactured ns:m.04knjbp .\n}\n",
        "TopicEntityMid": "m.0g_h6j",
        "mid2name": {
            "ns:m.0g_h6j": "Olympus E-400",
            "ns:m.04knjbp": "Olympus Pen FT"
        },
        "SExpr_w_name": "(AND (JOIN base.filmcameras.camera_manufacturer.cameras_manufactured Olympus Pen FT) (JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) Olympus E-400)))",
        "SExpr": "(AND (JOIN base.filmcameras.camera_manufacturer.cameras_manufactured m.04knjbp) (JOIN (R business.company_product_relationship.company) (JOIN (R business.consumer_product.company) m.0g_h6j)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fzw6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fzw6g ns:sports.boxing_weight_division.matches ?y .\n?y ns:time.event.locations ?x .\n?x ns:location.location.containedby ns:m.0345h .\n}\n",
        "TopicEntityMid": "m.0fzw6g",
        "mid2name": {
            "ns:m.0fzw6g": "Middleweight",
            "ns:m.0345h": "Germany"
        },
        "SExpr_w_name": "(AND (JOIN location.location.containedby Germany) (JOIN (R time.event.locations) (JOIN (R sports.boxing_weight_division.matches) Middleweight)))",
        "SExpr": "(AND (JOIN location.location.containedby m.0345h) (JOIN (R time.event.locations) (JOIN (R sports.boxing_weight_division.matches) m.0fzw6g)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09msl0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09msl0 ns:sports.mascot.team ?y .\n?y ns:award.award_nominee.award_nominations ?x .\n?x ns:award.award_nomination.award ns:m.0ys3wp9 .\n}\n",
        "TopicEntityMid": "m.09msl0",
        "mid2name": {
            "ns:m.09msl0": "H'Angus",
            "ns:m.0ys3wp9": "Best Fan Marketing Campaign"
        },
        "SExpr_w_name": "(AND (JOIN award.award_nomination.award Best Fan Marketing Campaign) (JOIN (R award.award_nominee.award_nominations) (JOIN (R sports.mascot.team) H'Angus)))",
        "SExpr": "(AND (JOIN award.award_nomination.award m.0ys3wp9) (JOIN (R award.award_nominee.award_nominations) (JOIN (R sports.mascot.team) m.09msl0)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xqt_h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xqt_h ns:book.report_issuing_institution.technical_reports_issued ?y .\n?y ns:book.written_work.author ?x .\n?x ns:book.author.works_written ns:m.04zjyfs .\n}\n",
        "TopicEntityMid": "m.03xqt_h",
        "mid2name": {
            "ns:m.03xqt_h": "North Carolina Cooperative Fish and Wildlife Research Unit",
            "ns:m.04zjyfs": "Completion of the 2001 National Land Cover Database for the conterminous United States"
        },
        "SExpr_w_name": "(AND (JOIN book.author.works_written Completion of the 2001 National Land Cover Database for the conterminous United Statess) (JOIN (R book.written_work.author) (JOIN (R book.report_issuing_institution.technical_reports_issued) North Carolina Cooperative Fish and Wildlife Research Unit)))",
        "SExpr": "(AND (JOIN book.author.works_written m.04zjyfs) (JOIN (R book.written_work.author) (JOIN (R book.report_issuing_institution.technical_reports_issued) m.03xqt_h)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l9h80)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l9h80 ns:base.skosbase.vocabulary_equivalent_topic.equivalent_concept ?y .\n?y ns:base.skosbase.skos_concept.broader ?x .\n?x ns:base.skosbase.skos_concept.equivalent_topic ns:m.09cmq .\n}\n",
        "TopicEntityMid": "m.03l9h80",
        "mid2name": {
            "ns:m.03l9h80": "Music museum",
            "ns:m.09cmq": "Museum"
        },
        "SExpr_w_name": "(AND (JOIN base.skosbase.skos_concept.equivalent_topic Museum) (JOIN (R base.skosbase.skos_concept.broader) (JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) Music museum)))",
        "SExpr": "(AND (JOIN base.skosbase.skos_concept.equivalent_topic m.09cmq) (JOIN (R base.skosbase.skos_concept.broader) (JOIN (R base.skosbase.vocabulary_equivalent_topic.equivalent_concept) m.03l9h80)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07g0r9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07g0r9 ns:location.location.containedby ?y .\n?y ns:biology.breed_origin.breeds_originating_here ?x .\n?x ns:biology.organism_classification.higher_classification ns:m.0bt9lr .\n}\n",
        "TopicEntityMid": "m.07g0r9",
        "mid2name": {
            "ns:m.07g0r9": "Swartkrans",
            "ns:m.0bt9lr": "Dog"
        },
        "SExpr_w_name": "(AND (JOIN biology.organism_classification.higher_classification Dog) (JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) Swartkrans)))",
        "SExpr": "(AND (JOIN biology.organism_classification.higher_classification m.0bt9lr) (JOIN (R biology.breed_origin.breeds_originating_here) (JOIN (R location.location.containedby) m.07g0r9)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cqt41)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cqt41 ns:award.award_nominee.award_nominations ?y .\n?y ns:award.award_nomination.award ?x .\n?x ns:award.award_category.category_of ns:m.05dbmk .\n}\n",
        "TopicEntityMid": "m.0cqt41",
        "mid2name": {
            "ns:m.0cqt41": "New York Yankees",
            "ns:m.05dbmk": "Laureus World Sports Awards"
        },
        "SExpr_w_name": "(AND (JOIN award.award_category.category_of Laureus World Sports Awards) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) New York Yankees)))",
        "SExpr": "(AND (JOIN award.award_category.category_of m.05dbmk) (JOIN (R award.award_nomination.award) (JOIN (R award.award_nominee.award_nominations) m.0cqt41)))"
    },
    {
        "sparql": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rjzhr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rjzhr ns:music.album.artist ?y .\n?y ns:book.author.works_written ?x .\n?x ns:theater.play.orchestrator ns:m.03cc41 .\n}\n",
        "TopicEntityMid": "m.01rjzhr",
        "mid2name": {
            "ns:m.01rjzhr": "Parade (1999 original Broadway cast)",
            "ns:m.03cc41": "Jason Robert Brown"
        },
        "SExpr_w_name": "(AND (JOIN theater.play.orchestrator Jason Robert Brown) (JOIN (R book.author.works_written) (JOIN (R music.album.artist) Parade (1999 original Broadway cast))))",
        "SExpr": "(AND (JOIN theater.play.orchestrator m.03cc41) (JOIN (R book.author.works_written) (JOIN (R music.album.artist) m.01rjzhr)))"
    }
]