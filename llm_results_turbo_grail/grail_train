{
    "0": {
        "generations": "What is the routed drug that contains Oxybutynin chloride 5 extended release film coated tablet as an ingredient?",
        "ori_data_item": {
            "qid": 2101535001000,
            "question": "oxybutynin chloride 5 extended release film coated tablet is the ingredients of what routed drug?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xfvs",
                    "entity_name": "Oxybutynin Oral"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xm0m",
                    "entity_name": "Oxybutynin Chloride Oral"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.routed_drug",
                        "class": "medicine.routed_drug",
                        "friendly_name": "Routed drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqs1x_",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Oxybutynin chloride 5 extended release film coated tablet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.routed_drug.marketed_formulations",
                        "friendly_name": "Marketed formulations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.routed_drug . \nVALUES ?x1 { :m.0hqs1x_ } \n?x0 :medicine.routed_drug.marketed_formulations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.routed_drug (JOIN medicine.routed_drug.marketed_formulations m.0hqs1x_))"
        }
    },
    "1": {
        "generations": "which educational institutions are single-sex schools??",
        "ori_data_item": {
            "qid": 2100954014000,
            "question": "the type single-sex school are in which institutions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011ll0cm",
                    "entity_name": "\u00c9cole sup\u00e9rieure de jeunes filles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r4qt_",
                    "entity_name": "Penrhos College, Perth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dddwj",
                    "entity_name": "Methodist Ladies' College, Perth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028bvkv",
                    "entity_name": "Crest Girls' Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09h5p0",
                    "entity_name": "Forest School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08mm5p",
                    "entity_name": "Branksome Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07m0s2",
                    "entity_name": "Oxford High School, Oxford"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0866rr",
                    "entity_name": "Christ Church Grammar School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07w008",
                    "entity_name": "Guildford Grammar School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3d54",
                    "entity_name": "Academy of the Holy Angels"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ftt89",
                    "entity_name": "Jakarta Canisius College"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.educational_institution",
                        "class": "education.educational_institution",
                        "friendly_name": "Educational Institution",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.086fjj",
                        "class": "education.school_category",
                        "friendly_name": "Single-sex school",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.educational_institution.school_type",
                        "friendly_name": "School type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.educational_institution . \nVALUES ?x1 { :m.086fjj } \n?x0 :education.educational_institution.school_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.educational_institution (JOIN education.educational_institution.school_type m.086fjj))"
        }
    },
    "2": {
        "generations": "what religious leadership title has the earliest start date for its leaders??",
        "ori_data_item": {
            "qid": 3206374001000,
            "question": "the leaders of the earliest established religious organization are given what title?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05rd8",
                    "entity_name": "Pope"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_leadership_title",
                        "class": "religion.religious_leadership_title",
                        "friendly_name": "Religious Leadership Title",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religious_organization_leadership",
                        "class": "religion.religious_organization_leadership",
                        "friendly_name": "Religious Organization Leadership",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religious_leadership_title.leaders",
                        "friendly_name": "Leaders"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "religion.religious_organization_leadership.start_date",
                        "friendly_name": "Start Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_leadership_title . \n?x1 :type.object.type :religion.religious_organization_leadership . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :religion.religious_leadership_title . \n?y1 :type.object.type :religion.religious_organization_leadership . \n?y0 :religion.religious_leadership_title.leaders ?y1 . \n?y1 :religion.religious_organization_leadership.start_date ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :religion.religious_leadership_title.leaders ?x1 . \n?x1 :religion.religious_organization_leadership.start_date ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(ARGMIN religion.religious_leadership_title (JOIN religion.religious_leadership_title.leaders religion.religious_organization_leadership.start_date))"
        }
    },
    "3": {
        "generations": "what warship was struck on july 1, 1970 in user patrick's default domain of warship_v1_1??",
        "ori_data_item": {
            "qid": 2100735000000,
            "question": "on 07/01/1970, which warship v1.1 was hit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05wfjz",
                    "entity_name": "USS Cobia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "user.patrick.default_domain.warship_v1_1",
                        "class": "user.patrick.default_domain.warship_v1_1",
                        "friendly_name": "Warship v1.1",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1970-07-01^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "07/01/1970",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "user.patrick.default_domain.warship_v1_1.struck",
                        "friendly_name": "Struck"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.patrick.default_domain.warship_v1_1 . \nVALUES ?x1 { \"1970-07-01-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :user.patrick.default_domain.warship_v1_1.struck ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "user.patrick.default_domain"
            ],
            "s_expression": "(AND user.patrick.default_domain.warship_v1_1 (JOIN user.patrick.default_domain.warship_v1_1.struck 1970-07-01^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "4": {
        "generations": "which organization regulates the basque language??",
        "ori_data_item": {
            "qid": 2102770001000,
            "question": "what is the language regulator of basque?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057xsn",
                    "entity_name": "Euskaltzaindia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_regulator",
                        "class": "language.language_regulator",
                        "friendly_name": "Language Regulator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.017k6",
                        "class": "language.human_language",
                        "friendly_name": "basque",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_regulator.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_regulator . \nVALUES ?x1 { :m.017k6 } \n?x0 :language.language_regulator.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_regulator (JOIN language.language_regulator.language m.017k6))"
        }
    },
    "5": {
        "generations": "what food has the highest energy per 100g??",
        "ori_data_item": {
            "qid": 2103670001000,
            "question": "when it comes to the food that has the most energy per 100g what is the name of it?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011l9w",
                    "entity_name": "Lard"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.food",
                        "class": "food.food",
                        "friendly_name": "Food",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.food.energy",
                        "friendly_name": "Energy per 100g"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.food . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :food.food . \n?y0 :food.food.energy ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :food.food.energy ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(ARGMAX food.food food.food.energy)"
        }
    },
    "6": {
        "generations": "who is the series editor of a people's history of christianity??",
        "ori_data_item": {
            "qid": 2102184007000,
            "question": "a people's history of christianity was edited by what series editor?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05wkvjs",
                    "entity_name": "Denis Janz"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.series_editor",
                        "class": "book.series_editor",
                        "friendly_name": "Series editor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012bphrj",
                        "class": "book.book_edition_series",
                        "friendly_name": "A People's History of Christianity",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.series_editor.book_edition_series_edited",
                        "friendly_name": "Book edition series edited"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.series_editor . \nVALUES ?x1 { :m.012bphrj } \n?x0 :book.series_editor.book_edition_series_edited ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.series_editor (JOIN book.series_editor.book_edition_series_edited m.012bphrj))"
        }
    },
    "7": {
        "generations": "what medical trial health authority oversaw the safety and effectiveness of giving indinavir plus stavudine plus lamivudine to hiv-infected children??",
        "ori_data_item": {
            "qid": 2100091017000,
            "question": "the medical trials conducted on safety and effectiveness of giving indinavir plus stavudine plus lamivudine to hiv-infected children are under the authority of who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bqks",
                    "entity_name": "Federal government of the United States"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_trial_health_authority",
                        "class": "medicine.medical_trial_health_authority",
                        "friendly_name": "Medical trial health authority",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03zbby2",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Safety and Effectiveness of Giving Indinavir Plus Stavudine Plus Lamivudine to HIV-Infected Children",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_trial_health_authority.medical_trials",
                        "friendly_name": "Medical trials"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial_health_authority . \nVALUES ?x1 { :m.03zbby2 } \n?x0 :medicine.medical_trial_health_authority.medical_trials ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_trial_health_authority (JOIN medicine.medical_trial_health_authority.medical_trials m.03zbby2))"
        }
    },
    "8": {
        "generations": "what is the parent genre of the musical genre that includes the album confessions tour??",
        "ori_data_item": {
            "qid": 3202230005000,
            "question": "the albums confessions tour is part of what parent genre of a musical genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mb9",
                    "entity_name": "House music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ggx5q",
                    "entity_name": "Dance music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w4v",
                    "entity_name": "Folk music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06by7",
                    "entity_name": "Rock music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06j6l",
                    "entity_name": "Rhythm and blues"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ggq0m",
                    "entity_name": "Classical music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sbbz2",
                    "entity_name": "Rock and roll"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.017371",
                    "entity_name": "Rockabilly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0827d",
                    "entity_name": "World music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p9w_",
                    "entity_name": "Experimental classical music"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07gxw",
                    "entity_name": "Techno"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gpjmr",
                    "entity_name": "Russian pop"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.genre",
                        "class": "music.genre",
                        "friendly_name": "Musical genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.genre",
                        "class": "music.genre",
                        "friendly_name": "Musical genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03fz6lg",
                        "class": "music.live_album",
                        "friendly_name": "confessions tour",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "music.genre.parent_genre",
                        "friendly_name": "Parent genres"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.genre.albums",
                        "friendly_name": "Albums"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.genre . \n?x1 :type.object.type :music.genre . \nVALUES ?x2 { :m.03fz6lg } \n?x1 :music.genre.parent_genre ?x0 . \n?x1 :music.genre.albums ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.genre (JOIN (R music.genre.parent_genre) (JOIN music.genre.albums m.03fz6lg)))"
        }
    },
    "9": {
        "generations": "what galactic filament is associated with the virgo super-cluster of galaxy superclusters??",
        "ori_data_item": {
            "qid": 2100127001000,
            "question": "virgo super-cluster includes which galactic filament?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kh3t6",
                    "entity_name": "Pisces\u2013Cetus Supercluster Complex"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.galactic_filament",
                        "class": "astronomy.galactic_filament",
                        "friendly_name": "Galactic filament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01825t",
                        "class": "astronomy.galactic_super_cluster",
                        "friendly_name": "virgo super-cluster",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.galactic_filament.galaxy_superclusters",
                        "friendly_name": "Galaxy superclusters"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.galactic_filament . \nVALUES ?x1 { :m.01825t } \n?x0 :astronomy.galactic_filament.galaxy_superclusters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.galactic_filament (JOIN astronomy.galactic_filament.galaxy_superclusters m.01825t))"
        }
    },
    "10": {
        "generations": "who is the recipient of an honorary degree with the most recent date of birth??",
        "ori_data_item": {
            "qid": 2105493001000,
            "question": "the honorary degree recipient that was born most recently is named what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d48jg",
                    "entity_name": "Nicola Benedetti"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.honorary_degree_recipient",
                        "class": "education.honorary_degree_recipient",
                        "friendly_name": "Honorary Degree Recipient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.date_of_birth",
                        "friendly_name": "Date of birth"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.honorary_degree_recipient . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :education.honorary_degree_recipient . \n?y0 :people.person.date_of_birth ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.date_of_birth ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMAX education.honorary_degree_recipient people.person.date_of_birth)"
        }
    },
    "11": {
        "generations": "what drug formulation has an extended release liquid dosage form??",
        "ori_data_item": {
            "qid": 2100036013000,
            "question": "extended release liquid are a part of which drug formulations?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt8n_",
                    "entity_name": "Acetaminophen, dextromethorphan hydrobromide and doxylamine succinate liquid 33.333/1/0.417 extended release liquid"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_formulation",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Drug formulation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqy2y0",
                        "class": "medicine.drug_dosage_form",
                        "friendly_name": "Extended release liquid",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_formulation.dosage_form",
                        "friendly_name": "Dosage form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_formulation . \nVALUES ?x1 { :m.0hqy2y0 } \n?x0 :medicine.drug_formulation.dosage_form ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_formulation (JOIN medicine.drug_formulation.dosage_form m.0hqy2y0))"
        }
    },
    "12": {
        "generations": "which architect has a similar architectural style to josef fanta??",
        "ori_data_item": {
            "qid": 3203202007000,
            "question": "which architect has a similar architectural style to josef fanta?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01scvf",
                    "entity_name": "Eliel Saarinen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04227n",
                    "entity_name": "Llu\u00eds Dom\u00e8nech i Montaner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tfd4",
                    "entity_name": "Alexey Shchusev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d3hqf",
                    "entity_name": "Charles Herbert Reilly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yb0",
                    "entity_name": "Antoni Gaud\u00ed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pbwdy",
                    "entity_name": "Ei\u017eens Laube"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dvns",
                    "entity_name": "Louis Sullivan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pgrjz",
                    "entity_name": "Ivan Fomin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019m6j",
                    "entity_name": "Alfr\u00e9d Haj\u00f3s"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02gx21",
                    "entity_name": "Henry van de Velde"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02g110",
                    "entity_name": "Otto Wagner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021f63",
                    "entity_name": "Hector Guimard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026h98",
                    "entity_name": "Victor Horta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026x88w",
                    "entity_name": "W\u0142adys\u0142aw Horodecki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027fj9z",
                    "entity_name": "Alexander Vallaury"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027hn_8",
                    "entity_name": "Gavriil Baranovsky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h4yx",
                    "entity_name": "Josep Puig i Cadafalch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pxk7v",
                    "entity_name": "Alexander Zelenko"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pzyxg",
                    "entity_name": "Fyodor Schechtel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q7_0n",
                    "entity_name": "William Walcot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q95w3",
                    "entity_name": "Lev Kekushev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qcnzf",
                    "entity_name": "Ivan Mashkov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qdb2c",
                    "entity_name": "Nikita Lazarev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qlp6y",
                    "entity_name": "Ilya Bondarenko"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qpqr1",
                    "entity_name": "Illarion Ivanov-Schitz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qsvbq",
                    "entity_name": "Karl Ernstberger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r1xsf",
                    "entity_name": "Virginio Colombo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r32jd",
                    "entity_name": "Mario Palanti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r33pj",
                    "entity_name": "Francisco Gianotti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vr6d6",
                    "entity_name": "Ivan Sergeyevich Kuznetsov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vrz0r",
                    "entity_name": "Hendrik Beyaert"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w5s06",
                    "entity_name": "Ede Magyar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xzkj",
                    "entity_name": "Jo\u017ee Ple\u010dnik"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03092z",
                    "entity_name": "Josef Hoffmann"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_mgt",
                    "entity_name": "Peter Behrens"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cw9_6",
                    "entity_name": "Ivan Vurnik"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03czszs",
                    "entity_name": "Osvald Pol\u00edvka"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h5m6f",
                    "entity_name": "James Salmon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hhsj9",
                    "entity_name": "Richard Riemerschmid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ts8m",
                    "entity_name": "Lars Sonck"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wh96m",
                    "entity_name": "Cecil Howard Lay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0409d44",
                    "entity_name": "Joseph Bascourt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043rnz",
                    "entity_name": "Jan Letzel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f1pxm",
                    "entity_name": "James A. Johnson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jfmdc",
                    "entity_name": "Francesc Berenguer i Mestres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jhpmm",
                    "entity_name": "Vladimir Vladimirovich Sherwood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lhczk",
                    "entity_name": "Jules Lavirotte"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n354c",
                    "entity_name": "Henri Sauvage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n3c67",
                    "entity_name": "Henri Van Dievoet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yd9ry",
                    "entity_name": "Waldemar Wilenius"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051z1bz",
                    "entity_name": "Kamen Petkov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059964d",
                    "entity_name": "C. Harrison Townsend"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0599661",
                    "entity_name": "Max Hoeppener"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059966j",
                    "entity_name": "Paul Cauchie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b69rj",
                    "entity_name": "Nikolay Zherikhov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b_9cf",
                    "entity_name": "Niels Stockfleth Darre Eckhoff"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05fbhbt",
                    "entity_name": "Raymond Charles P\u00e9r\u00e9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nl1_",
                    "entity_name": "Alois Dry\u00e1k"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p2ngg",
                    "entity_name": "Vilhelms Bokslafs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sxj1_",
                    "entity_name": "Charles Harrison Townsend"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065y_3k",
                    "entity_name": "Toma T. Socolescu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076tkzz",
                    "entity_name": "Ernesto Basile"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07p6t_",
                    "entity_name": "Joseph Maria Olbrich"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07q_dd",
                    "entity_name": "Josep Maria Jujol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vv48",
                    "entity_name": "August Endell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.090s6d",
                    "entity_name": "Raimondo Tommaso D'Aronco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.091rm5",
                    "entity_name": "Bruno Paul"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bcpnm",
                    "entity_name": "Marian Peretyatkovich"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1tg7",
                    "entity_name": "Franti\u0161ek B\u00edlek"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ctb9m",
                    "entity_name": "K\u00e1roly K\u00f3s"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d03s3",
                    "entity_name": "Robert D. Kohn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d3hrt",
                    "entity_name": "Mikhail Eisenstein"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d4rq6",
                    "entity_name": "Paul Hankar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d4sr3",
                    "entity_name": "Gustave Serrurier-Bovy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d4t_b",
                    "entity_name": "Lucien Weissenburger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7tt",
                    "entity_name": "Charles Rennie Mackintosh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g7_s8",
                    "entity_name": "Jacques Rosenbaum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g_4r4",
                    "entity_name": "Gustave Strauven"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfftpx",
                    "entity_name": "Victor Schr\u00f6ter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ggb7c",
                    "entity_name": "Uno Ullberg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmqfk",
                    "entity_name": "\u00d6d\u00f6n Lechner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gygy4",
                    "entity_name": "Alexander Pomerantsev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0krrsw",
                    "entity_name": "\u00c9mile Andr\u00e9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0krrtm",
                    "entity_name": "Eug\u00e8ne Vallin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zbv3vg",
                    "entity_name": "Franciszek M\u0105czy\u0144ski"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architect",
                        "class": "architecture.architect",
                        "friendly_name": "Architect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "architecture.architectural_style",
                        "class": "architecture.architectural_style",
                        "friendly_name": "Architectural style",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0fq1wf7",
                        "class": "architecture.architect",
                        "friendly_name": "Josef Fanta",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.architect.architectural_style",
                        "friendly_name": "Architectural Style"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "architecture.architect.architectural_style",
                        "friendly_name": "Architectural Style"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architect . \n?x1 :type.object.type :architecture.architectural_style . \nVALUES ?x2 { :m.0fq1wf7 } \n?x0 :architecture.architect.architectural_style ?x1 . \n?x2 :architecture.architect.architectural_style ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.architect (JOIN architecture.architect.architectural_style (JOIN (R architecture.architect.architectural_style) m.0fq1wf7)))"
        }
    },
    "13": {
        "generations": "who is the creator of the fictional character rachel renee russell??",
        "ori_data_item": {
            "qid": 2101494004000,
            "question": "which fictional character belongs to rachel renee russell?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j1047t",
                    "entity_name": "Nikki Maxwell"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dljdhf",
                        "class": "fictional_universe.fictional_character_creator",
                        "friendly_name": "Rachel Renee Russell",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.character_created_by",
                        "friendly_name": "Character Created By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.0dljdhf } \n?x0 :fictional_universe.fictional_character.character_created_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.character_created_by m.0dljdhf))"
        }
    },
    "14": {
        "generations": "which shopping center has a retail floor space of 72000 square meters??",
        "ori_data_item": {
            "qid": 2102185008000,
            "question": "what is the name of a shopping center that has space as large as 72000?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rqrq7",
                    "entity_name": "Virginia Center Commons"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.shopping_center",
                        "class": "business.shopping_center",
                        "friendly_name": "Shopping center",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "72000^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "72000",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.shopping_center.retail_floor_space_m_2",
                        "friendly_name": "Retail floor space"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.shopping_center . \nVALUES ?x1 { \"72000\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :business.shopping_center.retail_floor_space_m_2 ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.shopping_center (JOIN business.shopping_center.retail_floor_space_m_2 72000^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "15": {
        "generations": "which visual artist is associated with the period or movement of arte povera??",
        "ori_data_item": {
            "qid": 2100985000000,
            "question": "arte povera has what visual artist associated with it?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027lys3",
                    "entity_name": "John Davis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09h5rh",
                    "entity_name": "Mario Merz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p18h",
                    "entity_name": "Jannis Kounellis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jt11kg",
                    "entity_name": "Gilberto Zorio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026xmm7",
                    "entity_name": "Alighiero Boetti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lf036",
                    "entity_name": "Pino Pascali"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vnxn8",
                    "entity_name": "Luciano Fabro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v629q",
                    "entity_name": "Marisa Merz"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_artist",
                        "class": "visual_art.visual_artist",
                        "friendly_name": "Visual Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04_d7p",
                        "class": "visual_art.art_period_movement",
                        "friendly_name": "Arte Povera",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_artist.associated_periods_or_movements",
                        "friendly_name": "Associated periods or movements"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_artist . \nVALUES ?x1 { :m.04_d7p } \n?x0 :visual_art.visual_artist.associated_periods_or_movements ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_artist (JOIN visual_art.visual_artist.associated_periods_or_movements m.04_d7p))"
        }
    },
    "16": {
        "generations": "what products have tetramethrin as an ingredient??",
        "ori_data_item": {
            "qid": 2101984004000,
            "question": "give me some products that are made with tetramethrin in it.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8wr2k",
                    "entity_name": "Woolworths Home Brand Inspect Spray 300g"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.product_with_ingredients",
                        "class": "business.product_with_ingredients",
                        "friendly_name": "Product with ingredients",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09fwfr",
                        "class": "business.product_ingredient",
                        "friendly_name": "Tetramethrin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.product_with_ingredients.ingredients",
                        "friendly_name": "Ingredients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_with_ingredients . \nVALUES ?x1 { :m.09fwfr } \n?x0 :business.product_with_ingredients.ingredients ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.product_with_ingredients (JOIN business.product_with_ingredients.ingredients m.09fwfr))"
        }
    },
    "17": {
        "generations": "which comic book story credits robbie busch as the colorist??",
        "ori_data_item": {
            "qid": 2100105004000,
            "question": "robbie busch is the color artist for what comic book?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kkx2",
                    "entity_name": "The Sandman: Dream Country"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmckm",
                    "entity_name": "Calliope"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcmh",
                    "entity_name": "A Dream of a Thousand Cats"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02_5cbx",
                        "class": "comic_books.comic_book_colorist",
                        "friendly_name": "Robbie Busch",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.colors",
                        "friendly_name": "Colors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.02_5cbx } \n?x0 :comic_books.comic_book_story.colors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.colors m.02_5cbx))"
        }
    },
    "18": {
        "generations": "which computer designer designed the D-Series Machines??",
        "ori_data_item": {
            "qid": 2102801003000,
            "question": "d-series machines was designed by which computer designer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7__",
                    "entity_name": "Butler Lampson"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_designer",
                        "class": "computer.computer_designer",
                        "friendly_name": "Computer Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04_79wm",
                        "class": "computer.computer",
                        "friendly_name": "D-Series Machines",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer_designer.computers_designed",
                        "friendly_name": "Computers Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_designer . \nVALUES ?x1 { :m.04_79wm } \n?x0 :computer.computer_designer.computers_designed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer_designer (JOIN computer.computer_designer.computers_designed m.04_79wm))"
        }
    },
    "19": {
        "generations": "which building has less than 9 floors??",
        "ori_data_item": {
            "qid": 2103804008000,
            "question": "which building has less than 9 floors?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g95y5",
                    "entity_name": "Westfield Galleria at Roseville"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9v2d",
                    "entity_name": "Capital Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9v3f",
                    "entity_name": "Westfield Vancouver"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9wh5",
                    "entity_name": "SouthPark Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9wym",
                    "entity_name": "Westfield Citrus Park"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pl26lb",
                    "entity_name": "Woodstock, Burwood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gvr2_x",
                    "entity_name": "Congregation Or Zarua"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027t64z",
                    "entity_name": "Clavell Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ll2qzn",
                    "entity_name": "Knights of Pythias Temple"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057651v",
                    "entity_name": "Ramsay Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02n012",
                    "entity_name": "Soestdijk Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025wxt7",
                    "entity_name": "Westfield Broward"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0286fwb",
                    "entity_name": "Westfield Eastridge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f16l9",
                    "entity_name": "Westfield Hawthorn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kgc7s",
                    "entity_name": "Kerr"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081sq",
                    "entity_name": "White House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hr0wq3",
                    "entity_name": "Ponce Plaza Hotel & Casino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3mmzc",
                    "entity_name": "North Western Hotel, Morecambe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pdbj56",
                    "entity_name": "Warren's Mill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0881ck",
                    "entity_name": "Laxminarayan Temple"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qzy4",
                    "entity_name": "Harris Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04z_m2m",
                    "entity_name": "Esma Sultan Mansion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm833",
                    "entity_name": "St. Paul's Episcopal Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010r5q6k",
                    "entity_name": "Luneta Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8f6rj",
                    "entity_name": "School Street School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_qd2xv",
                    "entity_name": "The White House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y65kk7",
                    "entity_name": "Bon Air"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwlh22",
                    "entity_name": "Stonewall Jackson School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwnvl_",
                    "entity_name": "Fairmount School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gkvprh",
                    "entity_name": "Malcolm Place"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzvdm6",
                    "entity_name": "Echo School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g55rnp",
                    "entity_name": "Atlantic Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kvdmwl",
                    "entity_name": "Palace Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_bjs_",
                    "entity_name": "Reid Murdoch Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0brz7vw",
                    "entity_name": "Miramar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nc_9",
                    "entity_name": "Cloudland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h7rz37",
                    "entity_name": "O'Conner Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hplw7x",
                    "entity_name": "Inha Jungseok Memorial Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpx4k7",
                    "entity_name": "The Cedars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_3n29",
                    "entity_name": "University of Wisconsin North Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086c21",
                    "entity_name": "Etobicoke Civic Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h95f0_",
                    "entity_name": "The Boathouse, Twickenham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hnxwb",
                    "entity_name": "Calvin B. Taylor House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086c4g",
                    "entity_name": "East York Civic Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dg9tfh",
                    "entity_name": "Washburn Memorial Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gj8vsy",
                    "entity_name": "Prince Rupert City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_3hc9",
                    "entity_name": "Bishop Court Apartments"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbnjpk",
                    "entity_name": "Midgaard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023_4p",
                    "entity_name": "Belcourt Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds989m",
                    "entity_name": "Butchers Wheel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ddg561",
                    "entity_name": "The Old Princeton School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kfx996",
                    "entity_name": "The City Guard in Osijek"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p8t0sm",
                    "entity_name": "The Mercer Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09w3b",
                    "entity_name": "The Pentagon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012c106j",
                    "entity_name": "Hotel Neuwirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0131vh5w",
                    "entity_name": "Lusignan House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3lnv",
                    "entity_name": "Martin Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07h6r6",
                    "entity_name": "Willis Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_fdmf",
                    "entity_name": "Harrison School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08th_5",
                    "entity_name": "George Vari Engineering and Computing Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rn8yg",
                    "entity_name": "Beaconsfield House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myx9c_",
                    "entity_name": "JW Marriott Cusco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs7zh",
                    "entity_name": "Allegheny County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ggw6",
                    "entity_name": "Texas School Book Depository"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pd9f0q",
                    "entity_name": "Cliftonville Hotel, Cromer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027k2kf",
                    "entity_name": "Embassy Theatre, Wellington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03lsv3",
                    "entity_name": "Roundhouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05m83q",
                    "entity_name": "Odeon of Herodes Atticus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yj_h4",
                    "entity_name": "Boyd's Theater and Opera House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c02dld",
                    "entity_name": "Henry Clay Frick House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpszhk",
                    "entity_name": "Tusculum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hhql54",
                    "entity_name": "Thomas Nelson Page House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07vth",
                    "entity_name": "United States Capitol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dd7s3",
                    "entity_name": "White Lodge, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01k7v7",
                    "entity_name": "Space Needle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h5d5j",
                    "entity_name": "Allan Lambert Galleria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d9v_6",
                    "entity_name": "Hotel El Convento"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kg2z7c",
                    "entity_name": "Madrona Manor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d5hfp",
                    "entity_name": "Washoe House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w_mhly",
                    "entity_name": "Courtyard Durham Research Triangle Park"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qwhb_",
                    "entity_name": "Wilson Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02j81",
                    "entity_name": "Eiffel Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmbhv8",
                    "entity_name": "Divine Mercy Sanctuary, Krak\u00f3w"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_9547",
                    "entity_name": "Kendall County Courthouse and Jail"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_fk0_",
                    "entity_name": "Greenwood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxg8v",
                    "entity_name": "Boston Marriott Peabody"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07rb26",
                    "entity_name": "Phoenix Theater"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7ll74",
                    "entity_name": "Hockley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpvxnq",
                    "entity_name": "Monticola"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kx3w0",
                    "entity_name": "795 Folsom Street"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052rj7",
                    "entity_name": "Michigan Union"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x4wnk",
                    "entity_name": "Washington County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h5dvs",
                    "entity_name": "Gateway Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09p9z8",
                    "entity_name": "Westfield Valley Fair"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dmh44",
                    "entity_name": "Westfield Annapolis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g97m9",
                    "entity_name": "Westfield Topanga"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9w0c",
                    "entity_name": "Westfield Old Orchard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9xp9",
                    "entity_name": "Westfield Valencia Town Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9z25",
                    "entity_name": "Westfield Plaza Bonita"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027p14l",
                    "entity_name": "Moat House, Sutton Coldfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ygt3m",
                    "entity_name": "Gisborough Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vswb0",
                    "entity_name": "112 Ocean Avenue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_10m6",
                    "entity_name": "Gordon Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nslh",
                    "entity_name": "Royal Court Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gbn7_",
                    "entity_name": "Westmount Public Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpsg1s",
                    "entity_name": "Park Meadows"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r9zvl",
                    "entity_name": "Fairmont San Francisco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07xqkb",
                    "entity_name": "Ashland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026d9yw",
                    "entity_name": "Gettysburg National Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027q9kh",
                    "entity_name": "Singapore Conference Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n53kv5",
                    "entity_name": "Westland Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q61vv",
                    "entity_name": "Aspen Institute Wye River Conference Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09lr3h",
                    "entity_name": "Disney's Yacht Club Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxdr6",
                    "entity_name": "Trumbull Marriott Merritt Parkway"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxh8_",
                    "entity_name": "Washington Dulles Airport Marriott"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxk7y",
                    "entity_name": "Westfields Marriott Washington Dulles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxqp9",
                    "entity_name": "Chicago Marriott Suites Downers Grove"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxsfj",
                    "entity_name": "Coralville Marriott Hotel & Conference Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myx_x3",
                    "entity_name": "Ixtapan de la Sal Marriott Hotel, Spa & Convention Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxhcn",
                    "entity_name": "Courtyard Bridgetown Barbados"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxjh1",
                    "entity_name": "Curacao Marriott Resort & Emerald Casino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxlhs",
                    "entity_name": "Grand Cayman Marriott Beach Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxmh_",
                    "entity_name": "Courtyard Port of Spain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxsmr",
                    "entity_name": "St Kitts Marriott Resort & The Royal Beach Casino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxyqz",
                    "entity_name": "Courtyard Santo Domingo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy4dq",
                    "entity_name": "Courtyard San Salvador"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy5nb",
                    "entity_name": "Costa Rica Marriott San Jose Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy6gd",
                    "entity_name": "JW Marriott Guanacaste Resort & Spa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy8g4",
                    "entity_name": "Courtyard Toluca Airport"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy9r8",
                    "entity_name": "Residence Inn San Jose Escazu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myyb89",
                    "entity_name": "Courtyard San Jose Escazu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bm9plw",
                    "entity_name": "Ainslie St. Transit Terminal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027hd6l",
                    "entity_name": "Big Rocking Horse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023r9j",
                    "entity_name": "American Museum of Natural History"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.069r88",
                    "entity_name": "California State Capitol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0256h_t",
                    "entity_name": "Beckstrand Office Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nzk8",
                    "entity_name": "Kuala Lumpur Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yg2p5",
                    "entity_name": "Batik Painting Museum Penang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011syz85",
                    "entity_name": "Oak Hill Estate Mansion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bq884",
                    "entity_name": "Athenee Palace Hilton Bucharest Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g95hc",
                    "entity_name": "Downtown Plaza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9wj6",
                    "entity_name": "Great Northern Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9wky",
                    "entity_name": "Belden Village Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lk0fg",
                    "entity_name": "Biscuit Company Lofts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwzdy_",
                    "entity_name": "Portal, Tarporley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w32mxg",
                    "entity_name": "The Thief"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03y9cm4",
                    "entity_name": "L'Ermitage Beverly Hills"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3w5xy",
                    "entity_name": "Sunset Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027gtx2",
                    "entity_name": "Eliseyev Emporium"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d6bys",
                    "entity_name": "Westfield Wheaton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vn43",
                    "entity_name": "Astor House Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09r2k4",
                    "entity_name": "Forum Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swp5tb",
                    "entity_name": "Oakhurst"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.016dff",
                    "entity_name": "Washington Monument"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07n50v",
                    "entity_name": "Brisbane City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vrlt",
                    "entity_name": "Stockholm Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03clfpd",
                    "entity_name": "Chimala Mission Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4nqbj",
                    "entity_name": "Golden Angel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0984x9",
                    "entity_name": "Independence Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cq169",
                    "entity_name": "Dallas City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03csyrf",
                    "entity_name": "Heidelberg Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h_9hrm",
                    "entity_name": "Aruba Marriott Resort & Stellaris Casino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x8s_g",
                    "entity_name": "Equitable Life Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b4ty6",
                    "entity_name": "American Dream Meadowlands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025t4w5",
                    "entity_name": "Pardee Home"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011vg7k7",
                    "entity_name": "Viceroy Santa Monica"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rv869",
                    "entity_name": "Oregon Supreme Court Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010x89kb",
                    "entity_name": "Andheri metro station"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0198g",
                    "entity_name": "Buckingham Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j1ybnd",
                    "entity_name": "Historical Residence Hotel I Pini"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myxy0g",
                    "entity_name": "Frenchman's Reef & Morning Star Marriott Beach Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vxzk3",
                    "entity_name": "Alan Turing Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d33mz",
                    "entity_name": "Michael Fowler Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0qzh3n5",
                    "entity_name": "Tower23 Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1hftg",
                    "entity_name": "Inn at Fowlerstown"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gjb7sd",
                    "entity_name": "Sunshine Sakae"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027fn1_",
                    "entity_name": "Detroit Athletic Club"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027znwg",
                    "entity_name": "Union Building, Shanghai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047ngqf",
                    "entity_name": "Old Government Buildings, Wellington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zqdbc",
                    "entity_name": "Harlow C. Curtiss Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080bq0f",
                    "entity_name": "Charles St. Transit Terminal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jwwrfd",
                    "entity_name": "Bank of Italy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vb3pb9",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3c6qp",
                    "entity_name": "Abbeville"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sggn9y",
                    "entity_name": "Henry House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8tnt",
                    "entity_name": "Sydney Convention and Exhibition Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p_yvv",
                    "entity_name": "Westfield Sunrise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m2kxt",
                    "entity_name": "Westfield Trumbull"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g94qg",
                    "entity_name": "Westfield Oakridge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9vs2",
                    "entity_name": "Westfield Fox Valley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9x6k",
                    "entity_name": "Westfield Santa Anita"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012stf91",
                    "entity_name": "Millers Yard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048fms",
                    "entity_name": "Salt Lake City Public Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bryzkt",
                    "entity_name": "Scoular Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwm48l",
                    "entity_name": "Lambert Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl7j37",
                    "entity_name": "LDS Chapels"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jg9r",
                    "entity_name": "Chatsworth House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_bw6y",
                    "entity_name": "Iron County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k8w63b",
                    "entity_name": "Madame Tussauds Hollywood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zf10",
                    "entity_name": "Hong Kong Convention and Exhibition Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hbwpg",
                    "entity_name": "S:t G\u00f6rans kyrka"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l7zq",
                    "entity_name": "Harmandir Sahib"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vl5v9",
                    "entity_name": "Palacio Cabanellas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mnxb6",
                    "entity_name": "St. Clare of Assissi Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05242yd",
                    "entity_name": "Glenn & Viola Walters Cultural Arts Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0540x_",
                    "entity_name": "Dakshineswar Kali Temple"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_f5h1",
                    "entity_name": "Fourth Baptist Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_fnzq",
                    "entity_name": "Leigh Street Baptist Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0czbttm",
                    "entity_name": "286"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm467",
                    "entity_name": "Trinity Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qp364",
                    "entity_name": "Rizal Shrine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1c9kw",
                    "entity_name": "Salem School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_xbyxd",
                    "entity_name": "Millville School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1d15f",
                    "entity_name": "Castillo de la Emperatriz Eugenia de Montijo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08g7ph",
                    "entity_name": "Beyaz\u0131t Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08t2bf",
                    "entity_name": "Regatta Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_fpwgr",
                    "entity_name": "Trafalgar Studios, Chelsea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gk_8l0",
                    "entity_name": "Old Chapel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0hd6t",
                    "entity_name": "Newton Court"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1fs9l",
                    "entity_name": "Homeplace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fq106p",
                    "entity_name": "Bachelor Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzr0tg",
                    "entity_name": "Walter French Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nw4nl",
                    "entity_name": "Schuster Laboratory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06h72d",
                    "entity_name": "Edgbaston Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115lfsf",
                    "entity_name": "Johannesburg City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wfhjd",
                    "entity_name": "The Boulevard Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wjl93_",
                    "entity_name": "Home Farm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ws8v58",
                    "entity_name": "Sigma Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sghdgq",
                    "entity_name": "Turtle Creek Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08jk80",
                    "entity_name": "New York Life Insurance Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hbwj7",
                    "entity_name": "Mariehamn Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vfbv",
                    "entity_name": "\u00c9lys\u00e9e Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch4g9c",
                    "entity_name": "Estaci\u00f3n Pichilemu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pq86",
                    "entity_name": "The Mansions, Brisbane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3dkbd",
                    "entity_name": "Locust Grove"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9ptwq",
                    "entity_name": "Ishitani Residence"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mx1p4",
                    "entity_name": "The Vale Niseko"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lqh9pq",
                    "entity_name": "Thompson Mill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pdbl1m",
                    "entity_name": "Kilronan Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y639sc",
                    "entity_name": "Mannheim"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013cd2_r",
                    "entity_name": "Judge Sebron G. Sneed House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dblg",
                    "entity_name": "Guangzhou TV Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0266x4_",
                    "entity_name": "Alfred Denny Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sy5g6",
                    "entity_name": "Newcastle City Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bhckn0",
                    "entity_name": "Zion Lutheran Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0myy7tq",
                    "entity_name": "Los Suenos Marriott Ocean & Golf Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c6p1x",
                    "entity_name": "Wedderburn Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6fncd",
                    "entity_name": "Taiwan Theater Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqsrfm",
                    "entity_name": "Business Instructional Facility"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0285_r2",
                    "entity_name": "Pype Hayes Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zl7_j",
                    "entity_name": "Davidson's Fort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_ql_m9",
                    "entity_name": "Springdale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ryw4s6",
                    "entity_name": "Mermaid Tavern"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ybbvr",
                    "entity_name": "Burns Manor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.073l9w",
                    "entity_name": "Camp Echo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w89p",
                    "entity_name": "Urbis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.061d4k",
                    "entity_name": "Buxton Opera House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vp0vd",
                    "entity_name": "Stuyvesant Apartments"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z43s_l",
                    "entity_name": "Fairfield Inn & Suites Colorado Springs North/Air Force Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0521d7r",
                    "entity_name": "Dacia Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9wc1",
                    "entity_name": "Southlake Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hxnc",
                    "entity_name": "London Road Fire Station, Manchester"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rffg77",
                    "entity_name": "Belmont Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxd3v0",
                    "entity_name": "Greyledge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047fgk2",
                    "entity_name": "McDonald's Cycle Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047px4v",
                    "entity_name": "Seattle City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3ymfs",
                    "entity_name": "Adana Center for Arts and Culture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r5n9w",
                    "entity_name": "West One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpjq6f",
                    "entity_name": "Parkway Center Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4_yb",
                    "entity_name": "Amerika"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmyb2",
                    "entity_name": "Government House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g57r7k",
                    "entity_name": "511 Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ysbmw2",
                    "entity_name": "Courtyard Augusta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011_6xzl",
                    "entity_name": "Leaders in Oncology Care"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pwrtp",
                    "entity_name": "Azm Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h0wb1",
                    "entity_name": "Pink House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0415jvg",
                    "entity_name": "Burns Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch4pq9",
                    "entity_name": "Hotel Ross"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7pj6s",
                    "entity_name": "Palace of Justice of the Argentine Nation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k602g1",
                    "entity_name": "Ericcson Village Building A"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010fflj2",
                    "entity_name": "Courthouse in Wrze\u015bnia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vc7m",
                    "entity_name": "Sheffield Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8pl35",
                    "entity_name": "The Hermitage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wdq2z_",
                    "entity_name": "Poplar Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g986n",
                    "entity_name": "Westfield Promenade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzt9s7",
                    "entity_name": "Oak Grove"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpj8zd",
                    "entity_name": "Jefferson School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zx1j",
                    "entity_name": "Admiralty House, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmg0j3",
                    "entity_name": "Esmeralda County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jzxgbt",
                    "entity_name": "Campbell Sports Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpvb34",
                    "entity_name": "St George's Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012w4y8z",
                    "entity_name": "Crowther Masonic Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fpgq_0",
                    "entity_name": "Frank & Seder Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1w6_",
                    "entity_name": "West Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121t024",
                    "entity_name": "Faith Covenant Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxd9h4",
                    "entity_name": "Liberty Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzrc2x",
                    "entity_name": "Riverview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dtpg",
                    "entity_name": "Oxon Hoath"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gkrds",
                    "entity_name": "Administration Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl7gww",
                    "entity_name": "LDS Stake Centers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_fd5_",
                    "entity_name": "Woodward House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_ph15",
                    "entity_name": "John Whitworth House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_qz53",
                    "entity_name": "Virginia State Library-Oliver Hill Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_f8vw",
                    "entity_name": "Fotheringay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010dw4gw",
                    "entity_name": "Hotel Orbita - Kiten"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mbcty",
                    "entity_name": "Price Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04x54q",
                    "entity_name": "Victoria Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bp9y5",
                    "entity_name": "Menara Alor Setar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dsbjn4",
                    "entity_name": "Scott County Jail"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01097_nt",
                    "entity_name": "Grand Hyatt Mumbai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wsr3xq",
                    "entity_name": "BOB Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04968k",
                    "entity_name": "Old City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw_705",
                    "entity_name": "Kalkin House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pd68f1",
                    "entity_name": "Chicago Marriott Southwest at Burr Ridge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbk2kf",
                    "entity_name": "Spring Green"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qd_gd",
                    "entity_name": "Edmonton City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xgss4",
                    "entity_name": "Schlumberger Cambridge Research Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d775m",
                    "entity_name": "China National Convention Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kfxkr",
                    "entity_name": "Eliot Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmdfyg",
                    "entity_name": "Carnival House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds59br",
                    "entity_name": "San Ysidro Port of Entry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c0qnp",
                    "entity_name": "Stamford House, Singapore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hf5n6",
                    "entity_name": "Cliffhanger Villa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08sw3q",
                    "entity_name": "Durland\u2013Rathbone\u2013Fiedler Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ql4sn0",
                    "entity_name": "Yukon Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vb3vd9",
                    "entity_name": "Mega Bangna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d0bty",
                    "entity_name": "Cebu International Convention Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7l01c",
                    "entity_name": "Springdale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dnwql",
                    "entity_name": "Argent Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mxk83",
                    "entity_name": "Art Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wsr3d9",
                    "entity_name": "BOC Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010f8l5x",
                    "entity_name": "P&O Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yn7yz",
                    "entity_name": "Old Washington County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ph5t7",
                    "entity_name": "Pioneer Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08pxcx",
                    "entity_name": "East India House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzrbrr",
                    "entity_name": "Eagle Ridge Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_dsc8",
                    "entity_name": "Farley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z2mpc_",
                    "entity_name": "Eastwood Manor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11b868tvbf",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0580dy",
                    "entity_name": "Nagoya TV Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9t1bs",
                    "entity_name": "Council House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfqg_x",
                    "entity_name": "Rokeby"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04vsz0",
                    "entity_name": "Six World Trade Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09x4h4",
                    "entity_name": "Svalbard Global Seed Vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013dcbw1",
                    "entity_name": "Cross Deep House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086btq",
                    "entity_name": "North York Civic Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qp42s",
                    "entity_name": "Joel Lane House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9kd15",
                    "entity_name": "Cardwell Bush Telegraph"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swm1bf",
                    "entity_name": "Mayfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_mzyh",
                    "entity_name": "Riverside"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_zn_y",
                    "entity_name": "Ponce De Leon Boutique Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkt1x",
                    "entity_name": "Oak Forest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ndsl5x",
                    "entity_name": "Cinedom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025s__q",
                    "entity_name": "Senedd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n6d_3",
                    "entity_name": "Newman Brothers Coffin Furniture Factory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ppqw",
                    "entity_name": "General Post Office, Brisbane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09b86q",
                    "entity_name": "Utah State Capitol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4t2_r",
                    "entity_name": "Bloomfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gc7qm",
                    "entity_name": "Hurtubise House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_w4w9t",
                    "entity_name": "House in the Rhododendrons 6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013db5jd",
                    "entity_name": "Radnor House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c8zn8",
                    "entity_name": "Northwest Territories Legislative Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dgqdz7",
                    "entity_name": "College Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2vfkn",
                    "entity_name": "Art Gallery of New South Wales"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_5h7b",
                    "entity_name": "Grove Mansion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j81t_d",
                    "entity_name": "Ripley Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpppsc",
                    "entity_name": "Malvern"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pvfdj",
                    "entity_name": "C-17"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k9bhcs",
                    "entity_name": "Sanggar Agung Temple"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02www56",
                    "entity_name": "Hayward City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gg60m",
                    "entity_name": "Roman L. Hruska Federal Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fq61rq",
                    "entity_name": "Hullett House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j27_61",
                    "entity_name": "South City Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpxy5w",
                    "entity_name": "Sail and Anchor Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_86vqd",
                    "entity_name": "Victoria Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1gyqf",
                    "entity_name": "Semmelweis Frauen-Klinik"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0287w4s",
                    "entity_name": "Dariush Grand Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0318h0",
                    "entity_name": "Hotel Marshall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03p_pq",
                    "entity_name": "San Francisco City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bdttc",
                    "entity_name": "Courtyard Burlington Harbor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.095y_3",
                    "entity_name": "Hotel Europe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8ytq",
                    "entity_name": "Royal Palace, Luang Prabang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cg_fpz",
                    "entity_name": "del Nomade Eco-Lodge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d0fkx",
                    "entity_name": "Culver Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlb_y1",
                    "entity_name": "San Anselmo Inn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbnj0j",
                    "entity_name": "Edgewood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wg77hs",
                    "entity_name": "TownePlace Suites Mt. Laurel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y646zp",
                    "entity_name": "Douglas House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3f21f",
                    "entity_name": "Doctors Medical Center San Pablo Campus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gjdg8v",
                    "entity_name": "Substation 219"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0btb4m",
                    "entity_name": "Voplex building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c6nky",
                    "entity_name": "Phasael tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p3qrcy",
                    "entity_name": "Commissariat Store, Brisbane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swn7fx",
                    "entity_name": "Coffin Shop"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09_1r0",
                    "entity_name": "Palace of Justice, Putrajaya"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ztj4vg",
                    "entity_name": "La Riviere"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06c32_",
                    "entity_name": "Madison-Lenox Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m03vgr",
                    "entity_name": "Northgate Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swnqnc",
                    "entity_name": "Williams House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ndxn58",
                    "entity_name": "Adelaide Steamship House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swnwd9",
                    "entity_name": "Greenlawn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b_hgb",
                    "entity_name": "Crowne Plaza Key West \u2013 La Concha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z_vd3",
                    "entity_name": "Lackawanna County Courthouse and John Mitchell Monument"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nxhkh",
                    "entity_name": "Haydon Burns Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d55qv",
                    "entity_name": "17 & 19 Newhall Street, Birmingham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpvjh2",
                    "entity_name": "Walker House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6kqcm",
                    "entity_name": "Old House, Pirot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h4mgz",
                    "entity_name": "Flatiron Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j28jjj",
                    "entity_name": "Ford Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swpwfz",
                    "entity_name": "Okolona"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7l05c",
                    "entity_name": "Homespun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fszmy",
                    "entity_name": "2 Marsham Street"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6592f",
                    "entity_name": "Contentment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yhf3f",
                    "entity_name": "Robert C. Ingraham School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w_f2zg",
                    "entity_name": "Courtyard Las Vegas Summerlin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bt_g8",
                    "entity_name": "Round House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3xgl_",
                    "entity_name": "The Wick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vptnrb",
                    "entity_name": "Bellevue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfrq79",
                    "entity_name": "Northbank"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028bffb",
                    "entity_name": "Haines Shoe House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09pbtp",
                    "entity_name": "Round House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn46",
                    "entity_name": "Leaning Tower of Pisa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6h7my",
                    "entity_name": "Glenview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nzsd",
                    "entity_name": "Almaty Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds1hpw",
                    "entity_name": "Pavilions Shopping Centre, Swords"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c1kfg",
                    "entity_name": "North Country Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122sgb3h",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011qfg1w",
                    "entity_name": "Kirchoff's Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hr2dhz",
                    "entity_name": "Lancaster City Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mvxkwf",
                    "entity_name": "Newport Marriott"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dwz3r",
                    "entity_name": "Durfee Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpmp1r",
                    "entity_name": "Clifton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wyylf7",
                    "entity_name": "Plaza Inter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yr_n4j",
                    "entity_name": "66 Portland Place"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tdgfs",
                    "entity_name": "St. Joseph Catholic Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0123hq7l",
                    "entity_name": "Chaonei No. 81"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3m0nf",
                    "entity_name": "South Brisbane Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01167t19",
                    "entity_name": "Bed & Breakfast Matida"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b5v8x",
                    "entity_name": "Castagniers Abbey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cc050",
                    "entity_name": "Marina Towers Observatory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h537fl",
                    "entity_name": "Modern Press Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxf636",
                    "entity_name": "Anderson House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zk2wp",
                    "entity_name": "Corus Quay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.084f2x",
                    "entity_name": "Old Government House, Queensland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vztn6h",
                    "entity_name": "Auburn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgn1js",
                    "entity_name": "Ch\u00e2teau Woolsack"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wwmmh",
                    "entity_name": "Everton Lock-Up"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hnc8p_",
                    "entity_name": "Riem Arcaden"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swpc_m",
                    "entity_name": "Allen House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vptyg3",
                    "entity_name": "Willowdale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3lf8l",
                    "entity_name": "Moran Municipal Generation Station"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbl3yb",
                    "entity_name": "Springfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6dl2v",
                    "entity_name": "Inglewood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010lqlvx",
                    "entity_name": "Taichung City Tun District Art Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rm986",
                    "entity_name": "Gates Computer Science Building, Stanford"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d21j0",
                    "entity_name": "Nannie Lee House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpv8p1",
                    "entity_name": "Crawford House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zxc1d",
                    "entity_name": "Bronco Student Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5pzwk",
                    "entity_name": "First Interstate Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgm1j9",
                    "entity_name": "Highland Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpxm2j",
                    "entity_name": "The Homestead"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gy2q50",
                    "entity_name": "Edgewood Fine Arts Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3vjdw",
                    "entity_name": "Cockerham Vicarage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021g6p",
                    "entity_name": "84 Avenue Foch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0809ysg",
                    "entity_name": "Engineer's Office of the Former Pumping Station"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9v8hk",
                    "entity_name": "Shahidullah Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064p6zp",
                    "entity_name": "Gatlinburg Space Needle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vqb_6",
                    "entity_name": "Hotel Monaco Denver, a Kimpton Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gjl3f2",
                    "entity_name": "H\u00f4tel St. Germain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k2k5sy",
                    "entity_name": "The Melrose Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r54701",
                    "entity_name": "Vendue Inn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b73qf4",
                    "entity_name": "Townsville Post Office"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vplgqw",
                    "entity_name": "Ottawa Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmcn70",
                    "entity_name": "Villa Lysis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kfxdg",
                    "entity_name": "Anna Mann"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yzhh",
                    "entity_name": "McCormick Tribune Campus Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqlvy0",
                    "entity_name": "Padre Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b2jkx",
                    "entity_name": "Concord Free Public Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086zh5",
                    "entity_name": "Customs House, Brisbane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwq2y",
                    "entity_name": "City Gallery Wellington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080lnz9",
                    "entity_name": "Mobberly Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5qflr",
                    "entity_name": "SeaWorld SkyTower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpqfnw",
                    "entity_name": "Oak Lawn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ztf5vy",
                    "entity_name": "Arnheim"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gzvf5",
                    "entity_name": "Rochdale Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmh8t0",
                    "entity_name": "Clough Undergraduate Learning Commons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5ps44",
                    "entity_name": "First Security Bank"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxgj6_",
                    "entity_name": "Annandale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010x7p1x",
                    "entity_name": "J. B. Holman House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swp87z",
                    "entity_name": "Centre for Interactive Research on Sustainability"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03czrvp",
                    "entity_name": "Winchester Symphony House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bp_rd",
                    "entity_name": "Hennepin Center for the Arts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dydj2",
                    "entity_name": "Central Market, Kuala Lumpur"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynyd2d",
                    "entity_name": "Elmhurst"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0136zq89",
                    "entity_name": "Parliament House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxd_4z",
                    "entity_name": "Mount Airy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3tb31",
                    "entity_name": "Boulevard Shopping Feira de Santana"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0113fc90",
                    "entity_name": "Howard Junior High School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p3qz3r",
                    "entity_name": "Porter House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdqlcc",
                    "entity_name": "Hall School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gkd5t",
                    "entity_name": "Langdon Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b__gld",
                    "entity_name": "West Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pzhrm",
                    "entity_name": "Samford Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8lh28",
                    "entity_name": "Chelsea Recreation Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121rzck",
                    "entity_name": "The Grateful Dead House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pqs10",
                    "entity_name": "Bay 101"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gv648",
                    "entity_name": "Fort Dunlop"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jkynqw",
                    "entity_name": "Falmouth Beach Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzrhdv",
                    "entity_name": "DLF Promenade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c7480",
                    "entity_name": "Alex Giualini Plaza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_7x6y",
                    "entity_name": "The Boulevard, Emirates Towers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kfxbd",
                    "entity_name": "Old Dorm Block"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02652sf",
                    "entity_name": "The Pier Shops at Caesars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0420_n_",
                    "entity_name": "Globe Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sghyrk",
                    "entity_name": "Belleview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w_k1q2",
                    "entity_name": "Courtyard San Antonio Medical Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y6fndm",
                    "entity_name": "Bush Mill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010lvfv7",
                    "entity_name": "Five Points Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gcyll",
                    "entity_name": "Buchanan's Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04k5pd9",
                    "entity_name": "Sprague Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0524mzl",
                    "entity_name": "Champasak Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wjl57s",
                    "entity_name": "McAllen Public Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065yn2d",
                    "entity_name": "California Automobile Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8xk7",
                    "entity_name": "Greystone Park Psychiatric Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pc3562",
                    "entity_name": "The Keep, Brighton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0125kwxw",
                    "entity_name": "Walter P. Reuther Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0273s8n",
                    "entity_name": "Blue House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06r70s",
                    "entity_name": "Pete V. Domenici United States Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w18wrt",
                    "entity_name": "Poplar Springs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wk6_h_",
                    "entity_name": "Sterneckerbr\u00e4u"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f0yk2",
                    "entity_name": "Grande Hotel Beira"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.055wcs",
                    "entity_name": "Spinnaker Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pkzxzv",
                    "entity_name": "Fresno City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gbhbn",
                    "entity_name": "Victoria Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05j2g5",
                    "entity_name": "Sapporo TV Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyrcvm",
                    "entity_name": "Walsh's Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jkzmjt",
                    "entity_name": "The Colosseum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7q8km",
                    "entity_name": "Woodville School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b5g0k",
                    "entity_name": "Verkhovna Rada building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynyvc0",
                    "entity_name": "Mitchell House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0262tf",
                    "entity_name": "N\u00e4sinneula tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wsc_tx",
                    "entity_name": "Discovery II C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011qczqx",
                    "entity_name": "Black Horse, Preston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cpmmx",
                    "entity_name": "King's House on Schachen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h99h27",
                    "entity_name": "Moscone West"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkl9z",
                    "entity_name": "Ingleside"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0338d0",
                    "entity_name": "Casa Rosada"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0s8wn17",
                    "entity_name": "Airlie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11btwrm0ry",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cw4ss",
                    "entity_name": "Information Commons, Sheffield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfghrl",
                    "entity_name": "Schloss Stainz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02jkqd",
                    "entity_name": "Manchester Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h64flp",
                    "entity_name": "Ch\u00e2teau Trompette"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxf5tg",
                    "entity_name": "El Mercado de Los Angeles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8_zpt",
                    "entity_name": "Michigan City Public Library Central Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pdcn4_",
                    "entity_name": "Scott's Store"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01167srt",
                    "entity_name": "Maida"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011qf02f",
                    "entity_name": "Rand Water Board Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0drw_hr",
                    "entity_name": "Garlington Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lm2bnt",
                    "entity_name": "Ibiza Rocks Hotel - Club Paraiso"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nfwbxy",
                    "entity_name": "Italian Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbn99h",
                    "entity_name": "Oak Grove"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09_5s3",
                    "entity_name": "College of Medicine Building, Singapore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7zgc0",
                    "entity_name": "Meerhardtturm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z2_sd",
                    "entity_name": "Tan Teck Guan Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmyhr",
                    "entity_name": "Curzon Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dllcbv",
                    "entity_name": "City of Calgary Water Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g57081",
                    "entity_name": "Mint Museum of Toys"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x3pj7",
                    "entity_name": "Wright-Kay Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04g0j5q",
                    "entity_name": "Smith Estate"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5b916",
                    "entity_name": "Taiwan Salt Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w32z_g",
                    "entity_name": "Canberra Outlet Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wyj08",
                    "entity_name": "The Majestic, Singapore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_83q6x",
                    "entity_name": "St. Helens Court"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b60fy",
                    "entity_name": "National Museum of African American History and Culture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b76jq1",
                    "entity_name": "Workingman's Institute and Memorial Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cny5gd",
                    "entity_name": "William Hayden House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fps7rp",
                    "entity_name": "Tour C\u00e9sar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7m7zy",
                    "entity_name": "High Banks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds4mc2",
                    "entity_name": "St. John's Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h5336d",
                    "entity_name": "Frenchman's Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jsh8k5",
                    "entity_name": "Center Street South"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nhhyd8",
                    "entity_name": "Rivi\u00e8re-du-Loup Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p7wp",
                    "entity_name": "Willow Shade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01115j47",
                    "entity_name": "Consolidated Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rl2yn",
                    "entity_name": "Eaton Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076v9fh",
                    "entity_name": "Mesa Laboratory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_lfhj0",
                    "entity_name": "First National Bank"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j623vb",
                    "entity_name": "GVK One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0120zt8_",
                    "entity_name": "Mineshaft"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cqxjm",
                    "entity_name": "Heffron Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r53n",
                    "entity_name": "Museum f\u00fcr Naturkunde"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gq487",
                    "entity_name": "Permian Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s10h4",
                    "entity_name": "St. Johns City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyc8z",
                    "entity_name": "Industrial Exposition Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_f9p5",
                    "entity_name": "Mansfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bh9psz",
                    "entity_name": "Bangalore Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cj5wfx",
                    "entity_name": "Industrial Arts Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n_dqym",
                    "entity_name": "Plain of Six Glaciers Tea House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wyyll4",
                    "entity_name": "Metrocentro Managua"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012zcly7",
                    "entity_name": "The Mall of San Juan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g_fxq",
                    "entity_name": "Scribner House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c4t3p",
                    "entity_name": "McCarthy Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gpn3d",
                    "entity_name": "Cass Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1cpxc",
                    "entity_name": "Westview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rfc6q1",
                    "entity_name": "Dalma Garden Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rxq9c",
                    "entity_name": "Dragon and Tiger Pagodas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c253d",
                    "entity_name": "Yue Hwa Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0lk3q",
                    "entity_name": "Building 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08hy9t",
                    "entity_name": "William McBrien Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s3hxr",
                    "entity_name": "Orion Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043r8nc",
                    "entity_name": "Graphic Arts Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmsph",
                    "entity_name": "Dewberry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f8676",
                    "entity_name": "Khan As'ad Pasha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxdsj0",
                    "entity_name": "The Yard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04g00xw",
                    "entity_name": "Corinthia Hotel London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gqmp0",
                    "entity_name": "The Glass House, Fulham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfyyps",
                    "entity_name": "Farmington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jkrk5",
                    "entity_name": "22 Park Circus, Glasgow"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n4c0cq",
                    "entity_name": "Chips, Manchester"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxg7zw",
                    "entity_name": "Lauderdale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cbm09",
                    "entity_name": "Lauinger Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxqzc5",
                    "entity_name": "Ditchley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kvk1kx",
                    "entity_name": "Vennesla Library and Culture House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfw_f7",
                    "entity_name": "Eagle's Nest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0q56sk6",
                    "entity_name": "Mount Pleasant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0120zrb3",
                    "entity_name": "Insurance Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mxh2d",
                    "entity_name": "JLofts on the Market"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t527lv",
                    "entity_name": "Manassas Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k4ls9",
                    "entity_name": "Estrugamou Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0126b8r6",
                    "entity_name": "SpringHill Suites Atlanta Airport Gateway"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027x6qz",
                    "entity_name": "Chiba Port Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qm0_s",
                    "entity_name": "Lewis Textile Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kd_2n",
                    "entity_name": "Chet Holifield Federal Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09kj60",
                    "entity_name": "Amazon Theatre, Manaus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlkdl8",
                    "entity_name": "Hvidovre Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swn09z",
                    "entity_name": "Fairview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wdrrmm",
                    "entity_name": "Mansion House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cvfln",
                    "entity_name": "Sheboygan Municipal Auditorium and Armory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl73_6",
                    "entity_name": "Asa S. Bushnell Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cfs1y",
                    "entity_name": "122-124 Colmore Row"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gkky1",
                    "entity_name": "34 Montagu Square, Marylebone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swkq6c",
                    "entity_name": "Fairview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gqcck",
                    "entity_name": "Columbia Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010ppy_l",
                    "entity_name": "Lathrop House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8lfq_",
                    "entity_name": "Buena Vista"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047f6rn",
                    "entity_name": "Eugene C. Eppley Administration Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wdm8c",
                    "entity_name": "Beard Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hn8x2g",
                    "entity_name": "The Olde Bell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7l4rw",
                    "entity_name": "Athens Metro Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sggmxz",
                    "entity_name": "Riverwood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hz6l28",
                    "entity_name": "Imperial College Faculty Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sggr55",
                    "entity_name": "Moore House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_02n3",
                    "entity_name": "University Library Freiburg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkh8y0",
                    "entity_name": "Lviv Town Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w3pb3",
                    "entity_name": "Alvin Sherman Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_5srw",
                    "entity_name": "Hampton Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_1j50d",
                    "entity_name": "Blackstone Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kdfrn2",
                    "entity_name": "Quality Inn & Suites Durham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd2zg7",
                    "entity_name": "Atzelberg Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sghdjd",
                    "entity_name": "Rosedale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5b7ps",
                    "entity_name": "Casa de los Dragones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0123kb55",
                    "entity_name": "Endeavour House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0grb2j",
                    "entity_name": "Dolmabah\u00e7e Clock Tower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hphg_2",
                    "entity_name": "Inha University main building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0xplcdl",
                    "entity_name": "Oakforest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047dg10",
                    "entity_name": "Equitable Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yk3x0",
                    "entity_name": "Fay House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0py2php",
                    "entity_name": "Westshore Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01258x0b",
                    "entity_name": "Windsor City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kgc7k",
                    "entity_name": "Abington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxfcq0",
                    "entity_name": "Mount Pleasant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w_jk1f",
                    "entity_name": "Residence Inn San Diego Oceanside"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zd45mf",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.053fh3",
                    "entity_name": "The Streets at Southpoint"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gnpy",
                    "entity_name": "Treasury Casino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b69rks",
                    "entity_name": "Meanach bothy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbxytm",
                    "entity_name": "United States Post Office and Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f5z1y",
                    "entity_name": "Old Perth Technical School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmbcp",
                    "entity_name": "Old St. Paul's, Wellington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05229b8",
                    "entity_name": "Laogai Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cqzyf",
                    "entity_name": "Island House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05d1qjd",
                    "entity_name": "Worthen House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x72qy",
                    "entity_name": "Calgary City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cr0v",
                    "entity_name": "Isokon building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w80mz",
                    "entity_name": "White Horse Tavern"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpknp7",
                    "entity_name": "Inha University 5# building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sgf3r3",
                    "entity_name": "Hope Castle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpqtfk",
                    "entity_name": "Piedmont"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n3wmlt",
                    "entity_name": "Francis Scott Key Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swld15",
                    "entity_name": "Fairview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wdnwnj",
                    "entity_name": "Riverview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfdkfy",
                    "entity_name": "Scott County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxfqcm",
                    "entity_name": "Old Jail"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026zk6_",
                    "entity_name": "Gedung Kuning"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n5vdq_",
                    "entity_name": "Grey House, Carlsberg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r3mt2",
                    "entity_name": "Peddimore Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0495y0p",
                    "entity_name": "Manipal Teaching Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8p5pm",
                    "entity_name": "Parkway Manor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwhtcm",
                    "entity_name": "H. Carl Moultrie Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cwxfz",
                    "entity_name": "Highbury, Birmingham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fznf1",
                    "entity_name": "Paul Martin Sr. Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cmb2",
                    "entity_name": "Corn Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8m45x",
                    "entity_name": "Montgomery Mall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042lp2",
                    "entity_name": "Osgoode Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gqtsw",
                    "entity_name": "Old Main"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzr43z",
                    "entity_name": "St. John's Orphanage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfyf4h",
                    "entity_name": "Dixon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxf6y0",
                    "entity_name": "Mountain Glen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wzymzm",
                    "entity_name": "Chestnut Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sts4",
                    "entity_name": "Oregon Convention Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbh7fc",
                    "entity_name": "H\u00f4tel de Charost"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbnkgb",
                    "entity_name": "Manhattan School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qc8b",
                    "entity_name": "Catete Palace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c2ng5",
                    "entity_name": "Theemuge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03czj41",
                    "entity_name": "Roesch House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4wjf_",
                    "entity_name": "James B. Hunt, Jr. Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpjg23",
                    "entity_name": "Quincy House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vsjs8p",
                    "entity_name": "Gregg House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w7j5x",
                    "entity_name": "Astoria Hotel, Satu Mare"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gcxp0",
                    "entity_name": "Detroit City Hall"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k602gc",
                    "entity_name": "Ericcson Village Building B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w32y66",
                    "entity_name": "Signal Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c005",
                    "entity_name": "Royal Observatory, Greenwich"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jsh8kh",
                    "entity_name": "Center Street North"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010r70lc",
                    "entity_name": "Acuario Inbursa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012byx2m",
                    "entity_name": "Hotel Alpendorf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vnj09",
                    "entity_name": "Providence County Courthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_83wc4",
                    "entity_name": "Urwin's Store"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzr7tb",
                    "entity_name": "Avenel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k602gp",
                    "entity_name": "Ericcson Village Building C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0q3zs7m",
                    "entity_name": "Golden Mine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vxd641",
                    "entity_name": "Harper House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m5xxz",
                    "entity_name": "Ormeley Lodge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_8k1k",
                    "entity_name": "Chelsea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11jgf5bxq",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01ybhz",
                    "entity_name": "Birmingham Central Library"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzvd91",
                    "entity_name": "Douglass School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pq7kv",
                    "entity_name": "Sheffield Bioincubator"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j7rcp",
                    "entity_name": "Residence for Florence and William Tsui"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051xbt_",
                    "entity_name": "Reno Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j64w4p",
                    "entity_name": "General Post Office, Chennai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbv89n",
                    "entity_name": "Young\u2013Quinlan Building"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0q56kpc",
                    "entity_name": "Arrowhead Mall"
                }
            ],
            "function": "<",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.building",
                        "class": "architecture.building",
                        "friendly_name": "Building",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "9^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "9",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.building.floors",
                        "friendly_name": "Floors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.building . \nFILTER (?x1 < \"9\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :architecture.building.floors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.building (lt architecture.building.floors 9^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "20": {
        "generations": "what comic book series is in the same genre as case of the namesake murders??",
        "ori_data_item": {
            "qid": 3203043011000,
            "question": "case of the namesake murders is the same genre as what comic book series?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qknp5",
                    "entity_name": "Kick-Ass"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gwyd",
                    "entity_name": "Civil War"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015jby",
                    "entity_name": "Rogue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09hhxt",
                    "entity_name": "Atomics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059jyc",
                    "entity_name": "Showcase"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04z7tb",
                    "entity_name": "Identity Crisis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kw_5",
                    "entity_name": "Friendly Neighborhood Spider-Man"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027pk7k",
                    "entity_name": "Superman: War of the Worlds"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lkhg4",
                    "entity_name": "JSA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vhpq",
                    "entity_name": "Madman Atomic Comics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051sv_9",
                    "entity_name": "Madman Adventures"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051svn6",
                    "entity_name": "Madman Comics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051sw5q",
                    "entity_name": "Madman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059d4sc",
                    "entity_name": "The Superman Madman Hullabaloo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w7zww",
                    "entity_name": "Final Crisis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gytl38",
                    "entity_name": "Captain America (vol. 5)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_v0t",
                    "entity_name": "Supreme: The New Adventures"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_wcn",
                    "entity_name": "Daredevil, Volume 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_vzs",
                    "entity_name": "The Avengers, Volume 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_t_3",
                    "entity_name": "Supreme"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046vljq",
                    "entity_name": "Green Arrow: The Longbow Hunters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w_s3p",
                    "entity_name": "Project Superpowers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080rdm",
                    "entity_name": "More Fun Comics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03980l",
                    "entity_name": "Journey into Mystery"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08c_g8",
                    "entity_name": "Green Lantern Corps: Recharge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgm28n",
                    "entity_name": "Faust: Love of the Damned"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bvn4c",
                    "entity_name": "Captain America Comics"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_series",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Comic Book Series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_genre",
                        "class": "comic_books.comic_book_genre",
                        "friendly_name": "Comic Book Genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03xkcd6",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Case of the Namesake Murders",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "comic_books.comic_book_genre.comic_book_series_in_this_genre",
                        "friendly_name": "Comic Book Series In This Genre"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.genre",
                        "friendly_name": "Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_series . \n?x1 :type.object.type :comic_books.comic_book_genre . \nVALUES ?x2 { :m.03xkcd6 } \n?x1 :comic_books.comic_book_genre.comic_book_series_in_this_genre ?x0 . \n?x2 :comic_books.comic_book_story.genre ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_series (JOIN (R comic_books.comic_book_genre.comic_book_series_in_this_genre) (JOIN (R comic_books.comic_book_story.genre) m.03xkcd6)))"
        }
    },
    "21": {
        "generations": "what is the name of the director who quoted \"It is an open question whether any behavior based on fear of eternal punishment can be regarded as ethical or should be regarded as merely cowardly.\"?",
        "ori_data_item": {
            "qid": 2105547000000,
            "question": "what is the name of the author who wrote it is an open question whether any behavior based on fear of eternal punishment can be regarded as ethical or should be regarded as merely cowardly.?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ysr",
                    "entity_name": "Margaret Mead"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.director",
                        "class": "film.director",
                        "friendly_name": "Film director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.048dng3",
                        "class": "media_common.quotation",
                        "friendly_name": "It is an open question whether any behavior based on fear of eternal punishment can be regarded as ethical or should be regarded as merely cowardly.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.quotation.author",
                        "friendly_name": "Author"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.director . \nVALUES ?x1 { :m.048dng3 } \n?x1 :media_common.quotation.author ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND film.director (JOIN (R media_common.quotation.author) m.048dng3))"
        }
    },
    "22": {
        "generations": "what breeds of dogs originate from the same place as the belgian shepherd dog??",
        "ori_data_item": {
            "qid": 2102026004000,
            "question": "the breed belgian shepherd dog has its origin in which breed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0154j",
                    "entity_name": "Belgium"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.breed_origin",
                        "class": "biology.breed_origin",
                        "friendly_name": "Breed origin",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02vjst",
                        "class": "biology.animal_breed",
                        "friendly_name": "belgian shepherd dog",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.breed_origin.breeds_originating_here",
                        "friendly_name": "Breeds orginating here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.breed_origin . \nVALUES ?x1 { :m.02vjst } \n?x0 :biology.breed_origin.breeds_originating_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.breed_origin (JOIN biology.breed_origin.breeds_originating_here m.02vjst))"
        }
    },
    "23": {
        "generations": "what is the manufactured drug form that has a patent with the number US Patent 5958446??",
        "ori_data_item": {
            "qid": 2101553014000,
            "question": "what is the manufactured drug form of us patent 5958446",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqd_0",
                    "entity_name": "Daytrana 20 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxl1zm",
                    "entity_name": "Daytrana 30 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxthby",
                    "entity_name": "Daytrana 10 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqnjpr",
                    "entity_name": "Daytrana 10 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkxk5",
                    "entity_name": "Daytrana 30 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq5lx",
                    "entity_name": "Daytrana 15 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxt5nv",
                    "entity_name": "Daytrana 20 patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxs_rq",
                    "entity_name": "Daytrana 15 patch"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqxyw5",
                        "class": "law.us_patent",
                        "friendly_name": "US Patent 5958446",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.patents",
                        "friendly_name": "Patents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.0hqxyw5 } \n?x0 :medicine.manufactured_drug_form.patents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.patents m.0hqxyw5))"
        }
    },
    "24": {
        "generations": "what is the beaufort wind force for waves higher than 7.0??",
        "ori_data_item": {
            "qid": 2103351005000,
            "question": "for waves higher than 7.0 what is the beaufort window force?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1np",
                    "entity_name": "Beaufort force 9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1n6",
                    "entity_name": "Beaufort force 12"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1nj",
                    "entity_name": "Beaufort force 10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1nc",
                    "entity_name": "Beaufort force 11"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.beaufort_wind_force",
                        "class": "meteorology.beaufort_wind_force",
                        "friendly_name": "Beaufort Wind Force",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "7.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "7.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.beaufort_wind_force.wave_height",
                        "friendly_name": "Wave Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.beaufort_wind_force . \nFILTER (?x1 >= \"7.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :meteorology.beaufort_wind_force.wave_height ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.beaufort_wind_force (ge meteorology.beaufort_wind_force.wave_height 7.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "25": {
        "generations": "what short story has a character who also appears in Doing Clarence a Bit of Good??",
        "ori_data_item": {
            "qid": 3203380009000,
            "question": "what short story has a character who also is in doing clarence a bit of good?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gs5hv",
                    "entity_name": "Helping Freddie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gs5hy",
                    "entity_name": "Rallying Round Old George"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gs5hr",
                    "entity_name": "Absent Treatment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010r9gwy",
                    "entity_name": "Disentangling Old Duggie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010rlht0",
                    "entity_name": "The Test Case"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010rlh9d",
                    "entity_name": "Concealed Art"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.short_story",
                        "class": "book.short_story",
                        "friendly_name": "Short Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_character",
                        "class": "book.book_character",
                        "friendly_name": "Book Character",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.09gs5j0",
                        "class": "book.short_story",
                        "friendly_name": "Doing Clarence a Bit of Good",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.short_story.characters",
                        "friendly_name": "Characters"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.book_character.appears_in_stories",
                        "friendly_name": "Appears In Stories"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.short_story . \n?x1 :type.object.type :book.book_character . \nVALUES ?x2 { :m.09gs5j0 } \n?x0 :book.short_story.characters ?x1 . \n?x1 :book.book_character.appears_in_stories ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.short_story (JOIN book.short_story.characters (JOIN book.book_character.appears_in_stories m.09gs5j0)))"
        }
    },
    "26": {
        "generations": "what ingredients are commonly used in french cuisine??",
        "ori_data_item": {
            "qid": 2100730013000,
            "question": "what ingredient is in french cuisine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gl400z",
                    "entity_name": "Quail meat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2b",
                    "entity_name": "Ham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qfdq",
                    "entity_name": "Roux"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.ingredient",
                        "class": "food.ingredient",
                        "friendly_name": "Ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02z3r",
                        "class": "dining.cuisine",
                        "friendly_name": "french cuisine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.ingredient.cuisine",
                        "friendly_name": "Cuisine"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.ingredient . \nVALUES ?x1 { :m.02z3r } \n?x0 :food.ingredient.cuisine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.ingredient (JOIN food.ingredient.cuisine m.02z3r))"
        }
    },
    "27": {
        "generations": "What category of school do Chiang Kai Shek College and Sacred Heart High School (Roseville, Michigan) belong to?",
        "ori_data_item": {
            "qid": 3200352005000,
            "question": "chiang kai shek college and sacred heart high school (roseville, michigan) are in what category of school?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rs41",
                    "entity_name": "Private school"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school_category",
                        "class": "education.school_category",
                        "friendly_name": "School category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02r691g",
                        "class": "education.university",
                        "friendly_name": "Chiang Kai Shek College",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0h7pxp6",
                        "class": "education.school",
                        "friendly_name": "Sacred Heart High School (Roseville, Michigan)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.educational_institution.school_type",
                        "friendly_name": "School type"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "education.school_category.schools_of_this_kind",
                        "friendly_name": "Schools of this kind"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_category . \nVALUES ?x1 { :m.02r691g } \nVALUES ?x2 { :m.0h7pxp6 } \n?x1 :education.educational_institution.school_type ?x0 . \n?x0 :education.school_category.schools_of_this_kind ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school_category (AND (JOIN (R education.educational_institution.school_type) m.02r691g) (JOIN education.school_category.schools_of_this_kind m.0h7pxp6)))"
        }
    },
    "28": {
        "generations": "which genome build is curated by ncbi??",
        "ori_data_item": {
            "qid": 2100002004000,
            "question": "which genome build is curated by the ncbi ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwgby",
                    "entity_name": "Human Genome Build 36.2"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.genome_build",
                        "class": "biology.genome_build",
                        "friendly_name": "Genome Build",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01358j",
                        "class": "biology.genome_curator",
                        "friendly_name": "ncbi",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.genome_build.curator",
                        "friendly_name": "Curator"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.genome_build . \nVALUES ?x1 { :m.01358j } \n?x0 :biology.genome_build.curator ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.genome_build (JOIN biology.genome_build.curator m.01358j))"
        }
    },
    "29": {
        "generations": "what olympic games had more than 63 events??",
        "ori_data_item": {
            "qid": 2104907003000,
            "question": "what olympic games has more than 63 number of events?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qktq5",
                    "entity_name": "2014 Summer Youth Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0130xg",
                    "entity_name": "1906 Intercalated Games"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mfdg",
                    "entity_name": "2014 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018ljb",
                    "entity_name": "1912 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09x3r",
                    "entity_name": "1936 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swbd",
                    "entity_name": "1998 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018qb4",
                    "entity_name": "1908 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018ctl",
                    "entity_name": "2010 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbvb",
                    "entity_name": "2004 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lk8j",
                    "entity_name": "1932 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lv1x",
                    "entity_name": "1928 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbjq",
                    "entity_name": "1924 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jhn7",
                    "entity_name": "1996 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6mp",
                    "entity_name": "1988 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l98s",
                    "entity_name": "1972 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ldqf",
                    "entity_name": "1956 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06sks6",
                    "entity_name": "The London 2012 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0blg2",
                    "entity_name": "1948 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jdk_",
                    "entity_name": "2000 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jkvj",
                    "entity_name": "1976 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbws",
                    "entity_name": "2008 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6m5",
                    "entity_name": "1992 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6vl",
                    "entity_name": "1980 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l998",
                    "entity_name": "1968 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lbbj",
                    "entity_name": "1964 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lbd9",
                    "entity_name": "1960 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lgxj",
                    "entity_name": "1952 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018wrk",
                    "entity_name": "1904 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09n48",
                    "entity_name": "2002 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbvv",
                    "entity_name": "2006 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03chm46",
                    "entity_name": "2010 Summer Youth Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6ny",
                    "entity_name": "1984 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sxrz",
                    "entity_name": "1920 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hk0k",
                    "entity_name": "2012 Summer Paralympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.072xzt",
                    "entity_name": "2014 Winter Paralympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05gj2h",
                    "entity_name": "2020 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cc52_",
                    "entity_name": "2022 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tng8",
                    "entity_name": "2018 Winter Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tnk7",
                    "entity_name": "The 2016 Rio Olympic Games"
                }
            ],
            "function": ">",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "63^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "63",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_games.number_of_events",
                        "friendly_name": "Number Of Events"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_games . \nFILTER (?x1 > \"63\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :olympics.olympic_games.number_of_events ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_games (gt olympics.olympic_games.number_of_events 63^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "30": {
        "generations": "what places of worship are associated with the religion of ismailism??",
        "ori_data_item": {
            "qid": 2100725009000,
            "question": "in the ismailism religion, what is the name of the place of worship?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q69l4",
                    "entity_name": "Aqmar Mosque"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.place_of_worship",
                        "class": "religion.place_of_worship",
                        "friendly_name": "Place of worship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0177x3",
                        "class": "religion.religion",
                        "friendly_name": "ismailism",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.place_of_worship.religion",
                        "friendly_name": "Currently used by religion(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.place_of_worship . \nVALUES ?x1 { :m.0177x3 } \n?x0 :religion.place_of_worship.religion ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.place_of_worship (JOIN religion.place_of_worship.religion m.0177x3))"
        }
    },
    "31": {
        "generations": "what is the bottled water with the lowest amount of nitrates??",
        "ori_data_item": {
            "qid": 2105174000000,
            "question": "the bottled water that has the least amount of nitrates?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d3p_c",
                    "entity_name": "Bling H2O"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.bottled_water",
                        "class": "food.bottled_water",
                        "friendly_name": "Bottled water",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.bottled_water.nitrate_content",
                        "friendly_name": "Nitrate (mg/l)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.bottled_water . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :food.bottled_water . \n?y0 :food.bottled_water.nitrate_content ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :food.bottled_water.nitrate_content ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(ARGMIN food.bottled_water food.bottled_water.nitrate_content)"
        }
    },
    "32": {
        "generations": "which meteorological service is responsible for tracking typhoon saola and other tropical cyclones of the same category??",
        "ori_data_item": {
            "qid": 3202665005000,
            "question": "what is the name of the meteorological service that categorized typhoon saola?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05yb3f",
                    "entity_name": "Australian Bureau of Meteorology"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.meteorological_service",
                        "class": "meteorology.meteorological_service",
                        "friendly_name": "Meteorological service",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0kfky9q",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Typhoon Saola",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "meteorology.tropical_cyclone_category.meteorological_service",
                        "friendly_name": "Meteorological service"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "meteorology.tropical_cyclone_category.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.meteorological_service . \n?x1 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x2 { :m.0kfky9q } \n?x1 :meteorology.tropical_cyclone_category.meteorological_service ?x0 . \n?x1 :meteorology.tropical_cyclone_category.tropical_cyclones ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.meteorological_service (JOIN (R meteorology.tropical_cyclone_category.meteorological_service) (JOIN meteorology.tropical_cyclone_category.tropical_cyclones m.0kfky9q)))"
        }
    },
    "33": {
        "generations": "which book edition is part of the longman fiction series??",
        "ori_data_item": {
            "qid": 2101286004000,
            "question": "what book editions are from series longman fiction series?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04v06_m",
                    "entity_name": "Airport (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04v06v4",
                    "entity_name": "Treasure Island (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04v8lfq",
                    "entity_name": "The Prisoner of Zenda (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04v8ng2",
                    "entity_name": "Silas Marner (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04vxd7l",
                    "entity_name": "Great Gatsby (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04vxf81",
                    "entity_name": "Pride and Prejudice (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09_gkj1",
                    "entity_name": "Great Expectations (Longman Fiction)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09zfhqw",
                    "entity_name": "White Mountains (Longman Fiction)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j10mjv",
                        "class": "book.book_edition_series",
                        "friendly_name": "Longman Fiction series",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition.book_edition_series",
                        "friendly_name": "Book edition series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition . \nVALUES ?x1 { :m.0j10mjv } \n?x0 :book.book_edition.book_edition_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition (JOIN book.book_edition.book_edition_series m.0j10mjv))"
        }
    },
    "34": {
        "generations": "during which tropical cyclone season did the total storms of at most 23 occur??",
        "ori_data_item": {
            "qid": 2103905006000,
            "question": "during which tropical cyclone season did the total storms of at most 23?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l3w9",
                    "entity_name": "2007 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.053v2q",
                    "entity_name": "1927 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bk4cq",
                    "entity_name": "2009 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.066jl7",
                    "entity_name": "2001 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04y5gx_",
                    "entity_name": "2002 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g9svd",
                    "entity_name": "2010 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d4rx",
                    "entity_name": "1988 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hhr_t",
                    "entity_name": "2000 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qztz1",
                    "entity_name": "2002\u201303 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0533x2",
                    "entity_name": "1930 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qjyfn",
                    "entity_name": "2007\u201308 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f2rd3",
                    "entity_name": "2008\u201309 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0539wl",
                    "entity_name": "1928 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039xyy",
                    "entity_name": "1967 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.035tqq",
                    "entity_name": "2004 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093r9q",
                    "entity_name": "1951 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q8nw",
                    "entity_name": "2005 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_1jsx",
                    "entity_name": "2006 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hhrx0",
                    "entity_name": "2002 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08lnm1",
                    "entity_name": "2005 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vkqs7",
                    "entity_name": "2008 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpwhfp",
                    "entity_name": "1964 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0584j8",
                    "entity_name": "1924 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z2n3pw",
                    "entity_name": "2014 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwrl5v",
                    "entity_name": "2014 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgxk",
                    "entity_name": "1991 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cg5p",
                    "entity_name": "1978 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d900",
                    "entity_name": "1989 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vkb3f",
                    "entity_name": "2008 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bbh3",
                    "entity_name": "1920 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036q4l",
                    "entity_name": "2003 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06thyd",
                    "entity_name": "1981 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gbp27",
                    "entity_name": "2010 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgpy",
                    "entity_name": "1995 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0815mw",
                    "entity_name": "1974 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h2fyz",
                    "entity_name": "2009 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqqbqc",
                    "entity_name": "2011 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbjnyr",
                    "entity_name": "1953 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gwc8d",
                    "entity_name": "1998\u201399 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06thvm",
                    "entity_name": "1983 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kvgmwc",
                    "entity_name": "1993\u201394 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03by27",
                    "entity_name": "1974 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzn7p3",
                    "entity_name": "2012 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08wzff",
                    "entity_name": "1977 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d3_d",
                    "entity_name": "1984 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d79ln",
                    "entity_name": "2001\u201302 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v0xk",
                    "entity_name": "1995 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zn259k",
                    "entity_name": "2014 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0370xx",
                    "entity_name": "1999 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06th1t",
                    "entity_name": "1988 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049cpd",
                    "entity_name": "1955 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04p__l7",
                    "entity_name": "1949 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0891tk",
                    "entity_name": "1975 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04y9sb",
                    "entity_name": "1947 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cg5b",
                    "entity_name": "1977 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047nrkz",
                    "entity_name": "1997 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09r1r1",
                    "entity_name": "2007 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07j9n7",
                    "entity_name": "1892 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qxrcx",
                    "entity_name": "2005\u201306 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036zmm",
                    "entity_name": "2001 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04p__kh",
                    "entity_name": "1959 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012nmk18",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047rn3z",
                    "entity_name": "1998 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08xsr6",
                    "entity_name": "1971 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047gp_4",
                    "entity_name": "1968 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gjd8z3",
                    "entity_name": "1965 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nb3pyd",
                    "entity_name": "2013 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d40t",
                    "entity_name": "1986 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06thgd",
                    "entity_name": "1987 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09glbrs",
                    "entity_name": "2010 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8zfy",
                    "entity_name": "1886 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06th_w",
                    "entity_name": "1980 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08zg10",
                    "entity_name": "1969 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0640l55",
                    "entity_name": "2009\u201310 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qxp1n",
                    "entity_name": "2008 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmjwj4",
                    "entity_name": "1961 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cg60",
                    "entity_name": "1979 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h76xc",
                    "entity_name": "2007 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036zsb",
                    "entity_name": "2000 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zqkt",
                    "entity_name": "1942 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd30y4",
                    "entity_name": "2013 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036zj_",
                    "entity_name": "2002 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qmdhr",
                    "entity_name": "1970 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049czx",
                    "entity_name": "1956 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03717w",
                    "entity_name": "1998 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ggy_y",
                    "entity_name": "2000\u201301 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w65xmj",
                    "entity_name": "2013\u201314 South Pacific cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039y5j",
                    "entity_name": "1969 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07c2sq",
                    "entity_name": "1973 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bd9x",
                    "entity_name": "1970 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8zcj",
                    "entity_name": "1888 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04vv4v",
                    "entity_name": "1949 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qzt_f",
                    "entity_name": "2002\u201303 South Pacific cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgmw",
                    "entity_name": "1996 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07j79v",
                    "entity_name": "1893 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03crlc",
                    "entity_name": "1980 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0539qn",
                    "entity_name": "1929 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0392vx",
                    "entity_name": "1959 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qr7t1",
                    "entity_name": "2006\u201307 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0392mh",
                    "entity_name": "1958 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07bh7h",
                    "entity_name": "1903 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgts",
                    "entity_name": "1993 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bnnm",
                    "entity_name": "1971 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hn82zj",
                    "entity_name": "2012 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k7kp",
                    "entity_name": "1917 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqsqww",
                    "entity_name": "2011 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08xd6f",
                    "entity_name": "1975 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04rs63",
                    "entity_name": "2006 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgzm",
                    "entity_name": "1990 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039y2m",
                    "entity_name": "1968 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch3yhs",
                    "entity_name": "2010\u201311 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dwrv",
                    "entity_name": "1894 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmdbkx",
                    "entity_name": "1993 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bxc_",
                    "entity_name": "1972 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0659lx",
                    "entity_name": "1912 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c6f_",
                    "entity_name": "1975 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmdpv_",
                    "entity_name": "1964 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ykmy",
                    "entity_name": "1944 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04nlff",
                    "entity_name": "1950 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vbjs",
                    "entity_name": "1983 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0371_z",
                    "entity_name": "1997 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049t21",
                    "entity_name": "1954 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.038_f2",
                    "entity_name": "1993 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06thhs",
                    "entity_name": "1986 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpm088",
                    "entity_name": "1962 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039q2x",
                    "entity_name": "1966 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06th0q",
                    "entity_name": "1989 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047vqbj",
                    "entity_name": "1852 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t_dlh8",
                    "entity_name": "1853 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08xvl5",
                    "entity_name": "1970 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_1l7z",
                    "entity_name": "1994 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ckvq",
                    "entity_name": "1901 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04typ3",
                    "entity_name": "1951 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vt9r",
                    "entity_name": "1979 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bmm5",
                    "entity_name": "1919 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hhry1",
                    "entity_name": "2001 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n3n35",
                    "entity_name": "1966 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.050qvt",
                    "entity_name": "1939 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d227",
                    "entity_name": "1900 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgkt",
                    "entity_name": "1998 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x7nhj",
                    "entity_name": "1960 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tggp",
                    "entity_name": "2000 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03b4cy",
                    "entity_name": "1992 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cz7s",
                    "entity_name": "1981 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wfd5",
                    "entity_name": "1948 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03db09",
                    "entity_name": "1991 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06thwp",
                    "entity_name": "1982 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zqvb",
                    "entity_name": "1940 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.054bgl",
                    "entity_name": "1926 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkg5y4",
                    "entity_name": "1983\u201384 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbhqfq",
                    "entity_name": "1952 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tglv",
                    "entity_name": "1997 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05tv0x",
                    "entity_name": "1913 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q66x6ntg",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d49h",
                    "entity_name": "1897 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qn14k",
                    "entity_name": "1997\u201398 South Pacific cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026p91w",
                    "entity_name": "1969 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08p9j6",
                    "entity_name": "1887 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_6dbc",
                    "entity_name": "2012\u201313 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080m5k",
                    "entity_name": "1979 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v3cvm2",
                    "entity_name": "1960 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v3f64l",
                    "entity_name": "1961 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012c6czn",
                    "entity_name": "2015 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g565sr",
                    "entity_name": "1867 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d409",
                    "entity_name": "1898 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.12qbhr2xw",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03czf7",
                    "entity_name": "1982 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d987",
                    "entity_name": "1990 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q0r0p",
                    "entity_name": "1854 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hr9xn4",
                    "entity_name": "2012 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d414",
                    "entity_name": "1985 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3z8d5",
                    "entity_name": "2010\u201311 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0466rfn",
                    "entity_name": "1851 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgrn",
                    "entity_name": "1994 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbg_5_",
                    "entity_name": "1951 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmb72d",
                    "entity_name": "1994 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.155r8mxp",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwppzy",
                    "entity_name": "2014 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042ffg",
                    "entity_name": "2004 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qllk",
                    "entity_name": "1915 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0532f1",
                    "entity_name": "1937 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hhrtz",
                    "entity_name": "2004 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmc1k0",
                    "entity_name": "1991 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bb2n",
                    "entity_name": "1922 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lq2rwq",
                    "entity_name": "1986\u201387 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081sfd",
                    "entity_name": "1976 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012ccg98",
                    "entity_name": "2015 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08yy7n",
                    "entity_name": "1973 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jhh16",
                    "entity_name": "1967 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cg4_",
                    "entity_name": "1976 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027zddd",
                    "entity_name": "1883 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03czkv",
                    "entity_name": "1983 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d7g7q",
                    "entity_name": "2000\u201301 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyv3pl",
                    "entity_name": "2011\u201312 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s3g0d",
                    "entity_name": "1880 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047qh4w",
                    "entity_name": "1990 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qzbyw",
                    "entity_name": "2003\u201304 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08wyh3",
                    "entity_name": "1978 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gh61_h",
                    "entity_name": "1869 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkf6m8",
                    "entity_name": "1981\u201382 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkhhdn",
                    "entity_name": "1982\u201383 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.155qlv6h",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yjt1",
                    "entity_name": "1946 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0533tb",
                    "entity_name": "1932 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08_6j_",
                    "entity_name": "1957 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0533gv",
                    "entity_name": "1935 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yk82",
                    "entity_name": "1945 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfj9t_",
                    "entity_name": "1950 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.155prkbp",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.12qbh8kyh",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mdt9",
                    "entity_name": "1891 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04y5j1n",
                    "entity_name": "1870 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k8s8d9",
                    "entity_name": "1956 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d4kh",
                    "entity_name": "1987 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011bd91b",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lpx_mv",
                    "entity_name": "1987\u201388 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012d_17z",
                    "entity_name": "2015 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.053649",
                    "entity_name": "1931 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ths2",
                    "entity_name": "1984 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d4kn",
                    "entity_name": "1896 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05326v",
                    "entity_name": "1938 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yxwh",
                    "entity_name": "1943 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049ctz",
                    "entity_name": "1957 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07j9k0",
                    "entity_name": "1890 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06szbd",
                    "entity_name": "1909 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08xfzb",
                    "entity_name": "1972 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076k3j",
                    "entity_name": "1907 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kvjk3q",
                    "entity_name": "1994\u201395 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8zgn",
                    "entity_name": "1885 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047lkv7",
                    "entity_name": "1995 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0118mgy8",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d3cm",
                    "entity_name": "1899 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ckzm",
                    "entity_name": "1977 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mh6z",
                    "entity_name": "1889 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfggl3",
                    "entity_name": "1961 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076yvc",
                    "entity_name": "1906 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047r2lj",
                    "entity_name": "1996 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05336y",
                    "entity_name": "1936 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t53fhv",
                    "entity_name": "1985\u201386 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6bkzz",
                    "entity_name": "1855 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tzf7",
                    "entity_name": "1953 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bb9x",
                    "entity_name": "1921 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3mlwf",
                    "entity_name": "1958 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k812",
                    "entity_name": "1916 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039d5y",
                    "entity_name": "1965 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s6543",
                    "entity_name": "1882 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ktxlxh",
                    "entity_name": "1994\u201395 South-West Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkh4ng",
                    "entity_name": "1980\u201381 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0584k_",
                    "entity_name": "1923 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06x35h",
                    "entity_name": "1908 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlkdbv",
                    "entity_name": "2011 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f9jg",
                    "entity_name": "1918 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0533ls",
                    "entity_name": "1934 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpy2qq",
                    "entity_name": "1963 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025sdy4",
                    "entity_name": "1884 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkdx56",
                    "entity_name": "1984\u201385 Australian region cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v86cp",
                    "entity_name": "1957 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6l_fw",
                    "entity_name": "1878 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tz39",
                    "entity_name": "1952 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06939m",
                    "entity_name": "1911 Atlantic hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yd1hj",
                    "entity_name": "2009 North Indian Ocean cyclone season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tgj2",
                    "entity_name": "1999 Pacific hurricane season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08_6fx",
                    "entity_name": "1958 Pacific typhoon season"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k94n44",
                    "entity_name": "1954 Pacific hurricane season"
                }
            ],
            "function": "<=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_season",
                        "class": "meteorology.tropical_cyclone_season",
                        "friendly_name": "Tropical cyclone season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "23^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "23",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_season.total_storms",
                        "friendly_name": "Total storms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_season . \nFILTER (?x1 <= \"23\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :meteorology.tropical_cyclone_season.total_storms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_season (le meteorology.tropical_cyclone_season.total_storms 23^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "35": {
        "generations": "who is the TV director who directed episodes featuring Kate Jackson and Delbert McClinton??",
        "ori_data_item": {
            "qid": 2102813005000,
            "question": "who was the director of the episode kate jackson/delbert mcclinton?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dcg_y",
                    "entity_name": "Dave Wilson"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_director",
                        "class": "tv.tv_director",
                        "friendly_name": "TV Director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06xr37r",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "Kate Jackson/Delbert McClinton",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_director.episodes_directed",
                        "friendly_name": "TV Episodes Directed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_director . \nVALUES ?x1 { :m.06xr37r } \n?x0 :tv.tv_director.episodes_directed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_director (JOIN tv.tv_director.episodes_directed m.06xr37r))"
        }
    },
    "36": {
        "generations": "which schools only teach up to grade seven??",
        "ori_data_item": {
            "qid": 2101805006000,
            "question": "grade seven is the highest grade taught at what schools?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf69k",
                    "entity_name": "J. W. Sexsmith Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qg7_q",
                    "entity_name": "J. F. Drake Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076c8wz",
                    "entity_name": "Peabody Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076mg0f",
                    "entity_name": "Lynn Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2qw",
                    "entity_name": "False Creek Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076l0v7",
                    "entity_name": "Green Forest Intermed School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0rq",
                    "entity_name": "Emily Carr Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076c0z0",
                    "entity_name": "Councill Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076ht3_",
                    "entity_name": "Valdez Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nhbl3",
                    "entity_name": "Cole Arts And Science Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5n6",
                    "entity_name": "Dr. A. R. Lord Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fbh0x",
                    "entity_name": "Southlands Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076fqrt",
                    "entity_name": "Westside Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nhpzq",
                    "entity_name": "Sweetwater Branch Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076807y",
                    "entity_name": "Mission Montessori Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dj6s_",
                    "entity_name": "Bowen Island Community School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0763y5s",
                    "entity_name": "Vilonia Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nh4pn",
                    "entity_name": "Drew Central Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c3z1w",
                    "entity_name": "Admiral Seymour Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2zch",
                    "entity_name": "Sir Guy Carleton Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0764b5n",
                    "entity_name": "West Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0764b64",
                    "entity_name": "Whittier Education Campus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0764b7d",
                    "entity_name": "Webb Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07651q9",
                    "entity_name": "Brightwood Education Campus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07651qk",
                    "entity_name": "Brookland Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076621y",
                    "entity_name": "Emery Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766t3b",
                    "entity_name": "Noyes Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0768qz4",
                    "entity_name": "Schendel Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0769jd1",
                    "entity_name": "Burrville Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076kpnx",
                    "entity_name": "Hamilton Center Special Education"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076m5x_",
                    "entity_name": "Langdon Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5sp",
                    "entity_name": "Sir Richard McBride Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dn8q",
                    "entity_name": "Greene Co. Tech Interm. School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yhxdt",
                    "entity_name": "Thunderbird Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0vt",
                    "entity_name": "Lord Roberts Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyldf",
                    "entity_name": "Chief Maquinna Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07695h4",
                    "entity_name": "Fairmead Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zlzr6",
                    "entity_name": "Blessed Sacrament School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0csh28",
                    "entity_name": "Madrona School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf3mk",
                    "entity_name": "Sir Charles Kingsford-Smith Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07632lb",
                    "entity_name": "Decatur Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5py",
                    "entity_name": "Sir Alexander MacKenzie Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766b40",
                    "entity_name": "Grand Valley Early Childhood Literacy Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076nrjg",
                    "entity_name": "Vincent E. Mauro Elementary Math, Science An"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0l3",
                    "entity_name": "Dr. R. E. McKechnie Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dy564",
                    "entity_name": "Maple Grove Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5xg",
                    "entity_name": "Florence Nightingale Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2l1",
                    "entity_name": "George Cunningham Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gn0wk",
                    "entity_name": "Brandywine Springs School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076kz96",
                    "entity_name": "Whitethorn Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zmd8h",
                    "entity_name": "St. Andrew's School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0765bf2",
                    "entity_name": "School For Arts In Learning Pcs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0czz_b",
                    "entity_name": "Sir Wilfrid Laurier Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076mnbt",
                    "entity_name": "Southeast Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028bnpp",
                    "entity_name": "Dr. George M. Weir Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2jb",
                    "entity_name": "Edith Cavell Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5nk",
                    "entity_name": "Dr. H. N. MacCorkindale Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076brtn",
                    "entity_name": "Manzanita Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.075_kdf",
                    "entity_name": "Peakview School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h4rpm",
                    "entity_name": "Lord Strathcona Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d8nrj",
                    "entity_name": "Vancouver Talmud Torah"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.075_hn6",
                    "entity_name": "Cleburne County Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zmfm8",
                    "entity_name": "St. Anthony of Padua School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5yv",
                    "entity_name": "Sir William Osler Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d4dts",
                    "entity_name": "University Hill Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffn67",
                    "entity_name": "Queen Alexandra Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2fy",
                    "entity_name": "Britannia Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766b20",
                    "entity_name": "Elkhorn Village Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ldq7t",
                    "entity_name": "Corpus Christi Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pm3xc",
                    "entity_name": "Sir William Van Horne Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0p_",
                    "entity_name": "Lord Tennyson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5vd",
                    "entity_name": "Mount Pleasant Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07607yx",
                    "entity_name": "Theodore Vick Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc1k3",
                    "entity_name": "Lord Beaconsfield Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766qfq",
                    "entity_name": "South Highlands Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bk57x",
                    "entity_name": "St. Timothy's Classical Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc1pl",
                    "entity_name": "Jules Quesnel Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ddg_s",
                    "entity_name": "Champlain Heights Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076grsk",
                    "entity_name": "Washington Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffnjz",
                    "entity_name": "General Gordon Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf62b",
                    "entity_name": "Laura Secord Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076mfgs",
                    "entity_name": "Sanders Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbc5n",
                    "entity_name": "Liberty Pk Middle Sch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027znk4",
                    "entity_name": "St. Francis Xavier School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0760g26",
                    "entity_name": "Northlake Hills Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07679z9",
                    "entity_name": "Hellstern Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0768grf",
                    "entity_name": "Swifton Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0768qwn",
                    "entity_name": "Capitol Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0763_s7",
                    "entity_name": "Integrity Charter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766f1l",
                    "entity_name": "Holt Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076f_w5",
                    "entity_name": "Hazlewood Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766729",
                    "entity_name": "Coppinville School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc178",
                    "entity_name": "Captain James Cook Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076qdkq",
                    "entity_name": "Benton Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076qvmr",
                    "entity_name": "Duran South"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.075_prh",
                    "entity_name": "Golden Hill Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0762gz5",
                    "entity_name": "Fulton Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07633lg",
                    "entity_name": "Perkins Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07633mh",
                    "entity_name": "Logan Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0769lhw",
                    "entity_name": "Audubon Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076jfdw",
                    "entity_name": "Bethune (mary Mcleod) Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nh8jl",
                    "entity_name": "Millennial Tech Middle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076msxj",
                    "entity_name": "North Star Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zs4_k",
                    "entity_name": "St. Patrick's Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffng4",
                    "entity_name": "Carnarvon Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5m3",
                    "entity_name": "David Livingstone Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026dctd",
                    "entity_name": "Tecumseh Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cq74z",
                    "entity_name": "John Norquay Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076h9zs",
                    "entity_name": "Ozark 7th Grade School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dkp4",
                    "entity_name": "Chico Country Day"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076jyfx",
                    "entity_name": "Mcnair Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f5c93",
                    "entity_name": "Dr. Annie B. Jamieson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076gzy2",
                    "entity_name": "Sherwood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gj_l6",
                    "entity_name": "David Lloyd George Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jbb7h",
                    "entity_name": "St. Jude's Elementary"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07667mt",
                    "entity_name": "Richard Johnson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076qvv7",
                    "entity_name": "Marion Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2sy",
                    "entity_name": "Simon Fraser Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbcv6",
                    "entity_name": "Arizona Academy Of Leadership"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2nt",
                    "entity_name": "Elsie Roy Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v_pkd",
                    "entity_name": "General Wolfe Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0c2",
                    "entity_name": "Shaughnessy Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc1w3",
                    "entity_name": "Sir Wilfred Grenfell Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0762y2x",
                    "entity_name": "Edison-Friendship Public Charter School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076jv11",
                    "entity_name": "Cradleboard School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ccssq",
                    "entity_name": "Quilchena Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0760szl",
                    "entity_name": "Greenbrier Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076ck25",
                    "entity_name": "Saks Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076lvh8",
                    "entity_name": "Paul Dunbar Lawrence School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2g8",
                    "entity_name": "Graham D. Bruce Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076f92g",
                    "entity_name": "Noble Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076nl50",
                    "entity_name": "Hartford Transitional Learning Academy (seco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1klv",
                    "entity_name": "Pierre Elliott Trudeau Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2f7",
                    "entity_name": "Sir Matthew Begbie Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2yh",
                    "entity_name": "Hastings Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07635zp",
                    "entity_name": "Richard E Miller School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2xg",
                    "entity_name": "Grandview Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0763br9",
                    "entity_name": "Engle Day Treatment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059hhpq",
                    "entity_name": "Regent Heights Public School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076ldky",
                    "entity_name": "Lake Hamilton Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_4b98",
                    "entity_name": "Pacific Rim Montessorri Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07657rb",
                    "entity_name": "Oak Park Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076b4f4",
                    "entity_name": "Simpson-Waverly Classical Magnet School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5wf",
                    "entity_name": "Lord Nelson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076f_ky",
                    "entity_name": "Oswalt Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076hq0c",
                    "entity_name": "J. O. Kelly Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076kt9w",
                    "entity_name": "Helen Tyson Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0763bg1",
                    "entity_name": "Russellville Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dwpm",
                    "entity_name": "Acorn Montessori Charter School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076md4h",
                    "entity_name": "Fletcher Walker Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076lhhv",
                    "entity_name": "Bishop Woods School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc1cg",
                    "entity_name": "Renfrew Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0grbp6",
                    "entity_name": "Waverley Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5pl",
                    "entity_name": "Sir William MacDonald Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076b2_s",
                    "entity_name": "Pinkston Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dpb7",
                    "entity_name": "Providence School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766s5h",
                    "entity_name": "Seven Mile School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2rx",
                    "entity_name": "Sir Sandford Fleming Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07668_c",
                    "entity_name": "Howard Road Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf68w",
                    "entity_name": "Lord Selkirk Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766lg6",
                    "entity_name": "Edith B. Storey Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076gk64",
                    "entity_name": "Harmony Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07693x7",
                    "entity_name": "Venture Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076lvhj",
                    "entity_name": "Thomas A Edison School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zs463",
                    "entity_name": "St. Mary's School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zs6cy",
                    "entity_name": "Vancouver Montessori School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0768qyx",
                    "entity_name": "El Capitan Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076c73x",
                    "entity_name": "East Hills Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2mf",
                    "entity_name": "Sir James Douglas Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf5ls",
                    "entity_name": "L'\u00c9cole Bilingue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtxq_",
                    "entity_name": "Our Lady of Perpetual Help School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076f_vf",
                    "entity_name": "Moulton Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0gn",
                    "entity_name": "Trafalgar Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2sl",
                    "entity_name": "Sir John Franklin Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0766p6g",
                    "entity_name": "Surprise Valley Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf38h",
                    "entity_name": "Walter Moberly Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jn8x4",
                    "entity_name": "Our Lady of Sorrows School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc13g",
                    "entity_name": "Queen Elizabeth Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbgbd",
                    "entity_name": "Sloan-Hendrix Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076mz_h",
                    "entity_name": "Palermo Union Community Day"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5_vc",
                    "entity_name": "General Brock Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yhyxv",
                    "entity_name": "Tyee Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dv9v",
                    "entity_name": "Kyrene De Las Manitas School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076nnb3",
                    "entity_name": "Lakeside Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffnqt",
                    "entity_name": "Henry Hudson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dnw6",
                    "entity_name": "Phenix City Intermediate School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zmfsy",
                    "entity_name": "St. Augustine's School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0768v_n",
                    "entity_name": "Zackar Levi Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07647wc",
                    "entity_name": "Bay Farm Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076dq7v",
                    "entity_name": "Highland Middle School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc1f5",
                    "entity_name": "Nootka Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076bzjd",
                    "entity_name": "Belair Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076cskm",
                    "entity_name": "Wish School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffnb0",
                    "entity_name": "Queen Mary Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2_k",
                    "entity_name": "Henderson Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fc0yk",
                    "entity_name": "Lord Kitchener Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbm24",
                    "entity_name": "Kipp Dc Will Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c88jh",
                    "entity_name": "Kerrisdale Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffnyr",
                    "entity_name": "David Oppenheimer Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076cslm",
                    "entity_name": "Milner School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wcxx4",
                    "entity_name": "Bayview Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07614sx",
                    "entity_name": "Irwin O. Addicot Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0765tjm",
                    "entity_name": "Two Rivers Public Charter School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08nh8h8",
                    "entity_name": "Micro Enterprise Charter Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07647ww",
                    "entity_name": "William G. Paden Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbl9_",
                    "entity_name": "Vanguard Classical School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jj5zr",
                    "entity_name": "St. Francis of Assisi Elementary"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076gc1b",
                    "entity_name": "Christopher Columbus Academy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zs3ts",
                    "entity_name": "St. Joseph's School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vbb_b",
                    "entity_name": "Hayden Middle Sch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gf2ld",
                    "entity_name": "Charles Dickens Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076fmh2",
                    "entity_name": "Redway Elementary School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076pply",
                    "entity_name": "Fruita Middle School"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school",
                        "class": "education.school",
                        "friendly_name": "School",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.042_6l",
                        "class": "education.grade_level",
                        "friendly_name": "grade seven",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.school.highest_grade_taught",
                        "friendly_name": "Highest grade taught"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school . \nVALUES ?x1 { :m.042_6l } \n?x0 :education.school.highest_grade_taught ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school (JOIN education.school.highest_grade_taught m.042_6l))"
        }
    },
    "37": {
        "generations": "what aircraft model includes both bataan 1 and bataan 2??",
        "ori_data_item": {
            "qid": 2101169014000,
            "question": "bataan 1 and bataan 2 is what aircraft model?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02s05j",
                    "entity_name": "Mitsubishi G4M"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02q8n_h",
                        "class": "aviation.aircraft",
                        "friendly_name": "Bataan 1 and Bataan 2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_model.aircraft",
                        "friendly_name": "Aircraft"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.02q8n_h } \n?x0 :aviation.aircraft_model.aircraft ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_model (JOIN aviation.aircraft_model.aircraft m.02q8n_h))"
        }
    },
    "38": {
        "generations": "who owns the hotel brand that operates the Los Suenos Marriott Ocean & Golf Resort??",
        "ori_data_item": {
            "qid": 3202869004000,
            "question": "what hotel brand owner owns the brand that los suenos marriott ocean & golf resort is a part of?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fv0k",
                    "entity_name": "Marriott International"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.hotel_brand_owner",
                        "class": "travel.hotel_brand_owner",
                        "friendly_name": "Hotel Brand Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.hotel_brand",
                        "class": "travel.hotel_brand",
                        "friendly_name": "Hotel Brand",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0myy7tq",
                        "class": "travel.hotel",
                        "friendly_name": "Los Suenos Marriott Ocean & Golf Resort",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.hotel_brand.owned_by",
                        "friendly_name": "Owned By"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "travel.hotel.operating_brand",
                        "friendly_name": "Part of Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.hotel_brand_owner . \n?x1 :type.object.type :travel.hotel_brand . \nVALUES ?x2 { :m.0myy7tq } \n?x1 :travel.hotel_brand.owned_by ?x0 . \n?x2 :travel.hotel.operating_brand ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.hotel_brand_owner (JOIN (R travel.hotel_brand.owned_by) (JOIN (R travel.hotel.operating_brand) m.0myy7tq)))"
        }
    },
    "39": {
        "generations": "which endowed organization is led by heather knight??",
        "ori_data_item": {
            "qid": 3203706001000,
            "question": "what endowed organization is of heather knight's organization leadership?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.035774",
                    "entity_name": "Pacific Union College"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.endowed_organization",
                        "class": "organization.endowed_organization",
                        "friendly_name": "Endowed Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "organization.leadership",
                        "class": "organization.leadership",
                        "friendly_name": "Organization leadership",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0glrb20",
                        "class": "business.board_member",
                        "friendly_name": "Heather Knight",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.leadership",
                        "friendly_name": "Leadership"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "organization.leadership.person",
                        "friendly_name": "Person"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.endowed_organization . \n?x1 :type.object.type :organization.leadership . \nVALUES ?x2 { :m.0glrb20 } \n?x0 :organization.organization.leadership ?x1 . \n?x1 :organization.leadership.person ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.endowed_organization (JOIN organization.organization.leadership (JOIN organization.leadership.person m.0glrb20)))"
        }
    },
    "40": {
        "generations": "which hotel grading authority awarded the grade to servigroup papa luna hotel??",
        "ori_data_item": {
            "qid": 3201652010000,
            "question": "which hotel grading authority awards servigroup papa luna hotel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09py1r",
                    "entity_name": "TripAdvisor LLC"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.hotel_grading_authority",
                        "class": "travel.hotel_grading_authority",
                        "friendly_name": "Hotel Grading Authority",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.hotel_grade",
                        "class": "travel.hotel_grade",
                        "friendly_name": "Hotel Grade",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.011nyts3",
                        "class": "travel.hotel",
                        "friendly_name": "Servigroup Papa Luna Hotel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.hotel_grade.awarded_by",
                        "friendly_name": "Awarded By"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "travel.hotel.grade",
                        "friendly_name": "Grade (Stars)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.hotel_grading_authority . \n?x1 :type.object.type :travel.hotel_grade . \nVALUES ?x2 { :m.011nyts3 } \n?x1 :travel.hotel_grade.awarded_by ?x0 . \n?x2 :travel.hotel.grade ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.hotel_grading_authority (JOIN (R travel.hotel_grade.awarded_by) (JOIN (R travel.hotel.grade) m.011nyts3)))"
        }
    },
    "41": {
        "generations": "what multipart TV episode is part of season 2010 of the TV program Frontline (US)??",
        "ori_data_item": {
            "qid": 3204350004000,
            "question": "what is the multipart tv episode from the tv program frontline (us) - season 2010?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gg4b1x",
                    "entity_name": "The Farmer's Wife (1998 film)"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.multipart_tv_episode",
                        "class": "tv.multipart_tv_episode",
                        "friendly_name": "Multipart TV episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0n8gv6l",
                        "class": "tv.tv_series_season",
                        "friendly_name": "Frontline (US) - Season 2010",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.multipart_tv_episode.tv_program",
                        "friendly_name": "TV program"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_program.seasons",
                        "friendly_name": "Seasons"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.multipart_tv_episode . \n?x1 :type.object.type :tv.tv_program . \nVALUES ?x2 { :m.0n8gv6l } \n?x0 :tv.multipart_tv_episode.tv_program ?x1 . \n?x1 :tv.tv_program.seasons ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.multipart_tv_episode (JOIN tv.multipart_tv_episode.tv_program (JOIN tv.tv_program.seasons m.0n8gv6l)))"
        }
    },
    "42": {
        "generations": "who endorsed coke as a product??",
        "ori_data_item": {
            "qid": 3201801015000,
            "question": "who is the endorser of coke products?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q0rh",
                    "entity_name": "Gretchen Bleiler"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.product_endorser",
                        "class": "business.product_endorser",
                        "friendly_name": "Product Endorser",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.product_endorsement",
                        "class": "business.product_endorsement",
                        "friendly_name": "Product Endorsement",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01yvs",
                        "class": "business.endorsed_product",
                        "friendly_name": "coke",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "business.product_endorsement.endorser",
                        "friendly_name": "Endorser"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.product_endorsement.product",
                        "friendly_name": "Product"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_endorser . \n?x1 :type.object.type :business.product_endorsement . \nVALUES ?x2 { :m.01yvs } \n?x1 :business.product_endorsement.endorser ?x0 . \n?x1 :business.product_endorsement.product ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.product_endorser (JOIN (R business.product_endorsement.endorser) (JOIN business.product_endorsement.product m.01yvs)))"
        }
    },
    "43": {
        "generations": "what theater has a capacity greater than or equal to 732 and has staged theatrical productions produced by nica burns??",
        "ori_data_item": {
            "qid": 4302831000000,
            "question": "nica burns's production was staged in what theater with more than 732 seats?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c07cw",
                    "entity_name": "Walter Kerr Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c07rt",
                    "entity_name": "Brooks Atkinson Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t03g",
                    "entity_name": "The Old Vic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dh82",
                    "entity_name": "Garrick Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080phm",
                    "entity_name": "Victoria Palace Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j_vj",
                    "entity_name": "Apollo Theatre"
                }
            ],
            "function": ">=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater",
                        "class": "theater.theater",
                        "friendly_name": "Theater",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "theater.theater_production",
                        "class": "theater.theater_production",
                        "friendly_name": "Theater Production",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "732^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "732",
                        "question_node": 0,
                        "function": ">="
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.043lrs2",
                        "class": "theater.theater_producer",
                        "friendly_name": "Nica Burns",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater.theatrical_productions_staged_here",
                        "friendly_name": "Theatrical productions staged here"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "architecture.venue.capacity",
                        "friendly_name": "Seating capacity"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "theater.theater_production.producer",
                        "friendly_name": "Producer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater . \n?x1 :type.object.type :theater.theater_production . \nFILTER (?x2 >= \"732\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.043lrs2 } \n?x0 :theater.theater.theatrical_productions_staged_here ?x1 . \n?x0 :architecture.venue.capacity ?x2 . \n?x1 :theater.theater_production.producer ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "theater",
                "architecture"
            ],
            "s_expression": "(AND theater.theater (AND (JOIN theater.theater.theatrical_productions_staged_here (JOIN theater.theater_production.producer m.043lrs2)) (ge architecture.venue.capacity 732^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "44": {
        "generations": "what type of accommodation is Sandals Emerald Bay??",
        "ori_data_item": {
            "qid": 2100284000000,
            "question": "the sandals emerald bay is what type of accommodation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02dkrm",
                    "entity_name": "Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0441mq",
                    "entity_name": "All-inclusive resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbr4dw",
                    "entity_name": "Beach Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c8hl29",
                    "entity_name": "Luxury Resort"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.accommodation_type",
                        "class": "travel.accommodation_type",
                        "friendly_name": "Accommodation type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0pw2xrd",
                        "class": "travel.accommodation",
                        "friendly_name": "Sandals Emerald Bay",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.accommodation_type.accommodation_of_this_type",
                        "friendly_name": "Accommodation of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.accommodation_type . \nVALUES ?x1 { :m.0pw2xrd } \n?x0 :travel.accommodation_type.accommodation_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.accommodation_type (JOIN travel.accommodation_type.accommodation_of_this_type m.0pw2xrd))"
        }
    },
    "45": {
        "generations": "who is the honorary degree recipient with the most recent date of birth??",
        "ori_data_item": {
            "qid": 2105493004000,
            "question": "who is the latest born honorary degree recipient?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d48jg",
                    "entity_name": "Nicola Benedetti"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.honorary_degree_recipient",
                        "class": "education.honorary_degree_recipient",
                        "friendly_name": "Honorary Degree Recipient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.date_of_birth",
                        "friendly_name": "Date of birth"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.honorary_degree_recipient . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :education.honorary_degree_recipient . \n?y0 :people.person.date_of_birth ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.date_of_birth ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMAX education.honorary_degree_recipient people.person.date_of_birth)"
        }
    },
    "46": {
        "generations": "which book edition with illustrations by scott fisher has an isbn number??",
        "ori_data_item": {
            "qid": 3204092009000,
            "question": "what is the isbn of the edition with scott fisher on its book cover?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dstjzg",
                    "entity_name": "9780970809476"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.isbn",
                        "class": "book.isbn",
                        "friendly_name": "ISBN",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0dstt37",
                        "class": "book.illustrator",
                        "friendly_name": "Scott Fisher",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.book_edition.isbn",
                        "friendly_name": "ISBN"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "book.illustrator.book_edition_covers",
                        "friendly_name": "Book edition covers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.isbn . \n?x1 :type.object.type :book.book_edition . \nVALUES ?x2 { :m.0dstt37 } \n?x1 :book.book_edition.isbn ?x0 . \n?x2 :book.illustrator.book_edition_covers ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.isbn (JOIN (R book.book_edition.isbn) (JOIN (R book.illustrator.book_edition_covers) m.0dstt37)))"
        }
    },
    "47": {
        "generations": "what periodical is related to the subject of the chess monthly??",
        "ori_data_item": {
            "qid": 3201995001000,
            "question": "which periodical has covered the subject the chess monthly",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mksl",
                    "entity_name": "Jaque"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0br8rn",
                    "entity_name": "Chess magazine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07jjr_",
                    "entity_name": "British Chess Magazine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q0mwc",
                    "entity_name": "EG"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z181y",
                    "entity_name": "Fairy Chess Review"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01str_",
                    "entity_name": "Chess Player's Chronicle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ngx96q",
                    "entity_name": "Die Schwalbe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z0k21",
                    "entity_name": "The Problemist"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b5g87",
                    "entity_name": "Kingpin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m61vf",
                    "entity_name": "64"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ckkcm",
                    "entity_name": "Chess Review"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05l0bg",
                    "entity_name": "New In Chess"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mw3n",
                    "entity_name": "Chess Life"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0415yfp",
                    "entity_name": "Deutsche Schachzeitung"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wwgc9",
                    "entity_name": "International Chess Magazine"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.periodical",
                        "class": "book.periodical",
                        "friendly_name": "Periodical",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.periodical_subject",
                        "class": "book.periodical_subject",
                        "friendly_name": "Periodical Subject",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.027qr0q",
                        "class": "book.periodical",
                        "friendly_name": "The Chess Monthly",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.periodical_subject.periodicals",
                        "friendly_name": "Periodicals"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "book.periodical.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical . \n?x1 :type.object.type :book.periodical_subject . \nVALUES ?x2 { :m.027qr0q } \n?x1 :book.periodical_subject.periodicals ?x0 . \n?x2 :book.periodical.subjects ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.periodical (JOIN (R book.periodical_subject.periodicals) (JOIN (R book.periodical.subjects) m.027qr0q)))"
        }
    },
    "48": {
        "generations": "which rocket manufacturer has manufactured the kosmos 3m rocket??",
        "ori_data_item": {
            "qid": 2101204007000,
            "question": "who was the manufacturer of kosmos 3m?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.033xml",
                    "entity_name": "Yuzhnoye Design Office"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_manufacturer",
                        "class": "spaceflight.rocket_manufacturer",
                        "friendly_name": "Rocket Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03mvcl",
                        "class": "spaceflight.rocket",
                        "friendly_name": "kosmos 3m",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_manufacturer.rockets_manufactured",
                        "friendly_name": "Rockets Manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_manufacturer . \nVALUES ?x1 { :m.03mvcl } \n?x0 :spaceflight.rocket_manufacturer.rockets_manufactured ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_manufacturer (JOIN spaceflight.rocket_manufacturer.rockets_manufactured m.03mvcl))"
        }
    },
    "49": {
        "generations": "which politician is both a film score composer and a vibraphonist??",
        "ori_data_item": {
            "qid": 3201947004000,
            "question": "vibraphonist and film score composer are two titles of which politician?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07yzjr",
                    "entity_name": "Hagood Hardy"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.politician",
                        "class": "government.politician",
                        "friendly_name": "Politician",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04l1gwb",
                        "class": "people.profession",
                        "friendly_name": "Film Score Composer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01663r",
                        "class": "music.musician_profession",
                        "friendly_name": "Vibraphonist",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.profession.people_with_this_profession",
                        "friendly_name": "People With This Profession"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.person.profession",
                        "friendly_name": "Profession"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.politician . \nVALUES ?x1 { :m.04l1gwb } \nVALUES ?x2 { :m.01663r } \n?x1 :people.profession.people_with_this_profession ?x0 . \n?x0 :people.person.profession ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND government.politician (AND (JOIN (R people.profession.people_with_this_profession) m.04l1gwb) (JOIN people.person.profession m.01663r)))"
        }
    },
    "50": {
        "generations": "which architect designed the Katherine Atkins house by Polk??",
        "ori_data_item": {
            "qid": 2101403003000,
            "question": "which architect designed katherine atkins house by polk?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09y0w7",
                    "entity_name": "Willis Polk"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architect",
                        "class": "architecture.architect",
                        "friendly_name": "Architect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02xlcwj",
                        "class": "architecture.structure",
                        "friendly_name": "Katherine Atkins house by Polk",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.architect.structures_designed",
                        "friendly_name": "Structures Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architect . \nVALUES ?x1 { :m.02xlcwj } \n?x0 :architecture.architect.structures_designed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.architect (JOIN architecture.architect.structures_designed m.02xlcwj))"
        }
    },
    "51": {
        "generations": "what drugs have the same shape as delavirdine mesylate 200 tablet??",
        "ori_data_item": {
            "qid": 3206489004000,
            "question": "what drug form shape is the manufactured drug form that has a reference form of delavirdine mesylate 200 tablet?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06g58b",
                    "entity_name": "Oval"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_form_shape",
                        "class": "medicine.drug_form_shape",
                        "friendly_name": "Drug form shape",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hqt1_6",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Delavirdine mesylate 200 tablet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_form_shape.drugs_with_this_shape",
                        "friendly_name": "Drugs with this shape"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "medicine.drug_formulation.reference_form",
                        "friendly_name": "Reference form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_form_shape . \n?x1 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x2 { :m.0hqt1_6 } \n?x0 :medicine.drug_form_shape.drugs_with_this_shape ?x1 . \n?x2 :medicine.drug_formulation.reference_form ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_form_shape (JOIN medicine.drug_form_shape.drugs_with_this_shape (JOIN (R medicine.drug_formulation.reference_form) m.0hqt1_6)))"
        }
    },
    "52": {
        "generations": "what basketball division does the london lightning team belong to??",
        "ori_data_item": {
            "qid": 2101031011000,
            "question": "what division of basketball is london lightning in?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdk50v",
                    "entity_name": "Central Division"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_division",
                        "class": "basketball.basketball_division",
                        "friendly_name": "Basketball Division",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h3vj90",
                        "class": "basketball.basketball_team",
                        "friendly_name": "London Lightning",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_division.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_division . \nVALUES ?x1 { :m.0h3vj90 } \n?x0 :basketball.basketball_division.teams ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_division (JOIN basketball.basketball_division.teams m.0h3vj90))"
        }
    },
    "53": {
        "generations": "what fictional organization is of the same type as the us army??",
        "ori_data_item": {
            "qid": 3200217002000,
            "question": "which other organizations are of the same type as us army?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0czp4k7",
                    "entity_name": "Athens"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0787g",
                    "entity_name": "Starfleet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bhbf93",
                    "entity_name": "The Sacred Band of Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1myv7",
                    "entity_name": "Sacred Band of Thebes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0chtrwn",
                    "entity_name": "Ancient Theban Army"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ck68rv",
                    "entity_name": "Sacred Band of Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgr8tv",
                    "entity_name": "Rankan Alliance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043080d",
                    "entity_name": "The Last Line"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl9pz4",
                    "entity_name": "Mygdonian military"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0kxq9",
                    "entity_name": "Sacred Band of Thebes commanded by Epaminondas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0kzcd",
                    "entity_name": "Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3vns2",
                    "entity_name": "Free Nisibis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl7syp",
                    "entity_name": "Sacred Band"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dkb92w",
                    "entity_name": "Unified Sacred Band"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl7srq",
                    "entity_name": "Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0gnm6",
                    "entity_name": "Black Nisibis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ck96kz",
                    "entity_name": "Sacred Band of Thebes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dgbbm8",
                    "entity_name": "Lemuria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dfwbmp",
                    "entity_name": "Ancient Thebes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn5268",
                    "entity_name": "Sacred Band of Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c_jbpj",
                    "entity_name": "Free Nisibis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cs_596",
                    "entity_name": "Successors"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x8bt",
                    "entity_name": "Stargate Program"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dkb9q3",
                    "entity_name": "Sacred Band of Thebes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl9pyv",
                    "entity_name": "Mygdonian Army"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl7sth",
                    "entity_name": "Unified Sacred Band"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cpmh0k",
                    "entity_name": "Rankan Army"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dg6k5w",
                    "entity_name": "Sanctuary City Guard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h15t",
                    "entity_name": "United Nations Space Command"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q9bf",
                    "entity_name": "Fish Speaker"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch9xxx",
                    "entity_name": "Nisibisi Freemen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0czt9yp",
                    "entity_name": "Sanctuary City Guard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cnb4zd",
                    "entity_name": "Nisibisi Successors"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l70h",
                    "entity_name": "Ancient Macedonian army"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cr46m3",
                    "entity_name": "Tysian Guard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0byxt6",
                    "entity_name": "Night\u2019s Watch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1wxvz",
                    "entity_name": "Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c4fx_g",
                    "entity_name": "Army of Meridian"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wc3wy",
                    "entity_name": "Peacekeepers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0b0ms",
                    "entity_name": "Mercenaries' Guild"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dgg_b",
                    "entity_name": "Kingsguard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02s8_2",
                    "entity_name": "Covenant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wjjzp",
                    "entity_name": "Ender's Jeesh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1py57",
                    "entity_name": "Abarsis's Sacred Band"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization_type",
                        "class": "fictional_universe.fictional_organization_type",
                        "friendly_name": "Fictional Organization Type",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07wh1",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "us army",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization.type_of_organization",
                        "friendly_name": "Type of Organization"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization.type_of_organization",
                        "friendly_name": "Type of Organization"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization . \n?x1 :type.object.type :fictional_universe.fictional_organization_type . \nVALUES ?x2 { :m.07wh1 } \n?x0 :fictional_universe.fictional_organization.type_of_organization ?x1 . \n?x2 :fictional_universe.fictional_organization.type_of_organization ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization (JOIN fictional_universe.fictional_organization.type_of_organization (JOIN (R fictional_universe.fictional_organization.type_of_organization) m.07wh1)))"
        }
    },
    "54": {
        "generations": "which drugs have the mechanism of action of calcium ascorbate, calcium threonate, cholecalciferol, alpha-tocopherol, folic acid, pyridoxine, calcium, iron, ferrous asparto glycinate, doconexent, icosapent, and linolenic acid??",
        "ori_data_item": {
            "qid": 2100672015000,
            "question": "what is calcium ascorbate/calcium threonate/cholecalciferol/.alpha.-tocopherol/folic acid/pyridoxine/calcium/iron/ferrous asparto glycinate/doconexent/icosapent/linolenic acid's drug mechanism of action?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqy8xg",
                    "entity_name": "Phosphate Chelating Activity"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_mechanism_of_action",
                        "class": "medicine.drug_mechanism_of_action",
                        "friendly_name": "Drug mechanism of action",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqvml3",
                        "class": "medicine.drug",
                        "friendly_name": "Calcium ascorbate/Calcium threonate/Cholecalciferol/.alpha.-tocopherol/Folic acid/Pyridoxine/Calcium/Iron/Ferrous asparto glycinate/Doconexent/Icosapent/Linolenic acid",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_mechanism_of_action.drugs_with_this_mechanism_of_action",
                        "friendly_name": "Drugs with this mechanism of action"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_mechanism_of_action . \nVALUES ?x1 { :m.0hqvml3 } \n?x0 :medicine.drug_mechanism_of_action.drugs_with_this_mechanism_of_action ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_mechanism_of_action (JOIN medicine.drug_mechanism_of_action.drugs_with_this_mechanism_of_action m.0hqvml3))"
        }
    },
    "55": {
        "generations": "what geographical feature belongs to the category of islands??",
        "ori_data_item": {
            "qid": 2100008012000,
            "question": "what physical characteristics make up the islands category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047jys",
                    "entity_name": "Manam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fk210",
                    "entity_name": "Umboi Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1dcr",
                    "entity_name": "Sakar Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02002y",
                    "entity_name": "Ischia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h2c3",
                    "entity_name": "Ibiza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09z8hy",
                    "entity_name": "Gasparilla Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g52z",
                    "entity_name": "Majorca"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k02q",
                    "entity_name": "S\u00e3o Vicente"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hnj6",
                    "entity_name": "Ko Tao"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn254",
                    "entity_name": "Bay Farm Island, Alameda, California"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j1t3q4",
                    "entity_name": "African Banks Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034cm",
                    "entity_name": "Great Britain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0171gt",
                    "entity_name": "Alderney"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bkb",
                    "entity_name": "Bali"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_x1",
                    "entity_name": "Jarvis Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jbs5",
                    "entity_name": "Maui"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ms01",
                    "entity_name": "Sark"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hvzb",
                    "entity_name": "Raoul Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hjw0z",
                    "entity_name": "\u00cele Tintamarre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n38b3",
                    "entity_name": "Palm Island, Aruba"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02j8xv",
                    "entity_name": "Cape May"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012bd8",
                    "entity_name": "Bass Rock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012wgb",
                    "entity_name": "Ireland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wvmv2",
                    "entity_name": "Yas Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05cxmc",
                    "entity_name": "Nightingale Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09n132",
                    "entity_name": "Willis Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011hvn",
                    "entity_name": "Saint Martin (Island)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mpp_",
                    "entity_name": "Penguin Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g3bw",
                    "entity_name": "Honshu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynvq6t",
                    "entity_name": "Seal Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064rb4g",
                    "entity_name": "Koos"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmg8",
                    "entity_name": "Ithaca"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0600bs",
                    "entity_name": "Parrot Cay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nqb1",
                    "entity_name": "Tenerife"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06hz6",
                    "entity_name": "Robben Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hb6g",
                    "entity_name": "Tahiti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mscj",
                    "entity_name": "Nisyros"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081l9b",
                    "entity_name": "Robert Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pstn",
                    "entity_name": "Moyenne Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010x71wh",
                    "entity_name": "Hog Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_3bc",
                    "entity_name": "Murray Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03trc3",
                    "entity_name": "Ambrym"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n2fh",
                    "entity_name": "Niuafo'ou"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zw_b1",
                    "entity_name": "Nakanoshima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_mwjzk",
                    "entity_name": "Beachcomber"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_zd1xs",
                    "entity_name": "Ta (island)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d4835",
                    "entity_name": "Alamagan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqp3fq",
                    "entity_name": "Nama"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqsjy3",
                    "entity_name": "Eot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkh836",
                    "entity_name": "Alameda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7l6gq",
                    "entity_name": "Kuroshima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh28m",
                    "entity_name": "Triangle Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dv8",
                    "entity_name": "Taiwan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x24h2z",
                    "entity_name": "Pennock Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0431p5",
                    "entity_name": "Ulleungdo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yhdvh",
                    "entity_name": "Orange Isle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n01bb",
                    "entity_name": "Carriacou"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ll3mlj",
                    "entity_name": "Grimm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p12lr",
                    "entity_name": "Porquerolles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02gtbh",
                    "entity_name": "Mykonos"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yhpp1",
                    "entity_name": "Greenly Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t51rwl",
                    "entity_name": "\u0160tvanice"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xbl5",
                    "entity_name": "Taveuni"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qxc",
                    "entity_name": "Cape Breton Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hz0qjn",
                    "entity_name": "Barbados Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025vtgv",
                    "entity_name": "Bobrof Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jbt3",
                    "entity_name": "Hawaii"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026lsn8",
                    "entity_name": "Weh Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.020l00",
                    "entity_name": "Lampedusa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dm6pz",
                    "entity_name": "Lampione"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nxtj",
                    "entity_name": "Lopez Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080n5p",
                    "entity_name": "Paulet Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0db4kn",
                    "entity_name": "Co\u00ebtivy Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043t_nw",
                    "entity_name": "Ko Kret"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028ttp",
                    "entity_name": "Isle Royale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h55v1l",
                    "entity_name": "Goat Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07psnc",
                    "entity_name": "Praslin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01sbfw",
                    "entity_name": "Stromboli"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010xb1r0",
                    "entity_name": "Saint Marie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01d4wn",
                    "entity_name": "Malta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g59lwy",
                    "entity_name": "Elafonisi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9ltzr",
                    "entity_name": "Nishinoshima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010rzj3m",
                    "entity_name": "H\u00e5ja"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x1vh5t",
                    "entity_name": "South Georgia Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03b5l3",
                    "entity_name": "Kizhi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115mqlx",
                    "entity_name": "Seal Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hf6k",
                    "entity_name": "Bacalao"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0d7t3",
                    "entity_name": "Calf Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01117cdg",
                    "entity_name": "Seal Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f_2t",
                    "entity_name": "Robins Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7krwj",
                    "entity_name": "Bathala"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8f6rs",
                    "entity_name": "Shag Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gkz4y5",
                    "entity_name": "Wuzhizhou Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010ghkls",
                    "entity_name": "Big Pine Key"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dln0pf",
                    "entity_name": "Lo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015r58",
                    "entity_name": "Devil's Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025smcz",
                    "entity_name": "Palm Jumeirah"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pt9v",
                    "entity_name": "Camano Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nt4xv",
                    "entity_name": "Puketutu Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtsxc2",
                    "entity_name": "Barbara Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010xbmm8",
                    "entity_name": "Eleanor Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yf42j",
                    "entity_name": "Damer Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036z8l",
                    "entity_name": "Plum Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h7mthg",
                    "entity_name": "Sandy Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yn8l1",
                    "entity_name": "Blueberry Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtw5p6",
                    "entity_name": "Cardona"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t_cj45",
                    "entity_name": "Frei"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rgyp9",
                    "entity_name": "Peel Island, Cumbria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzy9_9",
                    "entity_name": "Pigeon Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.071nr6",
                    "entity_name": "Karkar Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076bc1",
                    "entity_name": "Feydhoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010fbjsv",
                    "entity_name": "Taklong Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010gmtyd",
                    "entity_name": "Berrien's Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glmmr4",
                    "entity_name": "Pulau Selat Gedung"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zk5hy8",
                    "entity_name": "Jersey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jt603c",
                    "entity_name": "San Anton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yqwg",
                    "entity_name": "Boracay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h594",
                    "entity_name": "Alcatraz Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y658g_",
                    "entity_name": "Baggen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dgq20r",
                    "entity_name": "Cayo Espanto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pwrm",
                    "entity_name": "Machchafushi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yfdsq",
                    "entity_name": "Quarry Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x96bh",
                    "entity_name": "Pig Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lc9n1w",
                    "entity_name": "Grande Terre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011btrhr",
                    "entity_name": "Seal Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kfwt0z",
                    "entity_name": "Tsunoshima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09s1zxz",
                    "entity_name": "Van Don Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0311gd",
                    "entity_name": "Woody Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07psvp",
                    "entity_name": "Cerf Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d60sk",
                    "entity_name": "Seguam Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01028zh1",
                    "entity_name": "Wilderness Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pckzrw",
                    "entity_name": "Wala"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8npcd",
                    "entity_name": "Middle Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011ndlbw",
                    "entity_name": "Terschelling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022dtl",
                    "entity_name": "Berlenga Grande Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gy6jj1",
                    "entity_name": "Round Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zrs6k",
                    "entity_name": "Simbo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06r2x1",
                    "entity_name": "\u00cele Platte"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_0z9mb",
                    "entity_name": "Kelleys Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glmmr7",
                    "entity_name": "Pulau Che Mat Zin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs3r1b",
                    "entity_name": "Balg\u00f6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01115g0r",
                    "entity_name": "Raspberry Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lhj1y",
                    "entity_name": "Svinoy, Caspian Sea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3npkm",
                    "entity_name": "Dolphin Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.092t3m",
                    "entity_name": "Mart\u00edn Garc\u00eda Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.077td0",
                    "entity_name": "Segula Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qs3jg",
                    "entity_name": "Tiger Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n5wssx",
                    "entity_name": "Stephens Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ndjwjw",
                    "entity_name": "Rabbit Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9vg3m",
                    "entity_name": "Bell Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1d3_s",
                    "entity_name": "Tar Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027f5cw",
                    "entity_name": "Moti Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03l1l8",
                    "entity_name": "Grande Comore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mpn7",
                    "entity_name": "Ph\u00fa Qu\u1ed1c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02y_5kr",
                    "entity_name": "Kuramathi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pdb0l",
                    "entity_name": "Tangier Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1p7p",
                    "entity_name": "Paama"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glmmr1",
                    "entity_name": "Pulau Selat Kering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfhp0m",
                    "entity_name": "Sullivan Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rptj",
                    "entity_name": "Tenedos"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzskqk",
                    "entity_name": "Camp Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h3ptq",
                    "entity_name": "Isle of Wight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sgrxpc",
                    "entity_name": "Pe\u00f1\u00f3n de Alhucemas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z_hknj",
                    "entity_name": "Bustins Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0384fk",
                    "entity_name": "Madeira Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9xjs7",
                    "entity_name": "Sarah Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026vhtb",
                    "entity_name": "Harstine Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmcj7b",
                    "entity_name": "Allu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgpxvw",
                    "entity_name": "Sunday Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yhgbx",
                    "entity_name": "Bartlett Rock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbrcqq",
                    "entity_name": "Gull Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010gt22l",
                    "entity_name": "Gilbert Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pdcvn0",
                    "entity_name": "Silda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gsygs",
                    "entity_name": "Ste. Anne Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z5c2",
                    "entity_name": "Savo Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h98pb5",
                    "entity_name": "Strawberry Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cc25",
                    "entity_name": "Moutohora Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0119f5s0",
                    "entity_name": "Seal Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g4yznm",
                    "entity_name": "Deer Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d7bgn",
                    "entity_name": "Aorangi Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kzb0",
                    "entity_name": "Vulcano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011144dx",
                    "entity_name": "Barit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0s8w847",
                    "entity_name": "Stevenson Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zvyjn4",
                    "entity_name": "Saint Helena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010gmmjk",
                    "entity_name": "Bosch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8q8wd",
                    "entity_name": "Gran"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01wwbw",
                    "entity_name": "Chappaquiddick Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gl0g2_",
                    "entity_name": "Tj\u00f6rn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gy6jjh",
                    "entity_name": "\u00cele Cach\u00e9e Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gxzqls",
                    "entity_name": "Werd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b60lh",
                    "entity_name": "Trukhaniv Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j__xcx",
                    "entity_name": "Cyprus"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.geographical_feature",
                        "class": "geography.geographical_feature",
                        "friendly_name": "Geographical Feature",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03s0c",
                        "class": "geography.geographical_feature_category",
                        "friendly_name": "islands",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.geographical_feature.category",
                        "friendly_name": "Category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.geographical_feature . \nVALUES ?x1 { :m.03s0c } \n?x0 :geography.geographical_feature.category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.geographical_feature (JOIN geography.geographical_feature.category m.03s0c))"
        }
    },
    "56": {
        "generations": "what disease is caused by poor wound healing according to medicine.disease_cause??",
        "ori_data_item": {
            "qid": 3202111015000,
            "question": "poor wound healing is a symptom of a disease that causes what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n8qp",
                    "entity_name": "Autoimmunity"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ccypk",
                    "entity_name": "Dissociated sensory loss"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03896",
                    "entity_name": "Genetic disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f6yg",
                    "entity_name": "Insulin resistance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06c6pzg",
                    "entity_name": "Insulin Deficiency"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.disease_cause",
                        "class": "medicine.disease_cause",
                        "friendly_name": "Disease cause",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.disease",
                        "class": "medicine.disease",
                        "friendly_name": "Disease or medical condition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06c4xv3",
                        "class": "medicine.symptom",
                        "friendly_name": "Poor wound healing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.disease_cause.diseases",
                        "friendly_name": "Diseases or conditions caused"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.disease.symptoms",
                        "friendly_name": "Symptoms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.disease_cause . \n?x1 :type.object.type :medicine.disease . \nVALUES ?x2 { :m.06c4xv3 } \n?x0 :medicine.disease_cause.diseases ?x1 . \n?x1 :medicine.disease.symptoms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.disease_cause (JOIN medicine.disease_cause.diseases (JOIN medicine.disease.symptoms m.06c4xv3)))"
        }
    },
    "57": {
        "generations": "how many exhibitions have been created about a subject that was curated by margaret macdonald??",
        "ori_data_item": {
            "qid": 3203950018000,
            "question": "how many exhibition subject is the subject of an exhibition curated by margaret macdonald?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition_subject",
                        "class": "exhibitions.exhibition_subject",
                        "friendly_name": "Exhibition subject",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05x9lqc",
                        "class": "exhibitions.exhibition_curator",
                        "friendly_name": "Margaret MacDonald",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition_subject.exhibitions_created_about_this_subject",
                        "friendly_name": "Exhibitions created about this subject"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "exhibitions.exhibition_curator.exhibitions_curated",
                        "friendly_name": "Exhibitions curated"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \n?x1 :type.object.type :exhibitions.exhibition . \nVALUES ?x2 { :m.05x9lqc } \n?x0 :exhibitions.exhibition_subject.exhibitions_created_about_this_subject ?x1 . \n?x2 :exhibitions.exhibition_curator.exhibitions_curated ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(COUNT (AND exhibitions.exhibition_subject (JOIN exhibitions.exhibition_subject.exhibitions_created_about_this_subject (JOIN (R exhibitions.exhibition_curator.exhibitions_curated) m.05x9lqc))))"
        }
    },
    "58": {
        "generations": "who is the owner of the website jahrbuch f\u00fcr die geschichte der juden und des judenthums??",
        "ori_data_item": {
            "qid": 2102647009000,
            "question": "the online journal, jahrbuch f\u00fcr die geschichte der juden und des judenthums is owned by whom or what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01kc1q",
                    "entity_name": "RWTH Aachen University"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.website_owner",
                        "class": "internet.website_owner",
                        "friendly_name": "Website Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.010bdyj9",
                        "class": "internet.website",
                        "friendly_name": "Jahrbuch f\u00fcr die Geschichte der Juden und des Judenthums",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.website_owner.websites_owned",
                        "friendly_name": "Websites Owned"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.website_owner . \nVALUES ?x1 { :m.010bdyj9 } \n?x0 :internet.website_owner.websites_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.website_owner (JOIN internet.website_owner.websites_owned m.010bdyj9))"
        }
    },
    "59": {
        "generations": "which chef has a background in sociology??",
        "ori_data_item": {
            "qid": 3202083013000,
            "question": "which chef majored in sociology?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047nzdc",
                    "entity_name": "Stephanie Izard"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "dining.chef",
                        "class": "dining.chef",
                        "friendly_name": "Chef",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06ms6",
                        "class": "education.field_of_study",
                        "friendly_name": "Sociology",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.education.student",
                        "friendly_name": "Student"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "education.field_of_study.students_majoring",
                        "friendly_name": "Students majoring in this field"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :dining.chef . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.06ms6 } \n?x1 :education.education.student ?x0 . \n?x2 :education.field_of_study.students_majoring ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND dining.chef (JOIN (R education.education.student) (JOIN (R education.field_of_study.students_majoring) m.06ms6)))"
        }
    },
    "60": {
        "generations": "which tv character shares the same occupation with king edward i??",
        "ori_data_item": {
            "qid": 3202156002000,
            "question": "what tv character has a occupation that is king edward i?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011m28",
                    "entity_name": "Uther Pendragon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05lm5dr",
                    "entity_name": "King Silas Benjamin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09n9szr",
                    "entity_name": "King Stephen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wvglq",
                    "entity_name": "Nunnally Lamperouge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0105wh1c",
                    "entity_name": "Prince John"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wjyj",
                    "entity_name": "Simba"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.075qwwr",
                    "entity_name": "Ludwig II of Bavaria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgh6c3",
                    "entity_name": "King Louis XIV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03fzmh",
                    "entity_name": "Prince Edmund"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ppyww",
                    "entity_name": "Lelouch Lamperouge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04904",
                    "entity_name": "Arthur"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b61d",
                    "entity_name": "Leto Atreides II"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0drf_",
                    "entity_name": "Padm\u00e9 Amidala"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09npmhl",
                    "entity_name": "Queen Victoria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x0rx7",
                    "entity_name": "Cornelia Li Britannia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nw86w",
                    "entity_name": "Queen Elizabeth I"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_v32",
                    "entity_name": "Fenge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.014ww5",
                    "entity_name": "Shaddam Corrino IV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0qrc",
                    "entity_name": "Agamemnon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wvjm9",
                    "entity_name": "King of Hearts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03npwf4",
                    "entity_name": "Charles Di Britannia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x0rdf",
                    "entity_name": "Euphemia Li Britannia"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_character",
                        "class": "tv.tv_character",
                        "friendly_name": "TV Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.047ksm6",
                        "class": "book.poem_character",
                        "friendly_name": "King Edward I",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.character_occupation.characters_with_this_occupation",
                        "friendly_name": "Characters With This Occupation"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.character_occupation.characters_with_this_occupation",
                        "friendly_name": "Characters With This Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_character . \n?x1 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x2 { :m.047ksm6 } \n?x1 :fictional_universe.character_occupation.characters_with_this_occupation ?x0 . \n?x1 :fictional_universe.character_occupation.characters_with_this_occupation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND tv.tv_character (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) (JOIN fictional_universe.character_occupation.characters_with_this_occupation m.047ksm6)))"
        }
    },
    "61": {
        "generations": "which TV program has exactly 195 episodes??",
        "ori_data_item": {
            "qid": 2102158005000,
            "question": "which tv program has 195 episodes",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmg52b",
                    "entity_name": "Beend Banoongaa Ghodi Chadhunga"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047nps7",
                    "entity_name": "123 Sesame Street"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0119nmxm",
                    "entity_name": "Mi segunda madre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vsy3sz",
                    "entity_name": "Kisv\u00e1ros"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06609w7",
                    "entity_name": "Larry the Lawnmower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs6dc3",
                    "entity_name": "Pobre Diabla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0px0r",
                    "entity_name": "Arthur"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_6kz",
                    "entity_name": "The Caroline Rhea Show"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0chmdq",
                    "entity_name": "Strange Paradise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h8v4",
                    "entity_name": "Matlock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jt10yq",
                    "entity_name": "The Bonnie Prudden Show"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0479mjk",
                    "entity_name": "Cuidado con el \u00e1ngel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02sqkh",
                    "entity_name": "Law & Order: Criminal Intent"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026m4z6",
                    "entity_name": "Ford Theatre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030v7y",
                    "entity_name": "Wipeout"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xz9s",
                    "entity_name": "Untalkative Bunny"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012nf2zh",
                    "entity_name": "El amor nunca muere"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmb6xt",
                    "entity_name": "Tamagon the Counselor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09mzzt",
                    "entity_name": "Shoot for the Stars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w1n94",
                    "entity_name": "Dog and Duck"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mf2h9",
                    "entity_name": "Dharam Veer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jbb6g",
                    "entity_name": "3rd Degree"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011vbf3v",
                    "entity_name": "Nightlife"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vsydd3",
                    "entity_name": "Cesty domu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n44zs8",
                    "entity_name": "Time Masters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glphcs",
                    "entity_name": "Munting Heredera"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012mc9v5",
                    "entity_name": "Marcha nupcial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08v980",
                    "entity_name": "Trivial Pursuit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pfy73",
                    "entity_name": "The Lab with Leo Laporte"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dqtt_",
                    "entity_name": "C\u00f3digo Postal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0ph2f",
                    "entity_name": "Jasoos Vijay"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "195^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "195",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.number_of_episodes",
                        "friendly_name": "Number of episodes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { \"195\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tv.tv_program.number_of_episodes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.number_of_episodes 195^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "62": {
        "generations": "which music artist ended their active career in june 1985??",
        "ori_data_item": {
            "qid": 2101635010000,
            "question": "which musical artist stopped being active as musical artist on 1985-06?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01sjnpx",
                    "entity_name": "16 Guns"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.artist",
                        "class": "music.artist",
                        "friendly_name": "Musical Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1985-06^^http://www.w3.org/2001/XMLSchema#gYearMonth",
                        "class": "type.datetime",
                        "friendly_name": "1985-06",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.artist.active_end",
                        "friendly_name": "Active as Musical Artist (end)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.artist . \nVALUES ?x1 { \"1985-06-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYearMonth> } \n?x0 :music.artist.active_end ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.artist (JOIN music.artist.active_end 1985-06^^http://www.w3.org/2001/XMLSchema#gYearMonth))"
        }
    },
    "63": {
        "generations": "which venue has a capacity of 17376??",
        "ori_data_item": {
            "qid": 2100230001000,
            "question": "which venue has 17376 seats?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jgkr",
                    "entity_name": "Hollywood Bowl"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.venue",
                        "class": "architecture.venue",
                        "friendly_name": "Venue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "17376^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "17376",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.venue.capacity",
                        "friendly_name": "Seating capacity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.venue . \nVALUES ?x1 { \"17376\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :architecture.venue.capacity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.venue (JOIN architecture.venue.capacity 17376^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "64": {
        "generations": "which educational institution has a school magazine called george fox university journal??",
        "ori_data_item": {
            "qid": 2102138013000,
            "question": "george fox university journal is part of which school?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02cn6c",
                    "entity_name": "George Fox University"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.educational_institution",
                        "class": "education.educational_institution",
                        "friendly_name": "Educational Institution",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zp1xtf",
                        "class": "education.school_magazine",
                        "friendly_name": "George Fox University Journal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.educational_institution.school_magazines",
                        "friendly_name": "School magazines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.educational_institution . \nVALUES ?x1 { :m.0zp1xtf } \n?x0 :education.educational_institution.school_magazines ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.educational_institution (JOIN education.educational_institution.school_magazines m.0zp1xtf))"
        }
    },
    "65": {
        "generations": "who is the designer of the aston martin db7 zagato??",
        "ori_data_item": {
            "qid": 2101990019000,
            "question": "which automotive designer designed aston martin db7 zagato?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s7m7s",
                    "entity_name": "Elio Zagato"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.designer",
                        "class": "automotive.designer",
                        "friendly_name": "Automotive Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hpsxjc",
                        "class": "automotive.generation",
                        "friendly_name": "Aston Martin DB7 Zagato",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.designer.automobiles_designed",
                        "friendly_name": "Automobiles Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.designer . \nVALUES ?x1 { :m.0hpsxjc } \n?x0 :automotive.designer.automobiles_designed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.designer (JOIN automotive.designer.automobiles_designed m.0hpsxjc))"
        }
    },
    "66": {
        "generations": "what is the handedness of the cricket bowler with the bowling style of Roy Dias??",
        "ori_data_item": {
            "qid": 2103455010000,
            "question": "roy dias's bowling style is described as what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02bm_x",
                    "entity_name": "Right-handed"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.handedness",
                        "class": "sports.handedness",
                        "friendly_name": "Handedness",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07fhw0",
                        "class": "cricket.cricket_bowler",
                        "friendly_name": "Roy Dias",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "cricket.cricket_bowler.bowling_style",
                        "friendly_name": "Bowling Style"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.handedness . \nVALUES ?x1 { :m.07fhw0 } \n?x1 :cricket.cricket_bowler.bowling_style ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND sports.handedness (JOIN (R cricket.cricket_bowler.bowling_style) m.07fhw0))"
        }
    },
    "67": {
        "generations": "which olympic games had exactly 172 events??",
        "ori_data_item": {
            "qid": 2101319004000,
            "question": "find the olympic games that has 172 events.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l998",
                    "entity_name": "1968 Summer Olympics"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "172^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "172",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_games.number_of_events",
                        "friendly_name": "Number Of Events"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_games . \nVALUES ?x1 { \"172\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :olympics.olympic_games.number_of_events ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_games (JOIN olympics.olympic_games.number_of_events 172^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "68": {
        "generations": "How many aircraft manufacturers are in the legal structure of S.A.?",
        "ori_data_item": {
            "qid": 2104991005000,
            "question": "what is the number of aircraft manufacturer in the legal structure of s.a.?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_manufacturer",
                        "class": "aviation.aircraft_manufacturer",
                        "friendly_name": "Aircraft manufacturer",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.015k50",
                        "class": "business.company_type",
                        "friendly_name": "S.A.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.legal_structure",
                        "friendly_name": "Legal structure"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_manufacturer . \nVALUES ?x1 { :m.015k50 } \n?x0 :organization.organization.legal_structure ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(COUNT (AND aviation.aircraft_manufacturer (JOIN organization.organization.legal_structure m.015k50)))"
        }
    },
    "69": {
        "generations": "what is the name of the comet that was discovered earliest??",
        "ori_data_item": {
            "qid": 2103873003000,
            "question": "what is the earliest discovered comet?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q6jdn",
                    "entity_name": "Great Comet of 1577"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.comet",
                        "class": "astronomy.comet",
                        "friendly_name": "Comet",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.astronomical_discovery.discovery_date",
                        "friendly_name": "Discovery Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.comet . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.comet . \n?y0 :astronomy.astronomical_discovery.discovery_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.astronomical_discovery.discovery_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(ARGMIN astronomy.comet astronomy.astronomical_discovery.discovery_date)"
        }
    },
    "70": {
        "generations": "which privately owned vehicle has the lowest milage??",
        "ori_data_item": {
            "qid": 2104048004000,
            "question": "what privately owned vehicle has the smallest milage?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k_q8b",
                    "entity_name": "Ken's 2004 Pontiac GTO"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.privately_owned_vehicle",
                        "class": "automotive.privately_owned_vehicle",
                        "friendly_name": "Privately Owned Vehicle",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.privately_owned_vehicle.milage",
                        "friendly_name": "Milage"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.privately_owned_vehicle . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :automotive.privately_owned_vehicle . \n?y0 :automotive.privately_owned_vehicle.milage ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :automotive.privately_owned_vehicle.milage ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(ARGMIN automotive.privately_owned_vehicle automotive.privately_owned_vehicle.milage)"
        }
    },
    "71": {
        "generations": "which TV series episode is part of season 4 of Beetlejuice??",
        "ori_data_item": {
            "qid": 2101783011000,
            "question": "name the tv episode that has beetlejuice - season 4 in seasons.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcc",
                    "entity_name": "Wizard Of Ooze"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgd6",
                    "entity_name": "A Very Grimm Fairy Tale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjq",
                    "entity_name": "What Makes BJ Run"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgh6",
                    "entity_name": "Foreign Exchange"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggg",
                    "entity_name": "Cabin Fever"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcg",
                    "entity_name": "Sore Feet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghp",
                    "entity_name": "Raging Skull"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjt",
                    "entity_name": "Fast Food"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgb_",
                    "entity_name": "Oh, Brother!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgfx",
                    "entity_name": "A Star Is Bored"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjj",
                    "entity_name": "To Beetle Or Not Beetle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgbx",
                    "entity_name": "Rotten Sports"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgfm",
                    "entity_name": "Mr. Beetlejuice Goes To Town"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgft",
                    "entity_name": "Highs-Ghoul Confidential"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghw",
                    "entity_name": "You're History"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcy",
                    "entity_name": "Beetlegeezer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdl",
                    "entity_name": "Queasy Rider"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghl",
                    "entity_name": "How Green Is My Gallery"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgg2",
                    "entity_name": "The Miss Beauty-Juice Pageant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggy",
                    "entity_name": "Ear's Looking At You"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjb",
                    "entity_name": "Two Heads Are Better Than None"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghs",
                    "entity_name": "Generally Hysterical Hospital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgc8",
                    "entity_name": "It's A Big, Big, Big, Big Ape"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjm",
                    "entity_name": "Moby Richard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggv",
                    "entity_name": "Relatively Pesty"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgfq",
                    "entity_name": "The Chromozone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgj7",
                    "entity_name": "King BJ"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgff",
                    "entity_name": "Family Scarelooms"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgj4",
                    "entity_name": "Goody Two Shoes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggr",
                    "entity_name": "Substitute Creature"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdz",
                    "entity_name": "Ghost Writer In The Sky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgck",
                    "entity_name": "Ghoul Of My Dreams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdh",
                    "entity_name": "Don't BJ And Drive"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgh3",
                    "entity_name": "Prairie Strife"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdd",
                    "entity_name": "Keeping Up With The Boneses"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdw",
                    "entity_name": "The Neitherworld's Least Wanted"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgg8",
                    "entity_name": "Beetlebones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghd",
                    "entity_name": "The Unnatural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggn",
                    "entity_name": "Midnight Scum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgf7",
                    "entity_name": "Beauty And The Beetle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgf1",
                    "entity_name": "The Birdbrain Of Alcatraz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgc2",
                    "entity_name": "Hotel Hello"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgds",
                    "entity_name": "Poe Pourri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgh9",
                    "entity_name": "Not So Peaceful Pines"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcn",
                    "entity_name": "Time Flies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghh",
                    "entity_name": "Vidiots"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjx",
                    "entity_name": "Brinkadoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggk",
                    "entity_name": "Them Bones, Them Bones, Them Funny Bones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgg5",
                    "entity_name": "Catmandu Got His Tongue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgf4",
                    "entity_name": "Ship Of Ghouls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgh0",
                    "entity_name": "Gold Rush Fever"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djghz",
                    "entity_name": "Recipe For Disaster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgj1",
                    "entity_name": "Caddy Shock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djggc",
                    "entity_name": "Poultrygeist"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgd3",
                    "entity_name": "It's A Wonderful Afterlife"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgfb",
                    "entity_name": "Journey To The Centre Of The Neitherworld"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcv",
                    "entity_name": "Sappiest Place On Earth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgjf",
                    "entity_name": "Robbin Juice Of Sherweird Forest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgfj",
                    "entity_name": "In The Schticks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgd9",
                    "entity_name": "Forget Me Nuts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgc5",
                    "entity_name": "Snugglejuice"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgcr",
                    "entity_name": "Super Zeroes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgdp",
                    "entity_name": "Pranks For The Memories"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgd0",
                    "entity_name": "Smell-A-Thon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djgf_",
                    "entity_name": "Creepy Cookies"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_episode",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "TV Episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05djgbt",
                        "class": "tv.tv_series_season",
                        "friendly_name": "Beetlejuice - Season 4",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_episode.season",
                        "friendly_name": "Season"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { :m.05djgbt } \n?x0 :tv.tv_series_episode.season ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.season m.05djgbt))"
        }
    },
    "72": {
        "generations": "who is interested in persson??",
        "ori_data_item": {
            "qid": 2100610002000,
            "question": "persson are interested in what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09p5m",
                    "entity_name": "Hunting"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.interest",
                        "class": "interests.interest",
                        "friendly_name": "Interest",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04yfs7b",
                        "class": "people.person",
                        "friendly_name": "persson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.interest.people_with_this_interest",
                        "friendly_name": "People with this interest"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.interest . \nVALUES ?x1 { :m.04yfs7b } \n?x0 :interests.interest.people_with_this_interest ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.interest (JOIN interests.interest.people_with_this_interest m.04yfs7b))"
        }
    },
    "73": {
        "generations": "Which user profile is located in Montreal and has social networks as their favorite topic?",
        "ori_data_item": {
            "qid": 3201037000000,
            "question": "which is the user profile who lives in montreal and most favors social networks?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nq6_h",
                    "entity_name": "fastpuppy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nq75f",
                    "entity_name": "mp3net"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.052p7",
                        "class": "location.ca_census_division",
                        "friendly_name": "Montreal",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01w362",
                        "class": "common.topic",
                        "friendly_name": "social networks",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.location",
                        "friendly_name": "Where I Live"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "freebase.user_profile.favorite_topics",
                        "friendly_name": "Favorite Freebase Topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.052p7 } \nVALUES ?x2 { :m.01w362 } \n?x0 :freebase.user_profile.location ?x1 . \n?x0 :freebase.user_profile.favorite_topics ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (AND (JOIN freebase.user_profile.location m.052p7) (JOIN freebase.user_profile.favorite_topics m.01w362)))"
        }
    },
    "74": {
        "generations": "which hospital has the earliest opening date according to architecture.structure.opened??",
        "ori_data_item": {
            "qid": 2104337007000,
            "question": "what hospital opened first?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.020pjy",
                    "entity_name": "Bethlem Royal Hospital"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.hospital",
                        "class": "medicine.hospital",
                        "friendly_name": "Hospital",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.structure.opened",
                        "friendly_name": "Opened"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :medicine.hospital . \n?y0 :architecture.structure.opened ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :architecture.structure.opened ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(ARGMIN medicine.hospital architecture.structure.opened)"
        }
    },
    "75": {
        "generations": "which album has a release called part 2??",
        "ori_data_item": {
            "qid": 2100382015000,
            "question": "which albums have part 2 relased?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pb4w9",
                    "entity_name": "Part II"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.album",
                        "class": "music.album",
                        "friendly_name": "Musical Album",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.033_yzv",
                        "class": "music.release",
                        "friendly_name": "part 2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album.releases",
                        "friendly_name": "Releases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album . \nVALUES ?x1 { :m.033_yzv } \n?x0 :music.album.releases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.album (JOIN music.album.releases m.033_yzv))"
        }
    },
    "76": {
        "generations": "who curated the history exhibition??",
        "ori_data_item": {
            "qid": 3200101005000,
            "question": "the curator of the history exhibition type exhibitions is who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hd_0bn",
                    "entity_name": "Richard Rabinowitz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9ksz9",
                    "entity_name": "Hagedorn Foundation Gallery"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition_curator",
                        "class": "exhibitions.exhibition_curator",
                        "friendly_name": "Exhibition curator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04lqfmv",
                        "class": "exhibitions.type_of_exhibition",
                        "friendly_name": "History exhibition",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "exhibitions.exhibition.curators",
                        "friendly_name": "Curators"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "exhibitions.type_of_exhibition.exhibitions_of_this_type",
                        "friendly_name": "Exhibitions of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_curator . \n?x1 :type.object.type :exhibitions.exhibition . \nVALUES ?x2 { :m.04lqfmv } \n?x1 :exhibitions.exhibition.curators ?x0 . \n?x2 :exhibitions.type_of_exhibition.exhibitions_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition_curator (JOIN (R exhibitions.exhibition.curators) (JOIN (R exhibitions.type_of_exhibition.exhibitions_of_this_type) m.04lqfmv)))"
        }
    },
    "77": {
        "generations": "who is the tennis tournament champion who won the least number of titles with J. P. Keane as the winner??",
        "ori_data_item": {
            "qid": 4303058004000,
            "question": "at the first tennis tournament where j. p. keane has a title, who was the champion?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gljbr",
                    "entity_name": "Ernie Parker"
                }
            ],
            "function": "argmin",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tennis.tennis_tournament_champion",
                        "class": "tennis.tennis_tournament_champion",
                        "friendly_name": "Tennis Tournament Champion",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tennis.tennis_tournament_championship",
                        "class": "tennis.tennis_tournament_championship",
                        "friendly_name": "Tennis Tournament Championship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0b65db1",
                        "class": "tennis.tennis_tournament_champion",
                        "friendly_name": "J. P. Keane",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "tennis.tennis_tournament_championship.winner",
                        "friendly_name": "Winner"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tennis.tennis_tournament_championship.year",
                        "friendly_name": "Year"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "tennis.tennis_tournament_champion.tennis_titles",
                        "friendly_name": "Tennis Titles"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament_champion . \n?x1 :type.object.type :tennis.tennis_tournament_championship . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :tennis.tennis_tournament_champion . \n?y1 :type.object.type :tennis.tennis_tournament_championship . \nVALUES ?y3 { :m.0b65db1 } \n?y1 :tennis.tennis_tournament_championship.winner ?y0 . \n?y1 :tennis.tennis_tournament_championship.year ?y2 . \n?y3 :tennis.tennis_tournament_champion.tennis_titles ?y1 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.0b65db1 } \n?x1 :tennis.tennis_tournament_championship.winner ?x0 . \n?x1 :tennis.tennis_tournament_championship.year ?x2 . \n?x3 :tennis.tennis_tournament_champion.tennis_titles ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "tennis"
            ],
            "s_expression": "(ARGMIN (AND tennis.tennis_tournament_champion (JOIN (R tennis.tennis_tournament_championship.winner) (JOIN (R tennis.tennis_tournament_champion.tennis_titles) m.0b65db1))) (JOIN (R tennis.tennis_tournament_championship.winner) tennis.tennis_tournament_championship.year))"
        }
    },
    "78": {
        "generations": "what computer emulator is used for nintendo gameboy??",
        "ori_data_item": {
            "qid": 2102970010000,
            "question": "the computer nintendo gameboy can be emulated by which computer emulator?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03rsz6",
                    "entity_name": "VisualBoyAdvance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rc727",
                    "entity_name": "NO$GMB"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027z824",
                    "entity_name": "GpSP"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0883_j",
                    "entity_name": "Phoinix"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_emulator",
                        "class": "computer.computer_emulator",
                        "friendly_name": "Computer Emulator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dv3zf",
                        "class": "computer.computer",
                        "friendly_name": "nintendo gameboy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer_emulator.computer",
                        "friendly_name": "Emulated Computer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_emulator . \nVALUES ?x1 { :m.0dv3zf } \n?x0 :computer.computer_emulator.computer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer_emulator (JOIN computer.computer_emulator.computer m.0dv3zf))"
        }
    },
    "79": {
        "generations": "what book binding is used for editions with interior illustrations by john schoenherr??",
        "ori_data_item": {
            "qid": 3203632012000,
            "question": "what kind of binding does the book edition of interior illustrations written by john schoenherr have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dq14",
                    "entity_name": "Trade paperback"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_binding",
                        "class": "book.book_binding",
                        "friendly_name": "Book Binding",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04vz37",
                        "class": "book.illustrator",
                        "friendly_name": "John Schoenherr",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.book_edition.binding",
                        "friendly_name": "Binding/format"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.book_edition.interior_illustrations_by",
                        "friendly_name": "Interior illustrations by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_binding . \n?x1 :type.object.type :book.book_edition . \nVALUES ?x2 { :m.04vz37 } \n?x1 :book.book_edition.binding ?x0 . \n?x1 :book.book_edition.interior_illustrations_by ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_binding (JOIN (R book.book_edition.binding) (JOIN book.book_edition.interior_illustrations_by m.04vz37)))"
        }
    },
    "80": {
        "generations": "which book edition series has jo fletcher as the series editor??",
        "ori_data_item": {
            "qid": 2102206017000,
            "question": "which bool edition series did jo fletcher edit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01tjzh",
                    "entity_name": "Fantasy Masterworks"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09wthw3",
                        "class": "book.series_editor",
                        "friendly_name": "Jo Fletcher",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition_series.series_editor",
                        "friendly_name": "Series editor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition_series . \nVALUES ?x1 { :m.09wthw3 } \n?x0 :book.book_edition_series.series_editor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition_series (JOIN book.book_edition_series.series_editor m.09wthw3))"
        }
    },
    "81": {
        "generations": "which fictional character has Marjorie McQueen as their child??",
        "ori_data_item": {
            "qid": 2100055003000,
            "question": "what fictional character's child is marjorie mcqueen?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cl45dv",
                    "entity_name": "Queenie McQueen"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03d2vr7",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Marjorie McQueen",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.children",
                        "friendly_name": "Children"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.03d2vr7 } \n?x0 :fictional_universe.fictional_character.children ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.children m.03d2vr7))"
        }
    },
    "82": {
        "generations": "what are the sub-categories of gas turbine engine in the engineering engine category??",
        "ori_data_item": {
            "qid": 2101327006000,
            "question": "gas turbine engine is a subcategory of which category of engine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l5g",
                    "entity_name": "Turbine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.engine_category",
                        "class": "engineering.engine_category",
                        "friendly_name": "Engine category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0g0kn",
                        "class": "engineering.engine_category",
                        "friendly_name": "gas turbine engine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.engine_category.sub_categories",
                        "friendly_name": "Sub-categories"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.engine_category . \nVALUES ?x1 { :m.0g0kn } \n?x0 :engineering.engine_category.sub_categories ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.engine_category (JOIN engineering.engine_category.sub_categories m.0g0kn))"
        }
    },
    "83": {
        "generations": "which mission destination has had missions sent to it by phoenix??",
        "ori_data_item": {
            "qid": 2102916021000,
            "question": "phoenix mission destination is where?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09cws",
                    "entity_name": "Mars"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.mission_destination",
                        "class": "spaceflight.mission_destination",
                        "friendly_name": "Mission destination",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02bd1w",
                        "class": "spaceflight.space_mission",
                        "friendly_name": "Phoenix",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.mission_destination.missions_sent_here",
                        "friendly_name": "Missions sent here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.mission_destination . \nVALUES ?x1 { :m.02bd1w } \n?x0 :spaceflight.mission_destination.missions_sent_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.mission_destination (JOIN spaceflight.mission_destination.missions_sent_here m.02bd1w))"
        }
    },
    "84": {
        "generations": "what is the cytogenetic band of chromosome 3 (human) at a specific locus??",
        "ori_data_item": {
            "qid": 3205240004000,
            "question": "what cytogenetic band associated with a genomic locus is also associated with chromosome 3 (human)?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkdg",
                    "entity_name": "Human Cytogenetic Band 3q12.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk3g",
                    "entity_name": "Human Cytogenetic Band 3p21.31"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjwl",
                    "entity_name": "Human Cytogenetic Band 3p26.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkh8",
                    "entity_name": "Human Cytogenetic Band 3q13.31"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk4l",
                    "entity_name": "Human Cytogenetic Band 3p21.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkf0",
                    "entity_name": "Human Cytogenetic Band 3q13.11"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwknx",
                    "entity_name": "Human Cytogenetic Band 3q24"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkjd",
                    "entity_name": "Human Cytogenetic Band 3q13.33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkln",
                    "entity_name": "Human Cytogenetic Band 3q22.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkwn",
                    "entity_name": "Human Cytogenetic Band 3q27.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk16",
                    "entity_name": "Human Cytogenetic Band 3p22.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkpg",
                    "entity_name": "Human Cytogenetic Band 3q25.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkcb",
                    "entity_name": "Human Cytogenetic Band 3q12.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk7d",
                    "entity_name": "Human Cytogenetic Band 3p12.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwksv",
                    "entity_name": "Human Cytogenetic Band 3q26.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkgq",
                    "entity_name": "Human Cytogenetic Band 3q13.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkhv",
                    "entity_name": "Human Cytogenetic Band 3q13.32"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk40",
                    "entity_name": "Human Cytogenetic Band 3p21.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk68",
                    "entity_name": "Human Cytogenetic Band 3p14.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk7z",
                    "entity_name": "Human Cytogenetic Band 3p12.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkxs",
                    "entity_name": "Human Cytogenetic Band 3q28"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkms",
                    "entity_name": "Human Cytogenetic Band 3q22.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkm6",
                    "entity_name": "Human Cytogenetic Band 3q22.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjy8",
                    "entity_name": "Human Cytogenetic Band 3p25.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkyb",
                    "entity_name": "Human Cytogenetic Band 3q29"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkb6",
                    "entity_name": "Human Cytogenetic Band 3q11.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk54",
                    "entity_name": "Human Cytogenetic Band 3p14.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkr4",
                    "entity_name": "Human Cytogenetic Band 3q25.32"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkkj",
                    "entity_name": "Human Cytogenetic Band 3q21.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk8j",
                    "entity_name": "Human Cytogenetic Band 3p12.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjx4",
                    "entity_name": "Human Cytogenetic Band 3p26.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjw0",
                    "entity_name": "Human Cytogenetic Band 3p26.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwktz",
                    "entity_name": "Human Cytogenetic Band 3q26.32"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk1s",
                    "entity_name": "Human Cytogenetic Band 3p22.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk6v",
                    "entity_name": "Human Cytogenetic Band 3p13"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjyv",
                    "entity_name": "Human Cytogenetic Band 3p25.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkcx",
                    "entity_name": "Human Cytogenetic Band 3q12.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk2b",
                    "entity_name": "Human Cytogenetic Band 3p21.33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjzz",
                    "entity_name": "Human Cytogenetic Band 3p24.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk5q",
                    "entity_name": "Human Cytogenetic Band 3p14.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkvj",
                    "entity_name": "Human Cytogenetic Band 3q26.33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkql",
                    "entity_name": "Human Cytogenetic Band 3q25.31"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkq0",
                    "entity_name": "Human Cytogenetic Band 3q25.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkg4",
                    "entity_name": "Human Cytogenetic Band 3q13.13"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkjz",
                    "entity_name": "Human Cytogenetic Band 3q21.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk0n",
                    "entity_name": "Human Cytogenetic Band 3p22.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjxq",
                    "entity_name": "Human Cytogenetic Band 3p25.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk02",
                    "entity_name": "Human Cytogenetic Band 3p23"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk92",
                    "entity_name": "Human Cytogenetic Band 3p11.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkx6",
                    "entity_name": "Human Cytogenetic Band 3q27.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwktd",
                    "entity_name": "Human Cytogenetic Band 3q26.31"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk2x",
                    "entity_name": "Human Cytogenetic Band 3p21.32"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwk9n",
                    "entity_name": "Human Cytogenetic Band 3p11.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwks8",
                    "entity_name": "Human Cytogenetic Band 3q26.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkl2",
                    "entity_name": "Human Cytogenetic Band 3q21.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjzd",
                    "entity_name": "Human Cytogenetic Band 3p24.3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkbs",
                    "entity_name": "Human Cytogenetic Band 3q11.2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkfl",
                    "entity_name": "Human Cytogenetic Band 3q13.12"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkw2",
                    "entity_name": "Human Cytogenetic Band 3q27.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwkrq",
                    "entity_name": "Human Cytogenetic Band 3q25.33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwj_j",
                    "entity_name": "Human Cytogenetic Band 3p24.1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwknb",
                    "entity_name": "Human Cytogenetic Band 3q23"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.cytogenetic_band",
                        "class": "biology.cytogenetic_band",
                        "friendly_name": "Cytogenetic Band",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.genomic_locus",
                        "class": "biology.genomic_locus",
                        "friendly_name": "Genomic Locus",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02kwgh9",
                        "class": "biology.chromosome",
                        "friendly_name": "Chromosome 3 (human)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.cytogenetic_band.locus",
                        "friendly_name": "Locus"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "biology.chromosome.locus",
                        "friendly_name": "Locus"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.cytogenetic_band . \n?x1 :type.object.type :biology.genomic_locus . \nVALUES ?x2 { :m.02kwgh9 } \n?x0 :biology.cytogenetic_band.locus ?x1 . \n?x2 :biology.chromosome.locus ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.cytogenetic_band (JOIN biology.cytogenetic_band.locus (JOIN (R biology.chromosome.locus) m.02kwgh9)))"
        }
    },
    "85": {
        "generations": "which cricket umpire has refereed at most 5 test matches??",
        "ori_data_item": {
            "qid": 2104555008000,
            "question": "who referred less than 5 test matches?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkdlj",
                    "entity_name": "P. W. Vidanagamage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbltr6",
                    "entity_name": "Narayan Sane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012m7_k4",
                    "entity_name": "George Beet senior"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03y93zc",
                    "entity_name": "James Street"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05gqqv",
                    "entity_name": "Frank Tarrant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bfdnk",
                    "entity_name": "Enamul Haque"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vnbtf",
                    "entity_name": "Tyron Wijewardene"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07djxt",
                    "entity_name": "Dick Barlow"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08q6n3",
                    "entity_name": "Eric Tindill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0919j6",
                    "entity_name": "Jeremy Lloyds"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bb724",
                    "entity_name": "Jack Cowie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7phc_",
                    "entity_name": "David Kinsella"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w61sx2",
                    "entity_name": "Alane Felsinger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qx635",
                    "entity_name": "Douglas James Smith"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r1kvr",
                    "entity_name": "Brian Jerling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07qxjr",
                    "entity_name": "Curtis Reid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09f1_v",
                    "entity_name": "Arthur Richardson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09yg4k",
                    "entity_name": "Frank Smith"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b9mts",
                    "entity_name": "Nadeem Ghauri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7lcyr",
                    "entity_name": "Barry Lambson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbhqpz",
                    "entity_name": "Oscar Montgomery"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w679j9",
                    "entity_name": "Charles Bain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm7zb",
                    "entity_name": "Amjad Qureshi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026s60h",
                    "entity_name": "Doris Turner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02prl4c",
                    "entity_name": "Barry Dudleston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f61jf",
                    "entity_name": "Claud Woolley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06vs84",
                    "entity_name": "Neil Mallender"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07b88d",
                    "entity_name": "Allen Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07fk3h",
                    "entity_name": "Ellis Achong"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09qq82",
                    "entity_name": "Len Braund"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09sx7y",
                    "entity_name": "Mick Harvey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cr1n0",
                    "entity_name": "Chris Gaffaney"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkxnf",
                    "entity_name": "John West"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rvkng",
                    "entity_name": "Shavir Tarapore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bq2yl",
                    "entity_name": "Bill Ashdown"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crfvlg",
                    "entity_name": "Udaya Wickramasinghe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjl90",
                    "entity_name": "Courtenay Reece"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7k81r",
                    "entity_name": "Bill Gwynne"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p29z",
                    "entity_name": "Masood Salahuddin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjpb_",
                    "entity_name": "John Warner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh1gj",
                    "entity_name": "Albert Warner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4y3mb",
                    "entity_name": "C. D. Coote"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6bjz1",
                    "entity_name": "John Brown"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5vty_",
                    "entity_name": "Wilf Diedricks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7lc2b",
                    "entity_name": "Albert Jelley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7n75c",
                    "entity_name": "Mahbubur Rahman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5t77t",
                    "entity_name": "Carl Coetzee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4_fdh",
                    "entity_name": "Clyde Duncan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5y881",
                    "entity_name": "A. F. M. Akhtaruddin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbg8t4",
                    "entity_name": "C. Saunders"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjss2",
                    "entity_name": "Edward Page"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wblmsv",
                    "entity_name": "V. Vikramraju"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6784w",
                    "entity_name": "Harry Adams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkh6b",
                    "entity_name": "J. Reid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbn8w2",
                    "entity_name": "W. J. Routledge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w64qtp",
                    "entity_name": "Victor Guillen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6ht53",
                    "entity_name": "R. Cole"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p21f",
                    "entity_name": "M. Y. Gupte"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08r77d",
                    "entity_name": "Arthur G. Jenkins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6bh39",
                    "entity_name": "D. D. Desai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7ppxh",
                    "entity_name": "Clyde Harris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w61vlt",
                    "entity_name": "Johnny Gayle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6htkq",
                    "entity_name": "William Creese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7m8h2",
                    "entity_name": "Badge Menzies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p7qf",
                    "entity_name": "Wilhelm Marais"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4wm78",
                    "entity_name": "Donald Burns"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjvrf",
                    "entity_name": "Geoffrey Treadwell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbhtch",
                    "entity_name": "Sadique Mohammed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbk5np",
                    "entity_name": "Andrew Weekes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wblqrf",
                    "entity_name": "Munawar Hussain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w505g0",
                    "entity_name": "Douglas Dumbleton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmfzl",
                    "entity_name": "Melville Pengelly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w508fv",
                    "entity_name": "Owen Davies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w677qt",
                    "entity_name": "Dooland Buultjens"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbk4l1",
                    "entity_name": "G. Parry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjfvf",
                    "entity_name": "K. Parthasarathy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7mzyz",
                    "entity_name": "S. B. Kulkarni"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj62m",
                    "entity_name": "Edward Ward"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbn79m",
                    "entity_name": "Umar Khan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbn8rf",
                    "entity_name": "Basil Vine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5y6f0",
                    "entity_name": "Sunit Ghosh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w64hfn",
                    "entity_name": "Edward Brook"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7ndl4",
                    "entity_name": "Okey McCabe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6ftlw",
                    "entity_name": "Akhtar Hussain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmz3r",
                    "entity_name": "W. B. Ryan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w64q9j",
                    "entity_name": "Jack Badley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7ptf3",
                    "entity_name": "Lewis Johnston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj_nx",
                    "entity_name": "Richard Torrance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbnljs",
                    "entity_name": "Murawwat Hussain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rqwf",
                    "entity_name": "Jack Collins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w504rg",
                    "entity_name": "A. Birkett"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6hhgs",
                    "entity_name": "James Draper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7pgvc",
                    "entity_name": "Christopher King"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbhbt3",
                    "entity_name": "Toby Rollox"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7msk1",
                    "entity_name": "Carlton John"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbnjfc",
                    "entity_name": "S. R. Ramchandra Rao"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wkrcrl",
                    "entity_name": "Joel Wilson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w64ql2",
                    "entity_name": "Habib Choudhury"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7ppkv",
                    "entity_name": "Khalid Aziz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5y70k",
                    "entity_name": "Sam Burke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7lmq9",
                    "entity_name": "Rajan Mehra"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7pjrv",
                    "entity_name": "Sandy Lloyd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbhr0p",
                    "entity_name": "Harold Walcott"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj284",
                    "entity_name": "Terry Pearce"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjjyp",
                    "entity_name": "K. Woods"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w607l_",
                    "entity_name": "Ignatius Anandappa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7qc33",
                    "entity_name": "Stuart Ishmael"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbn202",
                    "entity_name": "Khwaja Saeed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmzbb",
                    "entity_name": "G. Williams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4wjpw",
                    "entity_name": "Gunther Goldman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p36z",
                    "entity_name": "Rodger McHarg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4y424",
                    "entity_name": "Basil Anthony"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w61sk_",
                    "entity_name": "J. Da Silva"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7q6ps",
                    "entity_name": "Enos Knibbs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6dqnc",
                    "entity_name": "Gordon Beves"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjlsd",
                    "entity_name": "Dave Quested"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmsx3",
                    "entity_name": "Saleem Badar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6dq3r",
                    "entity_name": "Kenneth Grant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4sydq",
                    "entity_name": "Robin Currie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w504g0",
                    "entity_name": "G. D. Gibbon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7pmfr",
                    "entity_name": "Jack Hart-Davis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7mz74",
                    "entity_name": "Bertice Jacelon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbhw0d",
                    "entity_name": "Stanley Tomkinson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4y2y6",
                    "entity_name": "Bhairab Ganguli"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7qcwd",
                    "entity_name": "Ikram Rabbani"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj3jl",
                    "entity_name": "A. Soames"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p1r_",
                    "entity_name": "Ian Higginson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w50860",
                    "entity_name": "L. M. Baxter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7mmkj",
                    "entity_name": "S. L. Harris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7qbhq",
                    "entity_name": "R. D. R. Hill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmxvn",
                    "entity_name": "George Morris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh2c9",
                    "entity_name": "Camillus Perera"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5vn0z",
                    "entity_name": "David Drew"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh3sj",
                    "entity_name": "R. S. Rathore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmymj",
                    "entity_name": "Mohammad Gulzar Mir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zn6wg",
                    "entity_name": "Henry Draper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w61syc",
                    "entity_name": "Wing Gillette"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w61t0q",
                    "entity_name": "J. T. Forrester"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbkng2",
                    "entity_name": "Jackie Roberts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmz1f",
                    "entity_name": "M. G. Subramaniam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4_f6j",
                    "entity_name": "Feroze Butt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5y85m",
                    "entity_name": "Showkatur Rahman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj8v6",
                    "entity_name": "Cleophas Paynter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w64t5d",
                    "entity_name": "Stanley Collins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7q386",
                    "entity_name": "Wesley Malcolm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5nryh",
                    "entity_name": "Leslie Clark"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6dqv4",
                    "entity_name": "Jiban Ghosh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh766",
                    "entity_name": "Selliah Ponnadurai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5y6j2",
                    "entity_name": "Thomas Burgess"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011q6ggk",
                    "entity_name": "John Smeaton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7lfjt",
                    "entity_name": "J. Leaney"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm16d",
                    "entity_name": "Prasad Sinha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh4gv",
                    "entity_name": "C. N. Thomas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbh50q",
                    "entity_name": "Tariq Ata"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4sx1x",
                    "entity_name": "Bruce Bricknell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7lqbq",
                    "entity_name": "Buster Henderson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbmv98",
                    "entity_name": "Walter Page"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w4zmhv",
                    "entity_name": "S. R. Bose"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w5vltx",
                    "entity_name": "Campbell Foster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj14d",
                    "entity_name": "Frederick Payne"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7q4wz",
                    "entity_name": "Jock McLellan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w6353c",
                    "entity_name": "J. G. Blackman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7mh3n",
                    "entity_name": "Albert King"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbjgk2",
                    "entity_name": "Gustave Verheyen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm4rg",
                    "entity_name": "David Narine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c8ylg",
                    "entity_name": "Suresh Shastri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w51333",
                    "entity_name": "Nelson Gooneratne"
                }
            ],
            "function": "<=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_umpire",
                        "class": "cricket.cricket_umpire",
                        "friendly_name": "Cricket Umpire",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "5",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_umpire.test_matches_refereed",
                        "friendly_name": "Test Matches Refereed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_umpire . \nFILTER (?x1 <= \"5\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :cricket.cricket_umpire.test_matches_refereed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_umpire (le cricket.cricket_umpire.test_matches_refereed 5^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "86": {
        "generations": "what is the mode of writing for the short non-fiction variety that comes after harlem renaissance dialogues (part 5): the need to know and the value of legacy??",
        "ori_data_item": {
            "qid": 3202219001000,
            "question": "what is the name of the short non-fiction variety that is the mode of writing of a short non-fiction that has a previous in series of harlem renaissance dialogues (part 5): the need to know and the value of legacy?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07t5cj",
                    "entity_name": "Article"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.short_non_fiction_variety",
                        "class": "book.short_non_fiction_variety",
                        "friendly_name": "Short Non-fiction Variety",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.short_non_fiction",
                        "class": "book.short_non_fiction",
                        "friendly_name": "Short Non-fiction",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gxmyk3",
                        "class": "book.scholarly_work",
                        "friendly_name": "Harlem Renaissance Dialogues (part 5): The Need to Know and the Value of Legacy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.short_non_fiction.mode_of_writing",
                        "friendly_name": "Mode Of Writing"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "book.written_work.previous_in_series",
                        "friendly_name": "Previous in series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.short_non_fiction_variety . \n?x1 :type.object.type :book.short_non_fiction . \nVALUES ?x2 { :m.0gxmyk3 } \n?x1 :book.short_non_fiction.mode_of_writing ?x0 . \n?x2 :book.written_work.previous_in_series ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.short_non_fiction_variety (JOIN (R book.short_non_fiction.mode_of_writing) (JOIN (R book.written_work.previous_in_series) m.0gxmyk3)))"
        }
    },
    "87": {
        "generations": "what is the name of the rocket with the smallest diameter in meters??",
        "ori_data_item": {
            "qid": 2104463003000,
            "question": "what type of rocket has the smallest diameter?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9xpty",
                    "entity_name": "Shavetail"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket.diameter_meters",
                        "friendly_name": "Diameter"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :spaceflight.rocket . \n?y0 :spaceflight.rocket.diameter_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :spaceflight.rocket.diameter_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(ARGMIN spaceflight.rocket spaceflight.rocket.diameter_meters)"
        }
    },
    "88": {
        "generations": "which ice hockey team belongs to the HockeyAllsvenskan conference??",
        "ori_data_item": {
            "qid": 2101299016000,
            "question": "the hockeyallsvenskan hosts what ice hockey teams?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027kwv9",
                    "entity_name": "VIK V\u00e4ster\u00e5s HK"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_team",
                        "class": "ice_hockey.hockey_team",
                        "friendly_name": "Ice hockey team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cmbm0",
                        "class": "ice_hockey.hockey_conference",
                        "friendly_name": "HockeyAllsvenskan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "ice_hockey.hockey_team.conference",
                        "friendly_name": "Conference"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :ice_hockey.hockey_team . \nVALUES ?x1 { :m.0cmbm0 } \n?x0 :ice_hockey.hockey_team.conference ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "ice_hockey"
            ],
            "s_expression": "(AND ice_hockey.hockey_team (JOIN ice_hockey.hockey_team.conference m.0cmbm0))"
        }
    },
    "89": {
        "generations": "which fictional character has possessed a hollow mask??",
        "ori_data_item": {
            "qid": 2101132015000,
            "question": "hollow mask shows what fictional character in a possessed state?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nmwzq",
                    "entity_name": "Hiyori Sarugaki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj91",
                    "entity_name": "Dem\u014dra"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.071vbz",
                    "entity_name": "Ichigo Kurosaki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9gv",
                    "entity_name": "Ggio Vega"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9h3",
                    "entity_name": "Edrad Liones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spbdr",
                    "entity_name": "Avirama Redder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.120j8hy6",
                    "entity_name": "Love Aikawa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nmw_4",
                    "entity_name": "Kensei Muguruma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pv2qv",
                    "entity_name": "Yylfordt Granz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj94",
                    "entity_name": "Iceringer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9hd",
                    "entity_name": "Aldegor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9g2",
                    "entity_name": "Sun-Sun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj8p",
                    "entity_name": "Di Roy Linker"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nmwzx",
                    "entity_name": "Lisa Yad\u014dmaru"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nmx0b",
                    "entity_name": "Mashiro Kuna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9h0",
                    "entity_name": "Tesla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj8z",
                    "entity_name": "Medazeppi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nmwy6",
                    "entity_name": "R\u014dj\u016br\u014d Otoribashi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9h9",
                    "entity_name": "Patros"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9g5",
                    "entity_name": "Choe Neng Poww"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.120yxlwx",
                    "entity_name": "Ashido Kan\u014d"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9gg",
                    "entity_name": "Mila-Rose"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9gy",
                    "entity_name": "Shawlong K\u016bfang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1224njn8",
                    "entity_name": "Hachigen Ush\u014dda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bm68d",
                    "entity_name": "Shinji Hirako"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9h6",
                    "entity_name": "Menis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj8l",
                    "entity_name": "Lilinette"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9gk",
                    "entity_name": "Nirgge Parduoc"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spj8s",
                    "entity_name": "Nakeem Greendina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sp9gn",
                    "entity_name": "Findor Carias"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spjdt",
                    "entity_name": "Menoly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05spcq3",
                    "entity_name": "Apache"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05snzkt",
                        "class": "fictional_universe.fictional_object",
                        "friendly_name": "Hollow Mask",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.has_possessed",
                        "friendly_name": "Has possessed (fictional object)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.05snzkt } \n?x0 :fictional_universe.fictional_character.has_possessed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.has_possessed m.05snzkt))"
        }
    },
    "90": {
        "generations": "which wine has a percent of 95 new oak??",
        "ori_data_item": {
            "qid": 2101423012000,
            "question": "which wines have a new oak percentage of 95?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dm9v6",
                    "entity_name": "2005 Goldeneye \"Confluence Vineyard\" Anderson Valley Estate Pinot Noir"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine",
                        "class": "wine.wine",
                        "friendly_name": "Wine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "95^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "95",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.wine.percent_new_oak",
                        "friendly_name": "Percent new oak"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { \"95\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :wine.wine.percent_new_oak ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine (JOIN wine.wine.percent_new_oak 95^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "91": {
        "generations": "what type of meteorite has a meteorite composition of chondrites??",
        "ori_data_item": {
            "qid": 2101550003000,
            "question": "chondrites is the composition of which meteorite?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pk_dp",
                    "entity_name": "Adelie Land meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vz6_6",
                    "entity_name": "Hadley Rille meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vz6w2",
                    "entity_name": "Bench Crater meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03x_myf",
                    "entity_name": "Allende meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047n218",
                    "entity_name": "Sylacauga"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cqn05",
                    "entity_name": "Park Forest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04crp30",
                    "entity_name": "Pultusk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04csbcf",
                    "entity_name": "Qidong"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04csg7x",
                    "entity_name": "Homestead"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ct6t9",
                    "entity_name": "Monte Milone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ctkhl",
                    "entity_name": "L'Aigle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cwy8s",
                    "entity_name": "Ourique"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f324b",
                    "entity_name": "Albareto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05v5gh",
                    "entity_name": "Orgueil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063skl",
                    "entity_name": "Murchison meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gcw9t",
                    "entity_name": "Bovedy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b31ld",
                    "entity_name": "Tagish Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwk6_m",
                    "entity_name": "Anlong"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwkp_2",
                    "entity_name": "Abee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwl5_j",
                    "entity_name": "Arbol Solo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jgsx",
                    "entity_name": "Wold Cottage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pclrtm",
                    "entity_name": "P\u0159\u00edbram meteorite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4j7z7",
                    "entity_name": "Baszk\u00f3wka"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4pjyx",
                    "entity_name": "So\u0142tmany"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wz33w",
                    "entity_name": "Peekskill meteorite"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.meteorite",
                        "class": "astronomy.meteorite",
                        "friendly_name": "Meteorite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02m9p9",
                        "class": "astronomy.meteoric_composition",
                        "friendly_name": "chondrites",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.meteorite.meteorite_composition",
                        "friendly_name": "Meteorite composition"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteorite . \nVALUES ?x1 { :m.02m9p9 } \n?x0 :astronomy.meteorite.meteorite_composition ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.meteorite (JOIN astronomy.meteorite.meteorite_composition m.02m9p9))"
        }
    },
    "92": {
        "generations": "what is the school category of south kent school and redfield college??",
        "ori_data_item": {
            "qid": 3201575014000,
            "question": "south kent school and redfield college fall under what category of school?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rs41",
                    "entity_name": "Private school"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school_category",
                        "class": "education.school_category",
                        "friendly_name": "School category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02z929w",
                        "class": "education.school",
                        "friendly_name": "South Kent School",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04tc2v",
                        "class": "education.school",
                        "friendly_name": "Redfield College",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.educational_institution.school_type",
                        "friendly_name": "School type"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "education.school_category.schools_of_this_kind",
                        "friendly_name": "Schools of this kind"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_category . \nVALUES ?x1 { :m.02z929w } \nVALUES ?x2 { :m.04tc2v } \n?x1 :education.educational_institution.school_type ?x0 . \n?x0 :education.school_category.schools_of_this_kind ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school_category (AND (JOIN (R education.educational_institution.school_type) m.02z929w) (JOIN education.school_category.schools_of_this_kind m.04tc2v)))"
        }
    },
    "93": {
        "generations": "what type of engine has less than 429 horsepower??",
        "ori_data_item": {
            "qid": 3202550003000,
            "question": "what are all the engine types that have an engine horsepower under 429.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01chrk",
                    "entity_name": "Inline-four engine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080cr",
                    "entity_name": "V6 engine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01chsb",
                    "entity_name": "Straight-five engine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07zvq",
                    "entity_name": "V8 engine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01chry",
                    "entity_name": "Straight-six engine"
                }
            ],
            "function": "<",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.engine_type",
                        "class": "automotive.engine_type",
                        "friendly_name": "Engine Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.engine",
                        "class": "automotive.engine",
                        "friendly_name": "Engine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "429.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "429.0",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "automotive.engine.engine_type",
                        "friendly_name": "Engine Type"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "automotive.engine.horsepower",
                        "friendly_name": "Horsepower"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.engine_type . \n?x1 :type.object.type :automotive.engine . \nFILTER (?x2 < \"429.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x1 :automotive.engine.engine_type ?x0 . \n?x1 :automotive.engine.horsepower ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.engine_type (JOIN (R automotive.engine.engine_type) (lt automotive.engine.horsepower 429.0^^http://www.w3.org/2001/XMLSchema#float)))"
        }
    },
    "94": {
        "generations": "what visual art medium has artworks that belong to the art form of net art??",
        "ori_data_item": {
            "qid": 3203122009000,
            "question": "what visual art medium represents net art?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0828v",
                    "entity_name": "World Wide Web"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_art_medium",
                        "class": "visual_art.visual_art_medium",
                        "friendly_name": "Visual Art Medium",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03w22q",
                        "class": "visual_art.visual_art_form",
                        "friendly_name": "Net Art",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_art_medium.artworks",
                        "friendly_name": "Artworks"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "visual_art.artwork.art_form",
                        "friendly_name": "Art Form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_art_medium . \n?x1 :type.object.type :visual_art.artwork . \nVALUES ?x2 { :m.03w22q } \n?x0 :visual_art.visual_art_medium.artworks ?x1 . \n?x1 :visual_art.artwork.art_form ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_art_medium (JOIN visual_art.visual_art_medium.artworks (JOIN visual_art.artwork.art_form m.03w22q)))"
        }
    },
    "95": {
        "generations": "what is the status of the website www.pikloan.com??",
        "ori_data_item": {
            "qid": 3200961006000,
            "question": "how has the www.pikloan.com parent website come along?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hsn4g",
                    "entity_name": "Active"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.website_status",
                        "class": "internet.website_status",
                        "friendly_name": "Website Status",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "internet.website",
                        "class": "internet.website",
                        "friendly_name": "Website",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0125qh_4",
                        "class": "internet.website",
                        "friendly_name": "www.pikloan.com",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "internet.website.status",
                        "friendly_name": "Website status"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "internet.website.parent_web_property",
                        "friendly_name": "Parent Website"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.website_status . \n?x1 :type.object.type :internet.website . \nVALUES ?x2 { :m.0125qh_4 } \n?x1 :internet.website.status ?x0 . \n?x2 :internet.website.parent_web_property ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.website_status (JOIN (R internet.website.status) (JOIN (R internet.website.parent_web_property) m.0125qh_4)))"
        }
    },
    "96": {
        "generations": "which football player has a total of 23 international appearances??",
        "ori_data_item": {
            "qid": 2102317008000,
            "question": "what is the identity of the football player who appeared 23 times internationally?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c2btg",
                    "entity_name": "Robert Enke"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_player",
                        "class": "soccer.football_player",
                        "friendly_name": "Football player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "23^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "23",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_player.total_international_appearances",
                        "friendly_name": "Number of International Appearances"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_player . \nVALUES ?x1 { \"23\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :soccer.football_player.total_international_appearances ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_player (JOIN soccer.football_player.total_international_appearances 23^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "97": {
        "generations": "what TV program has a recurring segment called Homegrown??",
        "ori_data_item": {
            "qid": 2100581013000,
            "question": "homegrown is a recurring segment on what tv program?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07m4q3",
                    "entity_name": "The Victory Garden"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zfrj2p",
                        "class": "tv.sequence_of_tv_episode_segments",
                        "friendly_name": "Homegrown",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.recurring_segments",
                        "friendly_name": "Recurring segments"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { :m.0zfrj2p } \n?x0 :tv.tv_program.recurring_segments ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.recurring_segments m.0zfrj2p))"
        }
    },
    "98": {
        "generations": "who is the oldest TV writer??",
        "ori_data_item": {
            "qid": 2104194004000,
            "question": "what tv writer has the latest date of birth?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0znf2rb",
                    "entity_name": "David Braun"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_writer",
                        "class": "tv.tv_writer",
                        "friendly_name": "TV Writer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.date_of_birth",
                        "friendly_name": "Date of birth"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_writer . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :tv.tv_writer . \n?y0 :people.person.date_of_birth ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.date_of_birth ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMAX tv.tv_writer people.person.date_of_birth)"
        }
    },
    "99": {
        "generations": "who is the programming language designer that designed both visual basic .net and j#??",
        "ori_data_item": {
            "qid": 3204976016000,
            "question": "who designed both visual basic .net and j#?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04sv4",
                    "entity_name": "Microsoft Corporation"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language_designer",
                        "class": "computer.programming_language_designer",
                        "friendly_name": "Programming Language Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01dpgv",
                        "class": "computer.programming_language",
                        "friendly_name": "Visual Basic .NET",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0268yl",
                        "class": "computer.programming_language",
                        "friendly_name": "J#",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.programming_language_designer.languages_designed",
                        "friendly_name": "Languages Designed"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "computer.programming_language_designer.languages_designed",
                        "friendly_name": "Languages Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language_designer . \nVALUES ?x1 { :m.01dpgv } \nVALUES ?x2 { :m.0268yl } \n?x0 :computer.programming_language_designer.languages_designed ?x1 . \n?x0 :computer.programming_language_designer.languages_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language_designer (AND (JOIN computer.programming_language_designer.languages_designed m.01dpgv) (JOIN computer.programming_language_designer.languages_designed m.0268yl)))"
        }
    },
    "100": {
        "generations": "which publishing company published the book journey into fear??",
        "ori_data_item": {
            "qid": 2102665002000,
            "question": "what was the name of the publisher for journey into fear?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08f97q",
                    "entity_name": "Vintage Books"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.publishing_company",
                        "class": "book.publishing_company",
                        "friendly_name": "Publisher",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04tsgtr",
                        "class": "book.book_edition",
                        "friendly_name": "Journey into fear",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.publishing_company.books_published",
                        "friendly_name": "Book editions published"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.publishing_company . \nVALUES ?x1 { :m.04tsgtr } \n?x0 :book.publishing_company.books_published ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.publishing_company (JOIN book.publishing_company.books_published m.04tsgtr))"
        }
    },
    "101": {
        "generations": "which star is part of the Mizar and Alcor star system??",
        "ori_data_item": {
            "qid": 2102401003000,
            "question": "what stars are in the constellation mizar and alcor?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kld7zr",
                    "entity_name": "Mizat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09k6_6w",
                    "entity_name": "Alcor B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kld7_4",
                    "entity_name": "Alcor A"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star",
                        "class": "astronomy.star",
                        "friendly_name": "Star",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04xcg",
                        "class": "astronomy.star_system",
                        "friendly_name": "Mizar and Alcor",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star.star_system",
                        "friendly_name": "Star System"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nVALUES ?x1 { :m.04xcg } \n?x0 :astronomy.star.star_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star (JOIN astronomy.star.star_system m.04xcg))"
        }
    },
    "102": {
        "generations": "which lightweight beer hop is similar to centennial??",
        "ori_data_item": {
            "qid": 2101003001000,
            "question": "centennial is likened to which beer hop?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q46t2",
                    "entity_name": "Cascade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115cltp",
                    "entity_name": "Columbus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115gh_g",
                    "entity_name": "Chinook"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "base.lightweight.beer_hop",
                        "class": "base.lightweight.beer_hop",
                        "friendly_name": "Beer hop",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0115clqx",
                        "class": "base.lightweight.beer_hop",
                        "friendly_name": "Centennial",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "base.lightweight.beer_hop.hops_similar",
                        "friendly_name": "Hops similar"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.lightweight.beer_hop . \nVALUES ?x1 { :m.0115clqx } \n?x0 :base.lightweight.beer_hop.hops_similar ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "base.lightweight"
            ],
            "s_expression": "(AND base.lightweight.beer_hop (JOIN base.lightweight.beer_hop.hops_similar m.0115clqx))"
        }
    },
    "103": {
        "generations": "which time zone has an offset from UTC of at least 5.0??",
        "ori_data_item": {
            "qid": 2104095000000,
            "question": "pick a time zone with an offset from utc no less than 5.0.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dt4t",
                    "entity_name": "Papua New Guinea\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05br69j",
                    "entity_name": "New Zealand Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c025rk",
                    "entity_name": "Taiwan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019rdm",
                    "entity_name": "Japan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k8gd",
                    "entity_name": "India Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052vwh",
                    "entity_name": "China Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07yfn_",
                    "entity_name": "Nepal Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pjgkk",
                    "entity_name": "Bangladesh Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09bd8v",
                    "entity_name": "Pakistan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07c8x6",
                    "entity_name": "Bhutan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043wfc5",
                    "entity_name": "Indochina Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1224z91_",
                    "entity_name": "Indonesia Eastern Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027wjjd",
                    "entity_name": "Wake Island Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027wjl3",
                    "entity_name": "Chamorro Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nmg3d",
                    "entity_name": "Yekaterinburg Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043wfcz",
                    "entity_name": "Myanmar Standard Time"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04g13p_",
                    "entity_name": "Magadan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c54bd",
                    "entity_name": "Irkutsk Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zpj_k",
                    "entity_name": "Kamchatka Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zt92k",
                    "entity_name": "Vladivostok Standard Time"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09zykc",
                    "entity_name": "Chatham Island Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs6vxn",
                    "entity_name": "Time in Colombia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bzt6c",
                    "entity_name": "ASEAN Common Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dh43y",
                    "entity_name": "Krasnoyarsk Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g4tt_",
                    "entity_name": "Madras Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y48cqk",
                    "entity_name": "Indonesia Central Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y496qm",
                    "entity_name": "Alma-Ata Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y496z9",
                    "entity_name": "Anadyr Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4970s",
                    "entity_name": "Aqtobe Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y497zw",
                    "entity_name": "Australian Central Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4980d",
                    "entity_name": "Australian Western Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y498n1",
                    "entity_name": "Indian Chagos Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y498pq",
                    "entity_name": "Brunei Darussalam Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y498qn",
                    "entity_name": "Casey Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y498v7",
                    "entity_name": "Central Western Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4993n",
                    "entity_name": "Choibalsan Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49954",
                    "entity_name": "Christmas Island\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4995q",
                    "entity_name": "Chuuk\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49994",
                    "entity_name": "Cocos Islands\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y499p1",
                    "entity_name": "Davis\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y499qq",
                    "entity_name": "Dumont d'Urville\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49bcg",
                    "entity_name": "Fiji Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49bfr",
                    "entity_name": "French Southern and Antarctic Lands Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49bm6",
                    "entity_name": "Gilbert Island\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49btq",
                    "entity_name": "Heard and McDonald Islands\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49bwc",
                    "entity_name": "Hovd\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49c92",
                    "entity_name": "Kosrae\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y49cjm",
                    "entity_name": "Kyrgyzstan\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_1g",
                    "entity_name": "Tokelau\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_1v",
                    "entity_name": "Tonga\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_3h",
                    "entity_name": "Turkmenistan\u00a0Standard Time"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_3x",
                    "entity_name": "Tuvalu\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_5d",
                    "entity_name": "Ulaanbaatar\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_8v",
                    "entity_name": "Vanuatu\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_g8",
                    "entity_name": "Vostok Station\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_lk",
                    "entity_name": "Wallis and Futuna Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4d_vm",
                    "entity_name": "West Samoa Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dpf3",
                    "entity_name": "Line Islands\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dpjf",
                    "entity_name": "Lord Howe Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dpm8",
                    "entity_name": "Macquarie Island Station\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dqbg",
                    "entity_name": "Maldives\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dqlb",
                    "entity_name": "Marshall Islands Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dr4c",
                    "entity_name": "Mawson Station\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4drgl",
                    "entity_name": "New Caledonia\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4drym",
                    "entity_name": "Norfolk\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4drzw",
                    "entity_name": "Novosibirsk Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4ds30",
                    "entity_name": "Oral Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4ds6b",
                    "entity_name": "Palau Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dvl4",
                    "entity_name": "Phoenix Island\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dvtn",
                    "entity_name": "Pohnpei\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dw5q",
                    "entity_name": "Sakhalin Island\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dwp2",
                    "entity_name": "Solomon Islands\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dz__",
                    "entity_name": "Timor Leste\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dztc",
                    "entity_name": "Tajikistan\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dzzg",
                    "entity_name": "Thailand Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4f031",
                    "entity_name": "Western Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0269jsg",
                    "entity_name": "Uzbekistan\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d2t4g",
                    "entity_name": "Philippine Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0clqt8",
                    "entity_name": "Sri Lanka Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4f09k",
                    "entity_name": "Yap Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y497_m",
                    "entity_name": "Australian Eastern Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019zjx",
                    "entity_name": "Korea Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09z5lx",
                    "entity_name": "Omsk Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qqww",
                    "entity_name": "Hong Kong Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03yth0q",
                    "entity_name": "Indonesia Western Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch2v5",
                    "entity_name": "Malaysia Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zjdbd",
                    "entity_name": "Yakutsk Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063w6x",
                    "entity_name": "Singapore Time Zone"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.time_zone",
                        "class": "time.time_zone",
                        "friendly_name": "Time Zone",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "5.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.time_zone.offset_from_uct",
                        "friendly_name": "Offset from UTC"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.time_zone . \nFILTER (?x1 >= \"5.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :time.time_zone.offset_from_uct ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.time_zone (ge time.time_zone.offset_from_uct 5.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "104": {
        "generations": "what celestial objects have the same spectral type as Gliese 581??",
        "ori_data_item": {
            "qid": 2101120021000,
            "question": "what is the spectral type that gliese 581 is under?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hnfldw",
                    "entity_name": "M3V"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.spectral_type",
                        "class": "astronomy.spectral_type",
                        "friendly_name": "Spectral Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0810j0",
                        "class": "astronomy.star",
                        "friendly_name": "Gliese 581",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.spectral_type.celestial_objects_of_this_spectral_type",
                        "friendly_name": "Objects of this spectral type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.spectral_type . \nVALUES ?x1 { :m.0810j0 } \n?x0 :astronomy.spectral_type.celestial_objects_of_this_spectral_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.spectral_type (JOIN astronomy.spectral_type.celestial_objects_of_this_spectral_type m.0810j0))"
        }
    },
    "105": {
        "generations": "what soccer/football match had an attendance of 93495??",
        "ori_data_item": {
            "qid": 2101849009000,
            "question": "what football match had 93495 people attend?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027zx95",
                    "entity_name": "1937 FA Cup Final"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_match",
                        "class": "soccer.football_match",
                        "friendly_name": "Football Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "93495^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "93495",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_match.attendance",
                        "friendly_name": "Attendance"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_match . \nVALUES ?x1 { \"93495\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :soccer.football_match.attendance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_match (JOIN soccer.football_match.attendance 93495^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "106": {
        "generations": "which fictional character attended smeltings academy??",
        "ori_data_item": {
            "qid": 2102417011000,
            "question": "give an example of an item that is smeltings academy. in height.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h_fvt",
                    "entity_name": "Vernon Dursley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h_fwb",
                    "entity_name": "Dudley Dursley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hhlkbm",
                    "entity_name": "Piers Polkiss"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012z48tj",
                        "class": "fictional_universe.school_in_fiction",
                        "friendly_name": "Smeltings Academy.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.education",
                        "friendly_name": "Education"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.012z48tj } \n?x0 :fictional_universe.fictional_character.education ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.education m.012z48tj))"
        }
    },
    "107": {
        "generations": "what content is available in the nepali language for broadcasting??",
        "ori_data_item": {
            "qid": 2101358015000,
            "question": "which station broadcasts content in nepali?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q91rp",
                    "entity_name": "Kamka Kura"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zkxkx",
                    "entity_name": "Naya Nepal"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.content",
                        "class": "broadcast.content",
                        "friendly_name": "Broadcast Content",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h0t4",
                        "class": "language.human_language",
                        "friendly_name": "nepali",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.content.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.content . \nVALUES ?x1 { :m.0h0t4 } \n?x0 :broadcast.content.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.content (JOIN broadcast.content.language m.0h0t4))"
        }
    },
    "108": {
        "generations": "what cancer center includes oregon health and sciences university as one of its constituents??",
        "ori_data_item": {
            "qid": 2102656007000,
            "question": "can you name the cancer center that's affiliated with oregon health and sciences university?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_7lms",
                    "entity_name": "OHSU Cancer Institute"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.cancer_center",
                        "class": "medicine.cancer_center",
                        "friendly_name": "Cancer Center",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05l0dl",
                        "class": "medicine.cancer_center_constituent",
                        "friendly_name": "oregon health and sciences university",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.cancer_center.constituents",
                        "friendly_name": "Constituents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.cancer_center . \nVALUES ?x1 { :m.05l0dl } \n?x0 :medicine.cancer_center.constituents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.cancer_center (JOIN medicine.cancer_center.constituents m.05l0dl))"
        }
    },
    "109": {
        "generations": "what public library is part of the west milford township library system??",
        "ori_data_item": {
            "qid": 2101719001000,
            "question": "west milford township library has what public library in it's system?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9f0lx",
                    "entity_name": "West Milford Township Library Central Library"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "library.public_library",
                        "class": "library.public_library",
                        "friendly_name": "Public Library",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02nj7jg",
                        "class": "library.public_library_system",
                        "friendly_name": "West Milford Township Library",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "library.public_library.library_system",
                        "friendly_name": "Library System"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :library.public_library . \nVALUES ?x1 { :m.02nj7jg } \n?x0 :library.public_library.library_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "library"
            ],
            "s_expression": "(AND library.public_library (JOIN library.public_library.library_system m.02nj7jg))"
        }
    },
    "110": {
        "generations": "which engineering firm has frank newby as one of its partners in architecture??",
        "ori_data_item": {
            "qid": 2100962000000,
            "question": "frank newby is a partner of what engineering firm?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046w_kr",
                    "entity_name": "F J Samuely & Partners"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.engineering_firm",
                        "class": "architecture.engineering_firm",
                        "friendly_name": "Engineering firm",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03ctddv",
                        "class": "architecture.engineer",
                        "friendly_name": "Frank Newby",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.engineering_firm.partners",
                        "friendly_name": "Partners"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.engineering_firm . \nVALUES ?x1 { :m.03ctddv } \n?x0 :architecture.engineering_firm.partners ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.engineering_firm (JOIN architecture.engineering_firm.partners m.03ctddv))"
        }
    },
    "111": {
        "generations": "what comic book story is part of the story arc hush??",
        "ori_data_item": {
            "qid": 2103003005000,
            "question": "which comic book story contains hush?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vvtjq",
                    "entity_name": "Hush - Chapter Four: The City"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09vvv9g",
                        "class": "comic_books.comic_book_story_arc",
                        "friendly_name": "Hush",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.part_of_story_arc",
                        "friendly_name": "Part Of Story Arc"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.09vvv9g } \n?x0 :comic_books.comic_book_story.part_of_story_arc ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.part_of_story_arc m.09vvv9g))"
        }
    },
    "112": {
        "generations": "how many religious leaders have a Thai Chinese ethnicity??",
        "ori_data_item": {
            "qid": 2105124003000,
            "question": "how many religious leaders are thai chinese?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_leader",
                        "class": "religion.religious_leader",
                        "friendly_name": "Religious Leader",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04l_pt",
                        "class": "people.ethnicity",
                        "friendly_name": "Thai Chinese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.ethnicity",
                        "friendly_name": "Ethnicity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_leader . \nVALUES ?x1 { :m.04l_pt } \n?x0 :people.person.ethnicity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(COUNT (AND religion.religious_leader (JOIN people.person.ethnicity m.04l_pt)))"
        }
    },
    "113": {
        "generations": "what hybrid martial art belongs to the northern shaolin category??",
        "ori_data_item": {
            "qid": 4301064015000,
            "question": "what is another martial art that involves hybrid and is in the same category as northern shaolin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fdb3",
                    "entity_name": "Jeet Kune Do"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bs3p",
                    "entity_name": "Sanshou"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t73g",
                    "entity_name": "Taekkyeon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02618d8",
                    "entity_name": "Russian All-Round Fighting"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048yh",
                    "entity_name": "Krav Maga"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b65c",
                    "entity_name": "Hwa Rang Do"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06jm_r",
                    "entity_name": "Bartitsu"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_art",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "Martial Art",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "martial_arts.martial_art_category",
                        "class": "martial_arts.martial_art_category",
                        "friendly_name": "Martial Art Category",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.071nmn",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "Northern Shaolin",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.03nzdm_",
                        "class": "martial_arts.martial_art_category",
                        "friendly_name": "Hybrid",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "martial_arts.martial_art.category",
                        "friendly_name": "Category"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "martial_arts.martial_art.category",
                        "friendly_name": "Category"
                    },
                    {
                        "start": 3,
                        "end": 0,
                        "relation": "martial_arts.martial_art_category.martial_arts",
                        "friendly_name": "Martial arts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \n?x1 :type.object.type :martial_arts.martial_art_category . \nVALUES ?x2 { :m.071nmn } \nVALUES ?x3 { :m.03nzdm_ } \n?x0 :martial_arts.martial_art.category ?x1 . \n?x2 :martial_arts.martial_art.category ?x1 . \n?x3 :martial_arts.martial_art_category.martial_arts ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "martial_arts"
            ],
            "s_expression": "(AND martial_arts.martial_art (AND (JOIN martial_arts.martial_art.category (JOIN (R martial_arts.martial_art.category) m.071nmn)) (JOIN (R martial_arts.martial_art_category.martial_arts) m.03nzdm_)))"
        }
    },
    "114": {
        "generations": "which digital camera has an ultra compact format??",
        "ori_data_item": {
            "qid": 2100418002000,
            "question": "what digital camera does have ultra compact format?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qv9",
                    "entity_name": "Casio Exilim EX-Z75"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk1c4",
                    "entity_name": "Casio Exilim EX-S10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jvn",
                    "entity_name": "Sony DSC-V1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mwf",
                    "entity_name": "Nikon Coolpix S520"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qm5",
                    "entity_name": "Pentax Optio Z10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r3t",
                    "entity_name": "Casio Exilim EX-Z10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kj8",
                    "entity_name": "Nikon Coolpix S550"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjfhl",
                    "entity_name": "Canon PowerShot SD790 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjftv",
                    "entity_name": "Canon PowerShot SD870 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjg42",
                    "entity_name": "Canon PowerShot SD880 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjj77",
                    "entity_name": "Canon PowerShot SD750"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n8r",
                    "entity_name": "Olympus Stylus 1200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r8t",
                    "entity_name": "Fujifilm FinePix Z10fd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jx9",
                    "entity_name": "Panasonic Lumix DMC-FX55"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjwxj",
                    "entity_name": "Panasonic Lumix DMC-LX3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ntt",
                    "entity_name": "Fujifilm Finepix 30i"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qrj",
                    "entity_name": "Sony DSC-T20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09zjkx",
                    "entity_name": "Casio EX-S20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n2h",
                    "entity_name": "Casio Exilim EX-Z5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p39",
                    "entity_name": "Kodak M883"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk2cb",
                    "entity_name": "Fujifilm FinePix Z200FD"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kkz",
                    "entity_name": "Sony DSC-S780"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nmn",
                    "entity_name": "Pentax Optio M40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wj_dq",
                    "entity_name": "Canon PowerShot SD890 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjg77",
                    "entity_name": "Canon PowerShot SD1000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjg8m",
                    "entity_name": "Canon PowerShot SD800 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjgkr",
                    "entity_name": "Canon PowerShot SD950 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjh3_",
                    "entity_name": "Canon Powershot SD1100 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjj3g",
                    "entity_name": "Canon PowerShot SD900"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjtk",
                    "entity_name": "Canon PowerShot SD850 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjyvs",
                    "entity_name": "Canon PowerShot SD990 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjzw8",
                    "entity_name": "Canon PowerShot SD770 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k7p",
                    "entity_name": "Sony DSC-T3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2px6",
                    "entity_name": "Pentax Optio S45"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q69m0pfh",
                    "entity_name": "Pentax Optio 33L"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kkd",
                    "entity_name": "Minolta DiMAGE F100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ls0",
                    "entity_name": "Nikon Coolpix S10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m5d",
                    "entity_name": "Nikon Coolpix S500"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n__",
                    "entity_name": "Panasonic Lumix DMC-FX3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q9l",
                    "entity_name": "Olympus Stylus 820"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qb4",
                    "entity_name": "Olympus D-630 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m2_",
                    "entity_name": "Kyocera Finecam SL300R"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nr5",
                    "entity_name": "Panasonic Lumix DMC-FX10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r0s",
                    "entity_name": "Casio Exilim EX-Z50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kvw",
                    "entity_name": "Fujifilm FinePix 50i"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n2r",
                    "entity_name": "Casio Exilim EX-Z77"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ppn",
                    "entity_name": "Samsung L83T"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2j_k",
                    "entity_name": "Kodak M753"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mk8",
                    "entity_name": "Panasonic Lumix DMC-FX2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nm2",
                    "entity_name": "Pentax Optio S4i"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11vwpsnjk",
                    "entity_name": "Kyocera Finecam S5R"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jsp",
                    "entity_name": "Leica C-LUX 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kv2",
                    "entity_name": "Pentax Optio 430"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kyt",
                    "entity_name": "Samsung L110"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lp7",
                    "entity_name": "Pentax Optio S"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q1z",
                    "entity_name": "Fujifilm FinePix Z1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r9y",
                    "entity_name": "Panasonic Lumix DMC-FX5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rgw",
                    "entity_name": "Pentax Optio 430RS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kc0",
                    "entity_name": "Konica Minolta DiMAGE X31"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l4h",
                    "entity_name": "Sony DSC-T9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p8j",
                    "entity_name": "Olympus Stylus 780"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pc6",
                    "entity_name": "Olympus FE-250"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qgk",
                    "entity_name": "Nikon Coolpix S210"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q5s",
                    "entity_name": "Casio Exilim EX-Z60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kwc",
                    "entity_name": "Sony DSC-L1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lht",
                    "entity_name": "Sony DSC-T5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2myv",
                    "entity_name": "Pentax Optio S4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n44",
                    "entity_name": "Nikon Coolpix 3700"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nhd",
                    "entity_name": "Panasonic LUMIX DMC-FS5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pq4",
                    "entity_name": "Pentax Optio S6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ltz",
                    "entity_name": "Nikon Coolpix S600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjljy",
                    "entity_name": "Sony Cyber-shot DSC-T77"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jqt",
                    "entity_name": "Kodak V610"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k8h",
                    "entity_name": "Nikon Coolpix S50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lrh",
                    "entity_name": "Fujifilm FinePix F401 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m49",
                    "entity_name": "Casio Exilim EX-Z120"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rbh",
                    "entity_name": "Sony DSC-T11"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjnn",
                    "entity_name": "Nikon Coolpix S610"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkdjs",
                    "entity_name": "Nikon Coolpix S610c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kt7",
                    "entity_name": "Pentax Optio S5i"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2llt",
                    "entity_name": "Olympus Stylus 750"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nd2",
                    "entity_name": "Fujifilm FinePix Z3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nwd",
                    "entity_name": "Pentax Optio WP"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p_v",
                    "entity_name": "Sony DSC-M1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pmn",
                    "entity_name": "Samsung NV3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q7y",
                    "entity_name": "Kodak V530"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rmr",
                    "entity_name": "Fujifilm FinePix F410 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bqyqh",
                    "entity_name": "Nikon Coolpix S1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pm3",
                    "entity_name": "Sony DSC-T10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jjx",
                    "entity_name": "Ricoh Caplio R4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k4_",
                    "entity_name": "Ricoh Caplio R3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m0k",
                    "entity_name": "Kyocera Finecam SL400R"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m8h",
                    "entity_name": "Sony DSC-P10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mqn",
                    "entity_name": "Samsung L77"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n5k",
                    "entity_name": "Pentax Optio 330GS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n_g",
                    "entity_name": "Kyocera Finecam S5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pz2",
                    "entity_name": "Minolta DiMAGE G400"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qh2",
                    "entity_name": "Panasonic Lumix DMC-FX8"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r07",
                    "entity_name": "Pentax Optio W10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk4vj",
                    "entity_name": "Kodak EasyShare V1253"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk7cs",
                    "entity_name": "Kodak EasyShare V1233"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lyk",
                    "entity_name": "Pentax Optio M50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qc8",
                    "entity_name": "Nikon Coolpix S200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjyl",
                    "entity_name": "Samsung i8"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjcg",
                    "entity_name": "Canon PowerShot SD40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lkg",
                    "entity_name": "Sony DSC-T7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk68z",
                    "entity_name": "Kodak EasyShare M1073 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nnh",
                    "entity_name": "Ricoh Caplio R6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nqx",
                    "entity_name": "Pentax Optio SV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nn_",
                    "entity_name": "Olympus Stylus 1000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pbz",
                    "entity_name": "Fujifilm FinePix F402"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qtq",
                    "entity_name": "Sony DSC-P100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ps0",
                    "entity_name": "Panasonic Lumix DMC-FX12"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qpl",
                    "entity_name": "Pentax Optio M30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjpl5",
                    "entity_name": "Samsung L201"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk3gf",
                    "entity_name": "Kodak EasyShare M853"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lmm",
                    "entity_name": "Panasonic Lumix DMC-FX9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qzn",
                    "entity_name": "Fujifilm FinePix A310 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjpm",
                    "entity_name": "Kodak EasyShare M1033"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jw6",
                    "entity_name": "Pentax Optio 33LF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h2prh",
                    "entity_name": "Olympus Stylus 725 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jl0",
                    "entity_name": "Sony DSC-S750"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l4r",
                    "entity_name": "Casio QV-R3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ld7",
                    "entity_name": "Kyocera Finecam L4V"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mf2",
                    "entity_name": "Kyocera Finecam S3R"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mtk",
                    "entity_name": "Casio Exilim EX-Z57"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q_4",
                    "entity_name": "Nikon Coolpix S700"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2klh",
                    "entity_name": "Minolta DiMAGE X20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2knx",
                    "entity_name": "Casio Exilim EX-Z500"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l_4",
                    "entity_name": "Pentax Optio SVi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjtt3",
                    "entity_name": "Ricoh G600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk48m",
                    "entity_name": "Fujifilm FinePix J50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk1n4",
                    "entity_name": "Fujifilm FinePix J10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q_z",
                    "entity_name": "Panasonic Lumix DMC-FX1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lk_",
                    "entity_name": "Pentax Optio S60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2j_8",
                    "entity_name": "Panasonic Lumix DMC-F7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k43",
                    "entity_name": "Nikon Coolpix S9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kcv",
                    "entity_name": "Sony DSC-T1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nhx",
                    "entity_name": "Minolta DiMAGE G500"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q69nfg4k",
                    "entity_name": "Pentax Optio T20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q69qqjf7",
                    "entity_name": "Pentax Optio W30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q6b66974",
                    "entity_name": "Pentax Optio S12"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jv2",
                    "entity_name": "Olympus Stylus 760"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kmb",
                    "entity_name": "Pentax Optio V10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2knn",
                    "entity_name": "Samsung NV4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ktj",
                    "entity_name": "Ricoh Caplio R7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l19",
                    "entity_name": "Panasonic LUMIX DMC-FS3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l7z",
                    "entity_name": "Olympus FE-240"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l91",
                    "entity_name": "Pentax Optio S7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lg4",
                    "entity_name": "Panasonic Lumix DMC-FX07"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lj1",
                    "entity_name": "Casio Exilim EX-S770"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ln4",
                    "entity_name": "Pentax Optio S10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lnf",
                    "entity_name": "Olympus Stylus 730"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m2q",
                    "entity_name": "Nikon Coolpix S51c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m38",
                    "entity_name": "Olympus Stylus 1030 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mcf",
                    "entity_name": "Ricoh Caplio R40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mgx",
                    "entity_name": "Ricoh Caplio R5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mmr",
                    "entity_name": "Olympus Stylus 1010"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mvx",
                    "entity_name": "Olympus Stylus 740"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n6b",
                    "entity_name": "Olympus Stylus 770 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n8g",
                    "entity_name": "Pentax Optio M20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nnr",
                    "entity_name": "Panasonic LUMIX DMC-FX35"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p66",
                    "entity_name": "Olympus Stylus 840"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p88",
                    "entity_name": "Olympus Stylus 1020"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pj2",
                    "entity_name": "Samsung i70"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pkr",
                    "entity_name": "Olympus FE-280"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pmc",
                    "entity_name": "Panasonic Lumix DMC-FX33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ppd",
                    "entity_name": "Samsung i7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ps9",
                    "entity_name": "Panasonic Lumix DMC-FX30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q6s",
                    "entity_name": "Olympus Stylus 830"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q9x",
                    "entity_name": "Panasonic LUMIX DMC-FS20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qs1",
                    "entity_name": "Olympus Stylus 790 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r1v",
                    "entity_name": "Olympus FE-230"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r3j",
                    "entity_name": "Pentax Optio W20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r5s",
                    "entity_name": "Panasonic Lumix DMC-FX100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rbs",
                    "entity_name": "Olympus FE-290"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rjh",
                    "entity_name": "Panasonic Lumix DMC-FX50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rk9",
                    "entity_name": "Casio Exilim EX-Z70"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjpj",
                    "entity_name": "Leica D-LUX 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjsj",
                    "entity_name": "Casio Exilim EX-S600d"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjnk8",
                    "entity_name": "Samsung i80"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjt3k",
                    "entity_name": "Pentax Optio V20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjw5h",
                    "entity_name": "Pentax Optio M60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjwm0",
                    "entity_name": "Panasonic Lumix DMC-FX500"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjxhp",
                    "entity_name": "Panasonic Lumix DMC-FX37"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjxjj",
                    "entity_name": "Panasonic Lumix DMC-FX150"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk0b4",
                    "entity_name": "Casio Exilim EX-S880"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk0fm",
                    "entity_name": "Casio Exilim EX-Z9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk4dl",
                    "entity_name": "Kodak EasyShare M893 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk857",
                    "entity_name": "Leica C-LUX 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk918",
                    "entity_name": "Leica D-LUX 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk9k5",
                    "entity_name": "Nikon Coolpix S52"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkc5l",
                    "entity_name": "Nikon Coolpix S60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rmg",
                    "entity_name": "Nikon Coolpix S7c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nfr",
                    "entity_name": "Minolta DiMAGE F300"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk4dd",
                    "entity_name": "Kodak EasyShare M763"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mcz",
                    "entity_name": "Minolta DiMAGE X"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r5h",
                    "entity_name": "Konica Minolta DiMAGE G600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ptq",
                    "entity_name": "Fujifilm FinePix F440 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r2c",
                    "entity_name": "Sony DSC-T2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk9nk",
                    "entity_name": "Leica C-LUX 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rhp",
                    "entity_name": "Pentax Optio T30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m5z",
                    "entity_name": "Kodak V550"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk63d",
                    "entity_name": "Kodak EasyShare M1063"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rhd",
                    "entity_name": "Kyocera Finecam S4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qmf",
                    "entity_name": "Fujifilm FinePix Z2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rlx",
                    "entity_name": "Sony DSC-T200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkfb0",
                    "entity_name": "Nikon Coolpix S560"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pxr",
                    "entity_name": "Kodak V1003"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pvt",
                    "entity_name": "Samsung Digimax i5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjm9m",
                    "entity_name": "Sony Cyber-shot DSC-T20"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n91",
                    "entity_name": "Kodak M873"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ksr",
                    "entity_name": "Sony DSC-T50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m5p",
                    "entity_name": "Nikon Coolpix S5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p54",
                    "entity_name": "Sony DSC-T100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mz3",
                    "entity_name": "Kodak V705"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pk4",
                    "entity_name": "Olympus FE-300"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pyt",
                    "entity_name": "Pentax Optio T10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkgpt",
                    "entity_name": "Olympus Stylus 1050 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ms_",
                    "entity_name": "Casio Exilim EX-Z55"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk8lh",
                    "entity_name": "Kodak EasyShare V705"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nxjbd",
                    "entity_name": "Nikon Coolpix S51"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkbwq",
                    "entity_name": "Nikon Coolpix S52c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0261v8t",
                    "entity_name": "Sony Cyber-shot DSC-T50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjknc",
                    "entity_name": "Sony Cyber-shot DSC-T10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mp1",
                    "entity_name": "Kyocera Finecam S3L"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ks5",
                    "entity_name": "Pentax Optio S5n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pb4",
                    "entity_name": "Pentax Optio S5z"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r9c",
                    "entity_name": "Casio Exilim EX-Z40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k_q",
                    "entity_name": "Minolta DiMAGE Xi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk5nh",
                    "entity_name": "Kodak EasyShare V1073"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk7bv",
                    "entity_name": "Kodak EasyShare M863"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2prr",
                    "entity_name": "Casio Exilim EX-Z3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q5h",
                    "entity_name": "Minolta DiMAGE Xt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2lrr",
                    "entity_name": "Pentax Optio WPi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk7yl",
                    "entity_name": "Kodak EasyShare V1003"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rvynt",
                    "entity_name": "Sony Cyber-shot DSC-T100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q4d",
                    "entity_name": "Olympus Stylus Verve"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mnj",
                    "entity_name": "Nikon Coolpix S2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p4d",
                    "entity_name": "Samsung Digimax i6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qjh",
                    "entity_name": "Casio Exilim EX-Z4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkgjj",
                    "entity_name": "Olympus Stylus 1040"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m41",
                    "entity_name": "Olympus Stylus 850 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nl0",
                    "entity_name": "Kyocera Finecam L3V"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjm59",
                    "entity_name": "Sony Cyber-shot DSC-T500"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kj0",
                    "entity_name": "Samsung i85"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2kmm",
                    "entity_name": "Ricoh Caplio R30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m1m",
                    "entity_name": "Pentax Optio X"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n14",
                    "entity_name": "Sony DSC-G1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nkr",
                    "entity_name": "Fujifilm FinePix F450 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2msf",
                    "entity_name": "Olympus Stylus 720 SW"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mvn",
                    "entity_name": "Pentax Optio 330RS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pgq",
                    "entity_name": "Pentax Optio S55"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n58",
                    "entity_name": "Ricoh Caplio R1V"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2p5n",
                    "entity_name": "Sony DSC-P150"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121dcjk8",
                    "entity_name": "Nikon Coolpix S510"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122915tm",
                    "entity_name": "Nikon Coolpix S50c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk7yz",
                    "entity_name": "Kodak EasyShare V803"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2llk",
                    "entity_name": "Kodak V803"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjqxq",
                    "entity_name": "Samsung i100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjksn",
                    "entity_name": "Sony Cyber-shot DSC-T200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l2y",
                    "entity_name": "Casio QV-R4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk560",
                    "entity_name": "Kodak EasyShare V1273"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ml3",
                    "entity_name": "Konica KD-500 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m3t",
                    "entity_name": "Kodak V570"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2n1q",
                    "entity_name": "Kyocera Finecam L30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjj_l",
                    "entity_name": "Pentax Optio W60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l8h",
                    "entity_name": "Konica Minolta DiMAGE X60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qsx",
                    "entity_name": "Kodak Easyshare One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p_yy7",
                    "entity_name": "Sony Cyber-shot DSC-G1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk2xk",
                    "entity_name": "Kodak EasyShare M883"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q61",
                    "entity_name": "Konica KD-400 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1q69wppzz",
                    "entity_name": "Pentax Optio M10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjqt",
                    "entity_name": "Kodak EasyShare M873"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l6w",
                    "entity_name": "Casio Exilim EX-Z110"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r4n",
                    "entity_name": "Kyocera Finecam S3x"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk3j3",
                    "entity_name": "Fujifilm FinePix Z100FD"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r7q",
                    "entity_name": "Konica Minolta DiMAGE Xg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk1zy",
                    "entity_name": "Fujifilm FinePix Z20fd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk76w",
                    "entity_name": "Kodak EasyShare M1093 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q57",
                    "entity_name": "Samsung L100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjm5l",
                    "entity_name": "Sony Cyber-shot DSC-T700"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mhz",
                    "entity_name": "Ricoh Caplio R2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pyj",
                    "entity_name": "Casio Exilim EX-S3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nxg",
                    "entity_name": "Pentax Optio S40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjmlk",
                    "entity_name": "Sony Cyber-shot DSC-T2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m25",
                    "entity_name": "Konica Minolta DiMAGE X50"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2mw_",
                    "entity_name": "Sony DSC-T300"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nzc",
                    "entity_name": "Kyocera Finecam S3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m91",
                    "entity_name": "Konica Minolta DiMAGE X1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nck",
                    "entity_name": "Fujifilm FinePix F420 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ny9",
                    "entity_name": "Panasonic Lumix DMC-FX01"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ksg",
                    "entity_name": "Casio Exilim EX-Z30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2q8j",
                    "entity_name": "Konica KD-300 Zoom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2nzn",
                    "entity_name": "Sony DSC-T30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjq8p",
                    "entity_name": "Samsung L310W"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2pzn",
                    "entity_name": "Panasonic Lumix DMC-FX7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2jk5",
                    "entity_name": "Sony DSC-S40"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wkfch",
                    "entity_name": "Nikon Coolpix S710"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2rln",
                    "entity_name": "Samsung L210"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2r7_",
                    "entity_name": "Sony DSC-U60"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjjyw",
                    "entity_name": "Samsung S1070"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2ljm",
                    "entity_name": "Nikon Coolpix S3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l1k",
                    "entity_name": "Kodak M853"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2k_f",
                    "entity_name": "Minolta DiMAGE F200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2m1c",
                    "entity_name": "Sony DSC-T33"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wk7k7",
                    "entity_name": "Kodak EasyShare M753"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wjk5w",
                    "entity_name": "Sony Cyber-shot DSC-T300"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2l8s",
                    "entity_name": "Nikon Coolpix S6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qqq",
                    "entity_name": "Sanyo DSC-J1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0220vz7",
                        "class": "digicams.camera_format",
                        "friendly_name": "Ultra Compact",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.digital_camera.format",
                        "friendly_name": "Format"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { :m.0220vz7 } \n?x0 :digicams.digital_camera.format ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.format m.0220vz7))"
        }
    },
    "115": {
        "generations": "what computer peripheral supports sonic & sega all-stars racing with banjo-kazooie??",
        "ori_data_item": {
            "qid": 2101391009000,
            "question": "what computer peripheral is sonic & sega all-stars racing with banjo-kazooie supported by?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mzkx7",
                    "entity_name": "Xbox 360 Controller"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_peripheral",
                        "class": "computer.computer_peripheral",
                        "friendly_name": "Computer Peripheral",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cmynjz",
                        "class": "cvg.game_version",
                        "friendly_name": "Sonic & Sega All-Stars Racing with Banjo-Kazooie",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer_peripheral.supporting_game_versions",
                        "friendly_name": "Supporting game versions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_peripheral . \nVALUES ?x1 { :m.0cmynjz } \n?x0 :computer.computer_peripheral.supporting_game_versions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer_peripheral (JOIN computer.computer_peripheral.supporting_game_versions m.0cmynjz))"
        }
    },
    "116": {
        "generations": "hare krishna and hinduism both practice what religious practices??",
        "ori_data_item": {
            "qid": 3201381012000,
            "question": "hare krishna and hinduism both practice what religious practices?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07_jd",
                    "entity_name": "Vegetarianism"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_practice",
                        "class": "religion.religious_practice",
                        "friendly_name": "Religious Practice",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.017j3y",
                        "class": "religion.religion",
                        "friendly_name": "hare krishna",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03j6c",
                        "class": "religion.religion",
                        "friendly_name": "Hinduism",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religious_practice.practice_of",
                        "friendly_name": "Religious practice of"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_practice . \nVALUES ?x1 { :m.017j3y } \nVALUES ?x2 { :m.03j6c } \n?x0 :religion.religious_practice.practice_of ?x1 . \n?x2 :religion.religion.practices ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religious_practice (AND (JOIN religion.religious_practice.practice_of m.017j3y) (JOIN (R religion.religion.practices) m.03j6c)))"
        }
    },
    "117": {
        "generations": "which opera production was produced by festival d'avignon??",
        "ori_data_item": {
            "qid": 2101461014000,
            "question": "festival d'avignon produces what operas?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbbqyk",
                    "entity_name": "Rimbaud, ou le fils du soleil"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_production",
                        "class": "opera.opera_production",
                        "friendly_name": "Opera Production",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bwl8l",
                        "class": "opera.opera_company",
                        "friendly_name": "Festival d'Avignon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera_production.producing_company",
                        "friendly_name": "Producing Company"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_production . \nVALUES ?x1 { :m.0bwl8l } \n?x0 :opera.opera_production.producing_company ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.opera_production (JOIN opera.opera_production.producing_company m.0bwl8l))"
        }
    },
    "118": {
        "generations": "which star has a radius of 31.0??",
        "ori_data_item": {
            "qid": 2100440006000,
            "question": "31.0 is the radius of what star?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cq32",
                    "entity_name": "Alpha Persei"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star",
                        "class": "astronomy.star",
                        "friendly_name": "Star",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "31.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "31.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star.radius",
                        "friendly_name": "Radius"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nVALUES ?x1 { \"31.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :astronomy.star.radius ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star (JOIN astronomy.star.radius 31.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "119": {
        "generations": "which language family is a member of the insular celtic languages??",
        "ori_data_item": {
            "qid": 3200799011000,
            "question": "what language family does the insular celtic languages share a family with?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.099n91",
                    "entity_name": "Iranian languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rsnz",
                    "entity_name": "West Slavic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01s460",
                    "entity_name": "Gallo-Romance languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03t28",
                    "entity_name": "Italic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06bpx",
                    "entity_name": "Romance languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03489",
                    "entity_name": "Germanic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013bdx",
                    "entity_name": "Lechitic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jx39",
                    "entity_name": "Balto-Slavic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06n20",
                    "entity_name": "Slavic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03rmp",
                    "entity_name": "Indo-Iranian languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.038lr",
                    "entity_name": "Goidelic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.020gn5",
                    "entity_name": "Bihari languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01sd8",
                    "entity_name": "Celtic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wy36",
                    "entity_name": "Hindi language"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dr8x",
                    "entity_name": "South Slavic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qzf",
                    "entity_name": "East Slavic languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06rc7",
                    "entity_name": "Sorbian languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06v3q8",
                    "entity_name": "Continental Celtic languages"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_family",
                        "class": "language.language_family",
                        "friendly_name": "Language Family",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "language.language_family",
                        "class": "language.language_family",
                        "friendly_name": "Language Family",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03wk8c",
                        "class": "language.language_family",
                        "friendly_name": "Insular Celtic languages",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_family.member_of_language_families",
                        "friendly_name": "member of language families"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "language.language_family.member_of_language_families",
                        "friendly_name": "member of language families"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_family . \n?x1 :type.object.type :language.language_family . \nVALUES ?x2 { :m.03wk8c } \n?x0 :language.language_family.member_of_language_families ?x1 . \n?x2 :language.language_family.member_of_language_families ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_family (JOIN language.language_family.member_of_language_families (JOIN (R language.language_family.member_of_language_families) m.03wk8c)))"
        }
    },
    "120": {
        "generations": "what religion has a place of worship called Tempel Synagogue in Krak\u00f3w??",
        "ori_data_item": {
            "qid": 2102264015000,
            "question": "tempel synagogue, krak\u00f3w is the place of worship of which religion?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_gx",
                    "entity_name": "Judaism"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06h98",
                    "entity_name": "Reform Judaism"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0278772",
                        "class": "religion.place_of_worship",
                        "friendly_name": "Tempel Synagogue, Krak\u00f3w",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religion.places_of_worship",
                        "friendly_name": "Places of worship (current)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religion . \nVALUES ?x1 { :m.0278772 } \n?x0 :religion.religion.places_of_worship ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religion (JOIN religion.religion.places_of_worship m.0278772))"
        }
    },
    "121": {
        "generations": "what work is cited in phyletic devergence and specialization for pelagic life in the antarctic nototheniid fish pleuragramma antarcticum??",
        "ori_data_item": {
            "qid": 2101270009000,
            "question": "find the works cited in phyletic devergence and specialization for pelagic life in the antarctic nototheniid fish pleuragramma antarcticum.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bhh_lk",
                    "entity_name": "Ontogeny and phylogeny\u2014revisited and reunited"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.cited_work",
                        "class": "book.cited_work",
                        "friendly_name": "Cited work",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bnng80",
                        "class": "book.scholarly_work",
                        "friendly_name": "Phyletic devergence and specialization for pelagic life in the Antarctic nototheniid fish Pleuragramma antarcticum",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.cited_work.cited_in",
                        "friendly_name": "Cited in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.cited_work . \nVALUES ?x1 { :m.0bnng80 } \n?x0 :book.cited_work.cited_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.cited_work (JOIN book.cited_work.cited_in m.0bnng80))"
        }
    },
    "122": {
        "generations": "which comic book story was penciled by frank??",
        "ori_data_item": {
            "qid": 2102599010000,
            "question": "which comic book story is penciled by frank",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ww7q",
                    "entity_name": "300"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hcnk",
                    "entity_name": "Sin City"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01s283",
                    "entity_name": "Logan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05syzyf",
                    "entity_name": "Elektra Lives Again"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02cyt",
                    "entity_name": "Daredevil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pdq6",
                    "entity_name": "The Dark Knight Strikes Again"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_6bv",
                    "entity_name": "Twilight Zone literature"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jpdn",
                        "class": "comic_books.comic_book_penciler",
                        "friendly_name": "frank",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.pencils",
                        "friendly_name": "Pencils"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.0jpdn } \n?x0 :comic_books.comic_book_story.pencils ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.pencils m.0jpdn))"
        }
    },
    "123": {
        "generations": "what US patent was assigned to lucent technologies, inc.??",
        "ori_data_item": {
            "qid": 2101912014000,
            "question": "what patent is assigned to lucent technologies, inc.?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j5gh2s",
                    "entity_name": "Classification technique using random decision forests"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04m53",
                        "class": "law.patent_assignee",
                        "friendly_name": "lucent technologies, inc.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.assignee",
                        "friendly_name": "Assignee"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.04m53 } \n?x0 :law.us_patent.assignee ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.assignee m.04m53))"
        }
    },
    "124": {
        "generations": "which music video credits stephanie gluck as the choreographer??",
        "ori_data_item": {
            "qid": 2102935006000,
            "question": "what is the name of the music video that stephanie gluck choreographed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2164k",
                    "entity_name": "Prince Charming"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.music_video",
                        "class": "music.music_video",
                        "friendly_name": "Music video",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j216zp",
                        "class": "music.music_video_choreographer",
                        "friendly_name": "Stephanie Gluck",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.music_video.choreographer",
                        "friendly_name": "Choreographer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video . \nVALUES ?x1 { :m.0j216zp } \n?x0 :music.music_video.choreographer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.music_video (JOIN music.music_video.choreographer m.0j216zp))"
        }
    },
    "125": {
        "generations": "what is the name of the department within the university of la sabana that is related to the especializaci\u00f3n en gerencia estrat\u00e9gica ibagu\u00e9 (en convenio con la c\u00e1mara de comercio de ibagu\u00e9)??",
        "ori_data_item": {
            "qid": 3202678002000,
            "question": "the especializaci\u00f3n en gerencia estrat\u00e9gica ibagu\u00e9 (en convenio con la c\u00e1mara de comercio de ibagu\u00e9) is related to a subsidiary department within the university of la sabana. what is this subsidiary department called?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hz9jdz",
                    "entity_name": "Instituto de Postgrados Forum"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hzgtkm",
                        "class": "education.department",
                        "friendly_name": "Especializaci\u00f3n en Gerencia Estrat\u00e9gica Ibagu\u00e9 (en convenio con la C\u00e1mara de Comercio de Ibagu\u00e9)",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.011f0yfk",
                        "class": "education.university",
                        "friendly_name": "University of La Sabana",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.department.department_of",
                        "friendly_name": "Subsidiary department of"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "education.university.departments",
                        "friendly_name": "Departments"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.0hzgtkm } \nVALUES ?x2 { :m.011f0yfk } \n?x1 :education.department.department_of ?x0 . \n?x2 :education.university.departments ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.department (AND (JOIN (R education.department.department_of) m.0hzgtkm) (JOIN (R education.university.departments) m.011f0yfk)))"
        }
    },
    "126": {
        "generations": "what automotive generation is associated with the B-Body platform??",
        "ori_data_item": {
            "qid": 2101156012000,
            "question": "what is the automobile generation that uses the platform of b-body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hdqn8",
                    "entity_name": "First Generation Pontiac Grand Prix"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01x37vk",
                        "class": "automotive.platform",
                        "friendly_name": "B-Body",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.platforms",
                        "friendly_name": "Platforms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \nVALUES ?x1 { :m.01x37vk } \n?x0 :automotive.generation.platforms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (JOIN automotive.generation.platforms m.01x37vk))"
        }
    },
    "127": {
        "generations": "what album content type is shared by both music as a weapon ii and chobits character song collection??",
        "ori_data_item": {
            "qid": 3203849001000,
            "question": "music as a weapon ii and chobits character song collection share what content type between albums?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02jbfk",
                    "entity_name": "Compilation album"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.album_content_type",
                        "class": "music.album_content_type",
                        "friendly_name": "Album content type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01fkfkh",
                        "class": "music.live_album",
                        "friendly_name": "Music as a Weapon II",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01g1mj3",
                        "class": "tv.tv_soundtrack",
                        "friendly_name": "Chobits Character Song Collection",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album_content_type.albums",
                        "friendly_name": "Albums"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "music.album_content_type.albums",
                        "friendly_name": "Albums"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album_content_type . \nVALUES ?x1 { :m.01fkfkh } \nVALUES ?x2 { :m.01g1mj3 } \n?x0 :music.album_content_type.albums ?x1 . \n?x0 :music.album_content_type.albums ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.album_content_type (AND (JOIN music.album_content_type.albums m.01fkfkh) (JOIN music.album_content_type.albums m.01g1mj3)))"
        }
    },
    "128": {
        "generations": "what is the temperament of both denmark feist and penciltail feist in biology's breed temperament??",
        "ori_data_item": {
            "qid": 3200477015000,
            "question": "what are denmark feist's and penciltail feist's like?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kr4vb",
                    "entity_name": "Loyal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kt3z7",
                    "entity_name": "Fearless"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.breed_temperament",
                        "class": "biology.breed_temperament",
                        "friendly_name": "Breed temperament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04svmr1",
                        "class": "biology.animal_breed",
                        "friendly_name": "Denmark Feist",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04sxbrr",
                        "class": "biology.animal_breed",
                        "friendly_name": "Penciltail Feist",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.breed_temperament . \nVALUES ?x1 { :m.04svmr1 } \nVALUES ?x2 { :m.04sxbrr } \n?x1 :biology.animal_breed.temperament ?x0 . \n?x2 :biology.animal_breed.temperament ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.breed_temperament (AND (JOIN (R biology.animal_breed.temperament) m.04svmr1) (JOIN (R biology.animal_breed.temperament) m.04sxbrr)))"
        }
    },
    "129": {
        "generations": "what governmental body was formed in the year 1992??",
        "ori_data_item": {
            "qid": 2100571013000,
            "question": "which governmental body was formed on 1992?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w1n0k",
                    "entity_name": "Supreme Council of the Republic of Khakassia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dyxvl",
                    "entity_name": "Slovenian Parliament"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1992^^http://www.w3.org/2001/XMLSchema#gYear",
                        "class": "type.datetime",
                        "friendly_name": "1992",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.date_formed",
                        "friendly_name": "Date formed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { \"1992-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear> } \n?x0 :government.governmental_body.date_formed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.date_formed 1992^^http://www.w3.org/2001/XMLSchema#gYear))"
        }
    },
    "130": {
        "generations": "what type of airport is salt lake city international??",
        "ori_data_item": {
            "qid": 2100499006000,
            "question": "what kind of airport is the salt lake city international?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xpkvj",
                    "entity_name": "Public airport"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airport_type",
                        "class": "aviation.airport_type",
                        "friendly_name": "Airport type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01n584",
                        "class": "aviation.airport",
                        "friendly_name": "salt lake city international",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airport_type.airports_of_this_type",
                        "friendly_name": "Airports of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airport_type . \nVALUES ?x1 { :m.01n584 } \n?x0 :aviation.airport_type.airports_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airport_type (JOIN aviation.airport_type.airports_of_this_type m.01n584))"
        }
    },
    "131": {
        "generations": "what is the most recent composition that belongs to the superform of concertos??",
        "ori_data_item": {
            "qid": 4303240002000,
            "question": "what concertos was performed the most recently?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j50hm",
                    "entity_name": "Concerto for Piano and Orchestra no. 2"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.composition",
                        "class": "music.composition",
                        "friendly_name": "Composition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.compositional_form",
                        "class": "music.compositional_form",
                        "friendly_name": "Composition type",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0c0y7",
                        "class": "music.compositional_form",
                        "friendly_name": "concertos",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.composition.form",
                        "friendly_name": "Kind of composition"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "music.composition.date_of_first_performance",
                        "friendly_name": "Date of first performance"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "music.compositional_form.superforms",
                        "friendly_name": "Super-forms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.composition . \n?x1 :type.object.type :music.compositional_form . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :music.composition . \n?y1 :type.object.type :music.compositional_form . \nVALUES ?y3 { :m.0c0y7 } \n?y0 :music.composition.form ?y1 . \n?y0 :music.composition.date_of_first_performance ?y2 . \n?y1 :music.compositional_form.superforms ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.0c0y7 } \n?x0 :music.composition.form ?x1 . \n?x0 :music.composition.date_of_first_performance ?x2 . \n?x1 :music.compositional_form.superforms ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(ARGMAX (AND music.composition (JOIN music.composition.form (JOIN music.compositional_form.superforms m.0c0y7))) music.composition.date_of_first_performance)"
        }
    },
    "132": {
        "generations": "what visual art medium has artworks that belong to the art form of glass??",
        "ori_data_item": {
            "qid": 3203122014000,
            "question": "glass artworks are represented in which visual art medium?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03yst4g",
                    "entity_name": "hand blown glass"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_art_medium",
                        "class": "visual_art.visual_art_medium",
                        "friendly_name": "Visual Art Medium",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.039jq",
                        "class": "visual_art.visual_art_form",
                        "friendly_name": "Glass",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_art_medium.artworks",
                        "friendly_name": "Artworks"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "visual_art.artwork.art_form",
                        "friendly_name": "Art Form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_art_medium . \n?x1 :type.object.type :visual_art.artwork . \nVALUES ?x2 { :m.039jq } \n?x0 :visual_art.visual_art_medium.artworks ?x1 . \n?x1 :visual_art.artwork.art_form ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_art_medium (JOIN visual_art.visual_art_medium.artworks (JOIN visual_art.artwork.art_form m.039jq)))"
        }
    },
    "133": {
        "generations": "which boxing match ended with the decision of manny pacquiao vs. brandon rios??",
        "ori_data_item": {
            "qid": 2101240016000,
            "question": "what is the decision of manny pacquiao vs. brandon rios?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cjmrp",
                    "entity_name": "Unanimous decision"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boxing.boxing_decision",
                        "class": "boxing.boxing_decision",
                        "friendly_name": "Boxing decision",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0w4yxfv",
                        "class": "boxing.boxing_match",
                        "friendly_name": "Manny Pacquiao vs. Brandon Rios",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boxing.boxing_decision.matches_ended_with_this_decision",
                        "friendly_name": "Matches ended with this decision"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boxing.boxing_decision . \nVALUES ?x1 { :m.0w4yxfv } \n?x0 :boxing.boxing_decision.matches_ended_with_this_decision ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boxing"
            ],
            "s_expression": "(AND boxing.boxing_decision (JOIN boxing.boxing_decision.matches_ended_with_this_decision m.0w4yxfv))"
        }
    },
    "134": {
        "generations": "who are the male british judges of awards??",
        "ori_data_item": {
            "qid": 3201985012000,
            "question": "which males award judge is born in british state?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lsc1",
                    "entity_name": "Martin Rees"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dpdl",
                    "entity_name": "Mike Newell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06l81t",
                    "entity_name": "Tim Parks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05vnqj",
                    "entity_name": "Philip Powell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09m6rc",
                    "entity_name": "Gavin Grant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.050x4f",
                    "entity_name": "Christopher Ricks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01d0lr",
                    "entity_name": "Michael Portillo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05cc34",
                    "entity_name": "Peter Palumbo, Baron Palumbo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8jnc",
                    "entity_name": "Hardeep Singh Kohli"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y0gb7",
                    "entity_name": "Geoff Andrew"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jr6g",
                    "entity_name": "Martin Seymour-Smith"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "award.award_judge",
                        "class": "award.award_judge",
                        "friendly_name": "Award Judge",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07ssc",
                        "class": "location.country",
                        "friendly_name": "british state",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05zppz",
                        "class": "people.gender",
                        "friendly_name": "males",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.nationality",
                        "friendly_name": "Country of nationality"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.person.gender",
                        "friendly_name": "Gender"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.award_judge . \nVALUES ?x1 { :m.07ssc } \nVALUES ?x2 { :m.05zppz } \n?x0 :people.person.nationality ?x1 . \n?x0 :people.person.gender ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND award.award_judge (AND (JOIN people.person.nationality m.07ssc) (JOIN people.person.gender m.05zppz)))"
        }
    },
    "135": {
        "generations": "what bipropellant rocket engine has a vacuum specific impulse greater than or equal to 375.6??",
        "ori_data_item": {
            "qid": 2105370012000,
            "question": "please state which bipropellant rocket engine contains an isp greater than or equal 375.6?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.032blg",
                    "entity_name": "Space Shuttle main engine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kfw0m",
                    "entity_name": "RD-0146"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlt61",
                    "entity_name": "RD-550"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlt6v",
                    "entity_name": "RD-512"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xltbl",
                    "entity_name": "RD-350"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xltc9",
                    "entity_name": "RD-303"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xltd2",
                    "entity_name": "RD-302"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xltdw",
                    "entity_name": "RD-301"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0351y6",
                    "entity_name": "RL10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026xrt0",
                    "entity_name": "HM7B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xhkbz",
                    "entity_name": "RD-0120"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03k0hk4",
                    "entity_name": "RD-185"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043jfp",
                    "entity_name": "RS-68"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlw0x",
                    "entity_name": "RD-135"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlw36",
                    "entity_name": "RD-130"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03j_sgs",
                    "entity_name": "RD-167"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026rhjc",
                    "entity_name": "Vinci"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034_q7",
                    "entity_name": "Rocketdyne J-2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dsjwd",
                    "entity_name": "RS-83"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.bipropellant_rocket_engine",
                        "class": "spaceflight.bipropellant_rocket_engine",
                        "friendly_name": "Bipropellant rocket engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "375.6^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "375.6",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine.isp_vacuum",
                        "friendly_name": "Isp (vacuum)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.bipropellant_rocket_engine . \nFILTER (?x1 >= \"375.6\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :spaceflight.rocket_engine.isp_vacuum ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.bipropellant_rocket_engine (ge spaceflight.rocket_engine.isp_vacuum 375.6^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "136": {
        "generations": "what sports team was previously known as the olean oilers??",
        "ori_data_item": {
            "qid": 2100811002000,
            "question": "olean oilers is the former name of which sports team?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025wndm",
                    "entity_name": "Olean Yankees"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team",
                        "class": "sports.sports_team",
                        "friendly_name": "Sports Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02w8mdw",
                        "class": "sports.defunct_sports_team",
                        "friendly_name": "Olean Oilers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_team.previously_known_as",
                        "friendly_name": "Previously Known As"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team . \nVALUES ?x1 { :m.02w8mdw } \n?x0 :sports.sports_team.previously_known_as ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team (JOIN sports.sports_team.previously_known_as m.02w8mdw))"
        }
    },
    "137": {
        "generations": "which medical condition in fiction is experienced by a character based on patrick heron watson??",
        "ori_data_item": {
            "qid": 3201351013000,
            "question": "a character based on patrick heron watson has what medical condition?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l8bg",
                    "entity_name": "Posttraumatic stress disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063dqgy",
                    "entity_name": "Gun Shoot Wound"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.medical_condition_in_fiction",
                        "class": "fictional_universe.medical_condition_in_fiction",
                        "friendly_name": "Medical condition in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0n3gz8_",
                        "class": "fictional_universe.person_in_fiction",
                        "friendly_name": "Patrick Heron Watson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.medical_condition_in_fiction.characters_with_this_condition",
                        "friendly_name": "Characters with this condition"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_character.based_on",
                        "friendly_name": "Based On"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.medical_condition_in_fiction . \n?x1 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x2 { :m.0n3gz8_ } \n?x0 :fictional_universe.medical_condition_in_fiction.characters_with_this_condition ?x1 . \n?x1 :fictional_universe.fictional_character.based_on ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.medical_condition_in_fiction (JOIN fictional_universe.medical_condition_in_fiction.characters_with_this_condition (JOIN fictional_universe.fictional_character.based_on m.0n3gz8_)))"
        }
    },
    "138": {
        "generations": "which programming language was influenced by liberty basic??",
        "ori_data_item": {
            "qid": 2100743011000,
            "question": "liberty basic has been influenced by which programming language?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.070d2",
                    "entity_name": "Smalltalk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h22q",
                    "entity_name": "QuickBASIC"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dzjl",
                        "class": "computer.programming_language",
                        "friendly_name": "Liberty BASIC",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.programming_language.influenced",
                        "friendly_name": "Influenced"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language . \nVALUES ?x1 { :m.0dzjl } \n?x0 :computer.programming_language.influenced ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language (JOIN computer.programming_language.influenced m.0dzjl))"
        }
    },
    "139": {
        "generations": "what is the category of poll respondents that has the earliest end date for the election polls they participated in??",
        "ori_data_item": {
            "qid": 3201409003000,
            "question": "in the first election, what poll respondent categories existed at the time?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m3jn3g",
                    "entity_name": "Registered Voters"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.poll_respondent_category",
                        "class": "government.poll_respondent_category",
                        "friendly_name": "Poll respondent category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.election_poll",
                        "class": "government.election_poll",
                        "friendly_name": "Election poll",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.poll_respondent_category.polls",
                        "friendly_name": "Polls"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "government.election_poll.poll_end_date",
                        "friendly_name": "Poll end date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.poll_respondent_category . \n?x1 :type.object.type :government.election_poll . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :government.poll_respondent_category . \n?y1 :type.object.type :government.election_poll . \n?y0 :government.poll_respondent_category.polls ?y1 . \n?y1 :government.election_poll.poll_end_date ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :government.poll_respondent_category.polls ?x1 . \n?x1 :government.election_poll.poll_end_date ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(ARGMIN government.poll_respondent_category (JOIN government.poll_respondent_category.polls government.election_poll.poll_end_date))"
        }
    },
    "140": {
        "generations": "which roads have the same orientation as provincial highway 61 in terms of transportation??",
        "ori_data_item": {
            "qid": 2101489007000,
            "question": "provincial highway 61 has which road orientation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05kj5r3",
                    "entity_name": "North-South"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "transportation.road_orientation",
                        "class": "transportation.road_orientation",
                        "friendly_name": "Road orientation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.053x41",
                        "class": "transportation.road",
                        "friendly_name": "Provincial Highway 61",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "transportation.road_orientation.roads_with_this_orientation",
                        "friendly_name": "Roads with this orientation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :transportation.road_orientation . \nVALUES ?x1 { :m.053x41 } \n?x0 :transportation.road_orientation.roads_with_this_orientation ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "transportation"
            ],
            "s_expression": "(AND transportation.road_orientation (JOIN transportation.road_orientation.roads_with_this_orientation m.053x41))"
        }
    },
    "141": {
        "generations": "what sport has a position called lock??",
        "ori_data_item": {
            "qid": 2101267001000,
            "question": "the lock is a position in what sport?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06br8",
                    "entity_name": "Rugby union"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sport",
                        "class": "sports.sport",
                        "friendly_name": "Sport",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05prmhx",
                        "class": "sports.sports_position",
                        "friendly_name": "Lock",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sport.positions",
                        "friendly_name": "Positions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sport . \nVALUES ?x1 { :m.05prmhx } \n?x0 :sports.sport.positions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sport (JOIN sports.sport.positions m.05prmhx))"
        }
    },
    "142": {
        "generations": "which competition ended the earliest??",
        "ori_data_item": {
            "qid": 2104364000000,
            "question": "the competition which ended the earliest was what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gky7",
                    "entity_name": "1903 Tour de France"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "award.competition",
                        "class": "award.competition",
                        "friendly_name": "Competition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.end_date",
                        "friendly_name": "End date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.competition . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :award.competition . \n?y0 :time.event.end_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.event.end_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMIN award.competition time.event.end_date)"
        }
    },
    "143": {
        "generations": "what is the meteoric composition of the Anlong meteorites??",
        "ori_data_item": {
            "qid": 2101672007000,
            "question": "to which meteorite class does anlong belong?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02m9p9",
                    "entity_name": "Chondrite"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.meteoric_composition",
                        "class": "astronomy.meteoric_composition",
                        "friendly_name": "Meteorite classfication",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bwk6_m",
                        "class": "astronomy.meteorite",
                        "friendly_name": "Anlong",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.meteoric_composition.meteorites",
                        "friendly_name": "Meteorites"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteoric_composition . \nVALUES ?x1 { :m.0bwk6_m } \n?x0 :astronomy.meteoric_composition.meteorites ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.meteoric_composition (JOIN astronomy.meteoric_composition.meteorites m.0bwk6_m))"
        }
    },
    "144": {
        "generations": "what generation of cars with a generation number less than 7 is made by honda motor company, ltd??",
        "ori_data_item": {
            "qid": 4303546005000,
            "question": "with honda motor company, ltd as the parent company, which automobile generation has the generation number less than 7?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jjdrn",
                    "entity_name": "Sixth Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jcmhz",
                    "entity_name": "Third Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jh130",
                    "entity_name": "First Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jmlrp",
                    "entity_name": "Second Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmxf2",
                    "entity_name": "First Generation Honda City"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jhwrh",
                    "entity_name": "Fifth Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jnqz3",
                    "entity_name": "Fourth Generation Honda Civic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k_l06",
                    "entity_name": "First Generation Honda Pilot"
                }
            ],
            "function": "<",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.make",
                        "class": "automotive.make",
                        "friendly_name": "Automobile Make",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03kr0",
                        "class": "automotive.company",
                        "friendly_name": "Honda Motor Company, Ltd",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "7^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "7",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.make",
                        "friendly_name": "Make"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "automotive.make.parent_company",
                        "friendly_name": "Parent Company"
                    },
                    {
                        "start": 0,
                        "end": 3,
                        "relation": "automotive.generation.generation_number",
                        "friendly_name": "Generation Number"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \n?x1 :type.object.type :automotive.make . \nVALUES ?x2 { :m.03kr0 } \nFILTER (?x3 < \"7\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :automotive.generation.make ?x1 . \n?x1 :automotive.make.parent_company ?x2 . \n?x0 :automotive.generation.generation_number ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (AND (JOIN automotive.generation.make (JOIN automotive.make.parent_company m.03kr0)) (lt automotive.generation.generation_number 7^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "145": {
        "generations": "what cheese certification includes neufch\u00e2tel cheese as a certified cheese??",
        "ori_data_item": {
            "qid": 2101174018000,
            "question": "neufch\u00e2tel cheese has what cheese certification?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j6kd",
                    "entity_name": "Appellation d'origine contr\u00f4l\u00e9e"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese_certification",
                        "class": "food.cheese_certification",
                        "friendly_name": "Cheese certification",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0597nk",
                        "class": "food.cheese",
                        "friendly_name": "Neufch\u00e2tel cheese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.cheese_certification.certified_cheeses",
                        "friendly_name": "Certified Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese_certification . \nVALUES ?x1 { :m.0597nk } \n?x0 :food.cheese_certification.certified_cheeses ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.cheese_certification (JOIN food.cheese_certification.certified_cheeses m.0597nk))"
        }
    },
    "146": {
        "generations": "which transport operator serves travel destinations that include moss airport, rygge??",
        "ori_data_item": {
            "qid": 3203799004000,
            "question": "which transport operator has a terminus at moss airport, rygge?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01c5zg",
                    "entity_name": "Wider\u00f8e"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01c5zw",
                    "entity_name": "Norwegian Air Shuttle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xgnh",
                    "entity_name": "Czech Airlines"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049mr",
                    "entity_name": "KLM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p4wb",
                    "entity_name": "Lufthansa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01m_zd",
                    "entity_name": "Ryanair"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015msr",
                    "entity_name": "Scandinavian Airlines"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.transport_operator",
                        "class": "travel.transport_operator",
                        "friendly_name": "Transport operator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.transportation",
                        "class": "travel.transportation",
                        "friendly_name": "Transportation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02pp5hk",
                        "class": "travel.transport_terminus",
                        "friendly_name": "Moss Airport, Rygge",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.transport_operator.travel_destinations_served",
                        "friendly_name": "Travel destinations served"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "travel.transportation.transport_terminus",
                        "friendly_name": "Transport terminus"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.transport_operator . \n?x1 :type.object.type :travel.transportation . \nVALUES ?x2 { :m.02pp5hk } \n?x0 :travel.transport_operator.travel_destinations_served ?x1 . \n?x1 :travel.transportation.transport_terminus ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.transport_operator (JOIN travel.transport_operator.travel_destinations_served (JOIN travel.transportation.transport_terminus m.02pp5hk)))"
        }
    },
    "147": {
        "generations": "which hospital specializes in pathology??",
        "ori_data_item": {
            "qid": 2101118017000,
            "question": "pathology is practiced in which hospital?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtvvm3",
                    "entity_name": "Riyadh Military Hospital"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.hospital",
                        "class": "medicine.hospital",
                        "friendly_name": "Hospital",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0d0pp",
                        "class": "medicine.medical_specialty",
                        "friendly_name": "Pathology",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.hospital.medical_specialties",
                        "friendly_name": "Medical Specialties"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.hospital . \nVALUES ?x1 { :m.0d0pp } \n?x0 :medicine.hospital.medical_specialties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.hospital (JOIN medicine.hospital.medical_specialties m.0d0pp))"
        }
    },
    "148": {
        "generations": "what are the quotations that were said in the year 1996??",
        "ori_data_item": {
            "qid": 2100074005000,
            "question": "which quotation is on 1996?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pxcxzg",
                    "entity_name": "PART 2 THE ROAD TO NATURAL FARMING [page 197] ... D. From Organic Farming to Natural Farming [page 205] In the future, American agriculture will probably grow even larger on business capital, but on the other hand, people who are inclined to using natural methods will probably progress from organic to natural farming. The problem, however, is that the distinction between organic and natural farming is still not generally understood. Of course, scientific farming and organic farming are not that different, and fundamentally both can be called scientific. Consequently, the boundary between them is unclear. The major objective of the international conference I attended on this [1986] visit to the U.S. was to assess the current world situation and to determine in which direction to move in the future. In more concrete terms, the goal was to examine how various farming methods now being practised, such as permaculture, organic farming, and other methods based on new ideas, relate to each other and to what extent they can act in concert. I may just be feathering my own nest, but as far as I can see, the only way is to follow the road back to nature, bearing in mind an Oriental natural philosophy. I believe that in doing this, we will establish techniques that go beyond our present technology. Although this philosophy still takes various forms and names, it is clear that the thought underlying it is my \"Green Philosophy\" as I described it in The One\u2013Straw Revolution. It is fine to turn gradually from organic farming onto the road that leads to anti-scientific farming. It is fine to set our sights on farming that perpetuates itself infinitely and on a return to nature, even while enjoying life on a designed farm. But these must not end up as microscopic techniques and should not be used as temporary fads. Even though we have these at our command, at the core there must be a natural philosophy, in order to establish a farming method that will become the great principle of an agriculture that continues infinitely."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051t73l",
                    "entity_name": "Science is what we understand well enough to explain to a computer. Art is everything else we do."
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1996^^http://www.w3.org/2001/XMLSchema#gYear",
                        "class": "type.datetime",
                        "friendly_name": "1996",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.quotation.date",
                        "friendly_name": "Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \nVALUES ?x1 { \"1996-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear> } \n?x0 :media_common.quotation.date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.quotation (JOIN media_common.quotation.date 1996^^http://www.w3.org/2001/XMLSchema#gYear))"
        }
    },
    "149": {
        "generations": "which music producer has produced tracks with tony humphries as the recording producer??",
        "ori_data_item": {
            "qid": 3202551005000,
            "question": "what are all of the recording producers who collaborated with tony humphries?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f6n1l",
                    "entity_name": "Eric Wikman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f6n2r",
                    "entity_name": "James Donaldson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01f2s5",
                    "entity_name": "Jungle Brothers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vvkg8",
                    "entity_name": "Paul Fox"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01wm_nc",
                    "entity_name": "DJ Red Alert"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.producer",
                        "class": "music.producer",
                        "friendly_name": "Record Producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.recording",
                        "class": "music.recording",
                        "friendly_name": "Musical Recording",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01w8w6z",
                        "class": "music.producer",
                        "friendly_name": "Tony Humphries",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.producer.tracks_produced",
                        "friendly_name": "Recordings produced"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.recording.producer",
                        "friendly_name": "Producer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.producer . \n?x1 :type.object.type :music.recording . \nVALUES ?x2 { :m.01w8w6z } \n?x0 :music.producer.tracks_produced ?x1 . \n?x1 :music.recording.producer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.producer (JOIN music.producer.tracks_produced (JOIN music.recording.producer m.01w8w6z)))"
        }
    },
    "150": {
        "generations": "what dishes are considered road food cuisine??",
        "ori_data_item": {
            "qid": 2100717009000,
            "question": "name a road food dish?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0663v",
                    "entity_name": "Pizza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b9xk",
                    "entity_name": "Hot dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cdn1",
                    "entity_name": "Hamburger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01px4b",
                    "entity_name": "Fried chicken"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.dish",
                        "class": "food.dish",
                        "friendly_name": "Dish",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zg7s70",
                        "class": "dining.cuisine",
                        "friendly_name": "Road food",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.dish.cuisine",
                        "friendly_name": "Cuisine"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.dish . \nVALUES ?x1 { :m.0zg7s70 } \n?x0 :food.dish.cuisine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.dish (JOIN food.dish.cuisine m.0zg7s70))"
        }
    },
    "151": {
        "generations": "which html layout engine is used by browsers developed by mozilla corporation??",
        "ori_data_item": {
            "qid": 3204146004000,
            "question": "which html layout engine is used by the web browser made by mozilla corporation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgj4",
                    "entity_name": "Gecko"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.html_layout_engine",
                        "class": "computer.html_layout_engine",
                        "friendly_name": "HTML Layout Engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.web_browser",
                        "class": "computer.web_browser",
                        "friendly_name": "Web browser",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.077308",
                        "class": "computer.software_developer",
                        "friendly_name": "Mozilla Corporation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.html_layout_engine.browsers",
                        "friendly_name": "Browsers"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "computer.software.developer",
                        "friendly_name": "Developer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.html_layout_engine . \n?x1 :type.object.type :computer.web_browser . \nVALUES ?x2 { :m.077308 } \n?x0 :computer.html_layout_engine.browsers ?x1 . \n?x1 :computer.software.developer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.html_layout_engine (JOIN computer.html_layout_engine.browsers (JOIN computer.software.developer m.077308)))"
        }
    },
    "152": {
        "generations": "which literary series is authored by richard ford??",
        "ori_data_item": {
            "qid": 2100033011000,
            "question": "what book series is authored by richard ford?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03fh90",
                    "entity_name": "Lone Wolf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052zv0j",
                    "entity_name": "The Lencian Trilogy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.literary_series",
                        "class": "book.literary_series",
                        "friendly_name": "Literary Series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.052zv1p",
                        "class": "book.author",
                        "friendly_name": "Richard Ford",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.literary_series.author_s",
                        "friendly_name": "Author(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.literary_series . \nVALUES ?x1 { :m.052zv1p } \n?x0 :book.literary_series.author_s ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.literary_series (JOIN book.literary_series.author_s m.052zv1p))"
        }
    },
    "153": {
        "generations": "which user profile has male actors as their favorite topic??",
        "ori_data_item": {
            "qid": 2100883004000,
            "question": "male actor is one of the favorite freebase topics for which user profile?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064gvnl",
                    "entity_name": "steve_allison"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02hrh1q",
                        "class": "common.topic",
                        "friendly_name": "male actor",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.favorite_topics",
                        "friendly_name": "Favorite Freebase Topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.02hrh1q } \n?x0 :freebase.user_profile.favorite_topics ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.favorite_topics m.02hrh1q))"
        }
    },
    "154": {
        "generations": "which olympic games had men's volleyball as a sport contested as a demonstration??",
        "ori_data_item": {
            "qid": 3204046002000,
            "question": "which olympic game is contested as a demonstration of the discipline that is men's volleyball?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbjq",
                    "entity_name": "1924 Summer Olympics"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "olympics.olympic_sport",
                        "class": "olympics.olympic_sport",
                        "friendly_name": "Olympic discipline",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04fk282",
                        "class": "olympics.olympic_event",
                        "friendly_name": "Men's Volleyball",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "olympics.olympic_sport.games_contested_as_demonstration",
                        "friendly_name": "Games contested as demonstration"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "olympics.olympic_event.sport",
                        "friendly_name": "Discipline"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_games . \n?x1 :type.object.type :olympics.olympic_sport . \nVALUES ?x2 { :m.04fk282 } \n?x1 :olympics.olympic_sport.games_contested_as_demonstration ?x0 . \n?x2 :olympics.olympic_event.sport ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_games (JOIN (R olympics.olympic_sport.games_contested_as_demonstration) (JOIN (R olympics.olympic_event.sport) m.04fk282)))"
        }
    },
    "155": {
        "generations": "which book edition is related to the book multiple forcing??",
        "ori_data_item": {
            "qid": 2102278003000,
            "question": "multiple forcing is an edition of what book edition?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08_8hmy",
                    "entity_name": "Multiple forcing"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06b6n31",
                        "class": "book.book",
                        "friendly_name": "Multiple forcing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition.book",
                        "friendly_name": "Edition Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition . \nVALUES ?x1 { :m.06b6n31 } \n?x0 :book.book_edition.book ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition (JOIN book.book_edition.book m.06b6n31))"
        }
    },
    "156": {
        "generations": "which fictional universe features the species found in the cthulu mythos??",
        "ori_data_item": {
            "qid": 2102277015000,
            "question": "what species is cthulu mythos in their fictional world?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021_73",
                    "entity_name": "Shoggoth"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_species",
                        "class": "fictional_universe.character_species",
                        "friendly_name": "Character Species",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01qxt",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "cthulu mythos",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.character_species.found_in_fictional_universe",
                        "friendly_name": "Found in fictional universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.01qxt } \n?x0 :fictional_universe.character_species.found_in_fictional_universe ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_species (JOIN fictional_universe.character_species.found_in_fictional_universe m.01qxt))"
        }
    },
    "157": {
        "generations": "what computer does the amiga 1200 emulator emulate??",
        "ori_data_item": {
            "qid": 2102970016000,
            "question": "the computer amiga 1200 was emulated by which computer emulator?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063km7b",
                    "entity_name": "WinUAE"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_emulator",
                        "class": "computer.computer_emulator",
                        "friendly_name": "Computer Emulator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.013my",
                        "class": "computer.computer",
                        "friendly_name": "Amiga 1200",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer_emulator.computer",
                        "friendly_name": "Emulated Computer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_emulator . \nVALUES ?x1 { :m.013my } \n?x0 :computer.computer_emulator.computer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer_emulator (JOIN computer.computer_emulator.computer m.013my))"
        }
    },
    "158": {
        "generations": "which boxing match ended with the decision of manny pacquiao vs. timothy bradley??",
        "ori_data_item": {
            "qid": 2101240008000,
            "question": "in what decision did the manny pacquiao vs. timothy bradley boxing match end?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwm3g",
                    "entity_name": "Split decision"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boxing.boxing_decision",
                        "class": "boxing.boxing_decision",
                        "friendly_name": "Boxing decision",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j24b7h",
                        "class": "boxing.boxing_match",
                        "friendly_name": "Manny Pacquiao vs. Timothy Bradley",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boxing.boxing_decision.matches_ended_with_this_decision",
                        "friendly_name": "Matches ended with this decision"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boxing.boxing_decision . \nVALUES ?x1 { :m.0j24b7h } \n?x0 :boxing.boxing_decision.matches_ended_with_this_decision ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boxing"
            ],
            "s_expression": "(AND boxing.boxing_decision (JOIN boxing.boxing_decision.matches_ended_with_this_decision m.0j24b7h))"
        }
    },
    "159": {
        "generations": "which music producer has produced the track \"Smile in Your Face\"??",
        "ori_data_item": {
            "qid": 2102779012000,
            "question": "name the record producer that produced smile in your face?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pxv1y",
                    "entity_name": "John Primer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0132_q73",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.producer",
                        "class": "music.producer",
                        "friendly_name": "Record Producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fqgqd9",
                        "class": "music.recording",
                        "friendly_name": "Smile in Your Face",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.producer.tracks_produced",
                        "friendly_name": "Recordings produced"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.producer . \nVALUES ?x1 { :m.0fqgqd9 } \n?x0 :music.producer.tracks_produced ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.producer (JOIN music.producer.tracks_produced m.0fqgqd9))"
        }
    },
    "160": {
        "generations": "what comic strip genre has comic strips that are also categorized under sex and nudity in video games??",
        "ori_data_item": {
            "qid": 3204910005000,
            "question": "what comic strip genre has a child genre of sex and nudity in video games?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025nsv",
                    "entity_name": "Ctrl+Alt+Del"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0658f",
                    "entity_name": "Penny Arcade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cv7yl",
                    "entity_name": "2P START!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04s_1bb",
                    "entity_name": "Adventures of Dave the Direman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xmyv",
                    "entity_name": "VG Cats"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pgtwf",
                    "entity_name": "GU Comics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g3gj5",
                    "entity_name": "Dueling Analogs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037wqg",
                    "entity_name": "Little Gamers"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_strips.comic_strip",
                        "class": "comic_strips.comic_strip",
                        "friendly_name": "Comic Strip",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_strips.comic_strip_genre",
                        "class": "comic_strips.comic_strip_genre",
                        "friendly_name": "Comic Strip Genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05rs5x",
                        "class": "cvg.cvg_genre",
                        "friendly_name": "Sex and nudity in video games",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "comic_strips.comic_strip_genre.comic_strips_of_this_genre",
                        "friendly_name": "Comic Strips Of This Genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "media_common.media_genre.child_genres",
                        "friendly_name": "Child genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_strips.comic_strip . \n?x1 :type.object.type :comic_strips.comic_strip_genre . \nVALUES ?x2 { :m.05rs5x } \n?x1 :comic_strips.comic_strip_genre.comic_strips_of_this_genre ?x0 . \n?x1 :media_common.media_genre.child_genres ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "comic_strips",
                "media_common"
            ],
            "s_expression": "(AND comic_strips.comic_strip (JOIN (R comic_strips.comic_strip_genre.comic_strips_of_this_genre) (JOIN media_common.media_genre.child_genres m.05rs5x)))"
        }
    },
    "161": {
        "generations": "who is an academic in the field of study that includes sharon p. holland??",
        "ori_data_item": {
            "qid": 2102617014000,
            "question": "sharon p. holland is an academic in the field of which study?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g204",
                    "entity_name": "Gender studies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k0gg",
                    "entity_name": "African-American literature"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.field_of_study",
                        "class": "education.field_of_study",
                        "friendly_name": "Field of study",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dgvrll",
                        "class": "education.academic",
                        "friendly_name": "Sharon P. Holland",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.field_of_study.academics_in_this_field",
                        "friendly_name": "Academics in this field"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.field_of_study . \nVALUES ?x1 { :m.0dgvrll } \n?x0 :education.field_of_study.academics_in_this_field ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.field_of_study (JOIN education.field_of_study.academics_in_this_field m.0dgvrll))"
        }
    },
    "162": {
        "generations": "what fossil site has specimens of succinipatopsis found here??",
        "ori_data_item": {
            "qid": 2101927003000,
            "question": "succinipatopsis specimen was in what fossil site?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c_f1f",
                    "entity_name": "Baltic amber"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.fossil_site",
                        "class": "biology.fossil_site",
                        "friendly_name": "Fossil site",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0g59yf3",
                        "class": "biology.fossil_specimen",
                        "friendly_name": "Succinipatopsis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.fossil_site.specimens_found_here",
                        "friendly_name": "Specimens found here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.fossil_site . \nVALUES ?x1 { :m.0g59yf3 } \n?x0 :biology.fossil_site.specimens_found_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.fossil_site (JOIN biology.fossil_site.specimens_found_here m.0g59yf3))"
        }
    },
    "163": {
        "generations": "who is the theatrical composer of the play Jekyll & Hyde??",
        "ori_data_item": {
            "qid": 2100613006000,
            "question": "the play jekyll & hyde was composed by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r4cr",
                    "entity_name": "Frank Wildhorn"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theatrical_composer",
                        "class": "theater.theatrical_composer",
                        "friendly_name": "Theatrical Composer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07g25t",
                        "class": "theater.play",
                        "friendly_name": "Jekyll & Hyde",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theatrical_composer.plays_composed",
                        "friendly_name": "Plays Composed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \nVALUES ?x1 { :m.07g25t } \n?x0 :theater.theatrical_composer.plays_composed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theatrical_composer (JOIN theater.theatrical_composer.plays_composed m.07g25t))"
        }
    },
    "164": {
        "generations": "who is the collector with the shortest height in meters??",
        "ori_data_item": {
            "qid": 2105138002000,
            "question": "which of the collectors has the shortest height?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1j3z",
                    "entity_name": "Dylan Osborn"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collector",
                        "class": "interests.collector",
                        "friendly_name": "Collector",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.height_meters",
                        "friendly_name": "Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collector . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :interests.collector . \n?y0 :people.person.height_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN interests.collector people.person.height_meters)"
        }
    },
    "165": {
        "generations": "what type of camera viewfinder does the canon powershot sd770 is have??",
        "ori_data_item": {
            "qid": 2102548004000,
            "question": "what kind of viewfinder is found on canon powershot sd770 is?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrg1f",
                    "entity_name": "Optical"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_viewfinder_type",
                        "class": "digicams.camera_viewfinder_type",
                        "friendly_name": "Camera Viewfinder Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04wjzw8",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Canon PowerShot SD770 IS",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_viewfinder_type.digital_cameras",
                        "friendly_name": "Digital cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_viewfinder_type . \nVALUES ?x1 { :m.04wjzw8 } \n?x0 :digicams.camera_viewfinder_type.digital_cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_viewfinder_type (JOIN digicams.camera_viewfinder_type.digital_cameras m.04wjzw8))"
        }
    },
    "166": {
        "generations": "who is the youngest cyclist in the sports category??",
        "ori_data_item": {
            "qid": 2105315001000,
            "question": "who is the oldest cyclist?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ldx95",
                    "entity_name": "Arthur Markham"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.cyclist",
                        "class": "sports.cyclist",
                        "friendly_name": "Cyclist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.date_of_birth",
                        "friendly_name": "Date of birth"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.cyclist . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :sports.cyclist . \n?y0 :people.person.date_of_birth ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.date_of_birth ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN sports.cyclist people.person.date_of_birth)"
        }
    },
    "167": {
        "generations": "what protected site was established on october 1st, 1974??",
        "ori_data_item": {
            "qid": 2100145014000,
            "question": "which protected site was established on 1974-10-01?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.073v2z",
                    "entity_name": "Boston National Historical Park"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "protected_sites.protected_site",
                        "class": "protected_sites.protected_site",
                        "friendly_name": "Protected Site",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1974-10-01^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "1974-10-01",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "protected_sites.protected_site.date_established",
                        "friendly_name": "Date Established"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :protected_sites.protected_site . \nVALUES ?x1 { \"1974-10-01-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :protected_sites.protected_site.date_established ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "protected_sites"
            ],
            "s_expression": "(AND protected_sites.protected_site (JOIN protected_sites.protected_site.date_established 1974-10-01^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "168": {
        "generations": "which skyscraper has the most closed structure??",
        "ori_data_item": {
            "qid": 2104800004000,
            "question": "what is the latest skyscraper that is closed for occupancy?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qf2vh",
                    "entity_name": "20 Fenchurch Street"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.skyscraper",
                        "class": "architecture.skyscraper",
                        "friendly_name": "Skyscraper",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.structure.closed",
                        "friendly_name": "Closed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.skyscraper . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :architecture.skyscraper . \n?y0 :architecture.structure.closed ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :architecture.structure.closed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(ARGMAX architecture.skyscraper architecture.structure.closed)"
        }
    },
    "169": {
        "generations": "which engineering firm has Frank Newby as one of its partners in architecture??",
        "ori_data_item": {
            "qid": 2100962005000,
            "question": "what engineering firm has frank newby in its partners?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046w_kr",
                    "entity_name": "F J Samuely & Partners"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.engineering_firm",
                        "class": "architecture.engineering_firm",
                        "friendly_name": "Engineering firm",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03ctddv",
                        "class": "architecture.engineer",
                        "friendly_name": "Frank Newby",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.engineering_firm.partners",
                        "friendly_name": "Partners"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.engineering_firm . \nVALUES ?x1 { :m.03ctddv } \n?x0 :architecture.engineering_firm.partners ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.engineering_firm (JOIN architecture.engineering_firm.partners m.03ctddv))"
        }
    },
    "170": {
        "generations": "which comic book character has cover appearances in issues with mignola cover colors??",
        "ori_data_item": {
            "qid": 3205093012000,
            "question": "mignola provided the colored cover for which comic book character's comic?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01d5g",
                    "entity_name": "Bruce Wayne"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p6vc",
                    "entity_name": "Joker"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04msxp",
                    "entity_name": "Jason Todd"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_character",
                        "class": "comic_books.comic_book_character",
                        "friendly_name": "Comic Book Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_issue",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Comic Book Issue",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03h0l7",
                        "class": "comic_books.comic_book_colorist",
                        "friendly_name": "mignola",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_character.cover_appearances",
                        "friendly_name": "Cover Appearances"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "comic_books.comic_book_issue.cover_colors",
                        "friendly_name": "Cover Colors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_character . \n?x1 :type.object.type :comic_books.comic_book_issue . \nVALUES ?x2 { :m.03h0l7 } \n?x0 :comic_books.comic_book_character.cover_appearances ?x1 . \n?x1 :comic_books.comic_book_issue.cover_colors ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_character (JOIN comic_books.comic_book_character.cover_appearances (JOIN comic_books.comic_book_issue.cover_colors m.03h0l7)))"
        }
    },
    "171": {
        "generations": "which employer has the earliest employment tenure for their employees??",
        "ori_data_item": {
            "qid": 3201574002000,
            "question": "name the employer with the least employment tenure.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049jc",
                    "entity_name": "Knights Templar"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.employer",
                        "class": "business.employer",
                        "friendly_name": "Employer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.employment_tenure",
                        "class": "business.employment_tenure",
                        "friendly_name": "Employment tenure",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.employer.employees",
                        "friendly_name": "Employees and other personnel"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.employment_tenure.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.employer . \n?x1 :type.object.type :business.employment_tenure . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :business.employer . \n?y1 :type.object.type :business.employment_tenure . \n?y0 :business.employer.employees ?y1 . \n?y1 :business.employment_tenure.from ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :business.employer.employees ?x1 . \n?x1 :business.employment_tenure.from ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(ARGMIN business.employer (JOIN business.employer.employees business.employment_tenure.from))"
        }
    },
    "172": {
        "generations": "which olympic event includes the women's parallel giant slalom competition in snowboarding at the 2014 winter olympics??",
        "ori_data_item": {
            "qid": 2100869002000,
            "question": "snowboarding at the 2014 winter olympics \u2013 women's parallel giant slalom is what type of olympic event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063wqfb",
                    "entity_name": "Women's Parallel Giant Slalom"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_event",
                        "class": "olympics.olympic_event",
                        "friendly_name": "Olympic event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0x0jd77",
                        "class": "olympics.olympic_event_competition",
                        "friendly_name": "Snowboarding at the 2014 Winter Olympics \u2013 Women's Parallel Giant Slalom",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_event.competitions",
                        "friendly_name": "Competitions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_event . \nVALUES ?x1 { :m.0x0jd77 } \n?x0 :olympics.olympic_event.competitions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_event (JOIN olympics.olympic_event.competitions m.0x0jd77))"
        }
    },
    "173": {
        "generations": "what US patent was filed on May 16, 2001??",
        "ori_data_item": {
            "qid": 2100408002000,
            "question": "what are the patents that have an application date of 05/16/2001?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j37xyf",
                    "entity_name": "Induction of immune response to antigens expressed by recombinant adeno-associated virus"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2001-05-16^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "05/16/2001",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.application_date",
                        "friendly_name": "Application Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { \"2001-05-16-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :law.us_patent.application_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.application_date 2001-05-16^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "174": {
        "generations": "what is the occupation shared by both professor carter nichols and ivo robotnik in fictional universe??",
        "ori_data_item": {
            "qid": 3205047012000,
            "question": "professor carter nichols and ivo robotnik have what character occupation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06q2q",
                    "entity_name": "Scientist"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05b339c",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Professor Carter Nichols",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01rk30",
                        "class": "cvg.game_character",
                        "friendly_name": "ivo robotnik",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x1 { :m.05b339c } \nVALUES ?x2 { :m.01rk30 } \n?x1 :fictional_universe.fictional_character.occupation ?x0 . \n?x2 :fictional_universe.fictional_character.occupation ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_occupation (AND (JOIN (R fictional_universe.fictional_character.occupation) m.05b339c) (JOIN (R fictional_universe.fictional_character.occupation) m.01rk30)))"
        }
    },
    "175": {
        "generations": "what architecture firm was founded the earliest??",
        "ori_data_item": {
            "qid": 2104437002000,
            "question": "which one of the architecture firms were founded earliest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lksk",
                    "entity_name": "Ordnance Survey"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architecture_firm",
                        "class": "architecture.architecture_firm",
                        "friendly_name": "Architecture firm",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.date_founded",
                        "friendly_name": "Date founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architecture_firm . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :architecture.architecture_firm . \n?y0 :organization.organization.date_founded ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :organization.organization.date_founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(ARGMIN architecture.architecture_firm organization.organization.date_founded)"
        }
    },
    "176": {
        "generations": "which music release component includes a track featuring both the royal philharmonic orchestra and mike townend??",
        "ori_data_item": {
            "qid": 4300909005000,
            "question": "what are the musical release component tracks recordings made by royal philarmonic orchestra and featured by mike townend?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0321m1f",
                    "entity_name": "Rock Classics"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release_component",
                        "class": "music.release_component",
                        "friendly_name": "Musical Release Component",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.recording",
                        "class": "music.recording",
                        "friendly_name": "Musical Recording",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.016frk",
                        "class": "music.orchestra",
                        "friendly_name": "royal philarmonic orchestra",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.03f6h9l",
                        "class": "music.featured_artist",
                        "friendly_name": "Mike Townend",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release.track",
                        "friendly_name": "Tracks"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "music.artist.track",
                        "friendly_name": "Recordings"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "music.recording.featured_artists",
                        "friendly_name": "Featured artists"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release_component . \n?x1 :type.object.type :music.recording . \nVALUES ?x2 { :m.016frk } \nVALUES ?x3 { :m.03f6h9l } \n?x0 :music.release.track ?x1 . \n?x2 :music.artist.track ?x1 . \n?x1 :music.recording.featured_artists ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.release_component (JOIN music.release.track (AND (JOIN (R music.artist.track) m.016frk) (JOIN music.recording.featured_artists m.03f6h9l))))"
        }
    },
    "177": {
        "generations": "who is the series editor for heroes in hell by baen books??",
        "ori_data_item": {
            "qid": 2102184005000,
            "question": "when reading the heroes in hell by baen books and looking for the series editor, who will you find?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dzxdk",
                    "entity_name": "Janet Morris"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.series_editor",
                        "class": "book.series_editor",
                        "friendly_name": "Series editor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hpxblx",
                        "class": "book.book_edition_series",
                        "friendly_name": "Heroes in Hell by Baen Books",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.series_editor.book_edition_series_edited",
                        "friendly_name": "Book edition series edited"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.series_editor . \nVALUES ?x1 { :m.0hpxblx } \n?x0 :book.series_editor.book_edition_series_edited ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.series_editor (JOIN book.series_editor.book_edition_series_edited m.0hpxblx))"
        }
    },
    "178": {
        "generations": "what olympic games had the mascots Wenlock and Mandeville??",
        "ori_data_item": {
            "qid": 2100792017000,
            "question": "wenlock and mandeville is what olympic game's mascot?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06sks6",
                    "entity_name": "The London 2012 Summer Olympics"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c02zg_",
                        "class": "olympics.olympic_mascot",
                        "friendly_name": "Wenlock and Mandeville",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_games.mascot",
                        "friendly_name": "Mascot"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_games . \nVALUES ?x1 { :m.0c02zg_ } \n?x0 :olympics.olympic_games.mascot ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_games (JOIN olympics.olympic_games.mascot m.0c02zg_))"
        }
    },
    "179": {
        "generations": "what ingredient that is more specific than nut is used in survival snack mix??",
        "ori_data_item": {
            "qid": 3205681007000,
            "question": "which kind of ingredient does survival snack mix need which also includes nut?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m4v",
                    "entity_name": "Almond"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.ingredient",
                        "class": "food.ingredient",
                        "friendly_name": "Ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01lbxg",
                        "class": "food.ingredient",
                        "friendly_name": "Nut",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.012ky_sx",
                        "class": "food.dish",
                        "friendly_name": "Survival Snack Mix",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "food.ingredient.more_specific_ingredient",
                        "friendly_name": "More specific ingredient"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "food.dish.ingredients",
                        "friendly_name": "Typical ingredients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.ingredient . \nVALUES ?x1 { :m.01lbxg } \nVALUES ?x2 { :m.012ky_sx } \n?x1 :food.ingredient.more_specific_ingredient ?x0 . \n?x2 :food.dish.ingredients ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.ingredient (AND (JOIN (R food.ingredient.more_specific_ingredient) m.01lbxg) (JOIN (R food.dish.ingredients) m.012ky_sx)))"
        }
    },
    "180": {
        "generations": "which election had the 2008 republican primary for california's 79th assembly district as one of its primaries??",
        "ori_data_item": {
            "qid": 2102363002000,
            "question": "what election's primaries are in 2008 republican primary, california\u2019s 79th assembly district?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03yxf23",
                    "entity_name": "California\u2019s 79th State Assembly district election, 2008"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.election",
                        "class": "government.election",
                        "friendly_name": "Election contest",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03yxd6j",
                        "class": "government.primary_election",
                        "friendly_name": "2008 Republican Primary, California\u2019s 79th Assembly District",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.election.primaries",
                        "friendly_name": "Primaries"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.election . \nVALUES ?x1 { :m.03yxd6j } \n?x0 :government.election.primaries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.election (JOIN government.election.primaries m.03yxd6j))"
        }
    },
    "181": {
        "generations": "what is the parent genre of romantic films in the media genre??",
        "ori_data_item": {
            "qid": 3202250006000,
            "question": "what type of media genre is a romantic films?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02jjt",
                    "entity_name": "Entertainment"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.media_genre",
                        "class": "media_common.media_genre",
                        "friendly_name": "Media genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "film.film_genre",
                        "class": "film.film_genre",
                        "friendly_name": "Film genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02l7c8",
                        "class": "theater.theater_genre",
                        "friendly_name": "romantic films",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.media_genre.parent_genre",
                        "friendly_name": "Parent genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "media_common.media_genre.child_genres",
                        "friendly_name": "Child genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.media_genre . \n?x1 :type.object.type :film.film_genre . \nVALUES ?x2 { :m.02l7c8 } \n?x1 :media_common.media_genre.parent_genre ?x0 . \n?x1 :media_common.media_genre.child_genres ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.media_genre (JOIN (R media_common.media_genre.parent_genre) (JOIN media_common.media_genre.child_genres m.02l7c8)))"
        }
    },
    "182": {
        "generations": "what product line is associated with the themes of transformers 2: revenge of the fallen??",
        "ori_data_item": {
            "qid": 2101773015000,
            "question": "what is the product line that uses transformers 2: revenge of the fallen theme?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0531cxs",
                    "entity_name": "Transformers: Revenge of the Fallen"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.product_line",
                        "class": "business.product_line",
                        "friendly_name": "Product line",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.047csmy",
                        "class": "business.product_theme",
                        "friendly_name": "transformers 2: revenge of the fallen",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.product_line.themes",
                        "friendly_name": "Themes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_line . \nVALUES ?x1 { :m.047csmy } \n?x0 :business.product_line.themes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.product_line (JOIN business.product_line.themes m.047csmy))"
        }
    },
    "183": {
        "generations": "what type of distilled spirits does bacardi superior belong to??",
        "ori_data_item": {
            "qid": 2102519002000,
            "question": "bacardi superior is what type of distilled spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n1hyb",
                    "entity_name": "White Rum"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit_type",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "Distilled spirit type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bx24_",
                        "class": "distilled_spirits.distilled_spirit",
                        "friendly_name": "Bacardi Superior",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.distilled_spirit_type.spirits",
                        "friendly_name": "Spirits of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit_type . \nVALUES ?x1 { :m.0bx24_ } \n?x0 :distilled_spirits.distilled_spirit_type.spirits ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit_type (JOIN distilled_spirits.distilled_spirit_type.spirits m.0bx24_))"
        }
    },
    "184": {
        "generations": "what recurring event happens monthly??",
        "ori_data_item": {
            "qid": 2100788005000,
            "question": "monthly is the current frequency of which recurring event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05287lh",
                    "entity_name": "Kontrol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c3lqh",
                    "entity_name": "Writers with Drinks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w3z0s",
                    "entity_name": "Organised Chaos LAN Party"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.091g08",
                    "entity_name": "Trannyshack"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010bhm8j",
                    "entity_name": "Asian Film Night with Orientalem"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.recurring_event",
                        "class": "time.recurring_event",
                        "friendly_name": "Recurring event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02hfk6k",
                        "class": "measurement_unit.unit_of_frequency",
                        "friendly_name": "Monthly",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.recurring_event.current_frequency",
                        "friendly_name": "Current frequency"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.recurring_event . \nVALUES ?x1 { :m.02hfk6k } \n?x0 :time.recurring_event.current_frequency ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.recurring_event (JOIN time.recurring_event.current_frequency m.02hfk6k))"
        }
    },
    "185": {
        "generations": "what martial art category does qi gong belong to??",
        "ori_data_item": {
            "qid": 2101329011000,
            "question": "what category of martial art does qi gong fall under?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_yl6z",
                    "entity_name": "Internal"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_art_category",
                        "class": "martial_arts.martial_art_category",
                        "friendly_name": "Martial Art Category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bmkv",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "qi gong",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "martial_arts.martial_art_category.martial_arts",
                        "friendly_name": "Martial arts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art_category . \nVALUES ?x1 { :m.0bmkv } \n?x0 :martial_arts.martial_art_category.martial_arts ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "martial_arts"
            ],
            "s_expression": "(AND martial_arts.martial_art_category (JOIN martial_arts.martial_art_category.martial_arts m.0bmkv))"
        }
    },
    "186": {
        "generations": "which tournament event competition was contested in the 2009 world championships??",
        "ori_data_item": {
            "qid": 3201254016000,
            "question": "what tournament event competition is the tournaments contested in 2009 world championships?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011cbrt2",
                    "entity_name": "Athletics at the 2014 Commonwealth Games \u2013 Men's marathon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q8dkj",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's marathon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jm9jb",
                    "entity_name": "2007 World Championships in Athletics \u2013 Men's 4 \u00d7 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k9brc",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 400 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rzs1l",
                    "entity_name": "2005 World Championships in Athletics \u2013 Men's 400 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kd3mn",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 4 \u00d7 400 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076vw_4",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 20 kilometres walk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k7_0z",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k9nng",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 110 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k4z7x",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j9k3k",
                    "entity_name": "2007 World Championships in Athletics \u2013 Women's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k48dy",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 4 \u00d7 400 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k97rj",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's javelin throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zpvj8",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's marathon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011l9fc6",
                    "entity_name": "2014 European Athletics Championships \u2013 Women's pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kjb15",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 400 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kjm3f",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's discus throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k632m",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's triple jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076w023",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 3000 metres steeplechase"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6521g",
                    "entity_name": "2007 World Championships in Athletics \u2013 Women's 4 x 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3jq17",
                    "entity_name": "2012 World Junior Championships in Athletics \u2013 Women's long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q4g0_",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011lfg96",
                    "entity_name": "2014 European Athletics Championships \u2013 Women's 5000 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k4yk2",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 20 kilometres walk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k4jp5",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's decathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kg_47",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 4 \u00d7 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076wkzw",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 10,000 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pbdn5",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k9zkx",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 5000 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076tmvs",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's shot put"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k6_mk",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kcdgn",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's high jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k6z_7",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 10,000 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k3wqr",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 5000 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k97ml",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 4 \u00d7 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kdyh3",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 800 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076yjbg",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 3000 metres steeplechase"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kbct3",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 100 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q4jqn",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k5pr9",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's hammer throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kj244",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 1500 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kg7bz",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's high jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z3swp",
                    "entity_name": "2007 World Championships in Athletics \u2013 Men's long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076zny5",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's hammer throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07khsp0",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's shot put"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mbzn",
                    "entity_name": "Athletics at the 2003 Pan American Games \u2013 Men's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6521k",
                    "entity_name": "2007 World Championships in Athletics \u2013 Women's 100 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076s_rx",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 1500 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b65f4f",
                    "entity_name": "2005 World Championships in Athletics \u2013 Women's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k9myz",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's javelin throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kj2k0",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 800 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jf5v4",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076z67k",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's triple jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b65f43",
                    "entity_name": "2005 World Championships in Athletics \u2013 Men's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jnycb",
                    "entity_name": "2005 World Championships in Athletics \u2013 Women's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03byhjl",
                    "entity_name": "2007 World Championships in Athletics \u2013 Men's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k5zv7",
                    "entity_name": "2009 World Championships in Athletics \u2013 Men's 400 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k4cjq",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 400 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k7k8t",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's discus throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jb_68",
                    "entity_name": "2007 World Championships in Athletics \u2013 Men's 110 metres hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076z83g",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's heptathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08228b",
                    "entity_name": "2005 World Championships in Athletics \u2013 Men's 4 \u00d7 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z5gz9",
                    "entity_name": "2007 World Championships in Athletics \u2013 Women's high jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rysfcg",
                    "entity_name": "Athletics at the 2006 Asian Games \u2013 Women's pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011l28_8",
                    "entity_name": "2014 European Athletics Championships \u2013 Men's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.089jv5",
                    "entity_name": "2005 World Championships in Athletics \u2013 Women's 4 \u00d7 100 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jlf_m",
                    "entity_name": "2007 World Championships in Athletics \u2013 Women's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b65f3v",
                    "entity_name": "2005 World Championships in Athletics \u2013 Women's 400 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07yfg3",
                    "entity_name": "2005 World Championships in Athletics \u2013 Men's 100 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kbd7v",
                    "entity_name": "2009 World Championships in Athletics \u2013 Women's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jfbf8",
                    "entity_name": "2007 World Championships in Athletics \u2013 Men's 200 metres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cj7n2_",
                    "entity_name": "1934 European Athletics Championships \u2013 Men's 100 metres"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.tournament_event_competition",
                        "class": "sports.tournament_event_competition",
                        "friendly_name": "Tournament event competition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.tournament_event",
                        "class": "sports.tournament_event",
                        "friendly_name": "Tournament event",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.09hz7t",
                        "class": "sports.multi_event_tournament",
                        "friendly_name": "2009 world championships",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "sports.tournament_event.competitions",
                        "friendly_name": "Competitions"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "sports.tournament_event.tournaments_contested_in",
                        "friendly_name": "Tournaments contested in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.tournament_event_competition . \n?x1 :type.object.type :sports.tournament_event . \nVALUES ?x2 { :m.09hz7t } \n?x1 :sports.tournament_event.competitions ?x0 . \n?x1 :sports.tournament_event.tournaments_contested_in ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.tournament_event_competition (JOIN (R sports.tournament_event.competitions) (JOIN sports.tournament_event.tournaments_contested_in m.09hz7t)))"
        }
    },
    "187": {
        "generations": "who produced the opera production that is being referred to??",
        "ori_data_item": {
            "qid": 2101804003000,
            "question": "find the opera production that was produced by jeffrey sine.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k920pj",
                    "entity_name": "La Boh\u00e8me"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_production",
                        "class": "opera.opera_production",
                        "friendly_name": "Opera Production",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k36_x8",
                        "class": "opera.opera_producer",
                        "friendly_name": "Jeffrey Sine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera_production.producer",
                        "friendly_name": "Producer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_production . \nVALUES ?x1 { :m.0k36_x8 } \n?x0 :opera.opera_production.producer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.opera_production (JOIN opera.opera_production.producer m.0k36_x8))"
        }
    },
    "188": {
        "generations": "who founded adrian flux insurance services??",
        "ori_data_item": {
            "qid": 2102418015000,
            "question": "adrian flux insurance services's founder is who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010h313z",
                    "entity_name": "Mr Adrian Flux"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization_founder",
                        "class": "organization.organization_founder",
                        "friendly_name": "Organization founder",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02r8tmv",
                        "class": "organization.organization",
                        "friendly_name": "Adrian Flux Insurance Services",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization_founder.organizations_founded",
                        "friendly_name": "Organizations founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_founder . \nVALUES ?x1 { :m.02r8tmv } \n?x0 :organization.organization_founder.organizations_founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization_founder (JOIN organization.organization_founder.organizations_founded m.02r8tmv))"
        }
    },
    "189": {
        "generations": "who is the owner of the shopping center that is being referred to??",
        "ori_data_item": {
            "qid": 2101846005000,
            "question": "lend lease retail partnership owns which shopping center?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0741hm",
                    "entity_name": "Touchwood, Solihull"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.shopping_center",
                        "class": "business.shopping_center",
                        "friendly_name": "Shopping center",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zfnkbs",
                        "class": "business.shopping_center_owner",
                        "friendly_name": "Lend Lease Retail Partnership",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.shopping_center.owner",
                        "friendly_name": "Owner"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.shopping_center . \nVALUES ?x1 { :m.0zfnkbs } \n?x0 :business.shopping_center.owner ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.shopping_center (JOIN business.shopping_center.owner m.0zfnkbs))"
        }
    },
    "190": {
        "generations": "what book edition series has a sub-series called explorers in hell??",
        "ori_data_item": {
            "qid": 3205048001000,
            "question": "what are the book titles from the explorers in hell series?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qck3m",
                    "entity_name": "Legions of Hell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qck3f",
                    "entity_name": "Kings in Hell"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05qh0k_",
                        "class": "book.book_edition_series",
                        "friendly_name": "Explorers in Hell",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.book_edition_series.sub_series",
                        "friendly_name": "Sub-series"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.book_edition_series.sub_series",
                        "friendly_name": "Sub-series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition_series . \n?x1 :type.object.type :book.book_edition_series . \nVALUES ?x2 { :m.05qh0k_ } \n?x1 :book.book_edition_series.sub_series ?x0 . \n?x1 :book.book_edition_series.sub_series ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition_series (JOIN (R book.book_edition_series.sub_series) (JOIN book.book_edition_series.sub_series m.05qh0k_)))"
        }
    },
    "191": {
        "generations": "who owns the professional sports team that plays at goodison park??",
        "ori_data_item": {
            "qid": 3202125002000,
            "question": "what owner runs the sports franchise that plays their home games in goodison park?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036lvd",
                    "entity_name": "Bill Kenwright"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team_owner",
                        "class": "sports.sports_team_owner",
                        "friendly_name": "Sports Team Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.professional_sports_team",
                        "class": "sports.professional_sports_team",
                        "friendly_name": "Professional Sports Team",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02lc2r",
                        "class": "soccer.football_pitch",
                        "friendly_name": "Goodison Park",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "sports.professional_sports_team.owner_s",
                        "friendly_name": "Owner(s)"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "sports.sports_team.arena_stadium",
                        "friendly_name": "Arena/Stadium"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team_owner . \n?x1 :type.object.type :sports.professional_sports_team . \nVALUES ?x2 { :m.02lc2r } \n?x1 :sports.professional_sports_team.owner_s ?x0 . \n?x1 :sports.sports_team.arena_stadium ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team_owner (JOIN (R sports.professional_sports_team.owner_s) (JOIN sports.sports_team.arena_stadium m.02lc2r)))"
        }
    },
    "192": {
        "generations": "what TV program has exactly 465 episodes??",
        "ori_data_item": {
            "qid": 2102158014000,
            "question": "which tv show features 465 episodes?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v0htn7",
                    "entity_name": "Bizimkiler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k91ck3",
                    "entity_name": "Larry King Now"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "465^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "465",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.number_of_episodes",
                        "friendly_name": "Number of episodes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { \"465\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tv.tv_program.number_of_episodes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.number_of_episodes 465^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "193": {
        "generations": "which particle has the highest spin according to physics??",
        "ori_data_item": {
            "qid": 2103655005000,
            "question": "what is the subatomic particle with the fastest spin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093b7vw",
                    "entity_name": "\u0394\u207a\u207a"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093bc48",
                    "entity_name": "\u0394\u207a"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093bc4d",
                    "entity_name": "\u0394\u2070"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093bc4h",
                    "entity_name": "\u0394\u207b"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "physics.particle",
                        "class": "physics.particle",
                        "friendly_name": "Subatomic particle",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "physics.particle.spin",
                        "friendly_name": "Spin"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :physics.particle . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :physics.particle . \n?y0 :physics.particle.spin ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :physics.particle.spin ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "physics"
            ],
            "s_expression": "(ARGMAX physics.particle physics.particle.spin)"
        }
    },
    "194": {
        "generations": "who is the founding figure of romuva religion??",
        "ori_data_item": {
            "qid": 2100206014000,
            "question": "the religion of romuva was created by what founding figure?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11bc15l7_h",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.founding_figure",
                        "class": "religion.founding_figure",
                        "friendly_name": "Founding Figure",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01_typ",
                        "class": "religion.religion",
                        "friendly_name": "Romuva",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.founding_figure.religion_founded",
                        "friendly_name": "Religion Founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.founding_figure . \nVALUES ?x1 { :m.01_typ } \n?x0 :religion.founding_figure.religion_founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.founding_figure (JOIN religion.founding_figure.religion_founded m.01_typ))"
        }
    },
    "195": {
        "generations": "what is the transmission route for infectious diseases that can be transmitted from mother to child??",
        "ori_data_item": {
            "qid": 3201014000000,
            "question": "mother-to-child transmission results in the same infectious disease as which route of infection transmission?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ng1",
                    "entity_name": "Sex"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.transmission_route",
                        "class": "medicine.transmission_route",
                        "friendly_name": "Route of infection transmission",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.infectious_disease",
                        "class": "medicine.infectious_disease",
                        "friendly_name": "Infectious Disease",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06z10b",
                        "class": "medicine.transmission_route",
                        "friendly_name": "mother-to-child transmission",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "medicine.infectious_disease.transmission",
                        "friendly_name": "Transmission route"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.infectious_disease.transmission",
                        "friendly_name": "Transmission route"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.transmission_route . \n?x1 :type.object.type :medicine.infectious_disease . \nVALUES ?x2 { :m.06z10b } \n?x1 :medicine.infectious_disease.transmission ?x0 . \n?x1 :medicine.infectious_disease.transmission ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.transmission_route (JOIN (R medicine.infectious_disease.transmission) (JOIN medicine.infectious_disease.transmission m.06z10b)))"
        }
    },
    "196": {
        "generations": "what cuisine is served at both bajaritos and tapestry: a california bistro??",
        "ori_data_item": {
            "qid": 3204096001000,
            "question": "bajaritos and tapestry: a california bistro both serve what kind of cuisine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01z2gnv",
                    "entity_name": "Eclectic food"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "dining.cuisine",
                        "class": "dining.cuisine",
                        "friendly_name": "Cuisine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01_1vdv",
                        "class": "dining.restaurant",
                        "friendly_name": "Bajaritos",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01zhpfh",
                        "class": "dining.restaurant",
                        "friendly_name": "Tapestry: A California Bistro",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "dining.cuisine.restaurant",
                        "friendly_name": "Restaurants"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "dining.restaurant.cuisine",
                        "friendly_name": "Cuisine"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :dining.cuisine . \nVALUES ?x1 { :m.01_1vdv } \nVALUES ?x2 { :m.01zhpfh } \n?x0 :dining.cuisine.restaurant ?x1 . \n?x2 :dining.restaurant.cuisine ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "dining"
            ],
            "s_expression": "(AND dining.cuisine (AND (JOIN dining.cuisine.restaurant m.01_1vdv) (JOIN (R dining.restaurant.cuisine) m.01zhpfh)))"
        }
    },
    "197": {
        "generations": "what industry is Food Preparations, NEC (reducing maple sap to maple syrup) a part of??",
        "ori_data_item": {
            "qid": 2101158003000,
            "question": "food preparations, nec (reducing maple sap to maple syrup) are products of what industry?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qtdc7",
                    "entity_name": "Food Preparations, NEC"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q9vds",
                    "entity_name": "All Other Miscellaneous Crop Farming"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03qwnkw",
                        "class": "business.industry",
                        "friendly_name": "Food Preparations, NEC (reducing maple sap to maple syrup)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.industry.child_industry",
                        "friendly_name": "Child Industry"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.industry . \nVALUES ?x1 { :m.03qwnkw } \n?x0 :business.industry.child_industry ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.industry (JOIN business.industry.child_industry m.03qwnkw))"
        }
    },
    "198": {
        "generations": "what visual art form is used in the artwork featuring mary, countess of falmouth and dorset??",
        "ori_data_item": {
            "qid": 3200414003000,
            "question": "list all forms of visual arts with subject of mary, countess of falmouth and dorset",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qdh",
                    "entity_name": "Painting"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_art_form",
                        "class": "visual_art.visual_art_form",
                        "friendly_name": "Visual Art Form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gls1kn",
                        "class": "visual_art.art_subject",
                        "friendly_name": "Mary, Countess of Falmouth and Dorset",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "visual_art.artwork.art_form",
                        "friendly_name": "Art Form"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "visual_art.art_subject.artwork_on_the_subject",
                        "friendly_name": "Artwork on the Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_art_form . \n?x1 :type.object.type :visual_art.artwork . \nVALUES ?x2 { :m.0gls1kn } \n?x1 :visual_art.artwork.art_form ?x0 . \n?x2 :visual_art.art_subject.artwork_on_the_subject ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_art_form (JOIN (R visual_art.artwork.art_form) (JOIN (R visual_art.art_subject.artwork_on_the_subject) m.0gls1kn)))"
        }
    },
    "199": {
        "generations": "which rockets manufactured by chrysler support equatorial low earth orbit??",
        "ori_data_item": {
            "qid": 3203953006000,
            "question": "the rocket that supports equatorial low earth orbit and manufactured by chrysler is which rocket?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0300dc",
                    "entity_name": "Saturn I"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p4z7",
                    "entity_name": "Saturn IB"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cspd",
                        "class": "spaceflight.rocket_function",
                        "friendly_name": "equatorial low earth orbit",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01_bp",
                        "class": "spaceflight.rocket_manufacturer",
                        "friendly_name": "chrysler",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "spaceflight.rocket_function.rockets_supporting_this_function",
                        "friendly_name": "Rockets supporting this function"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "spaceflight.rocket_manufacturer.rockets_manufactured",
                        "friendly_name": "Rockets Manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \nVALUES ?x1 { :m.0cspd } \nVALUES ?x2 { :m.01_bp } \n?x1 :spaceflight.rocket_function.rockets_supporting_this_function ?x0 . \n?x2 :spaceflight.rocket_manufacturer.rockets_manufactured ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket (AND (JOIN (R spaceflight.rocket_function.rockets_supporting_this_function) m.0cspd) (JOIN (R spaceflight.rocket_manufacturer.rockets_manufactured) m.01_bp)))"
        }
    },
    "200": {
        "generations": "what type of company is manila broadcasting company??",
        "ori_data_item": {
            "qid": 2101256004000,
            "question": "what legal structure is the manila broadcasting company?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01mxzw",
                    "entity_name": "Public company"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.company_type",
                        "class": "business.company_type",
                        "friendly_name": "Organization legal structure",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bkhch",
                        "class": "organization.organization",
                        "friendly_name": "Manila Broadcasting Company",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.company_type.companies_of_this_type",
                        "friendly_name": "Organizations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.company_type . \nVALUES ?x1 { :m.0bkhch } \n?x0 :business.company_type.companies_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.company_type (JOIN business.company_type.companies_of_this_type m.0bkhch))"
        }
    },
    "201": {
        "generations": "what platform succeeded the GM V platform in the automotive industry??",
        "ori_data_item": {
            "qid": 2100813003000,
            "question": "what platform is the successor of gm v platform?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03kfw5",
                    "entity_name": "GM Zeta platform"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.platform",
                        "class": "automotive.platform",
                        "friendly_name": "Platform",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bbd_q",
                        "class": "automotive.platform",
                        "friendly_name": "GM V platform",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.platform.predecessor",
                        "friendly_name": "Predecessor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.platform . \nVALUES ?x1 { :m.0bbd_q } \n?x0 :automotive.platform.predecessor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.platform (JOIN automotive.platform.predecessor m.0bbd_q))"
        }
    },
    "202": {
        "generations": "what lost work was lost on february 10th, 2008??",
        "ori_data_item": {
            "qid": 2100984008000,
            "question": "on feb. the 10th, 2008, which lost work was lost?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nr6j5",
                    "entity_name": "Count Lepic and His Daughters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ns6tb",
                    "entity_name": "The Boy in the Red Vest"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.lost_work",
                        "class": "media_common.lost_work",
                        "friendly_name": "Lost work",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2008-02-10^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Feb. the 10th, 2008",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.lost_work.date_lost",
                        "friendly_name": "Date lost"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.lost_work . \nVALUES ?x1 { \"2008-02-10-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :media_common.lost_work.date_lost ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.lost_work (JOIN media_common.lost_work.date_lost 2008-02-10^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "203": {
        "generations": "who is the public speaker that has Alfonso Marconi as a sibling??",
        "ori_data_item": {
            "qid": 3203355000000,
            "question": "what is the name of the public speaker is involved in a sibling relation that involves alfonso marconi?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.035pm",
                    "entity_name": "Guglielmo Marconi"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "event.public_speaker",
                        "class": "event.public_speaker",
                        "friendly_name": "Public speaker",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.sibling_relationship",
                        "class": "people.sibling_relationship",
                        "friendly_name": "Sibling Relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0nh38y_",
                        "class": "music.group_member",
                        "friendly_name": "Alfonso Marconi",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.sibling_relationship.sibling",
                        "friendly_name": "Sibling"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "people.person.sibling_s",
                        "friendly_name": "Siblings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :event.public_speaker . \n?x1 :type.object.type :people.sibling_relationship . \nVALUES ?x2 { :m.0nh38y_ } \n?x1 :people.sibling_relationship.sibling ?x0 . \n?x2 :people.person.sibling_s ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND event.public_speaker (JOIN (R people.sibling_relationship.sibling) (JOIN (R people.person.sibling_s) m.0nh38y_)))"
        }
    },
    "204": {
        "generations": "what TV episode segment is about mockumentary??",
        "ori_data_item": {
            "qid": 2101538013000,
            "question": "mockumentary is featured in what tv show?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08fmj2",
                    "entity_name": "Hell's Grannies"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_episode_segment",
                        "class": "tv.tv_episode_segment",
                        "friendly_name": "TV episode segment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0l4h_",
                        "class": "tv.tv_subject",
                        "friendly_name": "Mockumentary",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_episode_segment.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_episode_segment . \nVALUES ?x1 { :m.0l4h_ } \n?x0 :tv.tv_episode_segment.subjects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_episode_segment (JOIN tv.tv_episode_segment.subjects m.0l4h_))"
        }
    },
    "205": {
        "generations": "what governmental body has the United States District Court for the District of Columbia as its component bodies??",
        "ori_data_item": {
            "qid": 2100718002000,
            "question": "which governmental body has united states district court for the district of columbia as one of the component bodies ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j75z",
                    "entity_name": "United States district court"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05wt2j",
                        "class": "government.governmental_body",
                        "friendly_name": "United States District Court for the District of Columbia",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.component_bodies",
                        "friendly_name": "Component bodies"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { :m.05wt2j } \n?x0 :government.governmental_body.component_bodies ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.component_bodies m.05wt2j))"
        }
    },
    "206": {
        "generations": "which book binding credits serge thomann as the cover artist??",
        "ori_data_item": {
            "qid": 3205257012000,
            "question": "what type of binding did the books illustrated by serge thomann use?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jm4n",
                    "entity_name": "Paperback"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_binding",
                        "class": "book.book_binding",
                        "friendly_name": "Book Binding",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0g8lb_f",
                        "class": "book.illustrator",
                        "friendly_name": "Serge Thomann",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.book_edition.binding",
                        "friendly_name": "Binding/format"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.book_edition.cover_artist",
                        "friendly_name": "Cover artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_binding . \n?x1 :type.object.type :book.book_edition . \nVALUES ?x2 { :m.0g8lb_f } \n?x1 :book.book_edition.binding ?x0 . \n?x1 :book.book_edition.cover_artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_binding (JOIN (R book.book_edition.binding) (JOIN book.book_edition.cover_artist m.0g8lb_f)))"
        }
    },
    "207": {
        "generations": "which boxer has the shortest reach??",
        "ori_data_item": {
            "qid": 2105348002000,
            "question": "the shortest reach is an attribute of which boxer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c_d5j",
                    "entity_name": "K\u014dki Kameda"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.boxer",
                        "class": "sports.boxer",
                        "friendly_name": "Boxer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.boxer.reach",
                        "friendly_name": "Reach"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxer . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :sports.boxer . \n?y0 :sports.boxer.reach ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :sports.boxer.reach ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(ARGMIN sports.boxer sports.boxer.reach)"
        }
    },
    "208": {
        "generations": "who is the blogger that writes for the blog k-punk??",
        "ori_data_item": {
            "qid": 2100339004000,
            "question": "who is the author of the blog k-punk ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bjmc_g",
                    "entity_name": "Mark Fisher"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.blogger",
                        "class": "internet.blogger",
                        "friendly_name": "Blogger",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bjmc_6",
                        "class": "internet.blog",
                        "friendly_name": "k-punk",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.blogger.blog",
                        "friendly_name": "Blog"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.blogger . \nVALUES ?x1 { :m.0bjmc_6 } \n?x0 :internet.blogger.blog ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.blogger (JOIN internet.blogger.blog m.0bjmc_6))"
        }
    },
    "209": {
        "generations": "which organism has a height of less than 1.6 meters??",
        "ori_data_item": {
            "qid": 2105285024000,
            "question": "which organism has a height smaller than 1.6?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gljb",
                    "entity_name": "War Admiral"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yjhf",
                    "entity_name": "Smarty Jones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hsph",
                    "entity_name": "Northern Dancer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022q5kf",
                    "entity_name": "Crystal The Monkey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g14f",
                    "entity_name": "Seabiscuit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n3yhkg",
                    "entity_name": "Zeus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jbtg",
                    "entity_name": "Hogzilla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012g5153",
                    "entity_name": "Uno"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b770jy",
                    "entity_name": "Giant George"
                }
            ],
            "function": "<",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism",
                        "class": "biology.organism",
                        "friendly_name": "Organism",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1.6^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "1.6",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism.height_meters",
                        "friendly_name": "Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism . \nFILTER (?x1 < \"1.6\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :biology.organism.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism (lt biology.organism.height_meters 1.6^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "210": {
        "generations": "who is the producer of heavy metal content in broadcasting??",
        "ori_data_item": {
            "qid": 3202681000000,
            "question": "the broadcast content with genre heavy metal was produced by which producer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbx54",
                    "entity_name": "Big R Radio Network"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbrgg",
                    "entity_name": "1.FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbwmn",
                    "entity_name": "ORS Radio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbxhm",
                    "entity_name": "Gotradio.com"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbr81",
                    "entity_name": "181.fm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbxz7",
                    "entity_name": "Play Radio UK"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gfv67",
                    "entity_name": "WYLF-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9scl",
                    "entity_name": "RauteMusik.FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c8qrx",
                    "entity_name": "Chronix Radio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03njct",
                    "entity_name": "KNAC"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gbrc2",
                    "entity_name": "3WK"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gs4z8",
                    "entity_name": "Kink FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06qpj_",
                    "entity_name": "KQLZ"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.producer",
                        "class": "broadcast.producer",
                        "friendly_name": "Broadcast Producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "broadcast.content",
                        "class": "broadcast.content",
                        "friendly_name": "Broadcast Content",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03lty",
                        "class": "broadcast.genre",
                        "friendly_name": "Heavy metal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "broadcast.content.producer",
                        "friendly_name": "Producer"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "broadcast.content.genre",
                        "friendly_name": "Genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.producer . \n?x1 :type.object.type :broadcast.content . \nVALUES ?x2 { :m.03lty } \n?x1 :broadcast.content.producer ?x0 . \n?x1 :broadcast.content.genre ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.producer (JOIN (R broadcast.content.producer) (JOIN broadcast.content.genre m.03lty)))"
        }
    },
    "211": {
        "generations": "which TV program has an episode running time of 101 minutes??",
        "ori_data_item": {
            "qid": 2102457012000,
            "question": "a tv episode has a running time as long as 101, what is it?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026py92",
                    "entity_name": "Snow White: A Tale of Terror"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cyjl3",
                    "entity_name": "Goodnight Mister Tom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qqpzj",
                    "entity_name": "Dorothy and the Witches of Oz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9mfwx",
                    "entity_name": "Hillsborough"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "101^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "101",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.episode_running_time",
                        "friendly_name": "Original episode running time"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { \"101\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tv.tv_program.episode_running_time ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.episode_running_time 101^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "212": {
        "generations": "which rocket has 3 or more stages??",
        "ori_data_item": {
            "qid": 2101318000000,
            "question": "3 stages are in which rocket?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08d44p",
                    "entity_name": "Long March 5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_y1_",
                    "entity_name": "Jarvis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4v1s",
                    "entity_name": "Delta 3000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_5qyv",
                    "entity_name": "Soyuz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gwh3",
                    "entity_name": "Atlas II"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03yl91",
                    "entity_name": "Geosynchronous Satellite Launch Vehicle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmch_k",
                    "entity_name": "Athena I"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4h65",
                    "entity_name": "Delta 2000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nl3n",
                    "entity_name": "Black Arrow"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043twt3",
                    "entity_name": "Long March 4B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07932",
                    "entity_name": "Saturn V"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03l2zj",
                    "entity_name": "Vanguard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043rys5",
                    "entity_name": "Long March 3B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037b1j",
                    "entity_name": "Pegasus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h200m",
                    "entity_name": "Delta J"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bzp2p",
                    "entity_name": "Titan IIIE"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mg9zm",
                    "entity_name": "Tsyklon-3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052r1n",
                    "entity_name": "Sparta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cdz_y",
                    "entity_name": "Molniya-M"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l98x",
                    "entity_name": "Rokot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07crr9",
                    "entity_name": "Soyuz-U"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kwfk",
                    "entity_name": "Ariane 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jk_g5",
                    "entity_name": "Luna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05znnqz",
                    "entity_name": "Soyuz-M"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pfnl3",
                    "entity_name": "Soyuz-FG"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0187hy",
                    "entity_name": "Soyuz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p945m",
                    "entity_name": "Unha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f9bn4",
                    "entity_name": "Delta D"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f9h4w",
                    "entity_name": "Delta C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zsvrj",
                    "entity_name": "Soyuz-L"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f8r5p",
                    "entity_name": "Delta A"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h5490",
                    "entity_name": "Delta 0100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zn58b",
                    "entity_name": "Zenit-3SLB"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ktqp",
                    "entity_name": "Simorgh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03clmt7",
                    "entity_name": "Thorad-Agena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gnyg",
                    "entity_name": "Jupiter-C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03g6ts",
                    "entity_name": "Titan IIIB"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_5qr9",
                    "entity_name": "Ariane 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zxnh6",
                    "entity_name": "Zenit-3F"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f62r3",
                    "entity_name": "Atlas-Able"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05s_8j3",
                    "entity_name": "Paektusan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f2tpc",
                    "entity_name": "Delta B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l5r0",
                    "entity_name": "Diamant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043llzy",
                    "entity_name": "Long March 4C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0150hr",
                    "entity_name": "Ariane 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f4r5s",
                    "entity_name": "Thor DSV-2U"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.12nvp93hw",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ppmm4",
                    "entity_name": "Saturn C-5N"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k80j04",
                    "entity_name": "Capricornio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025_88c",
                    "entity_name": "VLS-1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0266_tb",
                    "entity_name": "Saturn C-8"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ppm8v",
                    "entity_name": "Saturn C-4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_g1_",
                    "entity_name": "Saturn C-3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r6d3g",
                    "entity_name": "Saturn IB-D"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043k4pf",
                    "entity_name": "Long March 3C"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043l6ts",
                    "entity_name": "Long March 4A"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043nltd",
                    "entity_name": "Long March 2E"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043qq0f",
                    "entity_name": "Strela"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043tzg_",
                    "entity_name": "Long March 3A"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043tzj3",
                    "entity_name": "Long March 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jd3j4",
                    "entity_name": "N-I"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jngm0",
                    "entity_name": "H-I"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c30gd",
                    "entity_name": "Tsyklon-4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.089my1",
                    "entity_name": "Long March 1D"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0tpvf",
                    "entity_name": "VLM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3m6bl",
                    "entity_name": "Tronador"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nb3csk",
                    "entity_name": "Epsilon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4rhf",
                    "entity_name": "Delta L"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h1t7x",
                    "entity_name": "Delta 1000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f4j9c",
                    "entity_name": "Thor-Delta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h2jff",
                    "entity_name": "Delta M"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1235dxz9",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.087bj4",
                    "entity_name": "Long March 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k95v2",
                    "entity_name": "Long March 6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11x1nxwfv",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "3^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "3",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket.number_of_stages",
                        "friendly_name": "Number Of Stages"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \nVALUES ?x1 { \"3\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :spaceflight.rocket.number_of_stages ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket (JOIN spaceflight.rocket.number_of_stages 3^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "213": {
        "generations": "who produced the man behind the gun broadcast??",
        "ori_data_item": {
            "qid": 2103211006000,
            "question": "the man behind the gun is produced by which broadcast producer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qmhfl",
                    "entity_name": "William N. Robson"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.producer",
                        "class": "broadcast.producer",
                        "friendly_name": "Broadcast Producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05snfwd",
                        "class": "radio.radio_program",
                        "friendly_name": "The Man Behind the Gun",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.producer.produces",
                        "friendly_name": "Produces"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.producer . \nVALUES ?x1 { :m.05snfwd } \n?x0 :broadcast.producer.produces ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.producer (JOIN broadcast.producer.produces m.05snfwd))"
        }
    },
    "214": {
        "generations": "what day of the week is part of the muslim calendar??",
        "ori_data_item": {
            "qid": 2100603000000,
            "question": "what day of the week is it in the muslim calendar?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7_n",
                    "entity_name": "Tuesday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f6kx",
                    "entity_name": "Monday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7yn",
                    "entity_name": "Saturday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7z4",
                    "entity_name": "Friday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f6ld",
                    "entity_name": "Sunday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7zn",
                    "entity_name": "Thursday"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7_4",
                    "entity_name": "Wednesday"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.day_of_week",
                        "class": "time.day_of_week",
                        "friendly_name": "Day Of Week",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03ts7",
                        "class": "time.calendar",
                        "friendly_name": "muslim calendar",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.day_of_week.calendar_system",
                        "friendly_name": "Calendar System"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.day_of_week . \nVALUES ?x1 { :m.03ts7 } \n?x0 :time.day_of_week.calendar_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.day_of_week (JOIN time.day_of_week.calendar_system m.03ts7))"
        }
    },
    "215": {
        "generations": "which automotive generation is based on the Ford EUCD platform??",
        "ori_data_item": {
            "qid": 2101156008000,
            "question": "which automobile generation use the platform of ford eucd platform?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115mcz7",
                    "entity_name": "Ford Mondeo"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bwg6v",
                        "class": "automotive.platform",
                        "friendly_name": "Ford EUCD platform",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.platforms",
                        "friendly_name": "Platforms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \nVALUES ?x1 { :m.0bwg6v } \n?x0 :automotive.generation.platforms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (JOIN automotive.generation.platforms m.0bwg6v))"
        }
    },
    "216": {
        "generations": "which comic book issue has a print run of 6 or more??",
        "ori_data_item": {
            "qid": 2102971006000,
            "question": "what comic book issue has 6 print runs?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rflcx",
                    "entity_name": "Longshot #1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_issue",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Comic Book Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "6",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_issue.print_run",
                        "friendly_name": "Print Run"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \nVALUES ?x1 { \"6\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :comic_books.comic_book_issue.print_run ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_issue (JOIN comic_books.comic_book_issue.print_run 6^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "217": {
        "generations": "which religious organization is a member of the north american college of gnostic bishops??",
        "ori_data_item": {
            "qid": 2100318018000,
            "question": "north american college of gnostic bishops is in what religioius organization?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08ds26",
                    "entity_name": "Apostolic Johannite Church"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_organization",
                        "class": "religion.religious_organization",
                        "friendly_name": "Religious Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03zdxc7",
                        "class": "religion.religious_organization",
                        "friendly_name": "North American College of Gnostic Bishops",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religious_organization.is_member_of",
                        "friendly_name": "Is Member Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_organization . \nVALUES ?x1 { :m.03zdxc7 } \n?x0 :religion.religious_organization.is_member_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religious_organization (JOIN religion.religious_organization.is_member_of m.03zdxc7))"
        }
    },
    "218": {
        "generations": "what is the school mascot of the university of texas-san antonio??",
        "ori_data_item": {
            "qid": 2100871004000,
            "question": "what is the school mascot of university of texas-san antonio?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k6grz",
                    "entity_name": "Rowdy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school_mascot",
                        "class": "education.school_mascot",
                        "friendly_name": "School mascot",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03szws",
                        "class": "education.educational_institution",
                        "friendly_name": "university of texas-san antonio",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.school_mascot.school",
                        "friendly_name": "School"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_mascot . \nVALUES ?x1 { :m.03szws } \n?x0 :education.school_mascot.school ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school_mascot (JOIN education.school_mascot.school m.03szws))"
        }
    },
    "219": {
        "generations": "what is the ICAO airline designator for simplifly deccan??",
        "ori_data_item": {
            "qid": 2101076011000,
            "question": "what is the designator of simplifly deccan?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h7zbf",
                    "entity_name": "DKN"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.icao_airline_designator",
                        "class": "aviation.icao_airline_designator",
                        "friendly_name": "ICAO airline designator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04bxp0",
                        "class": "aviation.airline",
                        "friendly_name": "simplifly deccan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.icao_airline_designator.airline",
                        "friendly_name": "Airline"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.icao_airline_designator . \nVALUES ?x1 { :m.04bxp0 } \n?x0 :aviation.icao_airline_designator.airline ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.icao_airline_designator (JOIN aviation.icao_airline_designator.airline m.04bxp0))"
        }
    },
    "220": {
        "generations": "who was the first ascender of the mountain that Nima Tenzing climbed??",
        "ori_data_item": {
            "qid": 2101241013000,
            "question": "which mountain's first ascenders is nima tenzing?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3q6v6",
                    "entity_name": "Saser Kangri I"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k3kqg4",
                        "class": "geography.mountaineer",
                        "friendly_name": "Nima Tenzing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.first_ascenders",
                        "friendly_name": "First ascenders"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { :m.0k3kqg4 } \n?x0 :geography.mountain.first_ascenders ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.first_ascenders m.0k3kqg4))"
        }
    },
    "221": {
        "generations": "what dialects are associated with the mari language??",
        "ori_data_item": {
            "qid": 2100706004000,
            "question": "what is the name of the language dialect of mari language?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hxtr2",
                    "entity_name": "Mari, Eastern Language"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds83v0",
                    "entity_name": "Western Mari language"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_dialect",
                        "class": "language.language_dialect",
                        "friendly_name": "Language Dialect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01y_vl",
                        "class": "language.human_language",
                        "friendly_name": "Mari language",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_dialect.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_dialect . \nVALUES ?x1 { :m.01y_vl } \n?x0 :language.language_dialect.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_dialect (JOIN language.language_dialect.language m.01y_vl))"
        }
    },
    "222": {
        "generations": "what basketball conference does the duke blue devils basketball team belong to??",
        "ori_data_item": {
            "qid": 2102404007000,
            "question": "duke blue devils basketball is in which basketball conference?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kdtf",
                    "entity_name": "Atlantic Coast Conference"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_conference",
                        "class": "basketball.basketball_conference",
                        "friendly_name": "Basketball Conference",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.026wlnm",
                        "class": "basketball.basketball_team",
                        "friendly_name": "duke blue devils basketball",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_conference.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_conference . \nVALUES ?x1 { :m.026wlnm } \n?x0 :basketball.basketball_conference.teams ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_conference (JOIN basketball.basketball_conference.teams m.026wlnm))"
        }
    },
    "223": {
        "generations": "who is the tv writer who wrote episodes for sex and the city: the movie??",
        "ori_data_item": {
            "qid": 2101122011000,
            "question": "sex and the city: the movie is written by which tv writer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.070j61",
                    "entity_name": "Michael Patrick King"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_writer",
                        "class": "tv.tv_writer",
                        "friendly_name": "TV Writer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03bzyn4",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "sex and the city: the movie",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_writer.episodes_written",
                        "friendly_name": "TV Episodes Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_writer . \nVALUES ?x1 { :m.03bzyn4 } \n?x0 :tv.tv_writer.episodes_written ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_writer (JOIN tv.tv_writer.episodes_written m.03bzyn4))"
        }
    },
    "224": {
        "generations": "which cameras have the camera iso feature of HP Photosmart R742??",
        "ori_data_item": {
            "qid": 2101399001000,
            "question": "the camera hp photosmart r742 has what iso capability?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_x",
                    "entity_name": "100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_7",
                    "entity_name": "Auto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_g",
                    "entity_name": "400"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_p",
                    "entity_name": "200"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_iso",
                        "class": "digicams.camera_iso",
                        "friendly_name": "Camera ISO Capability",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03q2nlv",
                        "class": "digicams.digital_camera",
                        "friendly_name": "HP Photosmart R742",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_iso.cameras",
                        "friendly_name": "Cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_iso . \nVALUES ?x1 { :m.03q2nlv } \n?x0 :digicams.camera_iso.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_iso (JOIN digicams.camera_iso.cameras m.03q2nlv))"
        }
    },
    "225": {
        "generations": "what recipes require a stainless steel bowl as equipment??",
        "ori_data_item": {
            "qid": 2101864010000,
            "question": "stainless steel bowl is required in what recipe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwrpdd",
                    "entity_name": "Alex's Scratch Brownies"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe",
                        "class": "food.recipe",
                        "friendly_name": "Recipe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gwrppw",
                        "class": "food.culinary_tool",
                        "friendly_name": "Stainless Steel Bowl",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.recipe.equipment",
                        "friendly_name": "Equipment"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe . \nVALUES ?x1 { :m.0gwrppw } \n?x0 :food.recipe.equipment ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.recipe (JOIN food.recipe.equipment m.0gwrppw))"
        }
    },
    "226": {
        "generations": "what is the name of the star with a spectral type of M7 IIIe??",
        "ori_data_item": {
            "qid": 2102736004000,
            "question": "which stars have the spectral type of m7 iiie?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x0f9_p",
                    "entity_name": "Mira A"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star",
                        "class": "astronomy.star",
                        "friendly_name": "Star",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hnfk_7",
                        "class": "astronomy.spectral_type",
                        "friendly_name": "M7 IIIe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star.spectral_type",
                        "friendly_name": "Spectral Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nVALUES ?x1 { :m.0hnfk_7 } \n?x0 :astronomy.star.spectral_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star (JOIN astronomy.star.spectral_type m.0hnfk_7))"
        }
    },
    "227": {
        "generations": "which soccer/football league is part of the conference premier league system??",
        "ori_data_item": {
            "qid": 3202417009000,
            "question": "what other leagues are in the same football system as the conference premier?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_3w2",
                    "entity_name": "National League South"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x5hx",
                    "entity_name": "Northern Premier League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x5cy",
                    "entity_name": "Isthmian League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qdzw",
                    "entity_name": "Southern Football League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_3s8",
                    "entity_name": "National League North"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_league",
                        "class": "soccer.football_league",
                        "friendly_name": "Football League",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "soccer.football_league_system",
                        "class": "soccer.football_league_system",
                        "friendly_name": "Football League System",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0339d5",
                        "class": "soccer.football_league",
                        "friendly_name": "Conference Premier",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "soccer.football_league_system.leagues",
                        "friendly_name": "Leagues"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "soccer.football_league_system.leagues",
                        "friendly_name": "Leagues"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_league . \n?x1 :type.object.type :soccer.football_league_system . \nVALUES ?x2 { :m.0339d5 } \n?x1 :soccer.football_league_system.leagues ?x0 . \n?x1 :soccer.football_league_system.leagues ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_league (JOIN (R soccer.football_league_system.leagues) (JOIN soccer.football_league_system.leagues m.0339d5)))"
        }
    },
    "228": {
        "generations": "what is the orbital relationship of an object with a semi-major axis of 238037.0?",
        "ori_data_item": {
            "qid": 2102492012000,
            "question": "what orbital relationship has a semi-major axis of 238037.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dlxf",
                    "entity_name": "Enceladus"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.orbital_relationship",
                        "class": "astronomy.orbital_relationship",
                        "friendly_name": "Orbital Relationship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "238037.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "238037.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.orbital_relationship.semi_major_axis",
                        "friendly_name": "Semi-major Axis"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.orbital_relationship . \nVALUES ?x1 { \"238037.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :astronomy.orbital_relationship.semi_major_axis ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.orbital_relationship (JOIN astronomy.orbital_relationship.semi_major_axis 238037.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "229": {
        "generations": "which comic book penciler is affiliated with the lakemba mosque religion??",
        "ori_data_item": {
            "qid": 3204868010000,
            "question": "lakemba mosque is a place in the religion of what comic book penciler?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09mm4d",
                    "entity_name": "Adi Granov"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_penciler",
                        "class": "comic_books.comic_book_penciler",
                        "friendly_name": "Comic Book Penciler",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0bt496",
                        "class": "religion.place_of_worship",
                        "friendly_name": "Lakemba Mosque",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.religion",
                        "friendly_name": "Religion"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "religion.place_of_worship.religion",
                        "friendly_name": "Currently used by religion(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_penciler . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.0bt496 } \n?x0 :people.person.religion ?x1 . \n?x2 :religion.place_of_worship.religion ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion",
                "people"
            ],
            "s_expression": "(AND comic_books.comic_book_penciler (JOIN people.person.religion (JOIN (R religion.place_of_worship.religion) m.0bt496)))"
        }
    },
    "230": {
        "generations": "what organization is responsible for the astronomical survey project at the observatory GEODSS, Haleakala??",
        "ori_data_item": {
            "qid": 2101190016000,
            "question": "geodss, haleakala had what survey done here?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02fc4t",
                    "entity_name": "Near-Earth Asteroid Tracking"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.astronomical_survey_project_organization",
                        "class": "astronomy.astronomical_survey_project_organization",
                        "friendly_name": "Astronomical Survey/Project Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k0rb6l",
                        "class": "astronomy.astronomical_observatory",
                        "friendly_name": "GEODSS, Haleakala",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.astronomical_survey_project_organization.observatory",
                        "friendly_name": "Observatory"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.astronomical_survey_project_organization . \nVALUES ?x1 { :m.0k0rb6l } \n?x0 :astronomy.astronomical_survey_project_organization.observatory ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.astronomical_survey_project_organization (JOIN astronomy.astronomical_survey_project_organization.observatory m.0k0rb6l))"
        }
    },
    "231": {
        "generations": "what writing system is a child of the hungarian alphabet in language??",
        "ori_data_item": {
            "qid": 2101921009000,
            "question": "what are the writing systems with the hungarian alphabet?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n0p",
                    "entity_name": "Latin alphabet"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_writing_system",
                        "class": "language.language_writing_system",
                        "friendly_name": "Language Writing System",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01pp8m",
                        "class": "language.language_writing_system",
                        "friendly_name": "Hungarian alphabet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_writing_system.child_writing_systems",
                        "friendly_name": "child writing systems"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_writing_system . \nVALUES ?x1 { :m.01pp8m } \n?x0 :language.language_writing_system.child_writing_systems ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_writing_system (JOIN language.language_writing_system.child_writing_systems m.01pp8m))"
        }
    },
    "232": {
        "generations": "what opera genre includes compositions that were first performed before november 20, 1805??",
        "ori_data_item": {
            "qid": 3201069007000,
            "question": "what is the opera genre of an opera whose first performance occurred before nov. the 20th, 1805?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01_22_",
                    "entity_name": "Opera seria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dg7h2",
                    "entity_name": "Opera in three acts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d8gp",
                    "entity_name": "Opera buffa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052bg4",
                    "entity_name": "Lyric tragedy"
                }
            ],
            "function": "<",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_genre",
                        "class": "opera.opera_genre",
                        "friendly_name": "Opera Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "opera.opera",
                        "class": "opera.opera",
                        "friendly_name": "Opera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "1805-11-20^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Nov. the 20th, 1805",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "opera.opera.genre",
                        "friendly_name": "Genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.composition.date_of_first_performance",
                        "friendly_name": "Date of first performance"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_genre . \n?x1 :type.object.type :opera.opera . \nFILTER (?x2 < \"1805-11-20-08:00\"^^<http://www.w3.org/2001/XMLSchema#date>)\n?x1 :opera.opera.genre ?x0 . \n?x1 :music.composition.date_of_first_performance ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "opera",
                "music"
            ],
            "s_expression": "(AND opera.opera_genre (JOIN (R opera.opera.genre) (lt music.composition.date_of_first_performance 1805-11-20^^http://www.w3.org/2001/XMLSchema#date)))"
        }
    },
    "233": {
        "generations": "which organizations have a geographic scope of columbia records??",
        "ori_data_item": {
            "qid": 2101660013000,
            "question": "columbia records is in the geographic scope of what organization?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01260_mj",
                    "entity_name": "The Home Wise Pros"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization",
                        "class": "organization.organization",
                        "friendly_name": "Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cy8v",
                        "class": "organization.organization_scope",
                        "friendly_name": "columbia records",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.geographic_scope",
                        "friendly_name": "Geographic scope"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization . \nVALUES ?x1 { :m.0cy8v } \n?x0 :organization.organization.geographic_scope ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization (JOIN organization.organization.geographic_scope m.0cy8v))"
        }
    },
    "234": {
        "generations": "who is the developer of a programming language that follows the strong typing paradigm??",
        "ori_data_item": {
            "qid": 3202905026000,
            "question": "who developed strong typing?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cdvrp",
                    "entity_name": "Martin Odersky"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language_developer",
                        "class": "computer.programming_language_developer",
                        "friendly_name": "Programming Language Developer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03pygd",
                        "class": "computer.programming_language_paradigm",
                        "friendly_name": "Strong typing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.programming_language_developer.programming_languages_developed",
                        "friendly_name": "Programming Languages Developed"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "computer.programming_language.language_paradigms",
                        "friendly_name": "Language Paradigms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language_developer . \n?x1 :type.object.type :computer.programming_language . \nVALUES ?x2 { :m.03pygd } \n?x0 :computer.programming_language_developer.programming_languages_developed ?x1 . \n?x1 :computer.programming_language.language_paradigms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language_developer (JOIN computer.programming_language_developer.programming_languages_developed (JOIN computer.programming_language.language_paradigms m.03pygd)))"
        }
    },
    "235": {
        "generations": "what rank does love aikawa hold in the fictional universe??",
        "ori_data_item": {
            "qid": 2102650012000,
            "question": "the character rank of love aikawa is equal to what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ssc4s",
                    "entity_name": "Former Shinigami Captain"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_rank",
                        "class": "fictional_universe.character_rank",
                        "friendly_name": "Character Rank",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "g.120j8hy6",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Love Aikawa",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.character_rank.characters_of_this_rank",
                        "friendly_name": "Characters of This Rank"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_rank . \nVALUES ?x1 { :g.120j8hy6 } \n?x0 :fictional_universe.character_rank.characters_of_this_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_rank (JOIN fictional_universe.character_rank.characters_of_this_rank g.120j8hy6))"
        }
    },
    "236": {
        "generations": "what type of medical trial has a maximum age for eligibility of less than 60 years old??",
        "ori_data_item": {
            "qid": 3206015005000,
            "question": "what type of medical trial has a maximum age for eligibility less than 60?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbgdr",
                    "entity_name": "Interventional"
                }
            ],
            "function": "<",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_trial_type",
                        "class": "medicine.medical_trial_type",
                        "friendly_name": "Medical trial type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.medical_trial",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Medical trial",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "60^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "60",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "medicine.medical_trial.type_of_trial",
                        "friendly_name": "Type of trial"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.medical_trial.maximum_age_for_eligibility",
                        "friendly_name": "Maximum age for eligibility"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial_type . \n?x1 :type.object.type :medicine.medical_trial . \nFILTER (?x2 < \"60\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x1 :medicine.medical_trial.type_of_trial ?x0 . \n?x1 :medicine.medical_trial.maximum_age_for_eligibility ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_trial_type (JOIN (R medicine.medical_trial.type_of_trial) (lt medicine.medical_trial.maximum_age_for_eligibility 60^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "237": {
        "generations": "which comic book story was inked by granov??",
        "ori_data_item": {
            "qid": 2100471013000,
            "question": "what are the comic books that granov inked?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057pky1",
                    "entity_name": "Extremis"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09mm4d",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "granov",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.inks",
                        "friendly_name": "Inks"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.09mm4d } \n?x0 :comic_books.comic_book_story.inks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.inks m.09mm4d))"
        }
    },
    "238": {
        "generations": "which satellite galaxy is orbiting the milky way??",
        "ori_data_item": {
            "qid": 2101963001000,
            "question": "name one of the satellite galaxies of milky way.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tmnt",
                    "entity_name": "Messier 32"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vvwk",
                    "entity_name": "Messier 110"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.satellite_galaxy",
                        "class": "astronomy.satellite_galaxy",
                        "friendly_name": "Satellite galaxy",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jvb4",
                        "class": "astronomy.galaxy",
                        "friendly_name": "milky way",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.satellite_galaxy.satellite_of_this_galaxy",
                        "friendly_name": "Satellite of this galaxy"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.satellite_galaxy . \nVALUES ?x1 { :m.0jvb4 } \n?x0 :astronomy.satellite_galaxy.satellite_of_this_galaxy ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.satellite_galaxy (JOIN astronomy.satellite_galaxy.satellite_of_this_galaxy m.0jvb4))"
        }
    },
    "239": {
        "generations": "what football pitch was used for the 2004 football league first division play-off final??",
        "ori_data_item": {
            "qid": 2101715002000,
            "question": "2004 football league first division play-off final took place at what football pitch?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jxd8",
                    "entity_name": "Millennium Stadium"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_pitch",
                        "class": "soccer.football_pitch",
                        "friendly_name": "Football Pitch",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05b192b",
                        "class": "soccer.football_match",
                        "friendly_name": "2004 Football League First Division play-off Final",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_pitch.matches",
                        "friendly_name": "Matches"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_pitch . \nVALUES ?x1 { :m.05b192b } \n?x0 :soccer.football_pitch.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_pitch (JOIN soccer.football_pitch.matches m.05b192b))"
        }
    },
    "240": {
        "generations": "what batteries are of the same size as the duracell AA battery in engineering??",
        "ori_data_item": {
            "qid": 2100996006000,
            "question": "how big is the battery duracell aa battery?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f08s",
                    "entity_name": "AA battery"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.battery_size",
                        "class": "engineering.battery_size",
                        "friendly_name": "Battery size",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08mbnq1",
                        "class": "engineering.battery",
                        "friendly_name": "Duracell AA battery",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.battery_size.batteries_of_this_size",
                        "friendly_name": "Batteries of this size"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.battery_size . \nVALUES ?x1 { :m.08mbnq1 } \n?x0 :engineering.battery_size.batteries_of_this_size ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.battery_size (JOIN engineering.battery_size.batteries_of_this_size m.08mbnq1))"
        }
    },
    "241": {
        "generations": "which rockets support the function of thor dsv-2 in spaceflight??",
        "ori_data_item": {
            "qid": 2101206013000,
            "question": "thor dsv-2 supports what function?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lz4c",
                    "entity_name": "Sounding rocket"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_function",
                        "class": "spaceflight.rocket_function",
                        "friendly_name": "Rocket Function",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05f8cpm",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Thor DSV-2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_function.rockets_supporting_this_function",
                        "friendly_name": "Rockets supporting this function"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_function . \nVALUES ?x1 { :m.05f8cpm } \n?x0 :spaceflight.rocket_function.rockets_supporting_this_function ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_function (JOIN spaceflight.rocket_function.rockets_supporting_this_function m.05f8cpm))"
        }
    },
    "242": {
        "generations": "which podcast feed has a publication frequency of hourly??",
        "ori_data_item": {
            "qid": 2100258001000,
            "question": "what podcast feed is published at an hourly frequency?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04414_v",
                    "entity_name": "a podcast elsewhere - Podcast Feed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0441b_1",
                    "entity_name": "CNN News Update - Podcast Feed"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.podcast_feed",
                        "class": "broadcast.podcast_feed",
                        "friendly_name": "Podcast Feed",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02nbmv6",
                        "class": "measurement_unit.unit_of_frequency",
                        "friendly_name": "Hourly",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.podcast_feed.publication_frequency",
                        "friendly_name": "Publication Frequency"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.podcast_feed . \nVALUES ?x1 { :m.02nbmv6 } \n?x0 :broadcast.podcast_feed.publication_frequency ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.podcast_feed (JOIN broadcast.podcast_feed.publication_frequency m.02nbmv6))"
        }
    },
    "243": {
        "generations": "which comic book story arc includes the issue \"The G-Men From Hell, Part 2\"??",
        "ori_data_item": {
            "qid": 2102946008000,
            "question": "the g-men from hell, part 2 is part of which comic book story arc?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bthf3",
                    "entity_name": "The G-Men From Hell"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story_arc",
                        "class": "comic_books.comic_book_story_arc",
                        "friendly_name": "Comic Book Story Arc",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05bthhj",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "The G-Men From Hell, Part 2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story_arc.spanning",
                        "friendly_name": "Spanning"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story_arc . \nVALUES ?x1 { :m.05bthhj } \n?x0 :comic_books.comic_book_story_arc.spanning ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story_arc (JOIN comic_books.comic_book_story_arc.spanning m.05bthhj))"
        }
    },
    "244": {
        "generations": "what type of fictional organization is Robo a part of??",
        "ori_data_item": {
            "qid": 3203996002000,
            "question": "robo belongs to which type of organization?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nsg",
                    "entity_name": "Organised crime"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization_type",
                        "class": "fictional_universe.fictional_organization_type",
                        "friendly_name": "Fictional Organization Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cmf_sn",
                        "class": "cvg.game_character",
                        "friendly_name": "Robo",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization_type.organizations",
                        "friendly_name": "Organizations"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.organizations",
                        "friendly_name": "Belongs to organizations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization_type . \n?x1 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x2 { :m.0cmf_sn } \n?x0 :fictional_universe.fictional_organization_type.organizations ?x1 . \n?x2 :fictional_universe.fictional_character.organizations ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization_type (JOIN fictional_universe.fictional_organization_type.organizations (JOIN (R fictional_universe.fictional_character.organizations) m.0cmf_sn)))"
        }
    },
    "245": {
        "generations": "what category of celestial objects does planet eris belong to and what is its subcategory??",
        "ori_data_item": {
            "qid": 3203520000000,
            "question": "what celestial object category is a subcategory of dwarf planets and contains planet eris?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ggr_x",
                    "entity_name": "Plutoid"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.celestial_object_category",
                        "class": "astronomy.celestial_object_category",
                        "friendly_name": "Celestial object category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0g3tzt",
                        "class": "astronomy.celestial_object_category",
                        "friendly_name": "dwarf planets",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gb731",
                        "class": "astronomy.scattered_disc_object",
                        "friendly_name": "planet eris",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.celestial_object_category.subcategory_of",
                        "friendly_name": "Subcategory of"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "astronomy.celestial_object_category.objects",
                        "friendly_name": "Objects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object_category . \nVALUES ?x1 { :m.0g3tzt } \nVALUES ?x2 { :m.0gb731 } \n?x0 :astronomy.celestial_object_category.subcategory_of ?x1 . \n?x0 :astronomy.celestial_object_category.objects ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.celestial_object_category (AND (JOIN astronomy.celestial_object_category.subcategory_of m.0g3tzt) (JOIN astronomy.celestial_object_category.objects m.0gb731)))"
        }
    },
    "246": {
        "generations": "what books have been translated into han language??",
        "ori_data_item": {
            "qid": 2100370012000,
            "question": "explain how the han can become a target language?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0qs76mm",
                    "entity_name": "Song of the Earth, the Sun and the Moon, the Four Seasons Angel"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.translation",
                        "class": "book.translation",
                        "friendly_name": "Translation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0qs76n1",
                        "class": "language.human_language",
                        "friendly_name": "han",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.translation.language",
                        "friendly_name": "Target language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.translation . \nVALUES ?x1 { :m.0qs76n1 } \n?x0 :book.translation.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.translation (JOIN book.translation.language m.0qs76n1))"
        }
    },
    "247": {
        "generations": "How many planets orbit in heliocentric orbits in astronomy?",
        "ori_data_item": {
            "qid": 2105265001000,
            "question": "what number of planets are orbiting in heliocentric orbits?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "7"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.planet",
                        "class": "astronomy.planet",
                        "friendly_name": "Planet",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06q2bd",
                        "class": "astronomy.orbit_type",
                        "friendly_name": "heliocentric orbits",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "astronomy.orbit_type.orbiting_bodies",
                        "friendly_name": "Orbiting bodies"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.planet . \nVALUES ?x1 { :m.06q2bd } \n?x1 :astronomy.orbit_type.orbiting_bodies ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(COUNT (AND astronomy.planet (JOIN (R astronomy.orbit_type.orbiting_bodies) m.06q2bd)))"
        }
    },
    "248": {
        "generations": "which ride is located in the same park as main street cinema??",
        "ori_data_item": {
            "qid": 3203099016000,
            "question": "what amusement rides are in the same park with main street cinema?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwh682",
                    "entity_name": "Indiana Jones Adventure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01q8w9",
                    "entity_name": "Pirates of the Caribbean"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgzmk",
                    "entity_name": "Mad Tea Party"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04s4p6",
                    "entity_name": "Big Thunder Mountain Railroad"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0byx2l",
                    "entity_name": "King Arthur Carrousel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p79p",
                    "entity_name": "Haunted Mansion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k9d7",
                    "entity_name": "Autopia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04h1hd",
                    "entity_name": "Matterhorn Bobsleds"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02693xq",
                    "entity_name": "Dumbo the Flying Elephant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z2qmd",
                    "entity_name": "Space Mountain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05g79s",
                    "entity_name": "Mr. Toad's Wild Ride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s33k",
                    "entity_name": "Submarine Voyage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05086j",
                    "entity_name": "Splash Mountain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.060lwt",
                    "entity_name": "Jungle Cruise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tpgr",
                    "entity_name": "Rocket Rods"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05np4w",
                    "entity_name": "Skyway"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h7505",
                    "entity_name": "Storybook Land Canal Boats"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0263qj9",
                    "entity_name": "Sailing Ship Columbia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pm2fm",
                    "entity_name": "Pirate's Lair on Tom Sawyer Island"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmbgw",
                    "entity_name": "Golden Horseshoe Saloon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bkxys",
                    "entity_name": "Gadget's Go Coaster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06n8lk",
                    "entity_name": "Rocket Jets"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0by64_",
                    "entity_name": "Holidayland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0431hs",
                    "entity_name": "PeopleMover"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jzmt",
                    "entity_name": "Finding Nemo Submarine Voyage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.060rkf",
                    "entity_name": "America Sings"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r0_rt",
                    "entity_name": "Motor Boat Cruise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05k9c5",
                    "entity_name": "Disneyland Monorail System"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058hb9",
                    "entity_name": "Adventure Thru Inner Space"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fz48l",
                    "entity_name": "Flying Saucers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h_j_hj",
                    "entity_name": "Star Tours: The Adventures Continue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026wwxd",
                    "entity_name": "Alice in Wonderland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0550hw",
                    "entity_name": "Disneyland Railroad"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08959f",
                    "entity_name": "Peter Pan's Flight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028k8w",
                    "entity_name": "It's a Small World"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.park",
                        "class": "amusement_parks.park",
                        "friendly_name": "Amusement Park",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0f3wfk",
                        "class": "amusement_parks.disney_ride",
                        "friendly_name": "Main Street Cinema",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.park",
                        "friendly_name": "Park"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "amusement_parks.park.rides",
                        "friendly_name": "Rides"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \n?x1 :type.object.type :amusement_parks.park . \nVALUES ?x2 { :m.0f3wfk } \n?x0 :amusement_parks.ride.park ?x1 . \n?x1 :amusement_parks.park.rides ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (JOIN amusement_parks.ride.park (JOIN amusement_parks.park.rides m.0f3wfk)))"
        }
    },
    "249": {
        "generations": "what short story features the character Anna Sergeyovna??",
        "ori_data_item": {
            "qid": 2102718010000,
            "question": "anna sergeyovna is part of what story?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047f1dt",
                    "entity_name": "The Lady with the Dog"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.short_story",
                        "class": "book.short_story",
                        "friendly_name": "Short Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0x2nwpx",
                        "class": "book.book_character",
                        "friendly_name": "Anna Sergeyovna",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.short_story.characters",
                        "friendly_name": "Characters"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.short_story . \nVALUES ?x1 { :m.0x2nwpx } \n?x0 :book.short_story.characters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.short_story (JOIN book.short_story.characters m.0x2nwpx))"
        }
    },
    "250": {
        "generations": "which celebrity completed rehab at Exodus Medical Group and has the most recent completion date??",
        "ori_data_item": {
            "qid": 4300853002000,
            "question": "the exodus medical group has been frequented the most by which celebrity?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.094xh",
                    "entity_name": "Stevie Nicks"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "celebrities.celebrity",
                        "class": "celebrities.celebrity",
                        "friendly_name": "Celebrity",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "celebrities.rehab",
                        "class": "celebrities.rehab",
                        "friendly_name": "Rehab",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.05sksqq",
                        "class": "celebrities.rehab_facility",
                        "friendly_name": "Exodus Medical Group",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "celebrities.rehab.celebrity",
                        "friendly_name": "Celebrity"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "celebrities.rehab.completed",
                        "friendly_name": "Completed"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "celebrities.rehab_facility.celebrity_patients",
                        "friendly_name": "Celebrity patients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :celebrities.celebrity . \n?x1 :type.object.type :celebrities.rehab . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :celebrities.celebrity . \n?y1 :type.object.type :celebrities.rehab . \nVALUES ?y3 { :m.05sksqq } \n?y1 :celebrities.rehab.celebrity ?y0 . \n?y1 :celebrities.rehab.completed ?y2 . \n?y3 :celebrities.rehab_facility.celebrity_patients ?y1 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.05sksqq } \n?x1 :celebrities.rehab.celebrity ?x0 . \n?x1 :celebrities.rehab.completed ?x2 . \n?x3 :celebrities.rehab_facility.celebrity_patients ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "celebrities"
            ],
            "s_expression": "(ARGMAX (AND celebrities.celebrity (JOIN (R celebrities.rehab.celebrity) (JOIN (R celebrities.rehab_facility.celebrity_patients) m.05sksqq))) (JOIN (R celebrities.rehab.celebrity) celebrities.rehab.completed))"
        }
    },
    "251": {
        "generations": "what beer has an ibu scale of at least 150.0??",
        "ori_data_item": {
            "qid": 2104607002000,
            "question": "which beer has an ibu scale of at least 150.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b68kkj",
                    "entity_name": "Hardcore IPA"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.beer",
                        "class": "food.beer",
                        "friendly_name": "Beer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "150.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "150.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.beer.ibu_scale",
                        "friendly_name": "IBU scale"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.beer . \nFILTER (?x1 >= \"150.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :food.beer.ibu_scale ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.beer (ge food.beer.ibu_scale 150.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "252": {
        "generations": "how many blended spirits are made by the spirit blender signature??",
        "ori_data_item": {
            "qid": 2104443000000,
            "question": "signature produces how many blended spirits?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.blended_spirit",
                        "class": "distilled_spirits.blended_spirit",
                        "friendly_name": "Blended spirit",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0vzrt0n",
                        "class": "distilled_spirits.spirit_blender",
                        "friendly_name": "Signature",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "distilled_spirits.spirit_blender.blends",
                        "friendly_name": "Blends"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.blended_spirit . \nVALUES ?x1 { :m.0vzrt0n } \n?x1 :distilled_spirits.spirit_blender.blends ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(COUNT (AND distilled_spirits.blended_spirit (JOIN (R distilled_spirits.spirit_blender.blends) m.0vzrt0n)))"
        }
    },
    "253": {
        "generations": "which airliner accident had a crew of 21??",
        "ori_data_item": {
            "qid": 2102506022000,
            "question": "what was the aviation incident which involved 21 crew members?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzrgcj",
                    "entity_name": "Air France Flight 212"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "21^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "21",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.crew",
                        "friendly_name": "Crew"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { \"21\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :aviation.airliner_accident.crew ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.crew 21^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "254": {
        "generations": "for waves higher than 14.0 what is the beaufort window force??",
        "ori_data_item": {
            "qid": 2103351000000,
            "question": "when measuring waves higher than 14.0 beaufort window force, what is the force?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1n6",
                    "entity_name": "Beaufort force 12"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.beaufort_wind_force",
                        "class": "meteorology.beaufort_wind_force",
                        "friendly_name": "Beaufort Wind Force",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "14.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "14.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.beaufort_wind_force.wave_height",
                        "friendly_name": "Wave Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.beaufort_wind_force . \nFILTER (?x1 >= \"14.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :meteorology.beaufort_wind_force.wave_height ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.beaufort_wind_force (ge meteorology.beaufort_wind_force.wave_height 14.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "255": {
        "generations": "what type of distilled spirit is infused with hendrick's??",
        "ori_data_item": {
            "qid": 2102776001000,
            "question": "hendrick's has infusions of which distilled spirit types?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037nyf",
                    "entity_name": "Neutral grain spirit"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit_type",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "Distilled spirit type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ckc3c",
                        "class": "distilled_spirits.infused_spirit",
                        "friendly_name": "hendrick's",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.distilled_spirit_type.infusions",
                        "friendly_name": "Infusions based on this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit_type . \nVALUES ?x1 { :m.0ckc3c } \n?x0 :distilled_spirits.distilled_spirit_type.infusions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit_type (JOIN distilled_spirits.distilled_spirit_type.infusions m.0ckc3c))"
        }
    },
    "256": {
        "generations": "which military combatants belonged to the world war i allies??",
        "ori_data_item": {
            "qid": 2101602005000,
            "question": "the combatant group world war i allies includes which military combatant?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ssc",
                    "entity_name": "United Kingdom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cdbq",
                    "entity_name": "Russian Empire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05r4w",
                    "entity_name": "Portugal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0154j",
                    "entity_name": "Belgium"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.077qn",
                    "entity_name": "Serbia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rdm0",
                    "entity_name": "Kingdom of Romania"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0193qj",
                    "entity_name": "Empire of Japan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.088q1s",
                    "entity_name": "Kingdom of Greece"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02psqkz",
                    "entity_name": "Kingdom of Italy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01h3dj",
                    "entity_name": "French Third Republic"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "military.military_combatant",
                        "class": "military.military_combatant",
                        "friendly_name": "Military Combatant",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06v9th",
                        "class": "military.military_combatant",
                        "friendly_name": "world war i allies",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "military.military_combatant.belongs_to_combatant_group",
                        "friendly_name": "Belongs To Combatant Group"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_combatant . \nVALUES ?x1 { :m.06v9th } \n?x0 :military.military_combatant.belongs_to_combatant_group ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "military"
            ],
            "s_expression": "(AND military.military_combatant (JOIN military.military_combatant.belongs_to_combatant_group m.06v9th))"
        }
    },
    "257": {
        "generations": "what beer style belongs to the bjcp style category of melomel??",
        "ori_data_item": {
            "qid": 2101478007000,
            "question": "what's the beer style of melomel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hv24g",
                    "entity_name": "Pyment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hv249",
                    "entity_name": "Cyser"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hv24p",
                    "entity_name": "Other Fruit Melomel"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.beer_style",
                        "class": "food.beer_style",
                        "friendly_name": "Beer style",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02hv2xt",
                        "class": "food.beer_style_category",
                        "friendly_name": "Melomel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.beer_style.bjcp_style_category",
                        "friendly_name": "BJCP Style Category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.beer_style . \nVALUES ?x1 { :m.02hv2xt } \n?x0 :food.beer_style.bjcp_style_category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.beer_style (JOIN food.beer_style.bjcp_style_category m.02hv2xt))"
        }
    },
    "258": {
        "generations": "what automotive model succeeded the peugeot 605??",
        "ori_data_item": {
            "qid": 2102598000000,
            "question": "name the predecessor of peugeot 605.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046yyx",
                    "entity_name": "Peugeot 607"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model",
                        "class": "automotive.model",
                        "friendly_name": "Automobile Model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05sr3w",
                        "class": "automotive.model",
                        "friendly_name": "Peugeot 605",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model.predecessor",
                        "friendly_name": "Predecessor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model . \nVALUES ?x1 { :m.05sr3w } \n?x0 :automotive.model.predecessor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model (JOIN automotive.model.predecessor m.05sr3w))"
        }
    },
    "259": {
        "generations": "what is the temperament of the Flornell Spicy Piece of Halleston breed of animal and the Akita breed of animal??",
        "ori_data_item": {
            "qid": 4300459007000,
            "question": "flornell spicy piece of halleston and akita are breeds that share what temperament?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kqp3v",
                    "entity_name": "Friendly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kqp3l",
                    "entity_name": "Alert"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.breed_temperament",
                        "class": "biology.breed_temperament",
                        "friendly_name": "Breed temperament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.animal_breed",
                        "class": "biology.animal_breed",
                        "friendly_name": "Animal breed",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0p997hh",
                        "class": "biology.pedigreed_animal",
                        "friendly_name": "Flornell Spicy Piece of Halleston",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0cqg0t",
                        "class": "biology.animal_breed",
                        "friendly_name": "Akita",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "biology.pedigreed_animal.breed",
                        "friendly_name": "Breed"
                    },
                    {
                        "start": 3,
                        "end": 0,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.breed_temperament . \n?x1 :type.object.type :biology.animal_breed . \nVALUES ?x2 { :m.0p997hh } \nVALUES ?x3 { :m.0cqg0t } \n?x1 :biology.animal_breed.temperament ?x0 . \n?x2 :biology.pedigreed_animal.breed ?x1 . \n?x3 :biology.animal_breed.temperament ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.breed_temperament (AND (JOIN (R biology.animal_breed.temperament) (JOIN (R biology.pedigreed_animal.breed) m.0p997hh)) (JOIN (R biology.animal_breed.temperament) m.0cqg0t)))"
        }
    },
    "260": {
        "generations": "which architectural contractor worked on the JR Central Office Tower project??",
        "ori_data_item": {
            "qid": 2100943010000,
            "question": "what architectural contractor is responsible for project jr central office tower?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c0sh",
                    "entity_name": "Obayashi Corporation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architectural_contractor",
                        "class": "architecture.architectural_contractor",
                        "friendly_name": "Architectural contractor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02bdskf",
                        "class": "architecture.structure",
                        "friendly_name": "JR Central Office Tower",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.architectural_contractor.projects",
                        "friendly_name": "Projects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architectural_contractor . \nVALUES ?x1 { :m.02bdskf } \n?x0 :architecture.architectural_contractor.projects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.architectural_contractor (JOIN architecture.architectural_contractor.projects m.02bdskf))"
        }
    },
    "261": {
        "generations": "what make of automotive is owned by AM General??",
        "ori_data_item": {
            "qid": 2102090005000,
            "question": "what is am general's parent company?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qyv",
                    "entity_name": "Hummer"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.make",
                        "class": "automotive.make",
                        "friendly_name": "Automobile Make",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01821b",
                        "class": "automotive.company",
                        "friendly_name": "AM General",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.make.parent_company",
                        "friendly_name": "Parent Company"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.make . \nVALUES ?x1 { :m.01821b } \n?x0 :automotive.make.parent_company ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.make (JOIN automotive.make.parent_company m.01821b))"
        }
    },
    "262": {
        "generations": "which programming language designer has designed a language that is unified modelling language??",
        "ori_data_item": {
            "qid": 3204270014000,
            "question": "what programming language is designed by a designer whose also designed unified modelling language?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05tthtg",
                    "entity_name": "Corba IDL"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.programming_language_designer",
                        "class": "computer.programming_language_designer",
                        "friendly_name": "Programming Language Designer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07x3g",
                        "class": "computer.programming_language",
                        "friendly_name": "unified modelling language",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.programming_language_designer.languages_designed",
                        "friendly_name": "Languages Designed"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "computer.programming_language_designer.languages_designed",
                        "friendly_name": "Languages Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language . \n?x1 :type.object.type :computer.programming_language_designer . \nVALUES ?x2 { :m.07x3g } \n?x1 :computer.programming_language_designer.languages_designed ?x0 . \n?x1 :computer.programming_language_designer.languages_designed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language (JOIN (R computer.programming_language_designer.languages_designed) (JOIN computer.programming_language_designer.languages_designed m.07x3g)))"
        }
    },
    "263": {
        "generations": "what religious leadership title is associated with the oriental orthodox religion??",
        "ori_data_item": {
            "qid": 3201252011000,
            "question": "in which title is commonly for religious leaders oriental orthodox ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgcs_z",
                    "entity_name": "Patriarch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qctng",
                    "entity_name": "Patriarch of All Romania"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_leadership_title",
                        "class": "religion.religious_leadership_title",
                        "friendly_name": "Religious Leadership Title",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religious_leadership_role",
                        "class": "religion.religious_leadership_role",
                        "friendly_name": "Religious Leadership Role",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05pbd",
                        "class": "religion.religion",
                        "friendly_name": "oriental orthodox",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religious_leadership_role.religious_titles",
                        "friendly_name": "Religious titles"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "religion.religious_leadership_role.religion",
                        "friendly_name": "Religion"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_leadership_title . \n?x1 :type.object.type :religion.religious_leadership_role . \nVALUES ?x2 { :m.05pbd } \n?x1 :religion.religious_leadership_role.religious_titles ?x0 . \n?x1 :religion.religious_leadership_role.religion ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religious_leadership_title (JOIN (R religion.religious_leadership_role.religious_titles) (JOIN religion.religious_leadership_role.religion m.05pbd)))"
        }
    },
    "264": {
        "generations": "who curated the exhibition 'Primitivism' in 20th Century Art: Affinity of the Tribal and the Modern??",
        "ori_data_item": {
            "qid": 2102140016000,
            "question": "which exhibition curator curated 'primitivism' in 20th century art: affinity of the tribal and the modern?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.091_h_",
                    "entity_name": "Kirk Varnedoe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051b27b",
                    "entity_name": "William Rubin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition_curator",
                        "class": "exhibitions.exhibition_curator",
                        "friendly_name": "Exhibition curator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07gz15j",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "'Primitivism' in 20th Century Art: Affinity of the Tribal and the Modern",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition_curator.exhibitions_curated",
                        "friendly_name": "Exhibitions curated"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_curator . \nVALUES ?x1 { :m.07gz15j } \n?x0 :exhibitions.exhibition_curator.exhibitions_curated ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition_curator (JOIN exhibitions.exhibition_curator.exhibitions_curated m.07gz15j))"
        }
    },
    "265": {
        "generations": "what sports team was previously known as kansas city athletics??",
        "ori_data_item": {
            "qid": 2100811005000,
            "question": "which sports team was previously known as kansas city athletics?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05m_8",
                    "entity_name": "Oakland Athletics"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team",
                        "class": "sports.sports_team",
                        "friendly_name": "Sports Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05kmkd0",
                        "class": "sports.defunct_sports_team",
                        "friendly_name": "Kansas City Athletics",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_team.previously_known_as",
                        "friendly_name": "Previously Known As"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team . \nVALUES ?x1 { :m.05kmkd0 } \n?x0 :sports.sports_team.previously_known_as ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team (JOIN sports.sports_team.previously_known_as m.05kmkd0))"
        }
    },
    "266": {
        "generations": "which privately owned vehicle has the highest milage??",
        "ori_data_item": {
            "qid": 2104001002000,
            "question": "what privately owned vehicle has the highest milage?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k_q3p",
                    "entity_name": "Ken's 1968 Pontiac GTO"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.privately_owned_vehicle",
                        "class": "automotive.privately_owned_vehicle",
                        "friendly_name": "Privately Owned Vehicle",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.privately_owned_vehicle.milage",
                        "friendly_name": "Milage"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.privately_owned_vehicle . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :automotive.privately_owned_vehicle . \n?y0 :automotive.privately_owned_vehicle.milage ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :automotive.privately_owned_vehicle.milage ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(ARGMAX automotive.privately_owned_vehicle automotive.privately_owned_vehicle.milage)"
        }
    },
    "267": {
        "generations": "who designed the rs-25 rocket engine in spaceflight??",
        "ori_data_item": {
            "qid": 2103171000000,
            "question": "what rocket engine designer is designed by rs-25?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vhl6",
                    "entity_name": "Rocketdyne"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_designer",
                        "class": "spaceflight.rocket_engine_designer",
                        "friendly_name": "Rocket engine designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.032blg",
                        "class": "spaceflight.bipropellant_rocket_engine",
                        "friendly_name": "rs-25",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "spaceflight.rocket_engine.designed_by",
                        "friendly_name": "Designed by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine_designer . \nVALUES ?x1 { :m.032blg } \n?x1 :spaceflight.rocket_engine.designed_by ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine_designer (JOIN (R spaceflight.rocket_engine.designed_by) m.032blg))"
        }
    },
    "268": {
        "generations": "what warship was commissioned in 1941 in user patrick's default domain of warship_v1_1??",
        "ori_data_item": {
            "qid": 2102012010000,
            "question": "what warship was commisioned on 1941?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02zb0l",
                    "entity_name": "Japanese submarine I-25"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "user.patrick.default_domain.warship_v1_1",
                        "class": "user.patrick.default_domain.warship_v1_1",
                        "friendly_name": "Warship v1.1",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1941^^http://www.w3.org/2001/XMLSchema#gYear",
                        "class": "type.datetime",
                        "friendly_name": "1941",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "user.patrick.default_domain.warship_v1_1.commissioned",
                        "friendly_name": "Commissioned"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.patrick.default_domain.warship_v1_1 . \nVALUES ?x1 { \"1941-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear> } \n?x0 :user.patrick.default_domain.warship_v1_1.commissioned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "user.patrick.default_domain"
            ],
            "s_expression": "(AND user.patrick.default_domain.warship_v1_1 (JOIN user.patrick.default_domain.warship_v1_1.commissioned 1941^^http://www.w3.org/2001/XMLSchema#gYear))"
        }
    },
    "269": {
        "generations": "which government agency was succeeded by the department of housing and urban development??",
        "ori_data_item": {
            "qid": 2100837014000,
            "question": "which government agency was the successor agency of department of housing and urban development?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fntw3",
                    "entity_name": "Federal Housing and Home Finance Agency"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_agency",
                        "class": "government.government_agency",
                        "friendly_name": "Government Agency",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jbk9",
                        "class": "government.government_agency",
                        "friendly_name": "department of housing and urban development",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_agency.successor_agency",
                        "friendly_name": "Successor agency"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_agency . \nVALUES ?x1 { :m.0jbk9 } \n?x0 :government.government_agency.successor_agency ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_agency (JOIN government.government_agency.successor_agency m.0jbk9))"
        }
    },
    "270": {
        "generations": "what theater production has the soundtrack The Secret Garden: A New Musical (1986 London Studio Cast)??",
        "ori_data_item": {
            "qid": 2102349008000,
            "question": "the secret garden: a new musical (1986 london studio cast) is the soundtrack for which theater production?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05slxfn",
                    "entity_name": "The Secret Garden - West End"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_production",
                        "class": "theater.theater_production",
                        "friendly_name": "Theater Production",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05sl2yt",
                        "class": "theater.musical_soundtrack",
                        "friendly_name": "The Secret Garden: A New Musical (1986 London Studio Cast)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_production.soundtracks",
                        "friendly_name": "Soundtracks"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_production . \nVALUES ?x1 { :m.05sl2yt } \n?x0 :theater.theater_production.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_production (JOIN theater.theater_production.soundtracks m.05sl2yt))"
        }
    },
    "271": {
        "generations": "who is the person with the metaweb username cleegiles??",
        "ori_data_item": {
            "qid": 2102367008000,
            "question": "cleegiles is the title given to which individual?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05lzh2",
                    "entity_name": "Lee Giles"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.person",
                        "class": "people.person",
                        "friendly_name": "Person",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.022p_jp",
                        "class": "freebase.user_profile",
                        "friendly_name": "cleegiles",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.metaweb_user_s",
                        "friendly_name": "Users Who Say They Are This Person"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.person . \nVALUES ?x1 { :m.022p_jp } \n?x0 :people.person.metaweb_user_s ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.person (JOIN people.person.metaweb_user_s m.022p_jp))"
        }
    },
    "272": {
        "generations": "which fictional character has the medical condition of health anxiety??",
        "ori_data_item": {
            "qid": 2100351008000,
            "question": "health anxiety is suffered by which fictional character?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079l85",
                    "entity_name": "Mort Goldman"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04c_jpd",
                        "class": "fictional_universe.medical_condition_in_fiction",
                        "friendly_name": "health anxiety",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.medical_conditions",
                        "friendly_name": "Medical conditions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.04c_jpd } \n?x0 :fictional_universe.fictional_character.medical_conditions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.medical_conditions m.04c_jpd))"
        }
    },
    "273": {
        "generations": "what comic book series has exactly 24 issues??",
        "ori_data_item": {
            "qid": 2100244015000,
            "question": "what series has 24 issues?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0463zhc",
                    "entity_name": "Pandora Hearts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kw_5",
                    "entity_name": "Friendly Neighborhood Spider-Man"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043nykw",
                    "entity_name": "Nura: Rise of the Yokai Clan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q9f7k",
                    "entity_name": "Rookies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_ttp",
                    "entity_name": "Miracleman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04s1_3",
                    "entity_name": "Sgt. Frog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025_z29",
                    "entity_name": "Girls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06db82",
                    "entity_name": "Rising Stars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n7jxl",
                    "entity_name": "Tetsujin 28-go"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hr4lp0",
                    "entity_name": "Magi: The Labyrinth of Magic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nbjl",
                    "entity_name": "Realm of Kings"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_series",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Comic Book Series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "24^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "24",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_series.number_of_issues",
                        "friendly_name": "Number Of Issues"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_series . \nVALUES ?x1 { \"24\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :comic_books.comic_book_series.number_of_issues ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_series (JOIN comic_books.comic_book_series.number_of_issues 24^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "274": {
        "generations": "what is the business location with the most recent opening date??",
        "ori_data_item": {
            "qid": 2103929005000,
            "question": "which was the most recently opened organization location?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pcdpcz",
                    "entity_name": "ABC Lock & Key Inc"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.business_location",
                        "class": "business.business_location",
                        "friendly_name": "Organization Location",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.business_location.opening_date",
                        "friendly_name": "Opening Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.business_location . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :business.business_location . \n?y0 :business.business_location.opening_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :business.business_location.opening_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(ARGMAX business.business_location business.business_location.opening_date)"
        }
    },
    "275": {
        "generations": "which telescope is housed in the national solar observatory??",
        "ori_data_item": {
            "qid": 2102145001000,
            "question": "national solar observatory houses what telescope?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08qz17",
                    "entity_name": "Richard B. Dunn Solar Telescope"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.telescope",
                        "class": "astronomy.telescope",
                        "friendly_name": "Telescope",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02b407",
                        "class": "astronomy.astronomical_observatory",
                        "friendly_name": "National Solar Observatory",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.telescope.housed_in",
                        "friendly_name": "Housed in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.telescope . \nVALUES ?x1 { :m.02b407 } \n?x0 :astronomy.telescope.housed_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.telescope (JOIN astronomy.telescope.housed_in m.02b407))"
        }
    },
    "276": {
        "generations": "which beer has an original gravity of 19.6?",
        "ori_data_item": {
            "qid": 2102297000000,
            "question": "19.6 is the original gravity of which beer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n1pydm",
                    "entity_name": "New Holland Black Tulip Tripel Ale"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.beer",
                        "class": "food.beer",
                        "friendly_name": "Beer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "19.6^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "19.6",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.beer.original_gravity",
                        "friendly_name": "Original gravity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.beer . \nVALUES ?x1 { \"19.6\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :food.beer.original_gravity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.beer (JOIN food.beer.original_gravity 19.6^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "277": {
        "generations": "who is the creator of a fictional character with the shortest height in meters??",
        "ori_data_item": {
            "qid": 2104374003000,
            "question": "which is the fictional character creator with the smallest height?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cyh6",
                    "entity_name": "Alexander Pope"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character_creator",
                        "class": "fictional_universe.fictional_character_creator",
                        "friendly_name": "Fictional Character Creator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.height_meters",
                        "friendly_name": "Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character_creator . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :fictional_universe.fictional_character_creator . \n?y0 :people.person.height_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN fictional_universe.fictional_character_creator people.person.height_meters)"
        }
    },
    "278": {
        "generations": "what constitutional amendment was proposed on march 4th, 1794??",
        "ori_data_item": {
            "qid": 2102411003000,
            "question": "on the date 1794-03-04, what amendment was proposed to the constitution?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07slr",
                    "entity_name": "Eleventh Amendment to the United States Constitution"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.constitutional_amendment",
                        "class": "law.constitutional_amendment",
                        "friendly_name": "Constitutional Amendment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1794-03-04^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "1794-03-04",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.constitutional_amendment.proposed_on",
                        "friendly_name": "Proposed on"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment . \nVALUES ?x1 { \"1794-03-04-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :law.constitutional_amendment.proposed_on ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.constitutional_amendment (JOIN law.constitutional_amendment.proposed_on 1794-03-04^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "279": {
        "generations": "which ride has 5 inversions??",
        "ori_data_item": {
            "qid": 2100678003000,
            "question": "5 is the number of inversions on which amusement ride?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.074lhz",
                    "entity_name": "Drachen Fire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h522cx",
                    "entity_name": "X-Flight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cnk4r",
                    "entity_name": "Goliath"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.073k4m",
                    "entity_name": "Green Lantern"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swnsyq",
                    "entity_name": "Nitro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1215cj9l",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cwstm",
                    "entity_name": "Batman: The Ride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dn3gd",
                    "entity_name": "Batwing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d6kh5",
                    "entity_name": "Viper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0125ygs0",
                    "entity_name": "Limit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026234d",
                    "entity_name": "Olympia Looping"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0269dww",
                    "entity_name": "Wildfire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027lw90",
                    "entity_name": "The Hangman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027th26",
                    "entity_name": "Kong"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027y0c5",
                    "entity_name": "Infusion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0284q6s",
                    "entity_name": "Firehawk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pqrdr",
                    "entity_name": "The Great White"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r4199",
                    "entity_name": "Le Vampire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z1j2_",
                    "entity_name": "Fly \u2013 The Great Nor'easter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cp8vy",
                    "entity_name": "Lightning"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cptts",
                    "entity_name": "Batman: La Fuga"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cr4gp",
                    "entity_name": "Diavlo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hm1b7",
                    "entity_name": "Tornado"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q1qvh",
                    "entity_name": "Jubilee Odyssey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05twj1",
                    "entity_name": "Batman: The Ride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgkjs",
                    "entity_name": "Dominator"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cnzfxj",
                    "entity_name": "El Condor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d6l4d",
                    "entity_name": "Mind Eraser"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d8mmj",
                    "entity_name": "Nighthawk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d9yn7",
                    "entity_name": "Batman: The Ride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dkr3y",
                    "entity_name": "Arkham Asylum \u2013 Shock Therapy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f3ltk",
                    "entity_name": "Blue Tornado"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g88c3",
                    "entity_name": "Thunderhawk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9kz03",
                    "entity_name": "OzIris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pdnzjt",
                    "entity_name": "Sky Scrapper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxpkpr",
                    "entity_name": "Flug der D\u00e4monen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dmgcs",
                    "entity_name": "T3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g60fs",
                    "entity_name": "Flight Deck"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dzbmp",
                    "entity_name": "Ninja"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0405yh8",
                    "entity_name": "Edn\u00f6r \u2013 L'Attaque"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch3x7r",
                    "entity_name": "MP Xpress"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011q3cg2",
                    "entity_name": "Huracan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f9z4w",
                    "entity_name": "X-Flight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11bt_cl12v",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011q9lqs",
                    "entity_name": "Cannibal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1269nh2_r",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121dbztt",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1234hkqf",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "5",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.inversions",
                        "friendly_name": "Inversions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \nVALUES ?x1 { \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :amusement_parks.ride.inversions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (JOIN amusement_parks.ride.inversions 5^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "280": {
        "generations": "which kingdom has rulers who are descendants of habibullah khan's parents??",
        "ori_data_item": {
            "qid": 3202572005000,
            "question": "the heir of habibullah khan is the ruler of which kingdom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d5qx7",
                    "entity_name": "Emirate of Afghanistan"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.kingdom",
                        "class": "royalty.kingdom",
                        "friendly_name": "Kingdom",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "royalty.monarch",
                        "class": "royalty.monarch",
                        "friendly_name": "Monarch",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.032byq",
                        "class": "royalty.chivalric_order_member",
                        "friendly_name": "Habibullah Khan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "royalty.kingdom.rulers",
                        "friendly_name": "Rulers"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.person.parents",
                        "friendly_name": "Parents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.kingdom . \n?x1 :type.object.type :royalty.monarch . \nVALUES ?x2 { :m.032byq } \n?x0 :royalty.kingdom.rulers ?x1 . \n?x1 :people.person.parents ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "royalty",
                "people"
            ],
            "s_expression": "(AND royalty.kingdom (JOIN royalty.kingdom.rulers (JOIN people.person.parents m.032byq)))"
        }
    },
    "281": {
        "generations": "what work of fiction is set in the underground tunnels of wallasey??",
        "ori_data_item": {
            "qid": 2101295008000,
            "question": "the underground tunnels of wallasey is a fictional setting in which work?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pc66mx",
                    "entity_name": "Hector Hornsmith Diary Entries"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pc66j0",
                    "entity_name": "The Treasure of Treasures"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.work_of_fiction",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "Work of Fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0pc7znd",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Underground Tunnels of Wallasey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.work_of_fiction.setting",
                        "friendly_name": "Setting"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.work_of_fiction . \nVALUES ?x1 { :m.0pc7znd } \n?x0 :fictional_universe.work_of_fiction.setting ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.work_of_fiction (JOIN fictional_universe.work_of_fiction.setting m.0pc7znd))"
        }
    },
    "282": {
        "generations": "which comic book issue has a cover with Glen Orbik's colors??",
        "ori_data_item": {
            "qid": 2102882007000,
            "question": "for which comic book issue did glen orbik color?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bw1dh",
                    "entity_name": "Batman #568"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_issue",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Comic Book Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dfjgh",
                        "class": "comic_books.comic_book_colorist",
                        "friendly_name": "Glen Orbik",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_issue.cover_colors",
                        "friendly_name": "Cover Colors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \nVALUES ?x1 { :m.0dfjgh } \n?x0 :comic_books.comic_book_issue.cover_colors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_issue (JOIN comic_books.comic_book_issue.cover_colors m.0dfjgh))"
        }
    },
    "283": {
        "generations": "what religion is part of islam and has the same practices as mormon?",
        "ori_data_item": {
            "qid": 4300140011000,
            "question": "what religion is part of islam and has same practices with mormon?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.078tg",
                    "entity_name": "Sunni Islam"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religious_practice",
                        "class": "religion.religious_practice",
                        "friendly_name": "Religious Practice",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0flw86",
                        "class": "religion.religion",
                        "friendly_name": "Islam",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.058x5",
                        "class": "religion.religion",
                        "friendly_name": "mormon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "religion.religion.is_part_of",
                        "friendly_name": "Is Part Of"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religion . \n?x1 :type.object.type :religion.religious_practice . \nVALUES ?x2 { :m.0flw86 } \nVALUES ?x3 { :m.058x5 } \n?x0 :religion.religion.practices ?x1 . \n?x0 :religion.religion.is_part_of ?x2 . \n?x3 :religion.religion.practices ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religion (AND (JOIN religion.religion.practices (JOIN (R religion.religion.practices) m.058x5)) (JOIN religion.religion.is_part_of m.0flw86)))"
        }
    },
    "284": {
        "generations": "which music video was directed by michael palmieri??",
        "ori_data_item": {
            "qid": 2101587003000,
            "question": "which music video is directed by michael palmieri",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n2671l",
                    "entity_name": "An Honest Mistake"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.music_video",
                        "class": "music.music_video",
                        "friendly_name": "Music video",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.092s3_0",
                        "class": "music.music_video_director",
                        "friendly_name": "Michael Palmieri",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.music_video.directed_by",
                        "friendly_name": "Directed by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video . \nVALUES ?x1 { :m.092s3_0 } \n?x0 :music.music_video.directed_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.music_video (JOIN music.music_video.directed_by m.092s3_0))"
        }
    },
    "285": {
        "generations": "what TV episode segment is about a fairy tale parody??",
        "ori_data_item": {
            "qid": 2101538001000,
            "question": "fairy tale parody is in what tv episode?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010bz9d9",
                    "entity_name": "Episode 0796 Sesame Street News Flash"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_episode_segment",
                        "class": "tv.tv_episode_segment",
                        "friendly_name": "TV episode segment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fpwdbt",
                        "class": "tv.tv_subject",
                        "friendly_name": "Fairy Tale Parody",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_episode_segment.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_episode_segment . \nVALUES ?x1 { :m.0fpwdbt } \n?x0 :tv.tv_episode_segment.subjects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_episode_segment (JOIN tv.tv_episode_segment.subjects m.0fpwdbt))"
        }
    },
    "286": {
        "generations": "what asteroid group was founded by 2062 aten??",
        "ori_data_item": {
            "qid": 2100467001000,
            "question": "2062 aten is the founding member of which asteroid group?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0290ms",
                    "entity_name": "Aten asteroid"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.asteroid_group",
                        "class": "astronomy.asteroid_group",
                        "friendly_name": "Asteroid Group",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03hcy8",
                        "class": "astronomy.asteroid",
                        "friendly_name": "2062 Aten",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.asteroid_group.asteroid_group_founding_member",
                        "friendly_name": "Asteroid Group Founding Member"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asteroid_group . \nVALUES ?x1 { :m.03hcy8 } \n?x0 :astronomy.asteroid_group.asteroid_group_founding_member ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.asteroid_group (JOIN astronomy.asteroid_group.asteroid_group_founding_member m.03hcy8))"
        }
    },
    "287": {
        "generations": "what type of museum is the us national arboretum??",
        "ori_data_item": {
            "qid": 2102343007000,
            "question": "what type of museum is us national arboretum?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xsnw",
                    "entity_name": "Arboretum"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.type_of_museum",
                        "class": "architecture.type_of_museum",
                        "friendly_name": "Type of museum",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.057n9s",
                        "class": "architecture.museum",
                        "friendly_name": "us national arboretum",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.type_of_museum.museums",
                        "friendly_name": "Museums"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.type_of_museum . \nVALUES ?x1 { :m.057n9s } \n?x0 :architecture.type_of_museum.museums ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.type_of_museum (JOIN architecture.type_of_museum.museums m.057n9s))"
        }
    },
    "288": {
        "generations": "which nuclear powerplant on a boat has a power of 70000.0 kW??",
        "ori_data_item": {
            "qid": 2100489003000,
            "question": "look for the nuclear ship powerplant which has a power that is 70000.0.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ck0rk",
                    "entity_name": "VM-A reactor"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boats.nuclear_powerplant",
                        "class": "boats.nuclear_powerplant",
                        "friendly_name": "Nuclear Ship Powerplant",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "70000.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "70000.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.nuclear_powerplant.power_kw",
                        "friendly_name": "Power (kw)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.nuclear_powerplant . \nVALUES ?x1 { \"70000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :boats.nuclear_powerplant.power_kw ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(AND boats.nuclear_powerplant (JOIN boats.nuclear_powerplant.power_kw 70000.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "289": {
        "generations": "what is the most recent musical release that credits engineers including lee whitsel??",
        "ori_data_item": {
            "qid": 3205737008000,
            "question": "what is the most recent musical release that credits engineers including lee whitsel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl5xf1",
                    "entity_name": "Continuity"
                }
            ],
            "function": "argmax",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release",
                        "class": "music.release",
                        "friendly_name": "Musical Release",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04t59_w",
                        "class": "music.engineer",
                        "friendly_name": "Lee Whitsel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release.release_date",
                        "friendly_name": "Release Date"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "music.release.engineers",
                        "friendly_name": "Engineers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.release . \nVALUES ?y2 { :m.04t59_w } \n?y0 :music.release.release_date ?y1 . \n?y0 :music.release.engineers ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.04t59_w } \n?x0 :music.release.release_date ?x1 . \n?x0 :music.release.engineers ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(ARGMAX (AND music.release (JOIN music.release.engineers m.04t59_w)) music.release.release_date)"
        }
    },
    "290": {
        "generations": "which projects are part of the larger project 2012 london olympics??",
        "ori_data_item": {
            "qid": 2101759012000,
            "question": "which project is a part of 2012 london olympics?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9c50t",
                    "entity_name": "Construction of Aquatics Centre"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "projects.project",
                        "class": "projects.project",
                        "friendly_name": "Project",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06sks6",
                        "class": "projects.project",
                        "friendly_name": "2012 london olympics",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "projects.project.part_of_larger_project",
                        "friendly_name": "Part of larger project"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :projects.project . \nVALUES ?x1 { :m.06sks6 } \n?x0 :projects.project.part_of_larger_project ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "projects"
            ],
            "s_expression": "(AND projects.project (JOIN projects.project.part_of_larger_project m.06sks6))"
        }
    },
    "291": {
        "generations": "which satellite is orbiting the planet mars??",
        "ori_data_item": {
            "qid": 2102878004000,
            "question": "what is the name of the satellite that's orbiting planet mars?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01887c",
                    "entity_name": "Mars Express"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01h_7t",
                    "entity_name": "Mars Global Surveyor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0knt6hh",
                    "entity_name": "Mars Orbiter Mission"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02bch7",
                    "entity_name": "Mars Reconnaissance Orbiter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025rpdw",
                    "entity_name": "Mars 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025rpf7",
                    "entity_name": "Mars 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04yfsbs",
                    "entity_name": "MAVEN"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.satellite",
                        "class": "spaceflight.satellite",
                        "friendly_name": "Satellite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09cws",
                        "class": "astronomy.celestial_object",
                        "friendly_name": "planet mars",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.satellite.orbiting",
                        "friendly_name": "Orbiting"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.satellite . \nVALUES ?x1 { :m.09cws } \n?x0 :spaceflight.satellite.orbiting ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.satellite (JOIN spaceflight.satellite.orbiting m.09cws))"
        }
    },
    "292": {
        "generations": "what is the routed drug that is administered through the perineural route??",
        "ori_data_item": {
            "qid": 2101191006000,
            "question": "what's the name of the routed drug that is delivered by the path perineural?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3v_jh",
                    "entity_name": "Chloroprocaine Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3x301",
                    "entity_name": "Lidocaine Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xgkd",
                    "entity_name": "Ropivacaine Hydrochloride Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3x2sh",
                    "entity_name": "Bupivacaine/Epinephrine Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xd9f",
                    "entity_name": "Lidocaine/Epinephrine Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xljz",
                    "entity_name": "Chloroprocaine Hydrochloride Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xw4l",
                    "entity_name": "Bupivacaine Hydrochloride Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3ybb4",
                    "entity_name": "Lidocaine Hydrochloride Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3yc18",
                    "entity_name": "Bupivacaine Perineural"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3yll5",
                    "entity_name": "Ropivacaine Perineural"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.routed_drug",
                        "class": "medicine.routed_drug",
                        "friendly_name": "Routed drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqxhy2",
                        "class": "medicine.drug_administration_route",
                        "friendly_name": "Perineural",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.routed_drug.route_of_administration",
                        "friendly_name": "Route of administration"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.routed_drug . \nVALUES ?x1 { :m.0hqxhy2 } \n?x0 :medicine.routed_drug.route_of_administration ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.routed_drug (JOIN medicine.routed_drug.route_of_administration m.0hqxhy2))"
        }
    },
    "293": {
        "generations": "which medical trial is related to the treatment of osteoporosis??",
        "ori_data_item": {
            "qid": 2102057001000,
            "question": "what medical trial has been tried for osteoporosis?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwc",
                    "entity_name": "Alendronate and/or Parathyroid Hormone for Osteoporosis"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_trial",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Medical trial",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05mdx",
                        "class": "medicine.disease",
                        "friendly_name": "Osteoporosis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_trial.diseases",
                        "friendly_name": "Diseases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial . \nVALUES ?x1 { :m.05mdx } \n?x0 :medicine.medical_trial.diseases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_trial (JOIN medicine.medical_trial.diseases m.05mdx))"
        }
    },
    "294": {
        "generations": "who directed the play too clever by half in theater??",
        "ori_data_item": {
            "qid": 2101077005000,
            "question": "who was the director of too clever by half?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ql8mf",
                    "entity_name": "Richard Jones"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_director",
                        "class": "theater.theater_director",
                        "friendly_name": "Theater Director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0z14p9q",
                        "class": "theater.theater_production",
                        "friendly_name": "Too Clever By Half",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_director.plays_directed",
                        "friendly_name": "Plays Directed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_director . \nVALUES ?x1 { :m.0z14p9q } \n?x0 :theater.theater_director.plays_directed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_director (JOIN theater.theater_director.plays_directed m.0z14p9q))"
        }
    },
    "295": {
        "generations": "what medical treatment was used in the Nimotuzumab trials for advanced head and neck tumors in combination with radiotherapy and radiochemotherapy??",
        "ori_data_item": {
            "qid": 2101894009000,
            "question": "what medical treatment will use trials of nimotuzumab in advanced head and neck tumors in combination with radiotherapy and radiochemotherapy",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pp30g",
                    "entity_name": "Nimotuzumab"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_treatment",
                        "class": "medicine.medical_treatment",
                        "friendly_name": "Medical Treatment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07748k_",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Nimotuzumab in advanced head and neck tumors in combination with radiotherapy and radiochemotherapy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_treatment.trials",
                        "friendly_name": "Trials"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_treatment . \nVALUES ?x1 { :m.07748k_ } \n?x0 :medicine.medical_treatment.trials ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_treatment (JOIN medicine.medical_treatment.trials m.07748k_))"
        }
    },
    "296": {
        "generations": "how many award judges belong to the alpha delta phi fraternity/sorority and have an accepted gender of male or female??",
        "ori_data_item": {
            "qid": 3206192021000,
            "question": "how many award judges are of the gender accepted by alpha delta phi?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "96"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "award.award_judge",
                        "class": "award.award_judge",
                        "friendly_name": "Award Judge",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.gender",
                        "class": "people.gender",
                        "friendly_name": "Gender",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03tx10",
                        "class": "education.fraternity_sorority",
                        "friendly_name": "Alpha Delta Phi",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.gender",
                        "friendly_name": "Gender"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "education.fraternity_sorority.accepted_genders",
                        "friendly_name": "Accepted genders"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.award_judge . \n?x1 :type.object.type :people.gender . \nVALUES ?x2 { :m.03tx10 } \n?x0 :people.person.gender ?x1 . \n?x2 :education.fraternity_sorority.accepted_genders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education",
                "people"
            ],
            "s_expression": "(COUNT (AND award.award_judge (JOIN people.person.gender (JOIN (R education.fraternity_sorority.accepted_genders) m.03tx10))))"
        }
    },
    "297": {
        "generations": "when does daylight saving time end in the est time zone??",
        "ori_data_item": {
            "qid": 3200601002000,
            "question": "which time zones end dst on the same day as est?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02fqwt",
                    "entity_name": "Central Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hczc",
                    "entity_name": "Mountain Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lcqs",
                    "entity_name": "Pacific Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jwyh47",
                    "entity_name": "America/Shiprock Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y499mk",
                    "entity_name": "Cuba\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4dw25",
                    "entity_name": "Saint Pierre and Miquelon\u00a0Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lcrv",
                    "entity_name": "Alaska Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042g7t",
                    "entity_name": "Atlantic Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lctm",
                    "entity_name": "Hawaii-Aleutian Time Zone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jphn",
                    "entity_name": "Newfoundland Time Zone"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.time_zone",
                        "class": "time.time_zone",
                        "friendly_name": "Time Zone",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "time.day_of_year",
                        "class": "time.day_of_year",
                        "friendly_name": "Day Of Year",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02hcv8",
                        "class": "time.time_zone",
                        "friendly_name": "est",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.time_zone.day_dst_ends",
                        "friendly_name": "Day DST ends"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "time.time_zone.day_dst_ends",
                        "friendly_name": "Day DST ends"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.time_zone . \n?x1 :type.object.type :time.day_of_year . \nVALUES ?x2 { :m.02hcv8 } \n?x0 :time.time_zone.day_dst_ends ?x1 . \n?x2 :time.time_zone.day_dst_ends ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.time_zone (JOIN time.time_zone.day_dst_ends (JOIN (R time.time_zone.day_dst_ends) m.02hcv8)))"
        }
    },
    "298": {
        "generations": "which deceased organism has a weight of at least 34.0 kg??",
        "ori_data_item": {
            "qid": 2105405011000,
            "question": "what dead organism weighs more than 34.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023qdn",
                    "entity_name": "Keiko"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09lzbv",
                    "entity_name": "Bart the Bear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gv_l",
                    "entity_name": "Secretariat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0281ts",
                    "entity_name": "Pinta Island tortoise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g14f",
                    "entity_name": "Seabiscuit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.072vvt",
                    "entity_name": "Gargantua"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pvtlv",
                    "entity_name": "Massa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dwlwq",
                    "entity_name": "Ah Meng"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rksmz",
                    "entity_name": "Bandit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jbtg",
                    "entity_name": "Hogzilla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05lfrs",
                    "entity_name": "Shamu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b770jy",
                    "entity_name": "Giant George"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0781v0",
                    "entity_name": "Bodacious"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.deceased_organism",
                        "class": "biology.deceased_organism",
                        "friendly_name": "Deceased Organism",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "34.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "34.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.deceased_organism . \nFILTER (?x1 >= \"34.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :biology.organism.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.deceased_organism (ge biology.organism.weight_kg 34.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "299": {
        "generations": "what ingredients are commonly used in sundanese cuisine??",
        "ori_data_item": {
            "qid": 2100730003000,
            "question": "what are the ingredients that make up the dish, sundanese cuisine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lzzr",
                    "entity_name": "Sambal"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.ingredient",
                        "class": "food.ingredient",
                        "friendly_name": "Ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ddd58v",
                        "class": "dining.cuisine",
                        "friendly_name": "Sundanese cuisine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.ingredient.cuisine",
                        "friendly_name": "Cuisine"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.ingredient . \nVALUES ?x1 { :m.0ddd58v } \n?x0 :food.ingredient.cuisine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.ingredient (JOIN food.ingredient.cuisine m.0ddd58v))"
        }
    },
    "300": {
        "generations": "how many netflix genres does the residents: kettles of fish on the outskirts of town belong to??",
        "ori_data_item": {
            "qid": 2103371013000,
            "question": "how many genres is the residents: kettles of fish on the outskirts of town a part of?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "5"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.netflix_genre",
                        "class": "media_common.netflix_genre",
                        "friendly_name": "Netflix Genre",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0crrp_1",
                        "class": "media_common.netflix_title",
                        "friendly_name": "The Residents: Kettles of Fish on the Outskirts of Town",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.netflix_title.netflix_genres",
                        "friendly_name": "Netflix Genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.netflix_genre . \nVALUES ?x1 { :m.0crrp_1 } \n?x1 :media_common.netflix_title.netflix_genres ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(COUNT (AND media_common.netflix_genre (JOIN (R media_common.netflix_title.netflix_genres) m.0crrp_1)))"
        }
    },
    "301": {
        "generations": "what student radio station is affiliated with csu long beach??",
        "ori_data_item": {
            "qid": 2100607006000,
            "question": "what is the name of the student radio station at csu long beach?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d6zqf",
                    "entity_name": "Kbeach"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.student_radio_station",
                        "class": "education.student_radio_station",
                        "friendly_name": "Student radio station",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.021w0_",
                        "class": "education.educational_institution",
                        "friendly_name": "csu long beach",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.student_radio_station.school",
                        "friendly_name": "School"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.student_radio_station . \nVALUES ?x1 { :m.021w0_ } \n?x0 :education.student_radio_station.school ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.student_radio_station (JOIN education.student_radio_station.school m.021w0_))"
        }
    },
    "302": {
        "generations": "which digital camera has an optical zoom of 2.0??",
        "ori_data_item": {
            "qid": 2101999000000,
            "question": "which digital camera has a sensor type 2.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n1k892",
                    "entity_name": "GoPro Hero2"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "2.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.digital_camera.optical_zoom",
                        "friendly_name": "Optical Zoom"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"2.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.optical_zoom ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.optical_zoom 2.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "303": {
        "generations": "which waterfall has a drop number of 6?",
        "ori_data_item": {
            "qid": 2100982012000,
            "question": "what is the name of a waterfall with 6 drops?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vx5p0",
                    "entity_name": "Setrock Creek Falls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gtzb4",
                    "entity_name": "Cotter Force"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p7xt",
                    "entity_name": "Wahkeena Falls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.020jn5",
                    "entity_name": "Browne Falls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c6461",
                    "entity_name": "Sentinel Fall"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.waterfall",
                        "class": "geography.waterfall",
                        "friendly_name": "Waterfall",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "6^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "6",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.waterfall.drop_number",
                        "friendly_name": "Number of drops"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.waterfall . \nVALUES ?x1 { \"6\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :geography.waterfall.drop_number ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.waterfall (JOIN geography.waterfall.drop_number 6^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "304": {
        "generations": "what governmental body is a component of the maryland district court??",
        "ori_data_item": {
            "qid": 3201194015000,
            "question": "what is the name of the governmental body that has a component which has a component of maryland district court?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jkmt",
                    "entity_name": "Federal judiciary of the United States"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03pkdm",
                        "class": "government.governmental_body",
                        "friendly_name": "maryland district court",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "government.governmental_body.body_this_is_a_component_of",
                        "friendly_name": "Body this is a component of"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "government.governmental_body.body_this_is_a_component_of",
                        "friendly_name": "Body this is a component of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \n?x1 :type.object.type :government.governmental_body . \nVALUES ?x2 { :m.03pkdm } \n?x1 :government.governmental_body.body_this_is_a_component_of ?x0 . \n?x2 :government.governmental_body.body_this_is_a_component_of ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN (R government.governmental_body.body_this_is_a_component_of) (JOIN (R government.governmental_body.body_this_is_a_component_of) m.03pkdm)))"
        }
    },
    "305": {
        "generations": "what telescope platform is operated by universiteit leiden??",
        "ori_data_item": {
            "qid": 3203824004000,
            "question": "what operational platform does the telescope in the universiteit leiden have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09tr1rk",
                    "entity_name": "Terrestrial"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.telescope_platform",
                        "class": "astronomy.telescope_platform",
                        "friendly_name": "Telescope platform",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "astronomy.telescope",
                        "class": "astronomy.telescope",
                        "friendly_name": "Telescope",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0lvng",
                        "class": "astronomy.astronomical_observatory",
                        "friendly_name": "universiteit leiden",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "astronomy.telescope.operational_platform",
                        "friendly_name": "Operational platform"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "astronomy.astronomical_observatory.telescope_s",
                        "friendly_name": "Telescope(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.telescope_platform . \n?x1 :type.object.type :astronomy.telescope . \nVALUES ?x2 { :m.0lvng } \n?x1 :astronomy.telescope.operational_platform ?x0 . \n?x2 :astronomy.astronomical_observatory.telescope_s ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.telescope_platform (JOIN (R astronomy.telescope.operational_platform) (JOIN (R astronomy.astronomical_observatory.telescope_s) m.0lvng)))"
        }
    },
    "306": {
        "generations": "which exhibitions feature thomas eakins as a subject??",
        "ori_data_item": {
            "qid": 2101150013000,
            "question": "what is the name of the exhibition that is about thomas eakins?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g521lv",
                    "entity_name": "Portrait of Professor Benjamin H. Rand by Thomas Eakins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hyp_q6",
                    "entity_name": "An Eakins Masterpiece Restored: Seeing The Gross Clinic Anew"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b99r2",
                    "entity_name": "Thomas Eakins: American Realist"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065qf7g",
                    "entity_name": "Thomas Eakins: The Rowing Pictures"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0pxdg",
                        "class": "exhibitions.exhibition_subject",
                        "friendly_name": "thomas eakins",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition . \nVALUES ?x1 { :m.0pxdg } \n?x0 :exhibitions.exhibition.subjects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition (JOIN exhibitions.exhibition.subjects m.0pxdg))"
        }
    },
    "307": {
        "generations": "how many tea types include earl grey tea as an ingredient??",
        "ori_data_item": {
            "qid": 2103064000000,
            "question": "how many types of teas are derived from earl grey tea?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.tea_type",
                        "class": "food.tea_type",
                        "friendly_name": "Tea type",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01xrmc",
                        "class": "food.tea",
                        "friendly_name": "Earl Grey tea",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.tea_type.tea",
                        "friendly_name": "Representative teas"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.tea_type . \nVALUES ?x1 { :m.01xrmc } \n?x0 :food.tea_type.tea ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(COUNT (AND food.tea_type (JOIN food.tea_type.tea m.01xrmc)))"
        }
    },
    "308": {
        "generations": "which aircraft owner has the highest number of b737s in their fleet??",
        "ori_data_item": {
            "qid": 4302485009000,
            "question": "who is the owner of the b737 owned by the most number of parties?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.069vt",
                    "entity_name": "Qantas"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_owner",
                        "class": "aviation.aircraft_owner",
                        "friendly_name": "Aircraft Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_ownership_count",
                        "class": "aviation.aircraft_ownership_count",
                        "friendly_name": "Aircraft Ownership Count",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0137k8",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "b737",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_owner.aircraft_fleet_composition",
                        "friendly_name": "Aircraft Fleet Composition"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "aviation.aircraft_ownership_count.number_owned",
                        "friendly_name": "Number Owned"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "aviation.aircraft_model.number_owned_by",
                        "friendly_name": "Used By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_owner . \n?x1 :type.object.type :aviation.aircraft_ownership_count . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :aviation.aircraft_owner . \n?y1 :type.object.type :aviation.aircraft_ownership_count . \nVALUES ?y3 { :m.0137k8 } \n?y0 :aviation.aircraft_owner.aircraft_fleet_composition ?y1 . \n?y1 :aviation.aircraft_ownership_count.number_owned ?y2 . \n?y3 :aviation.aircraft_model.number_owned_by ?y1 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.0137k8 } \n?x0 :aviation.aircraft_owner.aircraft_fleet_composition ?x1 . \n?x1 :aviation.aircraft_ownership_count.number_owned ?x2 . \n?x3 :aviation.aircraft_model.number_owned_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(ARGMAX (AND aviation.aircraft_owner (JOIN aviation.aircraft_owner.aircraft_fleet_composition (JOIN (R aviation.aircraft_model.number_owned_by) m.0137k8))) (JOIN aviation.aircraft_owner.aircraft_fleet_composition aviation.aircraft_ownership_count.number_owned))"
        }
    },
    "309": {
        "generations": "what defunct company ceased operations due to corporate takeover??",
        "ori_data_item": {
            "qid": 2101796007000,
            "question": "what would cause a cease of a corporate takeover?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047gnq",
                    "entity_name": "Austar United Communications Ltd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010lzgv7",
                    "entity_name": "W.H.Dorman & Co"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010xdj1t",
                    "entity_name": "Imevisi\u00f3n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0113qcll",
                    "entity_name": "Matthew Brown brewery"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qlpxy",
                    "entity_name": "Ross Group"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hpdzp",
                    "entity_name": "Marchwood Motorways"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8m2yn",
                    "entity_name": "Girls\u2019 High School"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gqckh",
                    "entity_name": "Faze FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpw_db",
                    "entity_name": "GB Group"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f35m4",
                    "entity_name": "IONA Technologies, Inc"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.defunct_company",
                        "class": "business.defunct_company",
                        "friendly_name": "Defunct Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fk1g",
                        "class": "business.company_termination_type",
                        "friendly_name": "corporate takeover",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.defunct_company.reason_for_ceasing_operations",
                        "friendly_name": "Reason for ceasing operations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.defunct_company . \nVALUES ?x1 { :m.0fk1g } \n?x0 :business.defunct_company.reason_for_ceasing_operations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.defunct_company (JOIN business.defunct_company.reason_for_ceasing_operations m.0fk1g))"
        }
    },
    "310": {
        "generations": "what work of fiction portrays rock's stick and has a destruction date??",
        "ori_data_item": {
            "qid": 3202397000000,
            "question": "rock's stick is destroyed in the same date as this work of fiction?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zk6y5",
                    "entity_name": "The Fourth Apprentice"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.work_of_fiction",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "Work of Fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_date_time",
                        "class": "fictional_universe.fictional_date_time",
                        "friendly_name": "Fictional Date/Time",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cm3fx9",
                        "class": "fictional_universe.fictional_object",
                        "friendly_name": "Rock's Stick",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_date_time.portrayed_in",
                        "friendly_name": "Portrayed In"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_object.destruction_date",
                        "friendly_name": "Destruction date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.work_of_fiction . \n?x1 :type.object.type :fictional_universe.fictional_date_time . \nVALUES ?x2 { :m.0cm3fx9 } \n?x1 :fictional_universe.fictional_date_time.portrayed_in ?x0 . \n?x2 :fictional_universe.fictional_object.destruction_date ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.work_of_fiction (JOIN (R fictional_universe.fictional_date_time.portrayed_in) (JOIN (R fictional_universe.fictional_object.destruction_date) m.0cm3fx9)))"
        }
    },
    "311": {
        "generations": "what gene is located on chromosome 10 (human) in the genome??",
        "ori_data_item": {
            "qid": 3202626022000,
            "question": "what is the genome of the gene on chromosome 10 (human)?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bsdc",
                    "entity_name": "Human genome"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.genome",
                        "class": "biology.genome",
                        "friendly_name": "Genome",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.gene",
                        "class": "biology.gene",
                        "friendly_name": "Gene",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02kwgjv",
                        "class": "biology.chromosome",
                        "friendly_name": "Chromosome 10 (human)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.genome.gene",
                        "friendly_name": "Gene"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "biology.chromosome.gene",
                        "friendly_name": "Gene"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.genome . \n?x1 :type.object.type :biology.gene . \nVALUES ?x2 { :m.02kwgjv } \n?x0 :biology.genome.gene ?x1 . \n?x2 :biology.chromosome.gene ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.genome (JOIN biology.genome.gene (JOIN (R biology.chromosome.gene) m.02kwgjv)))"
        }
    },
    "312": {
        "generations": "what book edition series is part of the sacred band of stepsons??",
        "ori_data_item": {
            "qid": 2100630010000,
            "question": "sacred band of stepsons is a part of series in which edition of book?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bxj80x",
                    "entity_name": "Beyond Sanctuary Series"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8xg5x",
                    "entity_name": "Sacred Band of Stepsons:  Sacred Band Tales"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bv85n6",
                        "class": "book.book_edition_series",
                        "friendly_name": "sacred band of stepsons",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition_series.part_of_series",
                        "friendly_name": "Part of series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition_series . \nVALUES ?x1 { :m.0bv85n6 } \n?x0 :book.book_edition_series.part_of_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition_series (JOIN book.book_edition_series.part_of_series m.0bv85n6))"
        }
    },
    "313": {
        "generations": "which amusement park ride has more than 8 inversions??",
        "ori_data_item": {
            "qid": 2105485010000,
            "question": "which amusement ride has an amount greater than 8 inversions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6_b9",
                    "entity_name": "Colossus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7nch9",
                    "entity_name": "The Smiler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1gyd",
                    "entity_name": "10 Inversion Roller Coaster"
                }
            ],
            "function": ">",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "8^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "8",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.inversions",
                        "friendly_name": "Inversions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \nFILTER (?x1 > \"8\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :amusement_parks.ride.inversions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (gt amusement_parks.ride.inversions 8^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "314": {
        "generations": "which mountain is part of the arenigs mountain range??",
        "ori_data_item": {
            "qid": 2100740015000,
            "question": "arenigs mountain range in on which mountain?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c60_z",
                    "entity_name": "Foel Goch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b4z4y",
                    "entity_name": "Waun Garnedd-y-filiast"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k7tq5",
                    "entity_name": "Y Gamallt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zwrx3",
                    "entity_name": "Moel Llyfnant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0407nd4",
                    "entity_name": "Carnedd y Filiast"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d0wzy",
                    "entity_name": "Rhobell Fawr"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b20z2",
                    "entity_name": "Carnedd Llechwedd-llyfn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07fzrx",
                    "entity_name": "Arenig Fawr"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qny37",
                    "entity_name": "Manod Mawr North Top"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08kbh3",
                    "entity_name": "Manod Mawr"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dk0xqn",
                    "entity_name": "Mynydd Nodol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zvt42",
                    "entity_name": "Gallt y Daren"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b3bns",
                    "entity_name": "Foel Boeth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b2j5t",
                    "entity_name": "Arenig Fawr South Ridge Top"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zxqfc",
                    "entity_name": "Arenig Fach"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08krjr",
                    "entity_name": "Moel Penamnen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059_wzg",
                    "entity_name": "Arenig Fawr South Top"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rr20",
                    "entity_name": "Dduallt"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bv269",
                        "class": "geography.mountain_range",
                        "friendly_name": "Arenigs",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.mountain_range",
                        "friendly_name": "Mountain range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { :m.0bv269 } \n?x0 :geography.mountain.mountain_range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.mountain_range m.0bv269))"
        }
    },
    "315": {
        "generations": "which clubs are part of the counterbalance: honorable journalists, writers, articles club interest??",
        "ori_data_item": {
            "qid": 2102664014000,
            "question": "what club interest does counterbalance: honorable journalists, writers, articles have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yl50",
                    "entity_name": "New media"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.041y2",
                    "entity_name": "Journalism"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09889g",
                    "entity_name": "Michael Jackson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076xv29",
                    "entity_name": "Michael Jackson's This Is It"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bh3ktx",
                    "entity_name": "Michael Jackson National African American Art Examiner Series"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w70ls",
                    "entity_name": "Death of Michael Jackson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.096jr0",
                    "entity_name": "Jackson family"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.club_interest",
                        "class": "organization.club_interest",
                        "friendly_name": "Club interest",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gm96pr",
                        "class": "organization.club",
                        "friendly_name": "Counterbalance: Honorable Journalists, Writers, Articles",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.club_interest.clubs",
                        "friendly_name": "Clubs with this interest"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.club_interest . \nVALUES ?x1 { :m.0gm96pr } \n?x0 :organization.club_interest.clubs ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.club_interest (JOIN organization.club_interest.clubs m.0gm96pr))"
        }
    },
    "316": {
        "generations": "which travel guidebook covers the destination of Konya??",
        "ori_data_item": {
            "qid": 2100378010000,
            "question": "konya is in which guidebook?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0q_37w9",
                    "entity_name": "Travel to Turkey"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.guidebook",
                        "class": "travel.guidebook",
                        "friendly_name": "Guidebook",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.019_8m",
                        "class": "travel.travel_destination",
                        "friendly_name": "Konya",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.guidebook.travel_destinations_covered",
                        "friendly_name": "Travel destinations covered"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.guidebook . \nVALUES ?x1 { :m.019_8m } \n?x0 :travel.guidebook.travel_destinations_covered ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.guidebook (JOIN travel.guidebook.travel_destinations_covered m.019_8m))"
        }
    },
    "317": {
        "generations": "who is the martial artist known for practicing kenpo and has the earliest end date for their education??",
        "ori_data_item": {
            "qid": 4302507018000,
            "question": "what was the name of the first student practitioner of kenpo ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrwvx",
                    "entity_name": "Chris Maden"
                }
            ],
            "function": "argmin",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_artist",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "Martial Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02cxf5",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "kenpo",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "martial_arts.martial_art.well_known_practitioner",
                        "friendly_name": "Practitioner"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.person.education",
                        "friendly_name": "Education"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "education.education.end_date",
                        "friendly_name": "End Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_artist . \nVALUES ?x1 { :m.02cxf5 } \n?x2 :type.object.type :education.education . \n{\nSELECT (MIN(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :martial_arts.martial_artist . \nVALUES ?y1 { :m.02cxf5 } \n?y2 :type.object.type :education.education . \n?y1 :martial_arts.martial_art.well_known_practitioner ?y0 . \n?y0 :people.person.education ?y2 . \n?y2 :education.education.end_date ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :martial_arts.martial_art.well_known_practitioner ?x0 . \n?x0 :people.person.education ?x2 . \n?x2 :education.education.end_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "martial_arts",
                "education",
                "people"
            ],
            "s_expression": "(ARGMIN (AND martial_arts.martial_artist (JOIN (R martial_arts.martial_art.well_known_practitioner) m.02cxf5)) (JOIN people.person.education education.education.end_date))"
        }
    },
    "318": {
        "generations": "who is the author of the literary series that includes the sub-series Discworld??",
        "ori_data_item": {
            "qid": 3204376001000,
            "question": "what author(s) wrote the literary series that is a sub-series of discworld?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d3x",
                    "entity_name": "Terry Pratchett"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x0zw",
                    "entity_name": "Ian Stewart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h4rg",
                    "entity_name": "Stephen Briggs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.024mxv",
                    "entity_name": "Jack Cohen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qdqzl",
                    "entity_name": "Irana Brown"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.author",
                        "class": "book.author",
                        "friendly_name": "Author",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.literary_series",
                        "class": "book.literary_series",
                        "friendly_name": "Literary Series",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02hc9",
                        "class": "book.literary_series",
                        "friendly_name": "Discworld",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.literary_series.author_s",
                        "friendly_name": "Author(s)"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "book.literary_series.sub_series",
                        "friendly_name": "Sub-series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.author . \n?x1 :type.object.type :book.literary_series . \nVALUES ?x2 { :m.02hc9 } \n?x1 :book.literary_series.author_s ?x0 . \n?x2 :book.literary_series.sub_series ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.author (JOIN (R book.literary_series.author_s) (JOIN (R book.literary_series.sub_series) m.02hc9)))"
        }
    },
    "319": {
        "generations": "what type of cheese made from goat's milk is similar to s\u00e3o jorge cheese??",
        "ori_data_item": {
            "qid": 4302129000000,
            "question": "what cheese with the same texture as s\u00e3o jorge cheese does also come from goat?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01glzg",
                    "entity_name": "Cabrales cheese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01_r_",
                    "entity_name": "Cheddar cheese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h891x",
                    "entity_name": "Alpine Shepherd"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese",
                        "class": "food.cheese",
                        "friendly_name": "Cheese",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03fwl",
                        "class": "food.cheese_milk_source",
                        "friendly_name": "Goat",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "food.cheese_texture",
                        "class": "food.cheese_texture",
                        "friendly_name": "Cheese texture",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.064n52z",
                        "class": "food.cheese",
                        "friendly_name": "S\u00e3o Jorge cheese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.cheese.source_of_milk",
                        "friendly_name": "Source Of Milk"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "food.cheese_texture.cheeses",
                        "friendly_name": "Cheeses"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "food.cheese_texture.cheeses",
                        "friendly_name": "Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese . \nVALUES ?x1 { :m.03fwl } \n?x2 :type.object.type :food.cheese_texture . \nVALUES ?x3 { :m.064n52z } \n?x0 :food.cheese.source_of_milk ?x1 . \n?x2 :food.cheese_texture.cheeses ?x0 . \n?x2 :food.cheese_texture.cheeses ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.cheese (AND (JOIN food.cheese.source_of_milk m.03fwl) (JOIN (R food.cheese_texture.cheeses) (JOIN food.cheese_texture.cheeses m.064n52z))))"
        }
    },
    "320": {
        "generations": "what programming language paradigm is shared by factor and influenced by algol??",
        "ori_data_item": {
            "qid": 4300798000000,
            "question": "what is the programming language paradigm used by factor and another programming language influenced by algol?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01h1_2",
                    "entity_name": "Comparison of multi-paradigm programming languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ykw",
                    "entity_name": "Functional programming"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language_paradigm",
                        "class": "computer.programming_language_paradigm",
                        "friendly_name": "Programming Language Paradigm",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03m7hp",
                        "class": "computer.programming_language",
                        "friendly_name": "Factor",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0q1x",
                        "class": "computer.programming_language",
                        "friendly_name": "ALGOL",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.programming_language.language_paradigms",
                        "friendly_name": "Language Paradigms"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "computer.programming_language.language_paradigms",
                        "friendly_name": "Language Paradigms"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "computer.programming_language.influenced_by",
                        "friendly_name": "Influenced By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language_paradigm . \nVALUES ?x1 { :m.03m7hp } \n?x2 :type.object.type :computer.programming_language . \nVALUES ?x3 { :m.0q1x } \n?x1 :computer.programming_language.language_paradigms ?x0 . \n?x2 :computer.programming_language.language_paradigms ?x0 . \n?x2 :computer.programming_language.influenced_by ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language_paradigm (AND (JOIN (R computer.programming_language.language_paradigms) m.03m7hp) (JOIN (R computer.programming_language.language_paradigms) (JOIN computer.programming_language.influenced_by m.0q1x))))"
        }
    },
    "321": {
        "generations": "what subatomic particle generation includes the rho meson??",
        "ori_data_item": {
            "qid": 2103307003000,
            "question": "what subatomic particle generation is the rho meson?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b66f5g",
                    "entity_name": "First generation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "physics.subatomic_particle_generation",
                        "class": "physics.subatomic_particle_generation",
                        "friendly_name": "Subatomic particle generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08lszy",
                        "class": "physics.hadron",
                        "friendly_name": "Rho meson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "physics.particle.generation",
                        "friendly_name": "Generation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :physics.subatomic_particle_generation . \nVALUES ?x1 { :m.08lszy } \n?x1 :physics.particle.generation ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "physics"
            ],
            "s_expression": "(AND physics.subatomic_particle_generation (JOIN (R physics.particle.generation) m.08lszy))"
        }
    },
    "322": {
        "generations": "which tropical cyclone season had the hurricane dean??",
        "ori_data_item": {
            "qid": 2102750010000,
            "question": "hurricane dean happened during what tropical cyclone season?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d900",
                    "entity_name": "1989 Atlantic hurricane season"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_season",
                        "class": "meteorology.tropical_cyclone_season",
                        "friendly_name": "Tropical cyclone season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.026bhsh",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Hurricane Dean",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_season.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_season . \nVALUES ?x1 { :m.026bhsh } \n?x0 :meteorology.tropical_cyclone_season.tropical_cyclones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_season (JOIN meteorology.tropical_cyclone_season.tropical_cyclones m.026bhsh))"
        }
    },
    "323": {
        "generations": "which politician attended an educational institution that is affiliated with WRCU-FM, a student radio station??",
        "ori_data_item": {
            "qid": 4303964019000,
            "question": "which politician went to wrcu-fm?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gkt4c",
                    "entity_name": "Gary A. Lee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qxpl",
                    "entity_name": "John Dean"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gp7j4",
                    "entity_name": "Dean P. Taylor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023vhj",
                    "entity_name": "William P. Rogers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022xn8",
                    "entity_name": "Adam Clayton Powell, Jr."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023v2",
                    "entity_name": "Charles Evans Hughes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026hm2_",
                    "entity_name": "Jim Courter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n42g",
                    "entity_name": "Gary Skoien"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dn69",
                    "entity_name": "Samuel L. Devine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c855",
                    "entity_name": "Bruce Buck"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rkphp",
                    "entity_name": "Frederick W. Rowe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ry4bz",
                    "entity_name": "Samuel D. Burchard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08r3ss",
                    "entity_name": "Peter A. Peyser"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c8wsx",
                    "entity_name": "James Colgate Cleveland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g_gjq",
                    "entity_name": "W. Sterling Cole"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwh8y",
                    "entity_name": "Louis Frey, Jr."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05822v",
                    "entity_name": "Dalton McGuinty, Sr."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010phg91",
                    "entity_name": "Kristie Canegallo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pys5v",
                    "entity_name": "Brad Ashford"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03y42d0",
                    "entity_name": "Bob Oaks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c9cxs",
                    "entity_name": "Richard T. Moore"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05wd23",
                    "entity_name": "Edmund Burke Fairfield"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064mllb",
                    "entity_name": "A. Thomas McLellan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.087n10",
                    "entity_name": "Dennis Vacco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5s72n",
                    "entity_name": "Claudia Tenney"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzvbj4",
                    "entity_name": "John Jay Hoffman"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.politician",
                        "class": "government.politician",
                        "friendly_name": "Politician",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "education.educational_institution",
                        "class": "education.educational_institution",
                        "friendly_name": "Educational Institution",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.02rqklk",
                        "class": "education.student_radio_station",
                        "friendly_name": "WRCU-FM",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.education",
                        "friendly_name": "Education"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "education.education.institution",
                        "friendly_name": "Institution"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "education.student_radio_station.school",
                        "friendly_name": "School"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.politician . \n?x1 :type.object.type :education.education . \n?x2 :type.object.type :education.educational_institution . \nVALUES ?x3 { :m.02rqklk } \n?x0 :people.person.education ?x1 . \n?x1 :education.education.institution ?x2 . \n?x3 :education.student_radio_station.school ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "education",
                "people"
            ],
            "s_expression": "(AND government.politician (JOIN people.person.education (JOIN education.education.institution (JOIN (R education.student_radio_station.school) m.02rqklk))))"
        }
    },
    "324": {
        "generations": "which video game character was born in the SEGA Universe??",
        "ori_data_item": {
            "qid": 3204985018000,
            "question": "which character in sega universe was born where the series took place?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015dxd",
                    "entity_name": "Knuckles the Echidna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x1wl",
                    "entity_name": "Shadow the Hedgehog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ck8nbm",
                    "entity_name": "Egg Pawn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r_sl",
                    "entity_name": "Biolizard"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cvg.game_character",
                        "class": "cvg.game_character",
                        "friendly_name": "Video Game Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_setting",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Fictional Setting",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cnb3sf",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "SEGA Universe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.place_of_birth",
                        "friendly_name": "Place of Birth"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.locations",
                        "friendly_name": "Locations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_character . \n?x1 :type.object.type :fictional_universe.fictional_setting . \nVALUES ?x2 { :m.0cnb3sf } \n?x0 :fictional_universe.fictional_character.place_of_birth ?x1 . \n?x2 :fictional_universe.fictional_universe.locations ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND cvg.game_character (JOIN fictional_universe.fictional_character.place_of_birth (JOIN (R fictional_universe.fictional_universe.locations) m.0cnb3sf)))"
        }
    },
    "325": {
        "generations": "what profession is specialized by terry tenette and is also related to athlete??",
        "ori_data_item": {
            "qid": 3204369004000,
            "question": "which is the profession of terry tenette that is also a specialization of athlete?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07z002c",
                    "entity_name": "Professional Road Racing Cyclist"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.profession",
                        "class": "people.profession",
                        "friendly_name": "Profession",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fbdhx",
                        "class": "sports.cyclist",
                        "friendly_name": "Terry Tenette",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01445t",
                        "class": "people.profession",
                        "friendly_name": "Athlete",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.profession.people_with_this_profession",
                        "friendly_name": "People With This Profession"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.profession.specialization_of",
                        "friendly_name": "Specialization Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.profession . \nVALUES ?x1 { :m.0fbdhx } \nVALUES ?x2 { :m.01445t } \n?x0 :people.profession.people_with_this_profession ?x1 . \n?x0 :people.profession.specialization_of ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.profession (AND (JOIN people.profession.people_with_this_profession m.0fbdhx) (JOIN people.profession.specialization_of m.01445t)))"
        }
    },
    "326": {
        "generations": "which polling authority has conducted the most recent election poll taken by yahoo??",
        "ori_data_item": {
            "qid": 4302896016000,
            "question": "what is the name of the polling authority that ran the most recent election polls taken by yahoo?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mzfn9w",
                    "entity_name": "Esquire"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.polling_authority",
                        "class": "government.polling_authority",
                        "friendly_name": "Polling authority",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.election_poll",
                        "class": "government.election_poll",
                        "friendly_name": "Election poll",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0mzfn6s",
                        "class": "government.polling_authority",
                        "friendly_name": "Yahoo",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.polling_authority.polls",
                        "friendly_name": "Election polls"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "government.election_poll.poll_start_date",
                        "friendly_name": "Poll start date"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "government.election_poll.taken_by",
                        "friendly_name": "Taken by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.polling_authority . \n?x1 :type.object.type :government.election_poll . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :government.polling_authority . \n?y1 :type.object.type :government.election_poll . \nVALUES ?y3 { :m.0mzfn6s } \n?y0 :government.polling_authority.polls ?y1 . \n?y1 :government.election_poll.poll_start_date ?y2 . \n?y1 :government.election_poll.taken_by ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.0mzfn6s } \n?x0 :government.polling_authority.polls ?x1 . \n?x1 :government.election_poll.poll_start_date ?x2 . \n?x1 :government.election_poll.taken_by ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(ARGMAX (AND government.polling_authority (JOIN government.polling_authority.polls (JOIN government.election_poll.taken_by m.0mzfn6s))) (JOIN government.polling_authority.polls government.election_poll.poll_start_date))"
        }
    },
    "327": {
        "generations": "which aircraft designer designed the aircraft models involved in the china airlines flight 006 accident??",
        "ori_data_item": {
            "qid": 3200607005000,
            "question": "china airlines flight 006 was an aircraft model type designed by who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027nt7j",
                    "entity_name": "Joe Sutter"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_designer",
                        "class": "aviation.aircraft_designer",
                        "friendly_name": "Aircraft designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.075rwz",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "China Airlines Flight 006",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_designer.aircraft_models_designed",
                        "friendly_name": "Aircraft models designed"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "aviation.airliner_accident.aircraft_type",
                        "friendly_name": "Aircraft type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_designer . \n?x1 :type.object.type :aviation.aircraft_model . \nVALUES ?x2 { :m.075rwz } \n?x0 :aviation.aircraft_designer.aircraft_models_designed ?x1 . \n?x2 :aviation.airliner_accident.aircraft_type ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_designer (JOIN aviation.aircraft_designer.aircraft_models_designed (JOIN (R aviation.airliner_accident.aircraft_type) m.075rwz)))"
        }
    },
    "328": {
        "generations": "which user profile has a birthday of april 12, 1983??",
        "ori_data_item": {
            "qid": 2101303015000,
            "question": "who was born on apr. the 12nd, 1983?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02shtqg",
                    "entity_name": "copermine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1983-04-12^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Apr. the 12nd, 1983",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.birthday",
                        "friendly_name": "Birthdate"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { \"1983-04-12-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :freebase.user_profile.birthday ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.birthday 1983-04-12^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "329": {
        "generations": "what model year is the Ford Transit Connect??",
        "ori_data_item": {
            "qid": 2100598005000,
            "question": "which automobile model year was the model ford transit connect built ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_v7cm0",
                    "entity_name": "2014 Ford Transit Connect"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model_year",
                        "class": "automotive.model_year",
                        "friendly_name": "Automobile Model Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05c_mq",
                        "class": "automotive.model",
                        "friendly_name": "Ford Transit Connect",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model_year.model",
                        "friendly_name": "Model"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model_year . \nVALUES ?x1 { :m.05c_mq } \n?x0 :automotive.model_year.model ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model_year (JOIN automotive.model_year.model m.05c_mq))"
        }
    },
    "330": {
        "generations": "how many film art directors are from japan??",
        "ori_data_item": {
            "qid": 2104089013000,
            "question": "how many film directors come from the japan?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "106"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.film_art_director",
                        "class": "film.film_art_director",
                        "friendly_name": "Film art director",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03_3d",
                        "class": "location.country",
                        "friendly_name": "Japan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.nationality",
                        "friendly_name": "Country of nationality"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_art_director . \nVALUES ?x1 { :m.03_3d } \n?x0 :people.person.nationality ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(COUNT (AND film.film_art_director (JOIN people.person.nationality m.03_3d)))"
        }
    },
    "331": {
        "generations": "what is the fight song of the georgia state panthers football team??",
        "ori_data_item": {
            "qid": 2100896011000,
            "question": "what is georgia state panthers football's fight song?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgmy1g",
                    "entity_name": "Fight Panthers"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.fight_song",
                        "class": "sports.fight_song",
                        "friendly_name": "Fight song",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dd8lt8",
                        "class": "sports.sports_team",
                        "friendly_name": "Georgia State Panthers football",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.fight_song.sports_team",
                        "friendly_name": "Sports team"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.fight_song . \nVALUES ?x1 { :m.0dd8lt8 } \n?x0 :sports.fight_song.sports_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.fight_song (JOIN sports.fight_song.sports_team m.0dd8lt8))"
        }
    },
    "332": {
        "generations": "which waterfall has a flow rate of 934.0??",
        "ori_data_item": {
            "qid": 2102610004000,
            "question": "what is the waterfall with an average rate of flow of 934.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g86k",
                    "entity_name": "Shivanasamudra Falls"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.waterfall",
                        "class": "geography.waterfall",
                        "friendly_name": "Waterfall",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "934.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "934.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.waterfall.flow_rate",
                        "friendly_name": "Average flow rate"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.waterfall . \nVALUES ?x1 { \"934.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :geography.waterfall.flow_rate ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.waterfall (JOIN geography.waterfall.flow_rate 934.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "333": {
        "generations": "how many comic book series were created by sakae esuno??",
        "ori_data_item": {
            "qid": 2103805003000,
            "question": "sakae esuno created how many comic book series in his lifetime?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_series",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Comic Book Series",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0v0lcyz",
                        "class": "comic_books.comic_book_creator",
                        "friendly_name": "Sakae Esuno",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_series.created_by",
                        "friendly_name": "Created By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_series . \nVALUES ?x1 { :m.0v0lcyz } \n?x0 :comic_books.comic_book_series.created_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(COUNT (AND comic_books.comic_book_series (JOIN comic_books.comic_book_series.created_by m.0v0lcyz)))"
        }
    },
    "334": {
        "generations": "what comic book series ended with the final issue of marvel 1602 #8??",
        "ori_data_item": {
            "qid": 2102833009000,
            "question": "what comic book series has marvel 1602 #8 as the final issue?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02__yw",
                    "entity_name": "Marvel 1602"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_series",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Comic Book Series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gy9w27",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Marvel 1602 #8",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_series.final_issue",
                        "friendly_name": "Final Issue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_series . \nVALUES ?x1 { :m.0gy9w27 } \n?x0 :comic_books.comic_book_series.final_issue ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_series (JOIN comic_books.comic_book_series.final_issue m.0gy9w27))"
        }
    },
    "335": {
        "generations": "what color is the light at burrewarra point lighthouse??",
        "ori_data_item": {
            "qid": 3204325007000,
            "question": "what color is in the light color range that includes burrewarra point?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.083jv",
                    "entity_name": "White"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.color",
                        "class": "visual_art.color",
                        "friendly_name": "Color",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "architecture.light_color_range",
                        "class": "architecture.light_color_range",
                        "friendly_name": "Light color range",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.088ymq",
                        "class": "architecture.lighthouse",
                        "friendly_name": "Burrewarra Point",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "architecture.light_color_range.color",
                        "friendly_name": "Color"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "architecture.lighthouse.light_color_range",
                        "friendly_name": "Light color range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.color . \n?x1 :type.object.type :architecture.light_color_range . \nVALUES ?x2 { :m.088ymq } \n?x1 :architecture.light_color_range.color ?x0 . \n?x2 :architecture.lighthouse.light_color_range ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND visual_art.color (JOIN (R architecture.light_color_range.color) (JOIN (R architecture.lighthouse.light_color_range) m.088ymq)))"
        }
    },
    "336": {
        "generations": "which kingdom was ruled by a royal line that was preceded by the house of vasa??",
        "ori_data_item": {
            "qid": 3204401006000,
            "question": "what kingdom is ruled by a royal line preceding house of vasa?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021hd9",
                    "entity_name": "Grand Duchy of Lithuania"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03l5m1",
                    "entity_name": "Kingdom of Hungary"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0410vqb",
                    "entity_name": "Kingdom of Bohemia"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.kingdom",
                        "class": "royalty.kingdom",
                        "friendly_name": "Kingdom",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "royalty.royal_line",
                        "class": "royalty.royal_line",
                        "friendly_name": "Royal line",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.019ns3",
                        "class": "royalty.royal_line",
                        "friendly_name": "House of Vasa",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "royalty.royal_line.kingdom_s_ruled",
                        "friendly_name": "Kingdom(s) ruled"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "royalty.royal_line.preceded_by",
                        "friendly_name": "Preceded by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.kingdom . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.019ns3 } \n?x1 :royalty.royal_line.kingdom_s_ruled ?x0 . \n?x2 :royalty.royal_line.preceded_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.kingdom (JOIN (R royalty.royal_line.kingdom_s_ruled) (JOIN (R royalty.royal_line.preceded_by) m.019ns3)))"
        }
    },
    "337": {
        "generations": "which department is related to the field of atmospheric science in education??",
        "ori_data_item": {
            "qid": 2101863012000,
            "question": "the field of atmospheric science belongs to which department?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dj_xjx",
                    "entity_name": "UC Berkeley Department of Earth and Planetary Science"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dj_xp1",
                    "entity_name": "MIT Department of Earth, Atmospheric and Planetary Sciences"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.015y2c",
                        "class": "education.field_of_study",
                        "friendly_name": "atmospheric science",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.department.field",
                        "friendly_name": "Field"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.015y2c } \n?x0 :education.department.field ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.department (JOIN education.department.field m.015y2c))"
        }
    },
    "338": {
        "generations": "who is the recipe author that speaks spanish??",
        "ori_data_item": {
            "qid": 2103380005000,
            "question": "the recipe author speaking espa\u221a\u00b1ol is whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dm241b",
                    "entity_name": "Alex Rollin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe_author",
                        "class": "food.recipe_author",
                        "friendly_name": "Recipe author",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06nm1",
                        "class": "language.human_language",
                        "friendly_name": "espa\u221a\u00b1ol",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.languages",
                        "friendly_name": "Languages"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe_author . \nVALUES ?x1 { :m.06nm1 } \n?x0 :people.person.languages ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND food.recipe_author (JOIN people.person.languages m.06nm1))"
        }
    },
    "339": {
        "generations": "which court has jurisdiction over punjab??",
        "ori_data_item": {
            "qid": 2101124010000,
            "question": "which court has jurisdiction over punjab?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07r4bn",
                    "entity_name": "Lahore High Court"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.court",
                        "class": "law.court",
                        "friendly_name": "Court",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.065zr",
                        "class": "law.court_jurisdiction_area",
                        "friendly_name": "punjab",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.court.jurisdiction",
                        "friendly_name": "Jurisdiction"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.court . \nVALUES ?x1 { :m.065zr } \n?x0 :law.court.jurisdiction ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.court (JOIN law.court.jurisdiction m.065zr))"
        }
    },
    "340": {
        "generations": "which radio station is part of the sirius xm channel 12 and is considered a lightweight station??",
        "ori_data_item": {
            "qid": 2102499003000,
            "question": "what is the radio station on sirius xm channel 12?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vl23",
                    "entity_name": "WHTZ"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "base.lightweight.radio_station",
                        "class": "base.lightweight.radio_station",
                        "friendly_name": "Radio station",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "12^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "12",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "base.lightweight.radio_station.sirius_xm_channel",
                        "friendly_name": "Sirius XM Channel"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.lightweight.radio_station . \nVALUES ?x1 { \"12\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :base.lightweight.radio_station.sirius_xm_channel ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "base.lightweight"
            ],
            "s_expression": "(AND base.lightweight.radio_station (JOIN base.lightweight.radio_station.sirius_xm_channel 12^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "341": {
        "generations": "what disease is affiliated with existential crisis??",
        "ori_data_item": {
            "qid": 2101700013000,
            "question": "existential crisis is associated with what other diseases or conditions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sgg6qn",
                    "entity_name": "Identity disorder"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.disease",
                        "class": "medicine.disease",
                        "friendly_name": "Disease or medical condition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08xnfv",
                        "class": "medicine.disease",
                        "friendly_name": "Existential crisis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.disease.affiliated_diseases",
                        "friendly_name": "Affiliated diseases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.disease . \nVALUES ?x1 { :m.08xnfv } \n?x0 :medicine.disease.affiliated_diseases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.disease (JOIN medicine.disease.affiliated_diseases m.08xnfv))"
        }
    },
    "342": {
        "generations": "which exhibition was curated by nikita wu??",
        "ori_data_item": {
            "qid": 2100946001000,
            "question": "find the exhibition whose curator name is nikita wu.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05v07pc",
                    "entity_name": "Future Pavilion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064dsyn",
                    "entity_name": "Venice Biennale of Architecture Taiwan Pavillion 2006"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05yqr_5",
                        "class": "exhibitions.exhibition_curator",
                        "friendly_name": "Nikita Wu",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition.curators",
                        "friendly_name": "Curators"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition . \nVALUES ?x1 { :m.05yqr_5 } \n?x0 :exhibitions.exhibition.curators ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition (JOIN exhibitions.exhibition.curators m.05yqr_5))"
        }
    },
    "343": {
        "generations": "what artwork was created by harold gilman??",
        "ori_data_item": {
            "qid": 2100121010000,
            "question": "harold gilman has what artwork?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnpq",
                    "entity_name": "An Eating House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnr6",
                    "entity_name": "The Old Lady"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnqk",
                    "entity_name": "Girl with a Tea Cup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnqv",
                    "entity_name": "Mother and Child"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnrd",
                    "entity_name": "Clarissa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnq5",
                    "entity_name": "The Artist\u2019s Mother"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnqc",
                    "entity_name": "Mrs Mounter at the Breakfast Table"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnpj",
                    "entity_name": "A Portrait in Profile: Mary L. Harold Gilman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnp_",
                    "entity_name": "Canal Bridge, Flekkefjord"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k7qnr0",
                    "entity_name": "The Thames at Chelsea"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.043jmkw",
                        "class": "visual_art.visual_artist",
                        "friendly_name": "Harold Gilman",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.artwork.artist",
                        "friendly_name": "Artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.artwork . \nVALUES ?x1 { :m.043jmkw } \n?x0 :visual_art.artwork.artist ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.artwork (JOIN visual_art.artwork.artist m.043jmkw))"
        }
    },
    "344": {
        "generations": "which magazine issue features artwork by richard corben??",
        "ori_data_item": {
            "qid": 2102689008000,
            "question": "cover artist richard corben was on what magazine issue?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hj0hc0",
                    "entity_name": "The Magazine of Fantasy and Science Fiction, September 1967"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.magazine_issue",
                        "class": "book.magazine_issue",
                        "friendly_name": "Magazine Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.015687",
                        "class": "book.illustrator",
                        "friendly_name": "Richard Corben",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.magazine_issue.cover_artist",
                        "friendly_name": "Cover artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_issue . \nVALUES ?x1 { :m.015687 } \n?x0 :book.magazine_issue.cover_artist ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.magazine_issue (JOIN book.magazine_issue.cover_artist m.015687))"
        }
    },
    "345": {
        "generations": "which TV character made their last appearance in Dead Dreaming In Bagan??",
        "ori_data_item": {
            "qid": 2102491011000,
            "question": "which tv character has the final tv appearance in the episode named dead dreaming in bagan?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011jw81x",
                    "entity_name": "Samuel"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_character",
                        "class": "tv.tv_character",
                        "friendly_name": "TV Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.011rccst",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "Dead Dreaming In Bagan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_character.last_tv_appearance",
                        "friendly_name": "Final TV Appearance"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_character . \nVALUES ?x1 { :m.011rccst } \n?x0 :tv.tv_character.last_tv_appearance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_character (JOIN tv.tv_character.last_tv_appearance m.011rccst))"
        }
    },
    "346": {
        "generations": "what type of bridge is both the m\u00e5l\u00f8y bridge and the donald r. lobaugh bridge??",
        "ori_data_item": {
            "qid": 3200107004000,
            "question": "what is the bridge type of donald r. lobaugh bridge and m\u00e5l\u00f8y bridge?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03lzkv",
                    "entity_name": "Cantilever bridge"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "transportation.bridge_type",
                        "class": "transportation.bridge_type",
                        "friendly_name": "Bridge Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07x4rf",
                        "class": "transportation.bridge",
                        "friendly_name": "M\u00e5l\u00f8y Bridge",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.09k6502",
                        "class": "transportation.bridge",
                        "friendly_name": "Donald R. Lobaugh Bridge",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "transportation.bridge.bridge_type",
                        "friendly_name": "Bridge Type"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "transportation.bridge_type.bridges_of_this_type",
                        "friendly_name": "Bridges of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :transportation.bridge_type . \nVALUES ?x1 { :m.07x4rf } \nVALUES ?x2 { :m.09k6502 } \n?x1 :transportation.bridge.bridge_type ?x0 . \n?x0 :transportation.bridge_type.bridges_of_this_type ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "transportation"
            ],
            "s_expression": "(AND transportation.bridge_type (AND (JOIN (R transportation.bridge.bridge_type) m.07x4rf) (JOIN transportation.bridge_type.bridges_of_this_type m.09k6502)))"
        }
    },
    "347": {
        "generations": "what type of camera viewfinder is used in digital cameras made by matsushita electric industrial co., ltd. that support the compressed format mts??",
        "ori_data_item": {
            "qid": 4302274002000,
            "question": "the camera with a sensor from matsushita electric industrial co., ltd. and a compression format of mts uses which viewfinder?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026krtn",
                    "entity_name": "Live preview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036132",
                    "entity_name": "Electronic viewfinder"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_viewfinder_type",
                        "class": "digicams.camera_viewfinder_type",
                        "friendly_name": "Camera Viewfinder Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.042zv3q",
                        "class": "digicams.camera_compressed_format",
                        "friendly_name": "mts",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0nk5b",
                        "class": "digicams.camera_sensor_manufacturer",
                        "friendly_name": "matsushita electric industrial co., ltd.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_viewfinder_type.digital_cameras",
                        "friendly_name": "Digital cameras"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "digicams.camera_compressed_format.cameras",
                        "friendly_name": "Cameras"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "digicams.digital_camera.camera_sensor_manufacturer",
                        "friendly_name": "Camera sensor manufacturer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_viewfinder_type . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :m.042zv3q } \nVALUES ?x3 { :m.0nk5b } \n?x0 :digicams.camera_viewfinder_type.digital_cameras ?x1 . \n?x2 :digicams.camera_compressed_format.cameras ?x1 . \n?x1 :digicams.digital_camera.camera_sensor_manufacturer ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_viewfinder_type (JOIN digicams.camera_viewfinder_type.digital_cameras (AND (JOIN (R digicams.camera_compressed_format.cameras) m.042zv3q) (JOIN digicams.digital_camera.camera_sensor_manufacturer m.0nk5b))))"
        }
    },
    "348": {
        "generations": "what animal breed has a temperament similar to basset hounds and is also part of the breed temperament of guejae gae??",
        "ori_data_item": {
            "qid": 4300795000000,
            "question": "what breed has the same temperament as basset hounds and guejae gae?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r4blp",
                    "entity_name": "Braque d'Auvergne"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0km3f",
                    "entity_name": "Labrador Retriever"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0182yx",
                    "entity_name": "Shetland Sheepdog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0183xd",
                    "entity_name": "Vizsla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hzb8",
                    "entity_name": "Great Pyrenees"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pm38",
                    "entity_name": "Clumber Spaniel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01s7fj",
                    "entity_name": "Shih Tzu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02cyl6",
                    "entity_name": "Maltese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cq_p",
                    "entity_name": "Kerry Blue Terrier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d12",
                    "entity_name": "Greyhound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03l5cy",
                    "entity_name": "Spinone Italiano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ydd_",
                    "entity_name": "Havanese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dm6",
                    "entity_name": "Komondor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04nmst",
                    "entity_name": "King Charles Spaniel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y236",
                    "entity_name": "New Guinea singing dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08626",
                    "entity_name": "Whippet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08f_zh",
                    "entity_name": "Pont-Audemer Spaniel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bjrtp",
                    "entity_name": "Cirneco dell'Etna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bllpv",
                    "entity_name": "Puggle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dpx6y",
                    "entity_name": "German Longhaired Pointer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gt5n2",
                    "entity_name": "Cretan Hound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nr94",
                    "entity_name": "Bichon Frise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01d7mc",
                    "entity_name": "Black and Tan Coonhound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dj7",
                    "entity_name": "Beagle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pyhj",
                    "entity_name": "Shiloh Shepherd Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026qz0j",
                    "entity_name": "Polish Hunting Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p1d4",
                    "entity_name": "St. Bernard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pxllv",
                    "entity_name": "Blue Picardy Spaniel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z2jdn",
                    "entity_name": "Beagador"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03606n",
                    "entity_name": "Sapsali"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h71r",
                    "entity_name": "Bouvier des Flandres"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06llrr",
                    "entity_name": "Carolina Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076_8",
                    "entity_name": "Scottish Deerhound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08c5h8",
                    "entity_name": "Brazilian Terrier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.093z2k",
                    "entity_name": "Carlin Pinscher"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09kkkg",
                    "entity_name": "Istrian Coarse-haired Hound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3k58",
                    "entity_name": "Pra\u017esk\u00fd Krysa\u0159\u00edk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gh46s",
                    "entity_name": "Tahltan Bear Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lbw4",
                    "entity_name": "Great Dane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m1ct",
                    "entity_name": "Wirehaired Pointing Griffon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ysvz",
                    "entity_name": "Louisiana Catahoula Leopard Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01z404",
                    "entity_name": "Newfoundland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l61f",
                    "entity_name": "Rough Collie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qllrh",
                    "entity_name": "Porcelaine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qr3y_",
                    "entity_name": "Northern Inuit Dog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03g_78s",
                    "entity_name": "Gaddi Kutta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04sxch4",
                    "entity_name": "Pocket Beagle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051ppn",
                    "entity_name": "Glen of Imaal Terrier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w066",
                    "entity_name": "English Foxhound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.071jj",
                    "entity_name": "Siberian Husky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gz1d",
                    "entity_name": "English Setter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018z4d",
                    "entity_name": "Bloodhound"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cr7fw",
                    "entity_name": "Morkie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pyhd",
                    "entity_name": "Tibetan Terrier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.035w0_",
                    "entity_name": "Perro de Presa Canario"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01j0g",
                    "entity_name": "Borzoi"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.animal_breed",
                        "class": "biology.animal_breed",
                        "friendly_name": "Animal breed",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.breed_temperament",
                        "class": "biology.breed_temperament",
                        "friendly_name": "Breed temperament",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hw_s",
                        "class": "biology.animal_breed",
                        "friendly_name": "basset hounds",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.026067b",
                        "class": "biology.animal_breed",
                        "friendly_name": "Guejae Gae",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "biology.animal_breed.temperament",
                        "friendly_name": "Temperament"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "biology.breed_temperament.breeds",
                        "friendly_name": "Breeds"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.animal_breed . \n?x1 :type.object.type :biology.breed_temperament . \nVALUES ?x2 { :m.0hw_s } \nVALUES ?x3 { :m.026067b } \n?x0 :biology.animal_breed.temperament ?x1 . \n?x2 :biology.animal_breed.temperament ?x1 . \n?x1 :biology.breed_temperament.breeds ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.animal_breed (JOIN biology.animal_breed.temperament (AND (JOIN (R biology.animal_breed.temperament) m.0hw_s) (JOIN biology.breed_temperament.breeds m.026067b))))"
        }
    },
    "349": {
        "generations": "which satellite has a ground repeat time of at least 16.0??",
        "ori_data_item": {
            "qid": 2103778004000,
            "question": "which satellite has a ground repeat time of at least 16.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02dtvq",
                    "entity_name": "Landsat 7"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.satellite",
                        "class": "spaceflight.satellite",
                        "friendly_name": "Satellite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "16.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "16.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.satellite.ground_repeat_time",
                        "friendly_name": "Ground repeat time"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.satellite . \nFILTER (?x1 >= \"16.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :spaceflight.satellite.ground_repeat_time ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.satellite (ge spaceflight.satellite.ground_repeat_time 16.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "350": {
        "generations": "what drug formulation has a dosage form of shampoo??",
        "ori_data_item": {
            "qid": 2100036012000,
            "question": "which pharmaceuticals use the dosage form shampoo?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs126",
                    "entity_name": "Zinc pyrithione 0.015 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtzqd",
                    "entity_name": "Pyrithione zinc 0.0095 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxrj3g",
                    "entity_name": "Niacinamide 0.003 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtx9l",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxbfry",
                    "entity_name": "Apis mellifera, phenol, and rosmarinus officinalis flowering top 0.0508/0.0508/0.0508 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs3q7",
                    "entity_name": "Piperonyl butoxide and pyrethrum extract 0.04/0.0033 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrtkw",
                    "entity_name": "Panthenol 0.02 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqth9b",
                    "entity_name": "Panthenol 0.002 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs9d5",
                    "entity_name": "Selenium sulfide 10 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsql8",
                    "entity_name": "Pyrithione zinc, panthenol, niacinamide 0.01/0.002/0.001 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsms3",
                    "entity_name": "Oatmeal 1e-05 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr84m",
                    "entity_name": "Ketoconazole 20 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsmjy",
                    "entity_name": "Salicylic acid 0.03 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtccq",
                    "entity_name": "Pyrithione zinc 0.02 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqth5s",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrdh8",
                    "entity_name": "Triclosan 0.003 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrp0w",
                    "entity_name": "Pyrithione zinc, panthenol, niacinamide, biotin 0.021/0.005/0.003/0.0006 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrp2k",
                    "entity_name": "Panthenol 0.005 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtt9g",
                    "entity_name": "Panthenol 0.006 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtcj_",
                    "entity_name": "Ciclopirox 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrx_k",
                    "entity_name": "Pyrithione zinc 1e-05 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsnw0",
                    "entity_name": "Salicylic acid 0.06 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxd3h5",
                    "entity_name": "Coal tar 2.5e-05 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr_5l",
                    "entity_name": "Natrum muriaticum 1 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jx8bhn",
                    "entity_name": "Anthralin 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs1r9",
                    "entity_name": "Selenium sulfide 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt930",
                    "entity_name": "Ciclopirox 10.417 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtjpr",
                    "entity_name": "Selenium sulfide 22.5 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr8mq",
                    "entity_name": "Salicylic acid 30 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr8tn",
                    "entity_name": "Clobetasol propionate 0.0005 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrdxy",
                    "entity_name": "Salicylic acid 64.795 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrjs0",
                    "entity_name": "Pyrithione zinc 0.0154 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrk4t",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrlhg",
                    "entity_name": "Lindane 10 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrq8l",
                    "entity_name": "Benzethonium chloride 0.001 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrx7j",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsdjr",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsf5y",
                    "entity_name": "Salicylic acid 0.018 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqslz0",
                    "entity_name": "Pyrithione zinc 0.012 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsrmy",
                    "entity_name": "Ketoconazole 10 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqsx6z",
                    "entity_name": "Chloroxine 20 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt041",
                    "entity_name": "Pyrithione zinc 0.012 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt1q5",
                    "entity_name": "Pyrethrum extract, piperonyl butoxide 0.002/0.04 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt__3",
                    "entity_name": "Coal tar 0.005 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtkk3",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtkz7",
                    "entity_name": "Polyquaternium-10 (400 cps at 2%) 0.002 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtn2n",
                    "entity_name": "Pyrithione zinc 0.00167 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtpf_",
                    "entity_name": "Pyrithione zinc 10 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtwh2",
                    "entity_name": "Pyrithione zinc 0.0005 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtz2v",
                    "entity_name": "Piperonyl butoxide 0.02 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtzj4",
                    "entity_name": "Ciclopirox 10.417 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqv55j",
                    "entity_name": "Shampoo plus conditioner 0.005 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqv5tp",
                    "entity_name": "Pyrithione zinc 0.015 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqvbhl",
                    "entity_name": "Pyrithione zinc 0.01 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jx8slk",
                    "entity_name": "Pyrithione zinc 0.00336 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxk2v1",
                    "entity_name": "Coal tar 5 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxkw4m",
                    "entity_name": "Selenium sulfide 0.006 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxlk9y",
                    "entity_name": "Salicylic acid 28 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxn6hg",
                    "entity_name": "Minoxidil 0.05 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxp495",
                    "entity_name": "Coal tar 10 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxp8cq",
                    "entity_name": "Salicylic acid 60 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxr8jx",
                    "entity_name": "Salicylic acid 18 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrbgk",
                    "entity_name": "Salicylic acid 0.03 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrhbj",
                    "entity_name": "Salicylic acid, sulfur, and coal tar 20/20/0.5 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqv8fy",
                    "entity_name": "Permethrin 9.492 shampoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt71y",
                    "entity_name": "Natrum muriaticum 0.0253 shampoo"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_formulation",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Drug formulation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fg_n",
                        "class": "medicine.drug_dosage_form",
                        "friendly_name": "Shampoo",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_formulation.dosage_form",
                        "friendly_name": "Dosage form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_formulation . \nVALUES ?x1 { :m.0fg_n } \n?x0 :medicine.drug_formulation.dosage_form ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_formulation (JOIN medicine.drug_formulation.dosage_form m.0fg_n))"
        }
    },
    "351": {
        "generations": "what field of study has subdisciplines including citation analysis??",
        "ori_data_item": {
            "qid": 2102929011000,
            "question": "citation analysis is the subdiscipline of which field of study?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jv5t",
                    "entity_name": "Bibliometrics"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.field_of_study",
                        "class": "education.field_of_study",
                        "friendly_name": "Field of study",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02p3_md",
                        "class": "education.field_of_study",
                        "friendly_name": "Citation analysis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.field_of_study.subdisciplines",
                        "friendly_name": "Subdisciplines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.field_of_study . \nVALUES ?x1 { :m.02p3_md } \n?x0 :education.field_of_study.subdisciplines ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.field_of_study (JOIN education.field_of_study.subdisciplines m.02p3_md))"
        }
    },
    "352": {
        "generations": "what is the advertising slogan for itsbyu??",
        "ori_data_item": {
            "qid": 3201773009000,
            "question": "itsbyu uses what slogan to advertise their brand?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0105cw9q",
                    "entity_name": "make stuff.  save money.  be epic"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.advertising_slogan",
                        "class": "business.advertising_slogan",
                        "friendly_name": "Advertising slogan",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.brand_slogan",
                        "class": "business.brand_slogan",
                        "friendly_name": "Brand slogan",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0102rjdr",
                        "class": "business.brand",
                        "friendly_name": "itsbyu",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.advertising_slogan.brand",
                        "friendly_name": "Brand"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.brand_slogan.brand",
                        "friendly_name": "Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.advertising_slogan . \n?x1 :type.object.type :business.brand_slogan . \nVALUES ?x2 { :m.0102rjdr } \n?x0 :business.advertising_slogan.brand ?x1 . \n?x1 :business.brand_slogan.brand ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.advertising_slogan (JOIN business.advertising_slogan.brand (JOIN business.brand_slogan.brand m.0102rjdr)))"
        }
    },
    "353": {
        "generations": "what video game character was born in the fictional universe of mortal engines??",
        "ori_data_item": {
            "qid": 3204985006000,
            "question": "whose birthplace is the location where mortal engines was set?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kl3p",
                    "entity_name": "Cyclops"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0152c0",
                    "entity_name": "Cho Chang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031j0m",
                    "entity_name": "Dhalsim"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025s9y8",
                    "entity_name": "Ivy Valentine"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cvg.game_character",
                        "class": "cvg.game_character",
                        "friendly_name": "Video Game Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_setting",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Fictional Setting",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0b_s0_f",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Mortal Engines",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.place_of_birth",
                        "friendly_name": "Place of Birth"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.locations",
                        "friendly_name": "Locations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_character . \n?x1 :type.object.type :fictional_universe.fictional_setting . \nVALUES ?x2 { :m.0b_s0_f } \n?x0 :fictional_universe.fictional_character.place_of_birth ?x1 . \n?x2 :fictional_universe.fictional_universe.locations ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND cvg.game_character (JOIN fictional_universe.fictional_character.place_of_birth (JOIN (R fictional_universe.fictional_universe.locations) m.0b_s0_f)))"
        }
    },
    "354": {
        "generations": "which Chinese ethnic group is located in Haibei Tibetan Autonomous Prefecture??",
        "ori_data_item": {
            "qid": 2100935011000,
            "question": "haibei tibetan autonomous prefecture is the autonomous prefecture of which chinese ethnic group?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01l0ty",
                    "entity_name": "Tibetan people"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.chinese_ethnic_group",
                        "class": "people.chinese_ethnic_group",
                        "friendly_name": "Chinese ethnic group",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09jcw8",
                        "class": "location.cn_autonomous_prefecture",
                        "friendly_name": "Haibei Tibetan Autonomous Prefecture",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.chinese_ethnic_group.autonomous_prefectures",
                        "friendly_name": "Autonomous prefectures"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.chinese_ethnic_group . \nVALUES ?x1 { :m.09jcw8 } \n?x0 :people.chinese_ethnic_group.autonomous_prefectures ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.chinese_ethnic_group (JOIN people.chinese_ethnic_group.autonomous_prefectures m.09jcw8))"
        }
    },
    "355": {
        "generations": "which school or movement is associated with alexandru papilian??",
        "ori_data_item": {
            "qid": 2100845003000,
            "question": "alexandru papilian was listed as an associate authors of what movement of literary school?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rjf69",
                    "entity_name": "Echinoxism"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.school_or_movement",
                        "class": "book.school_or_movement",
                        "friendly_name": "Literary School Or Movement",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "g.120lwgz2",
                        "class": "book.author",
                        "friendly_name": "Alexandru Papilian",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.school_or_movement.associated_authors",
                        "friendly_name": "Associated Authors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.school_or_movement . \nVALUES ?x1 { :g.120lwgz2 } \n?x0 :book.school_or_movement.associated_authors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.school_or_movement (JOIN book.school_or_movement.associated_authors g.120lwgz2))"
        }
    },
    "356": {
        "generations": "what disease is caused by bouchard's nodes??",
        "ori_data_item": {
            "qid": 3202111012000,
            "question": "bouchard's nodes is a symptom of a disease that causes what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n8qp",
                    "entity_name": "Autoimmunity"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.disease_cause",
                        "class": "medicine.disease_cause",
                        "friendly_name": "Disease cause",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.disease",
                        "class": "medicine.disease",
                        "friendly_name": "Disease or medical condition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.045hxd",
                        "class": "medicine.symptom",
                        "friendly_name": "Bouchard's nodes",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.disease_cause.diseases",
                        "friendly_name": "Diseases or conditions caused"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.disease.symptoms",
                        "friendly_name": "Symptoms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.disease_cause . \n?x1 :type.object.type :medicine.disease . \nVALUES ?x2 { :m.045hxd } \n?x0 :medicine.disease_cause.diseases ?x1 . \n?x1 :medicine.disease.symptoms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.disease_cause (JOIN medicine.disease_cause.diseases (JOIN medicine.disease.symptoms m.045hxd)))"
        }
    },
    "357": {
        "generations": "what type of cheese is made from goat milk and has a similar texture to mozzarella cheese??",
        "ori_data_item": {
            "qid": 4302129012000,
            "question": "what's the name of the goat milk cheese with the same texture as mozzarella cheese?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h8388",
                    "entity_name": "Banon de Provence"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h8bj2",
                    "entity_name": "Bermuda Triangle"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese",
                        "class": "food.cheese",
                        "friendly_name": "Cheese",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03fwl",
                        "class": "food.cheese_milk_source",
                        "friendly_name": "Goat",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "food.cheese_texture",
                        "class": "food.cheese_texture",
                        "friendly_name": "Cheese texture",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.055w7",
                        "class": "food.cheese",
                        "friendly_name": "mozzarella cheese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.cheese.source_of_milk",
                        "friendly_name": "Source Of Milk"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "food.cheese_texture.cheeses",
                        "friendly_name": "Cheeses"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "food.cheese_texture.cheeses",
                        "friendly_name": "Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese . \nVALUES ?x1 { :m.03fwl } \n?x2 :type.object.type :food.cheese_texture . \nVALUES ?x3 { :m.055w7 } \n?x0 :food.cheese.source_of_milk ?x1 . \n?x2 :food.cheese_texture.cheeses ?x0 . \n?x2 :food.cheese_texture.cheeses ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.cheese (AND (JOIN food.cheese.source_of_milk m.03fwl) (JOIN (R food.cheese_texture.cheeses) (JOIN food.cheese_texture.cheeses m.055w7))))"
        }
    },
    "358": {
        "generations": "what grape variety is used to make chianti classico wine styles??",
        "ori_data_item": {
            "qid": 2102455007000,
            "question": "the wine style chianti classico has what grape variety?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02y9d0",
                    "entity_name": "Sangiovese"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.grape_variety",
                        "class": "wine.grape_variety",
                        "friendly_name": "Grape Variety",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09dn8g",
                        "class": "food.wine_style",
                        "friendly_name": "Chianti Classico",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.grape_variety.wine_styles",
                        "friendly_name": "Wine styles"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.grape_variety . \nVALUES ?x1 { :m.09dn8g } \n?x0 :wine.grape_variety.wine_styles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.grape_variety (JOIN wine.grape_variety.wine_styles m.09dn8g))"
        }
    },
    "359": {
        "generations": "who is the comic book inker for detective comics #779??",
        "ori_data_item": {
            "qid": 2102216013000,
            "question": "which comic book inker inked detective comics #779?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04snq4",
                    "entity_name": "Tim Sale"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_inker",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "Comic Book Inker",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02wlytc",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Detective Comics #779",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_inker.comic_covers_inked",
                        "friendly_name": "Comic Covers Inked"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_inker . \nVALUES ?x1 { :m.02wlytc } \n?x0 :comic_books.comic_book_inker.comic_covers_inked ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_inker (JOIN comic_books.comic_book_inker.comic_covers_inked m.02wlytc))"
        }
    },
    "360": {
        "generations": "what US patent has Michael D. McGehee as the inventor??",
        "ori_data_item": {
            "qid": 2100844012000,
            "question": "what patents does michael d. mcgehee invent?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3lp1c",
                    "entity_name": "Optical imaging system having an illumination source between object and image: U.S. Patent No. 7,504,613"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fpnnfk",
                        "class": "law.inventor",
                        "friendly_name": "Michael D. McGehee",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.inventor",
                        "friendly_name": "Inventor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.0fpnnfk } \n?x0 :law.us_patent.inventor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.inventor m.0fpnnfk))"
        }
    },
    "361": {
        "generations": "what comic book genre does the story \"A Death in the Family, Part One\" belong to??",
        "ori_data_item": {
            "qid": 2102147014000,
            "question": "what type of genre is a death in the family, part one?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04pbhw",
                    "entity_name": "Superhero movie"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_genre",
                        "class": "comic_books.comic_book_genre",
                        "friendly_name": "Comic Book Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.036kdkt",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "A Death in the Family, Part One",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_genre.stories_in_this_genre",
                        "friendly_name": "Comic Book Stories In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_genre . \nVALUES ?x1 { :m.036kdkt } \n?x0 :comic_books.comic_book_genre.stories_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_genre (JOIN comic_books.comic_book_genre.stories_in_this_genre m.036kdkt))"
        }
    },
    "362": {
        "generations": "what is the engine type of the honda 1.8l 4 cylinder 140hp 128 ft-lbs??",
        "ori_data_item": {
            "qid": 3200149006000,
            "question": "what engine is the same type as the one used in honda 1.8l 4 cylinder 140hp 128 ft-lbs?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w5ztg",
                    "entity_name": "Volkswagen 2.0L 4 Cylinder 200 hp 207 ft-lbs Turbo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vrnz7",
                    "entity_name": "Acura 2.3L 4 Cylinder 240 hp 260 ft-lbs TURBO"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03lf5_",
                    "entity_name": "BMW M10"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w397n",
                    "entity_name": "Hyundai 2.0L 4 cylinder 138 hp 136 ft-lbs"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.engine",
                        "class": "automotive.engine",
                        "friendly_name": "Engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.engine_type",
                        "class": "automotive.engine_type",
                        "friendly_name": "Engine Type",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03v5klg",
                        "class": "automotive.engine",
                        "friendly_name": "Honda 1.8L 4 Cylinder 140hp 128 ft-lbs",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.engine.engine_type",
                        "friendly_name": "Engine Type"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "automotive.engine.engine_type",
                        "friendly_name": "Engine Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.engine . \n?x1 :type.object.type :automotive.engine_type . \nVALUES ?x2 { :m.03v5klg } \n?x0 :automotive.engine.engine_type ?x1 . \n?x2 :automotive.engine.engine_type ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.engine (JOIN automotive.engine.engine_type (JOIN (R automotive.engine.engine_type) m.03v5klg)))"
        }
    },
    "363": {
        "generations": "what symptom is associated with scleroderma??",
        "ori_data_item": {
            "qid": 2102388008000,
            "question": "find a symptom of scleroderma.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01klgg",
                    "entity_name": "Skin ulcer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cdt5",
                    "entity_name": "Dyspnea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01j6t0",
                    "entity_name": "Fatigue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tkm",
                    "entity_name": "Erectile dysfunction"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wfm2h",
                    "entity_name": "Unintentional Weight Loss"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09lkp9",
                    "entity_name": "Morphea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f3kl",
                    "entity_name": "Diarrhea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b_5g",
                    "entity_name": "Gastroesophageal reflux disease"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bztl",
                    "entity_name": "Dysphagia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v2jk",
                    "entity_name": "Raynaud's phenomenon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027fpnw",
                    "entity_name": "Dry cough"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.088b11",
                    "entity_name": "Joint stiffness"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013677",
                    "entity_name": "Muscle pain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021hck",
                    "entity_name": "Joint pain"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.symptom",
                        "class": "medicine.symptom",
                        "friendly_name": "Symptom",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05m_zv2",
                        "class": "medicine.disease",
                        "friendly_name": "Scleroderma",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.symptom.symptom_of",
                        "friendly_name": "Symptom of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.symptom . \nVALUES ?x1 { :m.05m_zv2 } \n?x0 :medicine.symptom.symptom_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.symptom (JOIN medicine.symptom.symptom_of m.05m_zv2))"
        }
    },
    "364": {
        "generations": "who operates jardines del rey airport??",
        "ori_data_item": {
            "qid": 2101957014000,
            "question": "who operates jardines del rey airport?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05srgn",
                    "entity_name": "ENAIRE"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airport_operator",
                        "class": "aviation.airport_operator",
                        "friendly_name": "Airport operator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0967kl",
                        "class": "aviation.airport",
                        "friendly_name": "Jardines del Rey Airport",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airport_operator.airports_operated",
                        "friendly_name": "Airports operated"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airport_operator . \nVALUES ?x1 { :m.0967kl } \n?x0 :aviation.airport_operator.airports_operated ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airport_operator (JOIN aviation.airport_operator.airports_operated m.0967kl))"
        }
    },
    "365": {
        "generations": "who is the author of the written work verifying concurrent programs using linear time temporal logic that is related to a dissertation in education??",
        "ori_data_item": {
            "qid": 3202534006000,
            "question": "find dissertation whose author wrote verifying concurrent programs using linear time temporal logic.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059w88f",
                    "entity_name": "Trust and Reputation in Open Multi-Agent Systems"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.dissertation",
                        "class": "education.dissertation",
                        "friendly_name": "Dissertation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.author",
                        "class": "book.author",
                        "friendly_name": "Author",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.059w8p6",
                        "class": "education.dissertation",
                        "friendly_name": "Verifying Concurrent Programs using Linear Time Temporal Logic",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.author.works_written",
                        "friendly_name": "Works written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.dissertation . \n?x1 :type.object.type :book.author . \nVALUES ?x2 { :m.059w8p6 } \n?x0 :book.written_work.author ?x1 . \n?x1 :book.author.works_written ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND education.dissertation (JOIN book.written_work.author (JOIN book.author.works_written m.059w8p6)))"
        }
    },
    "366": {
        "generations": "which digital camera has an optical zoom of 5.0??",
        "ori_data_item": {
            "qid": 2101999011000,
            "question": "what digital cameras have a 5.0 sensor type?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nlhvd",
                    "entity_name": "Panasonic Lumix DMC-FX500S"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n7x52",
                    "entity_name": "Fujifilm FinePix F650"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q2qf5",
                    "entity_name": "Olympus C-7000 Zoom"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "5.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.digital_camera.optical_zoom",
                        "friendly_name": "Optical Zoom"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"5.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.optical_zoom ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.optical_zoom 5.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "367": {
        "generations": "what ingredients are more specific than honeydew melon??",
        "ori_data_item": {
            "qid": 2102044002000,
            "question": "honeydew melon has what more specific ingredient?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xwb",
                    "entity_name": "Fruit"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.ingredient",
                        "class": "food.ingredient",
                        "friendly_name": "Ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08b4k2",
                        "class": "food.ingredient",
                        "friendly_name": "honeydew melon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.ingredient.more_specific_ingredient",
                        "friendly_name": "More specific ingredient"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.ingredient . \nVALUES ?x1 { :m.08b4k2 } \n?x0 :food.ingredient.more_specific_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.ingredient (JOIN food.ingredient.more_specific_ingredient m.08b4k2))"
        }
    },
    "368": {
        "generations": "which season of the TV series Alias has the least number of episodes??",
        "ori_data_item": {
            "qid": 3206328002000,
            "question": "in alias which season has the fewest number of episodes?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d8zg",
                    "entity_name": "Alias - Season 5"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_season",
                        "class": "tv.tv_series_season",
                        "friendly_name": "TV Season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01rf57",
                        "class": "tv.tv_program",
                        "friendly_name": "Alias",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_season.number_of_episodes",
                        "friendly_name": "Number of episodes"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "tv.tv_program.seasons",
                        "friendly_name": "Seasons"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_season . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :tv.tv_series_season . \nVALUES ?y2 { :m.01rf57 } \n?y0 :tv.tv_series_season.number_of_episodes ?y1 . \n?y2 :tv.tv_program.seasons ?y0 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.01rf57 } \n?x0 :tv.tv_series_season.number_of_episodes ?x1 . \n?x2 :tv.tv_program.seasons ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(ARGMIN (AND tv.tv_series_season (JOIN (R tv.tv_program.seasons) m.01rf57)) tv.tv_series_season.number_of_episodes)"
        }
    },
    "369": {
        "generations": "who is the owner of a newspaper that is written in english and circulated in the city of austin??",
        "ori_data_item": {
            "qid": 4300837013000,
            "question": "who is the owner of the newspaper using english and located in the city of austin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1bvbv",
                    "entity_name": "Cox Media Group"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ldty",
                    "entity_name": "Cox Enterprises"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l04",
                    "entity_name": "The Onion"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.newspaper_owner",
                        "class": "book.newspaper_owner",
                        "friendly_name": "Newspaper Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.newspaper",
                        "class": "book.newspaper",
                        "friendly_name": "Newspaper",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02h40lc",
                        "class": "language.human_language",
                        "friendly_name": "english",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0vzm",
                        "class": "periodicals.newspaper_circulation_area",
                        "friendly_name": "city of austin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.newspaper_owner.newspapers_owned",
                        "friendly_name": "Newspapers Owned"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.periodical.language",
                        "friendly_name": "Language"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "periodicals.newspaper_circulation_area.newspapers",
                        "friendly_name": "Newspapers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.newspaper_owner . \n?x1 :type.object.type :book.newspaper . \nVALUES ?x2 { :m.02h40lc } \nVALUES ?x3 { :m.0vzm } \n?x0 :book.newspaper_owner.newspapers_owned ?x1 . \n?x1 :book.periodical.language ?x2 . \n?x3 :periodicals.newspaper_circulation_area.newspapers ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "book",
                "periodicals"
            ],
            "s_expression": "(AND book.newspaper_owner (JOIN book.newspaper_owner.newspapers_owned (AND (JOIN book.periodical.language m.02h40lc) (JOIN (R periodicals.newspaper_circulation_area.newspapers) m.0vzm))))"
        }
    },
    "370": {
        "generations": "which opera company has produced the opera midsummer night's dream??",
        "ori_data_item": {
            "qid": 2102252008000,
            "question": "which opera company produces midsummer night's dream?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pb7s",
                    "entity_name": "English National Opera"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_company",
                        "class": "opera.opera_company",
                        "friendly_name": "Opera Company",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0yly8pn",
                        "class": "opera.opera_production",
                        "friendly_name": "midsummer night's dream",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera_company.operas_produced",
                        "friendly_name": "Operas Produced"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_company . \nVALUES ?x1 { :m.0yly8pn } \n?x0 :opera.opera_company.operas_produced ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.opera_company (JOIN opera.opera_company.operas_produced m.0yly8pn))"
        }
    },
    "371": {
        "generations": "what plant disease has Berberis as its host in the plant disease triangle??",
        "ori_data_item": {
            "qid": 3202212000000,
            "question": "on berberis which plant disease is hosted?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ch98v8",
                    "entity_name": "Stem rust"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.plant_disease",
                        "class": "biology.plant_disease",
                        "friendly_name": "Plant Disease",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.plant_disease_triangle",
                        "class": "biology.plant_disease_triangle",
                        "friendly_name": "Plant Disease Triangle",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.041tkb",
                        "class": "biology.plant_disease_host",
                        "friendly_name": "Berberis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.plant_disease.plant_disease_triangle",
                        "friendly_name": "Plant Disease Triangle"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "biology.plant_disease_triangle.host",
                        "friendly_name": "Host"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.plant_disease . \n?x1 :type.object.type :biology.plant_disease_triangle . \nVALUES ?x2 { :m.041tkb } \n?x0 :biology.plant_disease.plant_disease_triangle ?x1 . \n?x1 :biology.plant_disease_triangle.host ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.plant_disease (JOIN biology.plant_disease.plant_disease_triangle (JOIN biology.plant_disease_triangle.host m.041tkb)))"
        }
    },
    "372": {
        "generations": "where was the fossil specimen found that is related to the awash river??",
        "ori_data_item": {
            "qid": 2100709003000,
            "question": "what fossil specimen is found at awash river?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07nmh6l",
                    "entity_name": "Ardi"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.fossil_specimen",
                        "class": "biology.fossil_specimen",
                        "friendly_name": "Fossil specimen",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05p525",
                        "class": "biology.fossil_site",
                        "friendly_name": "Awash River",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.fossil_specimen.found_at_site",
                        "friendly_name": "Found at site"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.fossil_specimen . \nVALUES ?x1 { :m.05p525 } \n?x0 :biology.fossil_specimen.found_at_site ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.fossil_specimen (JOIN biology.fossil_specimen.found_at_site m.05p525))"
        }
    },
    "373": {
        "generations": "what government service channel offers the service of global entry??",
        "ori_data_item": {
            "qid": 2100377000000,
            "question": "which government service channel has the government service of global entry?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.038r8p",
                    "entity_name": "U.S. Customs and Border Protection"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_service_channel",
                        "class": "government.government_service_channel",
                        "friendly_name": "Government Service Channel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04cy22d",
                        "class": "government.government_service",
                        "friendly_name": "Global Entry",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_service_channel.government_service",
                        "friendly_name": "Government service"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_service_channel . \nVALUES ?x1 { :m.04cy22d } \n?x0 :government.government_service_channel.government_service ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_service_channel (JOIN government.government_service_channel.government_service m.04cy22d))"
        }
    },
    "374": {
        "generations": "which judge presided over the LVRC Holdings LLC v. Brekka case??",
        "ori_data_item": {
            "qid": 2102864002000,
            "question": "the case of lvrc holdings llc v. brekka has what judge appointed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p572r",
                    "entity_name": "James V. Selna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dd55y",
                    "entity_name": "Sandra Segal Ikuta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bfvz5",
                    "entity_name": "M. Margaret McKeown"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.judge",
                        "class": "law.judge",
                        "friendly_name": "Judge",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gg4rzg",
                        "class": "law.legal_case",
                        "friendly_name": "LVRC Holdings LLC v. Brekka",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.judge.cases",
                        "friendly_name": "Cases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.judge . \nVALUES ?x1 { :m.0gg4rzg } \n?x0 :law.judge.cases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.judge (JOIN law.judge.cases m.0gg4rzg))"
        }
    },
    "375": {
        "generations": "how many film characters are ancient creatures??",
        "ori_data_item": {
            "qid": 2103177004000,
            "question": "what is the number of characters in the film ancient creature?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.film_character",
                        "class": "film.film_character",
                        "friendly_name": "Film character",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.065qjcg",
                        "class": "fictional_universe.character_species",
                        "friendly_name": "ancient creature",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.species",
                        "friendly_name": "Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_character . \nVALUES ?x1 { :m.065qjcg } \n?x0 :fictional_universe.fictional_character.species ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(COUNT (AND film.film_character (JOIN fictional_universe.fictional_character.species m.065qjcg)))"
        }
    },
    "376": {
        "generations": "what US patent was filed on January 10th, 2003??",
        "ori_data_item": {
            "qid": 2100408011000,
            "question": "what patents have an application date of jan. the 10th, 2003?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3n4mf",
                    "entity_name": "Uses of diterpenoid triepoxides as an anti-proliferative agent: U.S. Patent No. 6,949,510"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2003-01-10^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Jan. the 10th, 2003",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.application_date",
                        "friendly_name": "Application Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { \"2003-01-10-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :law.us_patent.application_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.application_date 2003-01-10^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "377": {
        "generations": "which automotive model is related to the crossover??",
        "ori_data_item": {
            "qid": 2101234017000,
            "question": "crossover is related to which vehicle model?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09p1_h",
                    "entity_name": "Lincoln MKX"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model",
                        "class": "automotive.model",
                        "friendly_name": "Automobile Model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08knth",
                        "class": "automotive.model",
                        "friendly_name": "crossover",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model.related",
                        "friendly_name": "Related"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model . \nVALUES ?x1 { :m.08knth } \n?x0 :automotive.model.related ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model (JOIN automotive.model.related m.08knth))"
        }
    },
    "378": {
        "generations": "which meteorological service is responsible for categorizing hurricanes like hurricane barbara??",
        "ori_data_item": {
            "qid": 3202665004000,
            "question": "what meteorological service categorized hurricane barbara?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lvb3",
                    "entity_name": "National Hurricane Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03b7m0",
                    "entity_name": "Central Pacific Hurricane Center"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.meteorological_service",
                        "class": "meteorology.meteorological_service",
                        "friendly_name": "Meteorological service",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0vsgmpg",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Hurricane Barbara",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "meteorology.tropical_cyclone_category.meteorological_service",
                        "friendly_name": "Meteorological service"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "meteorology.tropical_cyclone_category.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.meteorological_service . \n?x1 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x2 { :m.0vsgmpg } \n?x1 :meteorology.tropical_cyclone_category.meteorological_service ?x0 . \n?x1 :meteorology.tropical_cyclone_category.tropical_cyclones ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.meteorological_service (JOIN (R meteorology.tropical_cyclone_category.meteorological_service) (JOIN meteorology.tropical_cyclone_category.tropical_cyclones m.0vsgmpg)))"
        }
    },
    "379": {
        "generations": "which film character is based on louis xiii of france??",
        "ori_data_item": {
            "qid": 3202620016000,
            "question": "what fictional film character based on louis xiii of france is modeled after the same person?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_h7v3",
                    "entity_name": "King Louis XIII"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.film_character",
                        "class": "film.film_character",
                        "friendly_name": "Film character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.person_in_fiction",
                        "class": "fictional_universe.person_in_fiction",
                        "friendly_name": "Person Or Being In Fiction",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hzk4l2",
                        "class": "opera.opera_character",
                        "friendly_name": "Louis XIII of France",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.based_on",
                        "friendly_name": "Based On"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.based_on",
                        "friendly_name": "Based On"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_character . \n?x1 :type.object.type :fictional_universe.person_in_fiction . \nVALUES ?x2 { :m.0hzk4l2 } \n?x0 :fictional_universe.fictional_character.based_on ?x1 . \n?x2 :fictional_universe.fictional_character.based_on ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND film.film_character (JOIN fictional_universe.fictional_character.based_on (JOIN (R fictional_universe.fictional_character.based_on) m.0hzk4l2)))"
        }
    },
    "380": {
        "generations": "how many government office or title holders were appointed by abdelaziz bouteflika and had jurisdiction of office in algeria??",
        "ori_data_item": {
            "qid": 4303765005000,
            "question": "abdelaziz bouteflika appointed how many government positions for the algeria ?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_office_or_title",
                        "class": "government.government_office_or_title",
                        "friendly_name": "Government Office or Title",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.government_position_held",
                        "class": "government.government_position_held",
                        "friendly_name": "Government Position Held",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0224kz",
                        "class": "government.political_appointer",
                        "friendly_name": "Abdelaziz Bouteflika",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0h3y",
                        "class": "government.governmental_jurisdiction",
                        "friendly_name": "Algeria",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_office_or_title.office_holders",
                        "friendly_name": "Office Holders"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "government.government_position_held.appointed_by",
                        "friendly_name": "Appointed By (if Position is Appointed)"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "government.government_position_held.jurisdiction_of_office",
                        "friendly_name": "Jurisdiction of office"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_office_or_title . \n?x1 :type.object.type :government.government_position_held . \nVALUES ?x2 { :m.0224kz } \nVALUES ?x3 { :m.0h3y } \n?x0 :government.government_office_or_title.office_holders ?x1 . \n?x1 :government.government_position_held.appointed_by ?x2 . \n?x1 :government.government_position_held.jurisdiction_of_office ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(COUNT (AND government.government_office_or_title (JOIN government.government_office_or_title.office_holders (AND (JOIN government.government_position_held.appointed_by m.0224kz) (JOIN government.government_position_held.jurisdiction_of_office m.0h3y)))))"
        }
    },
    "381": {
        "generations": "which olympic games had 140 or more countries participating??",
        "ori_data_item": {
            "qid": 2101180015000,
            "question": "what olympic games hat 140 nations participating?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6ny",
                    "entity_name": "1984 Summer Olympics"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "140^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "140",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_games.number_of_countries",
                        "friendly_name": "Number Of Nations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_games . \nVALUES ?x1 { \"140\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :olympics.olympic_games.number_of_countries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_games (JOIN olympics.olympic_games.number_of_countries 140^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "382": {
        "generations": "what are the causes of death that are related to liver disease??",
        "ori_data_item": {
            "qid": 2100997016000,
            "question": "in a death caused by a liver disease what is the parent cause of death?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.097ns",
                    "entity_name": "Cirrhosis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02psvcf",
                    "entity_name": "Liver failure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m3vr6",
                    "entity_name": "Liver cancer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.024hry",
                    "entity_name": "Reye syndrome"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgxh",
                    "entity_name": "Jaundice"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0401r0",
                    "entity_name": "Gastric varices"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ggf4p",
                    "entity_name": "Viral hepatitis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04k10n",
                    "entity_name": "Acute liver failure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x36x4",
                    "entity_name": "Acute Liver Disease"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nby_9v",
                    "entity_name": "Hepatic Cirrhosis"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.cause_of_death",
                        "class": "people.cause_of_death",
                        "friendly_name": "Cause Of Death",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.047grmq",
                        "class": "people.cause_of_death",
                        "friendly_name": "Liver disease",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.cause_of_death.parent_cause_of_death",
                        "friendly_name": "Parent cause of death"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.cause_of_death . \nVALUES ?x1 { :m.047grmq } \n?x0 :people.cause_of_death.parent_cause_of_death ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.cause_of_death (JOIN people.cause_of_death.parent_cause_of_death m.047grmq))"
        }
    },
    "383": {
        "generations": "what is the name of the ship with the IMO/LR identification number 9556026?",
        "ori_data_item": {
            "qid": 2102560009000,
            "question": "which ship has the imo / lr identification number of 9556026?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqnl0f",
                    "entity_name": "Baltic"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boats.ship",
                        "class": "boats.ship",
                        "friendly_name": "Ship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "9556026^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "9556026",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.ship.imo_lr_identification_number",
                        "friendly_name": "IMO / LR identification number"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { \"9556026\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :boats.ship.imo_lr_identification_number ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(AND boats.ship (JOIN boats.ship.imo_lr_identification_number 9556026^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "384": {
        "generations": "what musical production has a soundtrack called 9 to 5??",
        "ori_data_item": {
            "qid": 2102490000000,
            "question": "what's the musical soundtrack to 9 to 5?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j15m5v",
                    "entity_name": "9 To 5: The Musical (Original Broadway Cast Recording)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.musical_soundtrack",
                        "class": "theater.musical_soundtrack",
                        "friendly_name": "Musical Soundtrack",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k2y7ql",
                        "class": "theater.theater_production",
                        "friendly_name": "9 to 5",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.musical_soundtrack.production",
                        "friendly_name": "Production"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \nVALUES ?x1 { :m.0k2y7ql } \n?x0 :theater.musical_soundtrack.production ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.musical_soundtrack (JOIN theater.musical_soundtrack.production m.0k2y7ql))"
        }
    },
    "385": {
        "generations": "what camera sensor manufacturer produces sensors for the nikon d7000 camera??",
        "ori_data_item": {
            "qid": 2100259016000,
            "question": "nikon d7000 utilizes a camera sensor manufactured by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pmfw",
                    "entity_name": "Nikon Corporation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_sensor_manufacturer",
                        "class": "digicams.camera_sensor_manufacturer",
                        "friendly_name": "Camera Sensor Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ddgxsy",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Nikon D7000",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_sensor_manufacturer.cameras",
                        "friendly_name": "Cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_sensor_manufacturer . \nVALUES ?x1 { :m.0ddgxsy } \n?x0 :digicams.camera_sensor_manufacturer.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_sensor_manufacturer (JOIN digicams.camera_sensor_manufacturer.cameras m.0ddgxsy))"
        }
    },
    "386": {
        "generations": "what sports league season had the 1989 NBA Finals as its championship??",
        "ori_data_item": {
            "qid": 2101482012000,
            "question": "the 1989 nba finals is the championship event of what sports league?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vg9r",
                    "entity_name": "1988\u201389 NBA season"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_league_season",
                        "class": "sports.sports_league_season",
                        "friendly_name": "Sports League Season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08x9tm",
                        "class": "sports.sports_championship_event",
                        "friendly_name": "1989 NBA Finals",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_league_season.championship",
                        "friendly_name": "Championship"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_league_season . \nVALUES ?x1 { :m.08x9tm } \n?x0 :sports.sports_league_season.championship ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_league_season (JOIN sports.sports_league_season.championship m.08x9tm))"
        }
    },
    "387": {
        "generations": "which tropical cyclone season had a tropical cyclone named hurricane one??",
        "ori_data_item": {
            "qid": 2102750007000,
            "question": "what is the tropical cyclone season for hurricane one?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06x35h",
                    "entity_name": "1908 Atlantic hurricane season"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_season",
                        "class": "meteorology.tropical_cyclone_season",
                        "friendly_name": "Tropical cyclone season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09ggtk1",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Hurricane One",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_season.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_season . \nVALUES ?x1 { :m.09ggtk1 } \n?x0 :meteorology.tropical_cyclone_season.tropical_cyclones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_season (JOIN meteorology.tropical_cyclone_season.tropical_cyclones m.09ggtk1))"
        }
    },
    "388": {
        "generations": "which comic strip character is married to andy fox??",
        "ori_data_item": {
            "qid": 3202267006000,
            "question": "comic strip character andy fox is married to which other comic strip character?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r_ztp",
                    "entity_name": "Roger Fox"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_strips.comic_strip_character",
                        "class": "comic_strips.comic_strip_character",
                        "friendly_name": "Comic Strip Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.marriage_of_fictional_characters",
                        "class": "fictional_universe.marriage_of_fictional_characters",
                        "friendly_name": "Marriage (of Fictional Characters)",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02r_z8w",
                        "class": "comic_strips.comic_strip_character",
                        "friendly_name": "Andy Fox",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.married_to",
                        "friendly_name": "Married To"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.married_to",
                        "friendly_name": "Married To"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_strips.comic_strip_character . \n?x1 :type.object.type :fictional_universe.marriage_of_fictional_characters . \nVALUES ?x2 { :m.02r_z8w } \n?x0 :fictional_universe.fictional_character.married_to ?x1 . \n?x2 :fictional_universe.fictional_character.married_to ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND comic_strips.comic_strip_character (JOIN fictional_universe.fictional_character.married_to (JOIN (R fictional_universe.fictional_character.married_to) m.02r_z8w)))"
        }
    },
    "389": {
        "generations": "what type of organization is the baker institute for public policy??",
        "ori_data_item": {
            "qid": 2102279010000,
            "question": "what kind of organization is the baker institute for public policy?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.097zh",
                    "entity_name": "Think tank"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization_type",
                        "class": "organization.organization_type",
                        "friendly_name": "Organization type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05mlcj",
                        "class": "organization.organization",
                        "friendly_name": "baker institute for public policy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization_type.organizations_of_this_type",
                        "friendly_name": "Organizations of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization_type . \nVALUES ?x1 { :m.05mlcj } \n?x0 :organization.organization_type.organizations_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization_type (JOIN organization.organization_type.organizations_of_this_type m.05mlcj))"
        }
    },
    "390": {
        "generations": "which computer processor is manufactured by arm cortex??",
        "ori_data_item": {
            "qid": 3204501015000,
            "question": "a processor manufacturer associated with arm cortex manufactures which computer processor?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gg6yv1",
                    "entity_name": "Apple A5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n48dl3",
                    "entity_name": "Apple A6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x2dbkv",
                    "entity_name": "Apple A7"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_processor",
                        "class": "computer.computer_processor",
                        "friendly_name": "Computer Processor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.processor_manufacturer",
                        "class": "computer.processor_manufacturer",
                        "friendly_name": "Processor Manufacturer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gfzw",
                        "class": "computer.computer_processor",
                        "friendly_name": "arm cortex",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.processor_manufacturer.processors_manufactured",
                        "friendly_name": "Processors Manufactured"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "computer.computer_processor.manufacturers",
                        "friendly_name": "Manufacturers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_processor . \n?x1 :type.object.type :computer.processor_manufacturer . \nVALUES ?x2 { :m.0gfzw } \n?x1 :computer.processor_manufacturer.processors_manufactured ?x0 . \n?x2 :computer.computer_processor.manufacturers ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer_processor (JOIN (R computer.processor_manufacturer.processors_manufactured) (JOIN (R computer.computer_processor.manufacturers) m.0gfzw)))"
        }
    },
    "391": {
        "generations": "what invention is associated with the law us patent for MRI - A Bipolar Magnet Configuration??",
        "ori_data_item": {
            "qid": 2101973012000,
            "question": "what are the patents associated with the invention of mri - a bipolar magnet configuration?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3897w",
                    "entity_name": "Biplanar homogeneous field electromagnets and method for making same"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3kb0t",
                    "entity_name": "Biplanar homogeneous field electromagnets and method for making same: U.S. Patent No. 6,208,143"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j2mqqv",
                        "class": "law.invention",
                        "friendly_name": "MRI - A Bipolar Magnet Configuration",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.associated_inventions",
                        "friendly_name": "Associated Inventions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.0j2mqqv } \n?x0 :law.us_patent.associated_inventions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.associated_inventions m.0j2mqqv))"
        }
    },
    "392": {
        "generations": "which opera character has a quotation that includes the line \"her voice is full of money\" and who said it??",
        "ori_data_item": {
            "qid": 4300393007000,
            "question": "who is the quotation her voice is full of money. attributed to?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k76r1",
                    "entity_name": "Nick Carraway"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_character",
                        "class": "opera.opera_character",
                        "friendly_name": "Opera Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "media_common.quotation_source",
                        "class": "media_common.quotation_source",
                        "friendly_name": "Quotation Source",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.048jrqw",
                        "class": "media_common.quotation",
                        "friendly_name": "Her voice is full of money.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.quotations",
                        "friendly_name": "Quotations"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "media_common.quotation.source",
                        "friendly_name": "Source"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "media_common.quotation.source",
                        "friendly_name": "Source"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_character . \n?x1 :type.object.type :media_common.quotation . \n?x2 :type.object.type :media_common.quotation_source . \nVALUES ?x3 { :m.048jrqw } \n?x0 :fictional_universe.fictional_character.quotations ?x1 . \n?x1 :media_common.quotation.source ?x2 . \n?x3 :media_common.quotation.source ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "fictional_universe",
                "media_common"
            ],
            "s_expression": "(AND opera.opera_character (JOIN fictional_universe.fictional_character.quotations (JOIN media_common.quotation.source (JOIN (R media_common.quotation.source) m.048jrqw))))"
        }
    },
    "393": {
        "generations": "which customer has Umbrella Web as their supplier in the business industry??",
        "ori_data_item": {
            "qid": 2100887009000,
            "question": "which customer's supplier is umbrella web?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.074v83",
                    "entity_name": "Alcon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05d8vj",
                    "entity_name": "Mary Kay"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.customer",
                        "class": "business.customer",
                        "friendly_name": "Customer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.011x2dzd",
                        "class": "business.business_operation",
                        "friendly_name": "Umbrella Web",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.customer.supplier",
                        "friendly_name": "Supplier"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.customer . \nVALUES ?x1 { :m.011x2dzd } \n?x0 :business.customer.supplier ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.customer (JOIN business.customer.supplier m.011x2dzd))"
        }
    },
    "394": {
        "generations": "what journal article has the earliest date of first publication among all written works??",
        "ori_data_item": {
            "qid": 2103795001000,
            "question": "what is the journal article with the earliest date of publication?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02msdv",
                    "entity_name": "On the Number of Primes Less Than a Given Magnitude"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.journal_article",
                        "class": "book.journal_article",
                        "friendly_name": "Journal article",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.date_of_first_publication",
                        "friendly_name": "Date of first publication"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.journal_article . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :book.journal_article . \n?y0 :book.written_work.date_of_first_publication ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :book.written_work.date_of_first_publication ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(ARGMIN book.journal_article book.written_work.date_of_first_publication)"
        }
    },
    "395": {
        "generations": "which soccer/football league season is part of the sudan premier league??",
        "ori_data_item": {
            "qid": 2101918010000,
            "question": "when is the season for the sudan premier league football league played?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05t0n1q",
                    "entity_name": "2009 Sudan Premier League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zxnvk",
                    "entity_name": "2008 Sudan Premier League"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_league_season",
                        "class": "soccer.football_league_season",
                        "friendly_name": "Football League Season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0263t4l",
                        "class": "soccer.football_league",
                        "friendly_name": "Sudan Premier League",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_league_season.league",
                        "friendly_name": "League"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_league_season . \nVALUES ?x1 { :m.0263t4l } \n?x0 :soccer.football_league_season.league ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_league_season (JOIN soccer.football_league_season.league m.0263t4l))"
        }
    },
    "396": {
        "generations": "how many periodicals have decatur daily as their subject??",
        "ori_data_item": {
            "qid": 2103108011000,
            "question": "decatur daily has how many numbers of subjects?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.periodical_subject",
                        "class": "book.periodical_subject",
                        "friendly_name": "Periodical Subject",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bz7n3",
                        "class": "book.newspaper",
                        "friendly_name": "decatur daily",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.periodical.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.0bz7n3 } \n?x1 :book.periodical.subjects ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(COUNT (AND book.periodical_subject (JOIN (R book.periodical.subjects) m.0bz7n3)))"
        }
    },
    "397": {
        "generations": "which golf course was designed by robin nelson??",
        "ori_data_item": {
            "qid": 2101648015000,
            "question": "robin nelson was the designer of which golf course?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zkwt8",
                    "entity_name": "Moose Run Creek Course"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zj_gd",
                    "entity_name": "Mauna Lani North Course"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.golf_course",
                        "class": "sports.golf_course",
                        "friendly_name": "Golf Course",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04zj_l9",
                        "class": "sports.golf_course_designer",
                        "friendly_name": "Robin Nelson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.golf_course.designer",
                        "friendly_name": "Designer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.golf_course . \nVALUES ?x1 { :m.04zj_l9 } \n?x0 :sports.golf_course.designer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.golf_course (JOIN sports.golf_course.designer m.04zj_l9))"
        }
    },
    "398": {
        "generations": "what beer style belongs to the bjcp style category of american ale??",
        "ori_data_item": {
            "qid": 2101478014000,
            "question": "american ale encompasses what beer styles?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hv1sp",
                    "entity_name": "American Brown Ale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hv1sg",
                    "entity_name": "American Amber Ale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v3gs4f",
                    "entity_name": "American Pale Ale"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.beer_style",
                        "class": "food.beer_style",
                        "friendly_name": "Beer style",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02hv2t7",
                        "class": "food.beer_style_category",
                        "friendly_name": "American Ale",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.beer_style.bjcp_style_category",
                        "friendly_name": "BJCP Style Category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.beer_style . \nVALUES ?x1 { :m.02hv2t7 } \n?x0 :food.beer_style.bjcp_style_category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.beer_style (JOIN food.beer_style.bjcp_style_category m.02hv2t7))"
        }
    },
    "399": {
        "generations": "how many grape varieties are used to make vin doux naturel wine style??",
        "ori_data_item": {
            "qid": 2103466015000,
            "question": "find how many kinds of grapes are permissible in vin doux naturel.",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.grape_variety",
                        "class": "wine.grape_variety",
                        "friendly_name": "Grape Variety",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02qkqj_",
                        "class": "food.wine_style",
                        "friendly_name": "Vin doux naturel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "food.wine_style.grape_varieties",
                        "friendly_name": "Grape varieties"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.grape_variety . \nVALUES ?x1 { :m.02qkqj_ } \n?x1 :food.wine_style.grape_varieties ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(COUNT (AND wine.grape_variety (JOIN (R food.wine_style.grape_varieties) m.02qkqj_)))"
        }
    },
    "400": {
        "generations": "what type of organism is a wild boar??",
        "ori_data_item": {
            "qid": 2100170007000,
            "question": "wild boar is the organism type of which organism?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jbtg",
                    "entity_name": "Hogzilla"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism",
                        "class": "biology.organism",
                        "friendly_name": "Organism",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dr47",
                        "class": "biology.organism_classification",
                        "friendly_name": "wild boar",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism.organism_type",
                        "friendly_name": "Organism type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism . \nVALUES ?x1 { :m.0dr47 } \n?x0 :biology.organism.organism_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism (JOIN biology.organism.organism_type m.0dr47))"
        }
    },
    "401": {
        "generations": "how many exhibitions are of the type \"the sly and unseen day\" and have subjects that are also subjects of type of exhibition??",
        "ori_data_item": {
            "qid": 4302933002000,
            "question": "the sly and unseen day has how many exhibition subjects?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "602"
                }
            ],
            "function": "count",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition_subject",
                        "class": "exhibitions.exhibition_subject",
                        "friendly_name": "Exhibition subject",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "exhibitions.type_of_exhibition",
                        "class": "exhibitions.type_of_exhibition",
                        "friendly_name": "Type of Exhibition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0y6zk9p",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "The Sly and Unseen Day",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "exhibitions.exhibition.subjects",
                        "friendly_name": "Subjects"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "exhibitions.type_of_exhibition.exhibitions_of_this_type",
                        "friendly_name": "Exhibitions of this type"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "exhibitions.exhibition.exhibition_types",
                        "friendly_name": "Exhibition type(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition_subject . \n?x1 :type.object.type :exhibitions.exhibition . \n?x2 :type.object.type :exhibitions.type_of_exhibition . \nVALUES ?x3 { :m.0y6zk9p } \n?x1 :exhibitions.exhibition.subjects ?x0 . \n?x2 :exhibitions.type_of_exhibition.exhibitions_of_this_type ?x1 . \n?x3 :exhibitions.exhibition.exhibition_types ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(COUNT (AND exhibitions.exhibition_subject (JOIN (R exhibitions.exhibition.subjects) (JOIN (R exhibitions.type_of_exhibition.exhibitions_of_this_type) (JOIN (R exhibitions.exhibition.exhibition_types) m.0y6zk9p)))))"
        }
    },
    "402": {
        "generations": "what type of aircraft engine is used in the aircraft models designed by lawrence wackett??",
        "ori_data_item": {
            "qid": 3202838012000,
            "question": "what's the engine type of the aircraft model designed by lawrence wackett?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012rxr",
                    "entity_name": "Radial engine"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_engine_type",
                        "class": "aviation.aircraft_engine_type",
                        "friendly_name": "Aircraft Engine Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0d6xcq",
                        "class": "aviation.aircraft_designer",
                        "friendly_name": "Lawrence Wackett",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "aviation.aircraft_model.engine_type",
                        "friendly_name": "Engine Type"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "aviation.aircraft_designer.aircraft_models_designed",
                        "friendly_name": "Aircraft models designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_engine_type . \n?x1 :type.object.type :aviation.aircraft_model . \nVALUES ?x2 { :m.0d6xcq } \n?x1 :aviation.aircraft_model.engine_type ?x0 . \n?x2 :aviation.aircraft_designer.aircraft_models_designed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_engine_type (JOIN (R aviation.aircraft_model.engine_type) (JOIN (R aviation.aircraft_designer.aircraft_models_designed) m.0d6xcq)))"
        }
    },
    "403": {
        "generations": "what comic book stories belong to the children's literature genre??",
        "ori_data_item": {
            "qid": 3205507000000,
            "question": "what's the name of the comic book story that is in the child genre of children's literature?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kkx2",
                    "entity_name": "The Sandman: Dream Country"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmckm",
                    "entity_name": "Calliope"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcj8",
                    "entity_name": "A Midsummer Night's Dream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcmh",
                    "entity_name": "A Dream of a Thousand Cats"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcnc",
                    "entity_name": "Fa\u00e7ade"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_genre",
                        "class": "comic_books.comic_book_genre",
                        "friendly_name": "Comic Book Genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0dwly",
                        "class": "media_common.media_genre",
                        "friendly_name": "Children's literature",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.genre",
                        "friendly_name": "Genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "media_common.media_genre.child_genres",
                        "friendly_name": "Child genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \n?x1 :type.object.type :comic_books.comic_book_genre . \nVALUES ?x2 { :m.0dwly } \n?x0 :comic_books.comic_book_story.genre ?x1 . \n?x1 :media_common.media_genre.child_genres ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common",
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.genre (JOIN media_common.media_genre.child_genres m.0dwly)))"
        }
    },
    "404": {
        "generations": "what type of color filter array does the d70s camera have??",
        "ori_data_item": {
            "qid": 2102528007000,
            "question": "the d70s has which type of color filter array?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r8js",
                    "entity_name": "Bayer filter"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_color_filter_array_type",
                        "class": "digicams.camera_color_filter_array_type",
                        "friendly_name": "Camera Color Filter Array Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.027797",
                        "class": "digicams.digital_camera",
                        "friendly_name": "d70s",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_color_filter_array_type.cameras",
                        "friendly_name": "Cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_color_filter_array_type . \nVALUES ?x1 { :m.027797 } \n?x0 :digicams.camera_color_filter_array_type.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_color_filter_array_type (JOIN digicams.camera_color_filter_array_type.cameras m.027797))"
        }
    },
    "405": {
        "generations": "which theater production is based on the play east towards home??",
        "ori_data_item": {
            "qid": 2102638003000,
            "question": "which theater production is played by east towards home",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_gcvjs",
                    "entity_name": "East Towards Home"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_production",
                        "class": "theater.theater_production",
                        "friendly_name": "Theater Production",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0_gcvfk",
                        "class": "theater.play",
                        "friendly_name": "East Towards Home",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_production.play",
                        "friendly_name": "Play"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_production . \nVALUES ?x1 { :m.0_gcvfk } \n?x0 :theater.theater_production.play ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_production (JOIN theater.theater_production.play m.0_gcvfk))"
        }
    },
    "406": {
        "generations": "who directed the music video for the song D.A.N.C.E.??",
        "ori_data_item": {
            "qid": 2102434013000,
            "question": "the music video d.a.n.c.e. was directed by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gk81t",
                    "entity_name": "Jonas & Fran\u00e7ois"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.music_video_director",
                        "class": "music.music_video_director",
                        "friendly_name": "Music video director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0m50nxr",
                        "class": "music.music_video",
                        "friendly_name": "D.A.N.C.E.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.music_video_director.music_videos_directed",
                        "friendly_name": "Music videos directed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video_director . \nVALUES ?x1 { :m.0m50nxr } \n?x0 :music.music_video_director.music_videos_directed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.music_video_director (JOIN music.music_video_director.music_videos_directed m.0m50nxr))"
        }
    },
    "407": {
        "generations": "which airliner accident had a crew of 18 or more??",
        "ori_data_item": {
            "qid": 2102506019000,
            "question": "which aviation incident included 18 crews?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z675r",
                    "entity_name": "TWA Flight 800 conspiracy theories"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zvf6z",
                    "entity_name": "2003 Iran (IIRG) Il-76 crash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f8d7",
                    "entity_name": "United Airlines Flight 811"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05s_2jk",
                    "entity_name": "Emirates Flight 407"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07jyq",
                    "entity_name": "TWA Flight 800"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k46p3",
                    "entity_name": "British Airways Flight 268"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09r1tv",
                    "entity_name": "British Airways Flight 149"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs8d7q",
                    "entity_name": "Cubana de Aviaci\u00f3n Flight 1216"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9tg5s",
                    "entity_name": "Malaysia Airlines Flight 9"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hrfprh",
                    "entity_name": "Northwest Airlines Flight 85"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9lv4x",
                    "entity_name": "Korean Air Flight 803"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "18^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "18",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.crew",
                        "friendly_name": "Crew"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { \"18\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :aviation.airliner_accident.crew ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.crew 18^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "408": {
        "generations": "which museum was founded in the same place as plumstead manor school, a tourist attraction??",
        "ori_data_item": {
            "qid": 3205477000000,
            "question": "what tourist attractions would i find in the area where plumstead manor school was founded?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pq2k",
                    "entity_name": "Design Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01w0yg",
                    "entity_name": "Sir John Soane's Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02sfxg",
                    "entity_name": "Wallace Collection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07nb5",
                    "entity_name": "Tate Modern, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q6xg0",
                    "entity_name": "Polish Institute and Sikorski Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05s6ns",
                    "entity_name": "Jewish Museum London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p1tx",
                    "entity_name": "Victoria and Albert Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05xz1j",
                    "entity_name": "National Police Memorial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hb3",
                    "entity_name": "British Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03825f",
                    "entity_name": "Horniman Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021mgt",
                    "entity_name": "Museum of London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01t372",
                    "entity_name": "Natural History Museum, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013yrz",
                    "entity_name": "Science Museum, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x6xn",
                    "entity_name": "National Maritime Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02mv8x",
                    "entity_name": "National Portrait Gallery, London"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0136mc",
                    "entity_name": "Tate Gallery, Britain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fg05k",
                    "entity_name": "Duke of York's Headquarters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xzg6",
                    "entity_name": "Queen's House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.017_lw",
                    "entity_name": "British Museum Reading Room"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05fl7q",
                    "entity_name": "V&A Museum of Childhood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.045ffb",
                    "entity_name": "The Clink"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q3_3",
                    "entity_name": "Bank of England Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05r48r",
                    "entity_name": "Churchill War Rooms"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dn_hk",
                    "entity_name": "New London Architecture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ttyf",
                    "entity_name": "Museum of London Docklands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05t7yp",
                    "entity_name": "Earls Court Exhibition Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07n8hk",
                    "entity_name": "Leighton House Museum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1hw7",
                    "entity_name": "The Building Centre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043mxr",
                    "entity_name": "Serpentine Galleries"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0414y7c",
                    "entity_name": "Wellcome Collection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f3pf0",
                    "entity_name": "Madame Tussauds London"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.museum",
                        "class": "architecture.museum",
                        "friendly_name": "Museum",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.travel_destination",
                        "class": "travel.travel_destination",
                        "friendly_name": "Travel destination",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0wr6560",
                        "class": "education.school",
                        "friendly_name": "Plumstead Manor School",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.travel_destination.tourist_attractions",
                        "friendly_name": "Tourist attractions"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "organization.organization.place_founded",
                        "friendly_name": "Place founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.museum . \n?x1 :type.object.type :travel.travel_destination . \nVALUES ?x2 { :m.0wr6560 } \n?x1 :travel.travel_destination.tourist_attractions ?x0 . \n?x2 :organization.organization.place_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel",
                "organization"
            ],
            "s_expression": "(AND architecture.museum (JOIN (R travel.travel_destination.tourist_attractions) (JOIN (R organization.organization.place_founded) m.0wr6560)))"
        }
    },
    "409": {
        "generations": "what recipe has a preparation time of 0.0??",
        "ori_data_item": {
            "qid": 2102248004000,
            "question": "for which recipe is the preparation time 0.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.083pzzb",
                    "entity_name": "Foie Gras Pasta"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe",
                        "class": "food.recipe",
                        "friendly_name": "Recipe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.recipe.preparation_time",
                        "friendly_name": "Preparation time"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe . \nVALUES ?x1 { \"0.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :food.recipe.preparation_time ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.recipe (JOIN food.recipe.preparation_time 0.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "410": {
        "generations": "what type of coronet is associated with baronial coat of arms??",
        "ori_data_item": {
            "qid": 2102924007000,
            "question": "what coat of arms has the baronial coronet?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z714c",
                    "entity_name": "Coat of arms of Jakobstad"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "symbols.coat_of_arms",
                        "class": "symbols.coat_of_arms",
                        "friendly_name": "Coat of Arms",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0668p87",
                        "class": "symbols.heraldic_coronet",
                        "friendly_name": "Baronial coronet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "symbols.coat_of_arms.coronet",
                        "friendly_name": "Coronet"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.coat_of_arms . \nVALUES ?x1 { :m.0668p87 } \n?x0 :symbols.coat_of_arms.coronet ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "symbols"
            ],
            "s_expression": "(AND symbols.coat_of_arms (JOIN symbols.coat_of_arms.coronet m.0668p87))"
        }
    },
    "411": {
        "generations": "what type of distilled spirit is made from maize and has an age of at most 23??",
        "ori_data_item": {
            "qid": 4302524011000,
            "question": "what liquor is made from maizes and ferments for 23 years?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c59y",
                    "entity_name": "Bourbon whiskey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p5b6",
                    "entity_name": "Rye whiskey"
                }
            ],
            "function": "<=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit_type",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "Distilled spirit type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.053wn",
                        "class": "distilled_spirits.fermentation_base",
                        "friendly_name": "maizes",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit",
                        "class": "distilled_spirits.distilled_spirit",
                        "friendly_name": "Distilled spirit",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "23^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "23",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.distilled_spirit_type.fermentation_base",
                        "friendly_name": "Fermentation base"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "distilled_spirits.distilled_spirit_type.spirits",
                        "friendly_name": "Spirits of this type"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "distilled_spirits.distilled_spirit.age",
                        "friendly_name": "Age statement"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit_type . \nVALUES ?x1 { :m.053wn } \n?x2 :type.object.type :distilled_spirits.distilled_spirit . \nFILTER (?x3 <= \"23\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :distilled_spirits.distilled_spirit_type.fermentation_base ?x1 . \n?x0 :distilled_spirits.distilled_spirit_type.spirits ?x2 . \n?x2 :distilled_spirits.distilled_spirit.age ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit_type (AND (JOIN distilled_spirits.distilled_spirit_type.fermentation_base m.053wn) (JOIN distilled_spirits.distilled_spirit_type.spirits (le distilled_spirits.distilled_spirit.age 23^^http://www.w3.org/2001/XMLSchema#integer))))"
        }
    },
    "412": {
        "generations": "who is the author of the journal article \"Ontogeny and phylogeny\u2014revisited and reunited\" that was written by joseph t. eastman??",
        "ori_data_item": {
            "qid": 3203247003000,
            "question": "what journal article did joseph t. eastman write which was cited by ontogeny and phylogeny\u2014revisited and reunited?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bnng80",
                    "entity_name": "Phyletic devergence and specialization for pelagic life in the Antarctic nototheniid fish Pleuragramma antarcticum"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.journal_article",
                        "class": "book.journal_article",
                        "friendly_name": "Journal article",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bnngzf",
                        "class": "book.author",
                        "friendly_name": "Joseph T. Eastman",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0bhh_lk",
                        "class": "book.cited_work",
                        "friendly_name": "Ontogeny and phylogeny\u2014revisited and reunited",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "book.cited_work.cited_in",
                        "friendly_name": "Cited in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.journal_article . \nVALUES ?x1 { :m.0bnngzf } \nVALUES ?x2 { :m.0bhh_lk } \n?x0 :book.written_work.author ?x1 . \n?x2 :book.cited_work.cited_in ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.journal_article (AND (JOIN book.written_work.author m.0bnngzf) (JOIN (R book.cited_work.cited_in) m.0bhh_lk)))"
        }
    },
    "413": {
        "generations": "what roller coaster has a duration of at most 110.0 and a capacity of at least 1200??",
        "ori_data_item": {
            "qid": 3201315013000,
            "question": "which roller coasters have a capacity of 1200 and lasts less than 110.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kg97p",
                    "entity_name": "Cheetah"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6_b9",
                    "entity_name": "Colossus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08j96s",
                    "entity_name": "Psyclone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c110x",
                    "entity_name": "D\u00e6monen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fxkdp",
                    "entity_name": "Woodstock Express"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pqw0m",
                    "entity_name": "Steel Eel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f412c",
                    "entity_name": "Judge Roy Scream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6_sx",
                    "entity_name": "Stealth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fxkc_",
                    "entity_name": "Woodstock Express"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vrgnd",
                    "entity_name": "Xpress"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09h6h0",
                    "entity_name": "Georgia Cyclone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ktqlv1",
                    "entity_name": "Katapult"
                }
            ],
            "function": "<=",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster",
                        "class": "amusement_parks.roller_coaster",
                        "friendly_name": "Roller Coaster",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "110.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "110.0",
                        "question_node": 0,
                        "function": "<="
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "1200^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "1200",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.duration",
                        "friendly_name": "Duration"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "amusement_parks.ride.capacity",
                        "friendly_name": "Capacity (riders per hour)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.roller_coaster . \nFILTER (?x1 <= \"110.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\nVALUES ?x2 { \"1200\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :amusement_parks.ride.duration ?x1 . \n?x0 :amusement_parks.ride.capacity ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.roller_coaster (AND (le amusement_parks.ride.duration 110.0^^http://www.w3.org/2001/XMLSchema#float) (JOIN amusement_parks.ride.capacity 1200^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "414": {
        "generations": "which user profile has police officers as their favorite topic??",
        "ori_data_item": {
            "qid": 2100883005000,
            "question": "police officers is a favored freebase topic in what user profile?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g1ljs",
                    "entity_name": "nevergetrevenge"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01t2ln",
                        "class": "common.topic",
                        "friendly_name": "police officers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.favorite_topics",
                        "friendly_name": "Favorite Freebase Topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.01t2ln } \n?x0 :freebase.user_profile.favorite_topics ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.favorite_topics m.01t2ln))"
        }
    },
    "415": {
        "generations": "what road passes through the major city of kerang??",
        "ori_data_item": {
            "qid": 2100966015000,
            "question": "kerang crosses with what roads?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05fpyg",
                    "entity_name": "Murray Valley Highway"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "transportation.road",
                        "class": "transportation.road",
                        "friendly_name": "Road",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05sxpj",
                        "class": "location.citytown",
                        "friendly_name": "Kerang",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "transportation.road.major_cities",
                        "friendly_name": "Major cities"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :transportation.road . \nVALUES ?x1 { :m.05sxpj } \n?x0 :transportation.road.major_cities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "transportation"
            ],
            "s_expression": "(AND transportation.road (JOIN transportation.road.major_cities m.05sxpj))"
        }
    },
    "416": {
        "generations": "which album features The Skywalker Chorus as artists??",
        "ori_data_item": {
            "qid": 2100495001000,
            "question": "the skywalker chorus is a featured artest in which music album?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wk74hn",
                    "entity_name": "Gears of War 2"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.album",
                        "class": "music.album",
                        "friendly_name": "Musical Album",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0wp6wym",
                        "class": "music.featured_artist",
                        "friendly_name": "The Skywalker Chorus",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album.featured_artists",
                        "friendly_name": "Featured artists"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album . \nVALUES ?x1 { :m.0wp6wym } \n?x0 :music.album.featured_artists ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.album (JOIN music.album.featured_artists m.0wp6wym))"
        }
    },
    "417": {
        "generations": "which radio station is owned by red river broadcasting??",
        "ori_data_item": {
            "qid": 2101788009000,
            "question": "which radio station is owned by red river broadcasting?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04crz6h",
                    "entity_name": "WEVE-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g8x9j",
                    "entity_name": "WWAX"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f46hj",
                    "entity_name": "WWWI-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w7_sg",
                    "entity_name": "WHSM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pk32_",
                    "entity_name": "KKIN"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r4cf5",
                    "entity_name": "KQDS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nny2g",
                    "entity_name": "KLKS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081mt6",
                    "entity_name": "KZIO"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1dtx",
                    "entity_name": "KQDS-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f5yyt",
                    "entity_name": "WCMP-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047ljnn",
                    "entity_name": "WXCE"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n48_p",
                    "entity_name": "KKIN-FM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b76st1",
                    "entity_name": "KRBT"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fpkw7",
                    "entity_name": "WXCX"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g58zvx",
                    "entity_name": "WCMP"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.radio_station",
                        "class": "broadcast.radio_station",
                        "friendly_name": "Radio Station",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0538_r",
                        "class": "broadcast.radio_station_owner",
                        "friendly_name": "Red River Broadcasting",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.radio_station.owner",
                        "friendly_name": "Owner"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.radio_station . \nVALUES ?x1 { :m.0538_r } \n?x0 :broadcast.radio_station.owner ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.radio_station (JOIN broadcast.radio_station.owner m.0538_r))"
        }
    },
    "418": {
        "generations": "which ride has a capacity of 700 or more??",
        "ori_data_item": {
            "qid": 2101260007000,
            "question": "700 is the capacity for which amusement ride?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d06bj",
                    "entity_name": "High Roller"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nr832",
                    "entity_name": "Wolverine Wildcat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn8h0",
                    "entity_name": "Sonic Spinball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cp1h6v",
                    "entity_name": "Muskrat Scrambler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c2sjf",
                    "entity_name": "X"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z96lp",
                    "entity_name": "Speed Monster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0136zjnj",
                    "entity_name": "C\u00fa Chulainn Coaster"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "700^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "700",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.capacity",
                        "friendly_name": "Capacity (riders per hour)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \nVALUES ?x1 { \"700\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :amusement_parks.ride.capacity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (JOIN amusement_parks.ride.capacity 700^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "419": {
        "generations": "what literary genre includes the book The Tall Stones??",
        "ori_data_item": {
            "qid": 2100535002000,
            "question": "what genre of literature includes the tall stones?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.014dfn",
                    "entity_name": "Speculative fiction"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.literary_genre",
                        "class": "media_common.literary_genre",
                        "friendly_name": "Literary Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05qcqj6",
                        "class": "book.book",
                        "friendly_name": "The Tall Stones",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.literary_genre.books_in_this_genre",
                        "friendly_name": "Books In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.literary_genre . \nVALUES ?x1 { :m.05qcqj6 } \n?x0 :media_common.literary_genre.books_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.literary_genre (JOIN media_common.literary_genre.books_in_this_genre m.05qcqj6))"
        }
    },
    "420": {
        "generations": "what blended spirit has an ABV of 17.0 or higher??",
        "ori_data_item": {
            "qid": 2100795004000,
            "question": "an alcohol content of 17.0 can be found in which blended spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_ymb_d",
                    "entity_name": "VOODOO Cream Liqueur"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.blended_spirit",
                        "class": "distilled_spirits.blended_spirit",
                        "friendly_name": "Blended spirit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "17.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "17.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.blended_spirit.abv",
                        "friendly_name": "Alcohol content"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.blended_spirit . \nVALUES ?x1 { \"17.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :distilled_spirits.blended_spirit.abv ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.blended_spirit (JOIN distilled_spirits.blended_spirit.abv 17.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "421": {
        "generations": "how many newspaper issues were published by the ny times??",
        "ori_data_item": {
            "qid": 2104294003000,
            "question": "ny times has how how many newspaper issues?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "17"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.newspaper_issue",
                        "class": "book.newspaper_issue",
                        "friendly_name": "Newspaper Issue",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07k2d",
                        "class": "book.newspaper",
                        "friendly_name": "ny times",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.newspaper_issue.newspaper",
                        "friendly_name": "Newspaper"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.newspaper_issue . \nVALUES ?x1 { :m.07k2d } \n?x0 :book.newspaper_issue.newspaper ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(COUNT (AND book.newspaper_issue (JOIN book.newspaper_issue.newspaper m.07k2d)))"
        }
    },
    "422": {
        "generations": "what olympic event is related to the sport of badminton??",
        "ori_data_item": {
            "qid": 2100069000000,
            "question": "badminton is one discipline of which olympic event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk31f",
                    "entity_name": "Women's Badminton, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgcy_k",
                    "entity_name": "Badminton - Women's doubles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2mt",
                    "entity_name": "Men's Badminton, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgb47k",
                    "entity_name": "Badminton - Mixed doubles (Olympics)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgbcs4",
                    "entity_name": "Badminton - Men's doubles"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_event",
                        "class": "olympics.olympic_event",
                        "friendly_name": "Olympic event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0194d",
                        "class": "olympics.olympic_sport",
                        "friendly_name": "Badminton",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_event.sport",
                        "friendly_name": "Discipline"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_event . \nVALUES ?x1 { :m.0194d } \n?x0 :olympics.olympic_event.sport ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_event (JOIN olympics.olympic_event.sport m.0194d))"
        }
    },
    "423": {
        "generations": "which drinking establishment has a co-owner as one of its employees??",
        "ori_data_item": {
            "qid": 3201267005000,
            "question": "what drinking establishment does an employment tenure undertaken by a co-owner have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01zmfmn",
                    "entity_name": "Easy Street Cafe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl8lgk",
                    "entity_name": "Dream Farm"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.drinking_establishment",
                        "class": "food.drinking_establishment",
                        "friendly_name": "Drinking establishment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.employment_tenure",
                        "class": "business.employment_tenure",
                        "friendly_name": "Employment tenure",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04flfng",
                        "class": "business.job_title",
                        "friendly_name": "Co-owner",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.employer.employees",
                        "friendly_name": "Employees and other personnel"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "business.job_title.people_with_this_title",
                        "friendly_name": "People With This Title"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.drinking_establishment . \n?x1 :type.object.type :business.employment_tenure . \nVALUES ?x2 { :m.04flfng } \n?x0 :business.employer.employees ?x1 . \n?x2 :business.job_title.people_with_this_title ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND food.drinking_establishment (JOIN business.employer.employees (JOIN (R business.job_title.people_with_this_title) m.04flfng)))"
        }
    },
    "424": {
        "generations": "which sponsor had a sponsorship that lasted until January 2009 or later??",
        "ori_data_item": {
            "qid": 3200990009000,
            "question": "find the sponsor who still offer sponsorship after 2009-01.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027dv6h",
                    "entity_name": "Vox Footwear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kqjrr",
                    "entity_name": "Fallen Footwear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rj8_6",
                    "entity_name": "Mystery Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dm3mr",
                    "entity_name": "Baker Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dmzh",
                    "entity_name": "Flip Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026yv6h",
                    "entity_name": "Fury Trucks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gh_6w",
                    "entity_name": "Zoo York"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mr3xw",
                    "entity_name": "BrightRoll"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w82l7",
                    "entity_name": "Skate Mental"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kbwy",
                    "entity_name": "Vans"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jtml",
                    "entity_name": "Adidas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nh0x",
                    "entity_name": "Kellogg's"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f12k9",
                    "entity_name": "Osiris Shoes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06kj_8",
                    "entity_name": "Volcom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08ngfv",
                    "entity_name": "Almost Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026h4_h",
                    "entity_name": "Vizio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d6r8x",
                    "entity_name": "Alien Workshop"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031vww",
                    "entity_name": "Adio Footwear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q8_cx",
                    "entity_name": "Henri Lloyd"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05yvrqb",
                    "entity_name": "Alka-Seltzer Plus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hyzwwl",
                    "entity_name": "CollisionMax Auto Body & Glass Centers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0235lxv",
                    "entity_name": "Thunder Trucks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010vtynd",
                    "entity_name": "Telerik"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lwkh",
                    "entity_name": "Nike, Inc."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04x55r",
                    "entity_name": "Acxiom Corporation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011snwqp",
                    "entity_name": "Swiftype"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.098c66",
                    "entity_name": "Girl Distribution Company"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08d4pt",
                    "entity_name": "Globe International"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064gl1",
                    "entity_name": "enjoi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058gbp",
                    "entity_name": "Element Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ckxm7",
                    "entity_name": "Lakai Limited Footwear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vshh",
                    "entity_name": "DC Shoes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_0ts",
                    "entity_name": "Louisiana-Pacific"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0140d2",
                    "entity_name": "Converse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dmhsz",
                    "entity_name": "Gaylord Hotels"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08p9c6",
                    "entity_name": "Plan B Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmpbb",
                    "entity_name": "Famous Stars and Straps"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065qcgw",
                    "entity_name": "Jart Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xy21",
                    "entity_name": "Circa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.094tnwd",
                    "entity_name": "Force Trucks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c2gvb",
                    "entity_name": "Birdhouse Skateboards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgwrr6",
                    "entity_name": "Candybox Marketing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03sc8",
                    "entity_name": "IBM"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jz5r6",
                    "entity_name": "Habitat Skateboards"
                }
            ],
            "function": ">=",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.sponsor",
                        "class": "business.sponsor",
                        "friendly_name": "Sponsor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.sponsorship",
                        "class": "business.sponsorship",
                        "friendly_name": "Sponsorship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "2009-01^^http://www.w3.org/2001/XMLSchema#gYearMonth",
                        "class": "type.datetime",
                        "friendly_name": "2009-01",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.sponsor.sponsorship",
                        "friendly_name": "Sponsorship"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.sponsorship.to",
                        "friendly_name": "To"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.sponsor . \n?x1 :type.object.type :business.sponsorship . \nFILTER (?x2 >= \"2009-01-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYearMonth>)\n?x0 :business.sponsor.sponsorship ?x1 . \n?x1 :business.sponsorship.to ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.sponsor (JOIN business.sponsor.sponsorship (ge business.sponsorship.to 2009-01^^http://www.w3.org/2001/XMLSchema#gYearMonth)))"
        }
    },
    "425": {
        "generations": "which sport has Toru Kamikawa as an official??",
        "ori_data_item": {
            "qid": 2102130015000,
            "question": "toru kamikawa is which sport's official?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vx4",
                    "entity_name": "Football"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sport",
                        "class": "sports.sport",
                        "friendly_name": "Sport",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dph7n",
                        "class": "sports.sports_official",
                        "friendly_name": "Toru Kamikawa",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sport.officials",
                        "friendly_name": "Officials"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sport . \nVALUES ?x1 { :m.0dph7n } \n?x0 :sports.sport.officials ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sport (JOIN sports.sport.officials m.0dph7n))"
        }
    },
    "426": {
        "generations": "what event is included in the 1985 kenilworth road riot??",
        "ori_data_item": {
            "qid": 2102985011000,
            "question": "1985 kenilworth road riot is a part of what event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f383p",
                    "entity_name": "1984\u201385 FA Cup"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.event",
                        "class": "time.event",
                        "friendly_name": "Event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.064p75x",
                        "class": "time.event",
                        "friendly_name": "1985 Kenilworth Road riot",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.includes_event",
                        "friendly_name": "Includes event"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.event . \nVALUES ?x1 { :m.064p75x } \n?x0 :time.event.includes_event ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.event (JOIN time.event.includes_event m.064p75x))"
        }
    },
    "427": {
        "generations": "what products contain l-ascorbic acid as an ingredient??",
        "ori_data_item": {
            "qid": 2101857004000,
            "question": "name the product ingredient that includes l-ascorbic acid.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065s739",
                    "entity_name": "Sodium ascorbate and ascorbic acid"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.product_ingredient",
                        "class": "business.product_ingredient",
                        "friendly_name": "Product ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0y44",
                        "class": "business.product_ingredient",
                        "friendly_name": "l-ascorbic acid",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.product_ingredient.ingredients",
                        "friendly_name": "Ingredients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_ingredient . \nVALUES ?x1 { :m.0y44 } \n?x0 :business.product_ingredient.ingredients ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.product_ingredient (JOIN business.product_ingredient.ingredients m.0y44))"
        }
    },
    "428": {
        "generations": "what is the pregnancy category of drugs regulated by the food & drug administration??",
        "ori_data_item": {
            "qid": 2100662001000,
            "question": "what is the drug pregnancy category for regulating authority food & drug administration?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048_5n3",
                    "entity_name": "Pregnancy Category A (FDA)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048_5sh",
                    "entity_name": "Pregnancy Category X (FDA)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048_5px",
                    "entity_name": "Pregnancy Category B (FDA)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048_lgl",
                    "entity_name": "Pregnancy Category C (FDA)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048_rw7",
                    "entity_name": "Pregnancy Category D (FDA)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_pregnancy_category",
                        "class": "medicine.drug_pregnancy_category",
                        "friendly_name": "Drug pregnancy category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.032mx",
                        "class": "medicine.drug_regulating_authority",
                        "friendly_name": "food & drug administration",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_pregnancy_category.regulating_authority",
                        "friendly_name": "Regulating authority"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_pregnancy_category . \nVALUES ?x1 { :m.032mx } \n?x0 :medicine.drug_pregnancy_category.regulating_authority ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_pregnancy_category (JOIN medicine.drug_pregnancy_category.regulating_authority m.032mx))"
        }
    },
    "429": {
        "generations": "what is the name of the manufactured drug form that started marketing on july 15, 1990??",
        "ori_data_item": {
            "qid": 2100802007000,
            "question": "name the manufactured drug form which has a marketing start date of jul. the 15th, 1990.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqmb7s",
                    "entity_name": "Antacid Regular Strength 200/20/200 liquid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqp05z",
                    "entity_name": "Good Sense Antacid Regular Strength 200/20/200 liquid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqk90",
                    "entity_name": "Antiseptic Mouth Rinse 0.092/0.042/0.06/0.064 mouthwash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jxt8sj",
                    "entity_name": "Good Sense Nicotine 4 chewing gum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqmdrc",
                    "entity_name": "Original Antiseptic 0.092/0.042/0.06/0.064 mouthwash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqn364",
                    "entity_name": "Topcare Antacid Plus Anti Gas 400/400/40 liquid"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1990-07-15^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Jul. the 15th, 1990",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.marketing_start_date",
                        "friendly_name": "Marketing start date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { \"1990-07-15-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :medicine.manufactured_drug_form.marketing_start_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.marketing_start_date 1990-07-15^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "430": {
        "generations": "what recurring award ceremony has the most recent date of final occurrence??",
        "ori_data_item": {
            "qid": 2103588003000,
            "question": "which annual award ceremony is the last one held each year?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0znmc9_",
                    "entity_name": "The Golden Globe Awards Ceremony"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "award.recurring_award_ceremony",
                        "class": "award.recurring_award_ceremony",
                        "friendly_name": "Recurring award ceremony",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.recurring_event.date_of_final_occurance",
                        "friendly_name": "Date of final occurrence"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.recurring_award_ceremony . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :award.recurring_award_ceremony . \n?y0 :time.recurring_event.date_of_final_occurance ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.recurring_event.date_of_final_occurance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMAX award.recurring_award_ceremony time.recurring_event.date_of_final_occurance)"
        }
    },
    "431": {
        "generations": "which book edition was read by robin mclaurin williams??",
        "ori_data_item": {
            "qid": 2102559010000,
            "question": "which book edition was robin mclaurin williams a reader for?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.087kpqg",
                    "entity_name": "Pecos Bill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07v_cwm",
                    "entity_name": "Pecos Bill"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dzf_",
                        "class": "book.audio_book_reader",
                        "friendly_name": "robin mclaurin williams",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition.reader",
                        "friendly_name": "Reader (audio book)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition . \nVALUES ?x1 { :m.0dzf_ } \n?x0 :book.book_edition.reader ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition (JOIN book.book_edition.reader m.0dzf_))"
        }
    },
    "432": {
        "generations": "how many comic book characters primarily appear in the Watchmen universe??",
        "ori_data_item": {
            "qid": 2103793024000,
            "question": "how many comic book characters appear primarily in the watchmen?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "5"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_character",
                        "class": "comic_books.comic_book_character",
                        "friendly_name": "Comic Book Character",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hprqs2",
                        "class": "comic_books.comic_book_fictional_universe",
                        "friendly_name": "Watchmen",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe",
                        "friendly_name": "Characters Primarily Appearing In This Universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_character . \nVALUES ?x1 { :m.0hprqs2 } \n?x1 :comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(COUNT (AND comic_books.comic_book_character (JOIN (R comic_books.comic_book_fictional_universe.characters_primarily_appearing_in_this_universe) m.0hprqs2)))"
        }
    },
    "433": {
        "generations": "who owns the newspaper that is affiliated with oxford university's school newspaper??",
        "ori_data_item": {
            "qid": 3202339010000,
            "question": "the oxford university school newspaper is owned by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05t53r",
                    "entity_name": "Oxford Student Publications Limited"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pwp5",
                    "entity_name": "Oxford University Student Union"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.newspaper_owner",
                        "class": "book.newspaper_owner",
                        "friendly_name": "Newspaper Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.school_newspaper",
                        "class": "education.school_newspaper",
                        "friendly_name": "School newspaper",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07tgn",
                        "class": "education.educational_institution",
                        "friendly_name": "oxford university",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "book.newspaper.owner",
                        "friendly_name": "Owner"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "education.school_newspaper.school",
                        "friendly_name": "School"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.newspaper_owner . \n?x1 :type.object.type :education.school_newspaper . \nVALUES ?x2 { :m.07tgn } \n?x1 :book.newspaper.owner ?x0 . \n?x1 :education.school_newspaper.school ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book",
                "education"
            ],
            "s_expression": "(AND book.newspaper_owner (JOIN (R book.newspaper.owner) (JOIN education.school_newspaper.school m.07tgn)))"
        }
    },
    "434": {
        "generations": "what is the legal status of gaba 6 liquid and nitroglycerin 200 pellet in medicine??",
        "ori_data_item": {
            "qid": 3201695002000,
            "question": "what is the legal drug status of gaba 6 liquid and nitroglycerin 200 pellet?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b86_",
                    "entity_name": "Over-the-counter drug"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqz202",
                    "entity_name": "Not evaluated by FDA"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_legal_status",
                        "class": "medicine.drug_legal_status",
                        "friendly_name": "Drug legal status",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqs3pp",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Gaba 6 liquid",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hqtjz7",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Nitroglycerin 200 pellet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "medicine.drug_formulation.legal_status",
                        "friendly_name": "Legal status"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "medicine.drug_formulation.legal_status",
                        "friendly_name": "Legal status"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_legal_status . \nVALUES ?x1 { :m.0hqs3pp } \nVALUES ?x2 { :m.0hqtjz7 } \n?x1 :medicine.drug_formulation.legal_status ?x0 . \n?x2 :medicine.drug_formulation.legal_status ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_legal_status (AND (JOIN (R medicine.drug_formulation.legal_status) m.0hqs3pp) (JOIN (R medicine.drug_formulation.legal_status) m.0hqtjz7)))"
        }
    },
    "435": {
        "generations": "what drugs are classified as class B in terms of legal status??",
        "ori_data_item": {
            "qid": 2101513002000,
            "question": "which drug has the legal status of class b?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0256v",
                    "entity_name": "Codeine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_0j",
                    "entity_name": "Amphetamine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug",
                        "class": "medicine.drug",
                        "friendly_name": "Drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04d1km4",
                        "class": "medicine.drug_legal_status",
                        "friendly_name": "Class B",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug.legal_status",
                        "friendly_name": "Legal status"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug . \nVALUES ?x1 { :m.04d1km4 } \n?x0 :medicine.drug.legal_status ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug (JOIN medicine.drug.legal_status m.04d1km4))"
        }
    },
    "436": {
        "generations": "how many publishing companies have Artima Inc. as their imprint??",
        "ori_data_item": {
            "qid": 2104266013000,
            "question": "what is the total numbers of publishers that has artima inc. imprint?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.publishing_company",
                        "class": "book.publishing_company",
                        "friendly_name": "Publisher",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c4y7tz",
                        "class": "book.publishing_company",
                        "friendly_name": "Artima Inc.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.publishing_company.imprint_of",
                        "friendly_name": "Imprint of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.publishing_company . \nVALUES ?x1 { :m.0c4y7tz } \n?x0 :book.publishing_company.imprint_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(COUNT (AND book.publishing_company (JOIN book.publishing_company.imprint_of m.0c4y7tz)))"
        }
    },
    "437": {
        "generations": "which magazine issue features interior illustrations by benjamin rivers??",
        "ori_data_item": {
            "qid": 2100553007000,
            "question": "benjamin rivers has interior illustrations in which magazine issue?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t5dp5",
                    "entity_name": "The Gamer's Quarter Issue 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t5dpr",
                    "entity_name": "The Gamer's Quarter Issue 7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t5dpv",
                    "entity_name": "The Gamer's Quarter Issue 8"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.magazine_issue",
                        "class": "book.magazine_issue",
                        "friendly_name": "Magazine Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04t5fyb",
                        "class": "book.illustrator",
                        "friendly_name": "Benjamin Rivers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.magazine_issue.interior_illustrations_by",
                        "friendly_name": "Interior illustrations by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_issue . \nVALUES ?x1 { :m.04t5fyb } \n?x0 :book.magazine_issue.interior_illustrations_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.magazine_issue (JOIN book.magazine_issue.interior_illustrations_by m.04t5fyb))"
        }
    },
    "438": {
        "generations": "which TV series episode includes the segment \"Birdwalk Empire\"??",
        "ori_data_item": {
            "qid": 2101923011000,
            "question": "name the tv episode which has the segments of birdwalk empire.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n3nrb4",
                    "entity_name": "Me Am What Me Am"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n3nrdl",
                    "entity_name": "Telly the Tiebreaker (repeat)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_episode",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "TV Episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zbkr69",
                        "class": "tv.tv_episode_segment",
                        "friendly_name": "Birdwalk Empire",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_episode.segments",
                        "friendly_name": "Segments"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { :m.0zbkr69 } \n?x0 :tv.tv_series_episode.segments ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.segments m.0zbkr69))"
        }
    },
    "439": {
        "generations": "what general election includes the indian general election of 1991??",
        "ori_data_item": {
            "qid": 2102113007000,
            "question": "indian general election, 1991 is the turnout of which general election?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_5tvv",
                    "entity_name": "Indian general election, 1991"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.general_election",
                        "class": "government.general_election",
                        "friendly_name": "General election",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05zkvh4",
                        "class": "government.general_election",
                        "friendly_name": "Indian general election, 1991",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.general_election.includes_general_elections",
                        "friendly_name": "Includes general election"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.general_election . \nVALUES ?x1 { :m.05zkvh4 } \n?x0 :government.general_election.includes_general_elections ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.general_election (JOIN government.general_election.includes_general_elections m.05zkvh4))"
        }
    },
    "440": {
        "generations": "which sports team has the colors of chocolates??",
        "ori_data_item": {
            "qid": 2102289010000,
            "question": "what sports teams colors are chocolates?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hz81",
                    "entity_name": "Whitehaven RLFC"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team",
                        "class": "sports.sports_team",
                        "friendly_name": "Sports Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06_y07l",
                        "class": "visual_art.color",
                        "friendly_name": "chocolates",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_team.colors",
                        "friendly_name": "Colors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team . \nVALUES ?x1 { :m.06_y07l } \n?x0 :sports.sports_team.colors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team (JOIN sports.sports_team.colors m.06_y07l))"
        }
    },
    "441": {
        "generations": "which military person participated in the battle of r\u00edo salado??",
        "ori_data_item": {
            "qid": 2100817001000,
            "question": "which military person fought in the battle of r\u00edo salado?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8zv",
                    "entity_name": "Alfonso XI of Castile"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "military.military_person",
                        "class": "military.military_person",
                        "friendly_name": "Military Person",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06b6fd",
                        "class": "military.military_conflict",
                        "friendly_name": "Battle of R\u00edo Salado",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "military.military_person.participated_in_conflicts",
                        "friendly_name": "Participated in conflicts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_person . \nVALUES ?x1 { :m.06b6fd } \n?x0 :military.military_person.participated_in_conflicts ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "military"
            ],
            "s_expression": "(AND military.military_person (JOIN military.military_person.participated_in_conflicts m.06b6fd))"
        }
    },
    "442": {
        "generations": "who is the martial artist with the earliest end date of education and is well known for practicing taekwon do??",
        "ori_data_item": {
            "qid": 4302507014000,
            "question": "who was the first student practitioner of taekwon do?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrwvx",
                    "entity_name": "Chris Maden"
                }
            ],
            "function": "argmin",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_artist",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "Martial Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07gyv",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "taekwon do",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "martial_arts.martial_art.well_known_practitioner",
                        "friendly_name": "Practitioner"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.person.education",
                        "friendly_name": "Education"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "education.education.end_date",
                        "friendly_name": "End Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_artist . \nVALUES ?x1 { :m.07gyv } \n?x2 :type.object.type :education.education . \n{\nSELECT (MIN(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :martial_arts.martial_artist . \nVALUES ?y1 { :m.07gyv } \n?y2 :type.object.type :education.education . \n?y1 :martial_arts.martial_art.well_known_practitioner ?y0 . \n?y0 :people.person.education ?y2 . \n?y2 :education.education.end_date ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :martial_arts.martial_art.well_known_practitioner ?x0 . \n?x0 :people.person.education ?x2 . \n?x2 :education.education.end_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "martial_arts",
                "education",
                "people"
            ],
            "s_expression": "(ARGMIN (AND martial_arts.martial_artist (JOIN (R martial_arts.martial_art.well_known_practitioner) m.07gyv)) (JOIN people.person.education education.education.end_date))"
        }
    },
    "443": {
        "generations": "which river flows through the city of Pampierstad??",
        "ori_data_item": {
            "qid": 2100274005000,
            "question": "what river runs through the german city of pampierstad?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07wlt5",
                    "entity_name": "Harts River"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.river",
                        "class": "geography.river",
                        "friendly_name": "River",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k2f0wp",
                        "class": "location.citytown",
                        "friendly_name": "Pampierstad",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.river.cities",
                        "friendly_name": "Cities"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.river . \nVALUES ?x1 { :m.0k2f0wp } \n?x0 :geography.river.cities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.river (JOIN geography.river.cities m.0k2f0wp))"
        }
    },
    "444": {
        "generations": "how many computer designers have designed computers with freddie williams??",
        "ori_data_item": {
            "qid": 3205906016000,
            "question": "how many key designers are on the computers that freddie williams designed?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer_designer",
                        "class": "computer.computer_designer",
                        "friendly_name": "Computer Designer",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.computer",
                        "class": "computer.computer",
                        "friendly_name": "Computer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.044krf",
                        "class": "computer.computer_designer",
                        "friendly_name": "freddie williams",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.computer.key_designers",
                        "friendly_name": "Key Designers"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "computer.computer_designer.computers_designed",
                        "friendly_name": "Computers Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_designer . \n?x1 :type.object.type :computer.computer . \nVALUES ?x2 { :m.044krf } \n?x1 :computer.computer.key_designers ?x0 . \n?x2 :computer.computer_designer.computers_designed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(COUNT (AND computer.computer_designer (JOIN (R computer.computer.key_designers) (JOIN (R computer.computer_designer.computers_designed) m.044krf))))"
        }
    },
    "445": {
        "generations": "what TV series episode aired on January 15, 1997??",
        "ori_data_item": {
            "qid": 2102032007000,
            "question": "which tv episode has the original air date of 1997-01-15?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dffvf",
                    "entity_name": "Legacy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011m1nrk",
                    "entity_name": "Testing Times"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dnmc7",
                    "entity_name": "Episode 2068"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_lqm18",
                    "entity_name": "Larry Flynt: Fighting Dirty"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07jzhh9",
                    "entity_name": "Episode 25"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07lcvs2",
                    "entity_name": "Series 2, Show 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07lpm4p",
                    "entity_name": "Series 1, Show 8"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xnsf7",
                    "entity_name": "Ep. #7954"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fvkjb",
                    "entity_name": "Alter Ego"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl4vbb",
                    "entity_name": "Series 26, Show 8"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z1bzf",
                    "entity_name": "Joe's Kept Secret"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ycz8s",
                    "entity_name": "Ep. #2461"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djm5j",
                    "entity_name": "Child's Play"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dcqww",
                    "entity_name": "Little Man Date"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07lfmd8",
                    "entity_name": "The Odds Couple"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dg2hj",
                    "entity_name": "Life Without Marlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yl5s6",
                    "entity_name": "Ep. #6041"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ghn23w",
                    "entity_name": "Episode 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l6dvk",
                    "entity_name": "Season 2, Episode 98"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yc9f8",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mrcls",
                    "entity_name": "Series 2, Show 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07m4k2r",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07j_jd7",
                    "entity_name": "Clive Mantle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ltl6x",
                    "entity_name": "Occupied Village! Shishio's Evil Shadow, Ever Closer!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mmb0j",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6ltdj",
                    "entity_name": "Episode 1x008"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ddpgs",
                    "entity_name": "Berserker"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07knpb6",
                    "entity_name": "A Foursome is Not Necessarily a Good Thing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k3v97",
                    "entity_name": "Paul Gutowski, Doug Fitch, Julie Johnson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079kllv",
                    "entity_name": "Rainbow Serpent, Lake Monster, Killer Wolves"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xp__4",
                    "entity_name": "Make a Wish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k02y6",
                    "entity_name": "Series 1, Show 5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ghmlz1",
                    "entity_name": "Episode 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ng510",
                    "entity_name": "Show #0733"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g97dj5",
                    "entity_name": "Season 2, Episode 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dnrw8",
                    "entity_name": "Hosed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xd2qq",
                    "entity_name": "Hello/Goodbye"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dfkyn",
                    "entity_name": "Significant Others"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dkgy4",
                    "entity_name": "Pearls Before Swine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dnyxq",
                    "entity_name": "Wheels of Misfortune"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07n4scv",
                    "entity_name": "Season 10, Episode 68"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05djh9v",
                    "entity_name": "Time and Tide"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z3d5s",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z3s3v",
                    "entity_name": "Led Zeppelin Boxed Set"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gfyml0",
                    "entity_name": "Wed 15 Jan, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y_zq3",
                    "entity_name": "Why Did the Crawfish Cross the Road?"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07n0ft2",
                    "entity_name": "Episode 1920"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06x3lg7",
                    "entity_name": "Episode 1837"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ddbp7",
                    "entity_name": "Hear No Evil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yyc97",
                    "entity_name": "Season 22, Episode 11"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079dnsx",
                    "entity_name": "Series 1, Episode 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z1j38",
                    "entity_name": "Ep. 203"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07knsvg",
                    "entity_name": "Ruined nation, Slur"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dt7h9",
                    "entity_name": "Series 2 Episode 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yvkbb",
                    "entity_name": "Season 1, Episode 13"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zbnty",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wy_mg",
                    "entity_name": "January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ln1_9s",
                    "entity_name": "Kissing Cousins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dh5q4",
                    "entity_name": "Grace of Wrath"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dmvml",
                    "entity_name": "Episode 1.008"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07962yg",
                    "entity_name": "Wednesday, January 15, 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wxm2k",
                    "entity_name": "Season 44, Episode 93"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dqhlr",
                    "entity_name": "Phantom of C.U."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jrcr72",
                    "entity_name": "Arrows in the Tennengau"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ynn9p",
                    "entity_name": "January 15, 1997"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_episode",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "TV Episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1997-01-15^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "1997-01-15",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_episode.air_date",
                        "friendly_name": "Original air date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { \"1997-01-15-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :tv.tv_series_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.air_date 1997-01-15^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "446": {
        "generations": "what type of cloud has a maximum altitude of 2000.0 meters??",
        "ori_data_item": {
            "qid": 2101140001000,
            "question": "2000.0 is the maximum alititude of what cloud?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.016873",
                    "entity_name": "Stratus"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.cloud",
                        "class": "meteorology.cloud",
                        "friendly_name": "Cloud",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2000.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "2000.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.cloud.maximum_altitude_m",
                        "friendly_name": "Maximum Altitude"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.cloud . \nVALUES ?x1 { \"2000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :meteorology.cloud.maximum_altitude_m ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.cloud (JOIN meteorology.cloud.maximum_altitude_m 2000.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "447": {
        "generations": "what drug class includes dihydrofolate reductase inhibitor antibacterial??",
        "ori_data_item": {
            "qid": 3202541002000,
            "question": "dihydrofolate reductase inhibitor antibacterial is listed in what class of drugs?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xxvj",
                    "entity_name": "Polymyxin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqz52q",
                    "entity_name": "Sulfonamide Antimicrobial"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_class",
                        "class": "medicine.drug_class",
                        "friendly_name": "Drug class",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.drug",
                        "class": "medicine.drug",
                        "friendly_name": "Drug",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hqyz4m",
                        "class": "medicine.drug_class",
                        "friendly_name": "Dihydrofolate Reductase Inhibitor Antibacterial",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_class.drugs",
                        "friendly_name": "Drugs"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.drug.drug_class",
                        "friendly_name": "Pharmacological class"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_class . \n?x1 :type.object.type :medicine.drug . \nVALUES ?x2 { :m.0hqyz4m } \n?x0 :medicine.drug_class.drugs ?x1 . \n?x1 :medicine.drug.drug_class ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_class (JOIN medicine.drug_class.drugs (JOIN medicine.drug.drug_class m.0hqyz4m)))"
        }
    },
    "448": {
        "generations": "which field of study is related to computer science through academic departments??",
        "ori_data_item": {
            "qid": 3205516014000,
            "question": "which field of study has the same department as computer science?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lfdq",
                    "entity_name": "Computer Science and Engineering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xbw",
                    "entity_name": "Computer architecture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01m3v",
                    "entity_name": "Computer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01mkq",
                    "entity_name": "Computer Science"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ybf6r",
                    "entity_name": "Computer graphics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xfp",
                    "entity_name": "Computer graphics (images)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03j0x",
                    "entity_name": "Human\u2013computer interaction"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01q2h",
                    "entity_name": "Computer networking"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0db86",
                    "entity_name": "Computer Engineering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_3v3n",
                    "entity_name": "Computer Applications"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01svq",
                    "entity_name": "Computer cluster"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.field_of_study",
                        "class": "education.field_of_study",
                        "friendly_name": "Field of study",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01vtwr",
                        "class": "education.field_of_study",
                        "friendly_name": "computer science",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.department.field",
                        "friendly_name": "Field"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "education.field_of_study.academic_departments",
                        "friendly_name": "Academic departments"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.field_of_study . \n?x1 :type.object.type :education.department . \nVALUES ?x2 { :m.01vtwr } \n?x1 :education.department.field ?x0 . \n?x2 :education.field_of_study.academic_departments ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.field_of_study (JOIN (R education.department.field) (JOIN (R education.field_of_study.academic_departments) m.01vtwr)))"
        }
    },
    "449": {
        "generations": "which mountain has an elevation of 2602.0??",
        "ori_data_item": {
            "qid": 2100210010000,
            "question": "what mountain has an elevation of 2602.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hynxmn",
                    "entity_name": "\u013dadov\u00e1 kopa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122y5f64",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sy8cp",
                    "entity_name": "Utopia Mountain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cc8kbn",
                    "entity_name": "Mount Helen"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2602.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "2602.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.elevation",
                        "friendly_name": "Elevation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { \"2602.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :geography.mountain.elevation ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.elevation 2602.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "450": {
        "generations": "what is an example of a building that belongs to the architectural style mentioned??",
        "ori_data_item": {
            "qid": 2100937005000,
            "question": "rath packing company administration building is an example of which type of architectural style?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dx8jz",
                    "entity_name": "Late Gothic Revival"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architectural_style",
                        "class": "architecture.architectural_style",
                        "friendly_name": "Architectural style",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k2lmht",
                        "class": "architecture.structure",
                        "friendly_name": "Rath Packing Company Administration Building",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.architectural_style.examples",
                        "friendly_name": "Examples"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architectural_style . \nVALUES ?x1 { :m.0k2lmht } \n?x0 :architecture.architectural_style.examples ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.architectural_style (JOIN architecture.architectural_style.examples m.0k2lmht))"
        }
    },
    "451": {
        "generations": "what distilled spirit is infused with cinnamon??",
        "ori_data_item": {
            "qid": 2101736002000,
            "question": "what infused spirit has cinnamon infusion?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04x9wp",
                    "entity_name": "Becherovka"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.infused_spirit",
                        "class": "distilled_spirits.infused_spirit",
                        "friendly_name": "Infused spirit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0f0ch",
                        "class": "food.ingredient",
                        "friendly_name": "Cinnamon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.infused_spirit.infusion",
                        "friendly_name": "Infusion"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.infused_spirit . \nVALUES ?x1 { :m.0f0ch } \n?x0 :distilled_spirits.infused_spirit.infusion ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.infused_spirit (JOIN distilled_spirits.infused_spirit.infusion m.0f0ch))"
        }
    },
    "452": {
        "generations": "what is the tropical cyclone category for a storm surge of at least 2.7??",
        "ori_data_item": {
            "qid": 2102148002000,
            "question": "2.7 is the minimum storm surge of which tropical cyclone category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xs1lf",
                    "entity_name": "Category 3 Hurricane (SSHS)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2.7^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "2.7",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_category.min_storm_surge",
                        "friendly_name": "Minimum storm surge"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x1 { \"2.7\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :meteorology.tropical_cyclone_category.min_storm_surge ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_category (JOIN meteorology.tropical_cyclone_category.min_storm_surge 2.7^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "453": {
        "generations": "which lake has a surface elevation of 0.0??",
        "ori_data_item": {
            "qid": 2100950003000,
            "question": "0.0 is the surface elevation of what lake?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02tgyd",
                    "entity_name": "Tuggerah Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ryslm5",
                    "entity_name": "Smiths Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynsgvw",
                    "entity_name": "Lake Bacalar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glglt",
                    "entity_name": "Nakaumi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122kzj87",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1216fpdq",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121c9qs7",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4n7z",
                    "entity_name": "Gothensee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h49gj",
                    "entity_name": "St Leonards Salt Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06x7_z",
                    "entity_name": "Lake Voulismeni"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rfd11",
                    "entity_name": "Lake Lesina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mqv0y",
                    "entity_name": "Schloonsee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.032v4g",
                    "entity_name": "J\u00f6kuls\u00e1rl\u00f3n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h457q",
                    "entity_name": "Lake Shinji"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01ncqr",
                    "entity_name": "Lake Maracaibo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hr44ky",
                    "entity_name": "Wallis Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f1rm5",
                    "entity_name": "\u00c9tang de Thau"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07d4dn",
                    "entity_name": "Lagos Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0404mm3",
                    "entity_name": "Lake Forsyth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ms4c0",
                    "entity_name": "\u00c9tang de Leucate"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qnq34",
                    "entity_name": "Lake Jesup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ydcc",
                    "entity_name": "Loch Ryan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025yrc7",
                    "entity_name": "Larnaca Salt Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027mg6p",
                    "entity_name": "Lake Tarpon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zkjg3",
                    "entity_name": "Lake Abashiri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025_4rt",
                    "entity_name": "Limassol Salt Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kcwb",
                    "entity_name": "Hachir\u014dgata"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zynkg",
                    "entity_name": "Loch Alsh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h4v2g",
                    "entity_name": "Windebyer Noor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cg3r3",
                    "entity_name": "Nedrevatnet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g56t91",
                    "entity_name": "Lake Beloslav"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.123143l6",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cz87b7",
                    "entity_name": "Petrel Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mqv7t",
                    "entity_name": "Selker Noor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.097l7f",
                    "entity_name": "Selawik Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011x3h_h",
                    "entity_name": "\u00c9tang du M\u00e9jean"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mtgpd",
                    "entity_name": "Kachliner See"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05r4pj",
                    "entity_name": "Vembanad"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0641xy6",
                    "entity_name": "Trustom Pond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06607fk",
                    "entity_name": "Ninigret Pond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw_hn2",
                    "entity_name": "Quicksand Pond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0116yx8p",
                    "entity_name": "Lake Munmorah"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09xxt6",
                    "entity_name": "Prien Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1226mfl_",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122t1bd6",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121cs3l3",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0287yj1",
                    "entity_name": "Ingraham Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h3f_m",
                    "entity_name": "Haddebyer Noor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h3k_b",
                    "entity_name": "Schmollensee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3s1g1",
                    "entity_name": "Moulting Lagoon Important Bird Area"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sggjtg",
                    "entity_name": "Budgewoi Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079p83",
                    "entity_name": "Glenrock Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swl922",
                    "entity_name": "Avoca Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.12214gjhq",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.035c8s",
                    "entity_name": "Myall Lakes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gr_87",
                    "entity_name": "Lake Hamana"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlmsrt",
                    "entity_name": "Terrigal Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swpwls",
                    "entity_name": "Wamberal Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047m8yw",
                    "entity_name": "Lake El Golfete"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p309m",
                    "entity_name": "Selliner See (R\u00fcgen)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.120t4c6_",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmdjv8",
                    "entity_name": "Lake T\u014dg\u014d"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g9g9y",
                    "entity_name": "Lake Ogawara"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121w6fy4",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n8zgt7",
                    "entity_name": "Lake Suigetsu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bkp6_",
                    "entity_name": "Lake Varna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mwv7h",
                    "entity_name": "\u00c9tang de l'Or"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02ph26d",
                    "entity_name": "Lake Sinoe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gvrbtm",
                    "entity_name": "Lake Khanskoye"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cg76c",
                    "entity_name": "Straumfjordvatnet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dfdtz",
                    "entity_name": "Lake Macquarie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04z_c6y",
                    "entity_name": "Lake Saroma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.121b6vj4",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05q9cg5",
                    "entity_name": "Pink Lake"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.lake",
                        "class": "geography.lake",
                        "friendly_name": "Lake",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.lake.surface_elevation",
                        "friendly_name": "Surface elevation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \nVALUES ?x1 { \"0.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :geography.lake.surface_elevation ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.lake (JOIN geography.lake.surface_elevation 0.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "454": {
        "generations": "which visual artist created The Back Series art series??",
        "ori_data_item": {
            "qid": 2102799001000,
            "question": "which artist is the creator of the back series?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gct_",
                    "entity_name": "Henri Matisse"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_artist",
                        "class": "visual_art.visual_artist",
                        "friendly_name": "Visual Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gj8w8y",
                        "class": "visual_art.art_series",
                        "friendly_name": "The Back Series",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_artist.art_series",
                        "friendly_name": "Art Series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_artist . \nVALUES ?x1 { :m.0gj8w8y } \n?x0 :visual_art.visual_artist.art_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_artist (JOIN visual_art.visual_artist.art_series m.0gj8w8y))"
        }
    },
    "455": {
        "generations": "what fictional organization has longbottom as a member and is a sub-organization in hogwarts??",
        "ori_data_item": {
            "qid": 3203537006000,
            "question": "longbottom belongs to what house organization at hogwarts?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vhpv1",
                    "entity_name": "Gryffindor House"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01kg7x",
                        "class": "cvg.game_character",
                        "friendly_name": "longbottom",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cb3n",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "hogwarts",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization.members",
                        "friendly_name": "Members"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "fictional_universe.fictional_organization.sub_organization_in_fiction",
                        "friendly_name": "Sub-organization in fiction"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x1 { :m.01kg7x } \nVALUES ?x2 { :m.0cb3n } \n?x0 :fictional_universe.fictional_organization.members ?x1 . \n?x2 :fictional_universe.fictional_organization.sub_organization_in_fiction ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization (AND (JOIN fictional_universe.fictional_organization.members m.01kg7x) (JOIN (R fictional_universe.fictional_organization.sub_organization_in_fiction) m.0cb3n)))"
        }
    },
    "456": {
        "generations": "what is the most recent quotation and when was it made??",
        "ori_data_item": {
            "qid": 2105005005000,
            "question": "what is the most recent quote?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012ngtws",
                    "entity_name": "A red nose is the clown's mask and my moustache is mine."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012ngtx3",
                    "entity_name": "What I wear on and off stage is my mask. You see, a mask doesn't hide you, it exposes you."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012ngtx9",
                    "entity_name": "The first rule on breaking a rule is to know everything about the rule."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012ngtct",
                    "entity_name": "Realism is criminal"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.quotation.date",
                        "friendly_name": "Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :media_common.quotation . \n?y0 :media_common.quotation.date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :media_common.quotation.date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(ARGMAX media_common.quotation media_common.quotation.date)"
        }
    },
    "457": {
        "generations": "what asteroid family does 222 lucia belong to??",
        "ori_data_item": {
            "qid": 2102479006000,
            "question": "the asteroid 222 lucia belongs to which asteroid family?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0521fw",
                    "entity_name": "Themis family"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.asteroid_family",
                        "class": "astronomy.asteroid_family",
                        "friendly_name": "Asteroid Family",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.057zj4",
                        "class": "astronomy.asteroid",
                        "friendly_name": "222 Lucia",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.asteroid_family.asteroid_family_member",
                        "friendly_name": "Asteroid Family Member"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asteroid_family . \nVALUES ?x1 { :m.057zj4 } \n?x0 :astronomy.asteroid_family.asteroid_family_member ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.asteroid_family (JOIN astronomy.asteroid_family.asteroid_family_member m.057zj4))"
        }
    },
    "458": {
        "generations": "which satellite is primarily used for research projects??",
        "ori_data_item": {
            "qid": 2102704000000,
            "question": "research project is primarily used in which satellite?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_5tqc",
                    "entity_name": "Omid"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.satellite",
                        "class": "spaceflight.satellite",
                        "friendly_name": "Satellite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06cs1",
                        "class": "spaceflight.satellite_type",
                        "friendly_name": "research project",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.satellite.primary_use",
                        "friendly_name": "Primary use"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.satellite . \nVALUES ?x1 { :m.06cs1 } \n?x0 :spaceflight.satellite.primary_use ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.satellite (JOIN spaceflight.satellite.primary_use m.06cs1))"
        }
    },
    "459": {
        "generations": "what wine is produced by swanson vineyards and has the appellation oakville ava??",
        "ori_data_item": {
            "qid": 3202841015000,
            "question": "name the wine of the swanson vineyards that has appellation of oakville ava?.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.044818d",
                    "entity_name": "2004 Swanson \"Alexis, Oakville Gold Coast Vineyard\" Oakville Estate Cabernet Sauvignon"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine",
                        "class": "wine.wine",
                        "friendly_name": "Wine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03h98cq",
                        "class": "wine.wine_producer",
                        "friendly_name": "Swanson Vineyards",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03cc6l_",
                        "class": "wine.appellation",
                        "friendly_name": "Oakville AVA",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "wine.wine_producer.wines",
                        "friendly_name": "Wines"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "wine.wine.appellation",
                        "friendly_name": "Appellation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.03h98cq } \nVALUES ?x2 { :m.03cc6l_ } \n?x1 :wine.wine_producer.wines ?x0 . \n?x0 :wine.wine.appellation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_producer.wines) m.03h98cq) (JOIN wine.wine.appellation m.03cc6l_)))"
        }
    },
    "460": {
        "generations": "who founded the fictional organization that pairs hand-picked theban shock troops??",
        "ori_data_item": {
            "qid": 3201500014000,
            "question": "which fictional organization founder is the founder of an organization in fiction that has a type pairs of hand-picked theban shock troops?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bxj80p",
                    "entity_name": "Tempus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0chkwkl",
                    "entity_name": "Gorgidas"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization_founder",
                        "class": "fictional_universe.fictional_organization_founder",
                        "friendly_name": "Fictional Organization Founder",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0c0k_27",
                        "class": "fictional_universe.fictional_organization_type",
                        "friendly_name": "pairs of hand-picked Theban shock troops",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_organization.fictional_organization_founder",
                        "friendly_name": "Fictional Organization Founder"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization_type.organizations",
                        "friendly_name": "Organizations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization_founder . \n?x1 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x2 { :m.0c0k_27 } \n?x1 :fictional_universe.fictional_organization.fictional_organization_founder ?x0 . \n?x2 :fictional_universe.fictional_organization_type.organizations ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization_founder (JOIN (R fictional_universe.fictional_organization.fictional_organization_founder) (JOIN (R fictional_universe.fictional_organization_type.organizations) m.0c0k_27)))"
        }
    },
    "461": {
        "generations": "which ride designer has designed rides with werner stengel??",
        "ori_data_item": {
            "qid": 3205345002000,
            "question": "name the person who designs roller coaster with werner stengel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rmz8",
                    "entity_name": "Paramount Parks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gvyp",
                    "entity_name": "Walt Disney Imagineering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01l1cx",
                    "entity_name": "Six Flags"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bp2t5",
                    "entity_name": "John Wardley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xvkp",
                    "entity_name": "Anton Schwarzkopf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r8132",
                    "entity_name": "Universal Creative"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kczyw",
                    "entity_name": "Stengel Engineering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dpmr9",
                    "entity_name": "William Cobb"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_designer",
                        "class": "amusement_parks.ride_designer",
                        "friendly_name": "Amusement Ride Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster",
                        "class": "amusement_parks.roller_coaster",
                        "friendly_name": "Roller Coaster",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06vnh2",
                        "class": "amusement_parks.ride_designer",
                        "friendly_name": "Werner Stengel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "amusement_parks.ride.designer",
                        "friendly_name": "Designer"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "amusement_parks.ride_designer.rides",
                        "friendly_name": "Rides Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_designer . \n?x1 :type.object.type :amusement_parks.roller_coaster . \nVALUES ?x2 { :m.06vnh2 } \n?x1 :amusement_parks.ride.designer ?x0 . \n?x2 :amusement_parks.ride_designer.rides ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride_designer (JOIN (R amusement_parks.ride.designer) (JOIN (R amusement_parks.ride_designer.rides) m.06vnh2)))"
        }
    },
    "462": {
        "generations": "which magazine has an issue in february 1942 called thrilling wonder stories??",
        "ori_data_item": {
            "qid": 2102751003000,
            "question": "thrilling wonder stories, february 1942, is contained within what magazine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hz__m3",
                    "entity_name": "Thrilling Wonder Stories"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.magazine",
                        "class": "book.magazine",
                        "friendly_name": "Magazine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h_000j",
                        "class": "book.magazine_issue",
                        "friendly_name": "Thrilling Wonder Stories, February 1942,",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.magazine.issues",
                        "friendly_name": "Issues"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine . \nVALUES ?x1 { :m.0h_000j } \n?x0 :book.magazine.issues ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.magazine (JOIN book.magazine.issues m.0h_000j))"
        }
    },
    "463": {
        "generations": "who designed the ride turtle talk with crush??",
        "ori_data_item": {
            "qid": 2101300000000,
            "question": "turtle talk with crush was designed by who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kk9v",
                    "entity_name": "Pixar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gvyp",
                    "entity_name": "Walt Disney Imagineering"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_designer",
                        "class": "amusement_parks.ride_designer",
                        "friendly_name": "Amusement Ride Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09cnhd",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Turtle Talk with Crush",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride_designer.rides",
                        "friendly_name": "Rides Designed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_designer . \nVALUES ?x1 { :m.09cnhd } \n?x0 :amusement_parks.ride_designer.rides ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride_designer (JOIN amusement_parks.ride_designer.rides m.09cnhd))"
        }
    },
    "464": {
        "generations": "who developed the playstation 2 dreamspec software??",
        "ori_data_item": {
            "qid": 3200926016000,
            "question": "who founded the products playstation 2 dreamspec and dreamspec?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rktwn",
                    "entity_name": "Bigboy"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.software_developer",
                        "class": "computer.software_developer",
                        "friendly_name": "Software Developer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09rktx2",
                        "class": "computer.computer_emulator",
                        "friendly_name": "DreamSpec",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.09rktwd",
                        "class": "computer.computer_emulator",
                        "friendly_name": "Playstation 2 DreamSpec",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.software.developer",
                        "friendly_name": "Developer"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "computer.software_developer.software",
                        "friendly_name": "Software"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.software_developer . \nVALUES ?x1 { :m.09rktx2 } \nVALUES ?x2 { :m.09rktwd } \n?x1 :computer.software.developer ?x0 . \n?x0 :computer.software_developer.software ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.software_developer (AND (JOIN (R computer.software.developer) m.09rktx2) (JOIN computer.software_developer.software m.09rktwd)))"
        }
    },
    "465": {
        "generations": "which theater designer designed the play soul sister??",
        "ori_data_item": {
            "qid": 3201343005000,
            "question": "can you tell me the designer of the theatre for the play soul sister?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k71lgv",
                    "entity_name": "Pete Brooks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k71x9c",
                    "entity_name": "Simon Wainwright"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k71r5j",
                    "entity_name": "Ben Harrison"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k71rfh",
                    "entity_name": "Laura Hopkins"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3f3fh",
                    "entity_name": "Nick Richings"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_designer",
                        "class": "theater.theater_designer",
                        "friendly_name": "Theater Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "theater.theater_designer_gig",
                        "class": "theater.theater_designer_gig",
                        "friendly_name": "Theater Designer Gig",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0k71p5g",
                        "class": "theater.theater_production",
                        "friendly_name": "Soul Sister",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_designer.plays_designed",
                        "friendly_name": "Plays Designed"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "theater.theater_designer_gig.play",
                        "friendly_name": "Play"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_designer . \n?x1 :type.object.type :theater.theater_designer_gig . \nVALUES ?x2 { :m.0k71p5g } \n?x0 :theater.theater_designer.plays_designed ?x1 . \n?x1 :theater.theater_designer_gig.play ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_designer (JOIN theater.theater_designer.plays_designed (JOIN theater.theater_designer_gig.play m.0k71p5g)))"
        }
    },
    "466": {
        "generations": "what is a notable type of common topic related to cheese texture??",
        "ori_data_item": {
            "qid": 2101889011000,
            "question": "cheese texture falls under what specific topic category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h83jd",
                    "entity_name": "semi-soft"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h892w",
                    "entity_name": "hard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h82t0",
                    "entity_name": "semi-firm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h48ft",
                    "entity_name": "Soft"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h7z6l",
                    "entity_name": "washed-rind"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h87zr",
                    "entity_name": "semi-hard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wlqmr",
                    "entity_name": "Granular"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h89r6",
                    "entity_name": "firm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h4zz7",
                    "entity_name": "Soft-ripened"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wlqk0",
                    "entity_name": "Crumbly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xxtjm",
                    "entity_name": "cooked, pressed, hard"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "common.topic",
                        "class": "common.topic",
                        "friendly_name": "Topic",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01xs0vl",
                        "class": "type.type",
                        "friendly_name": "Cheese texture",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "common.topic.notable_types",
                        "friendly_name": "Notable types"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.topic . \nVALUES ?x1 { :m.01xs0vl } \n?x0 :common.topic.notable_types ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "common"
            ],
            "s_expression": "(AND common.topic (JOIN common.topic.notable_types m.01xs0vl))"
        }
    },
    "467": {
        "generations": "what written work is the next in the series after decalog??",
        "ori_data_item": {
            "qid": 2102668009000,
            "question": "what novel came before the series decalog?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y50v9t",
                    "entity_name": "Decalog 2: Lost Property"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.written_work",
                        "class": "book.written_work",
                        "friendly_name": "Written Work",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0y50v7m",
                        "class": "book.written_work",
                        "friendly_name": "Decalog",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.previous_in_series",
                        "friendly_name": "Previous in series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.written_work . \nVALUES ?x1 { :m.0y50v7m } \n?x0 :book.written_work.previous_in_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.written_work (JOIN book.written_work.previous_in_series m.0y50v7m))"
        }
    },
    "468": {
        "generations": "which automotive make is owned by the american cyclecar co??",
        "ori_data_item": {
            "qid": 2102090000000,
            "question": "american cyclecar co parent company is?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j5zysc",
                    "entity_name": "American"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.make",
                        "class": "automotive.make",
                        "friendly_name": "Automobile Make",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j5zyvv",
                        "class": "automotive.company",
                        "friendly_name": "American Cyclecar Co",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.make.parent_company",
                        "friendly_name": "Parent Company"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.make . \nVALUES ?x1 { :m.0j5zyvv } \n?x0 :automotive.make.parent_company ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.make (JOIN automotive.make.parent_company m.0j5zyvv))"
        }
    },
    "469": {
        "generations": "which user profile has The Stunt Man as their favorite film??",
        "ori_data_item": {
            "qid": 2101182000000,
            "question": "what is the user profile that has the stunt man as its favorite film?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nsby8",
                    "entity_name": "starkst"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.015wq4",
                        "class": "film.film",
                        "friendly_name": "The Stunt Man",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.favorite_films",
                        "friendly_name": "Favorite Films"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.015wq4 } \n?x0 :freebase.user_profile.favorite_films ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.favorite_films m.015wq4))"
        }
    },
    "470": {
        "generations": "what collection category is police memorabilia collecting a part of??",
        "ori_data_item": {
            "qid": 2100290009000,
            "question": "which collection category has collection activity police memorabilia collecting?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cnjxh",
                    "entity_name": "Embroidered patch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cny9",
                    "entity_name": "Badge"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collection_category",
                        "class": "interests.collection_category",
                        "friendly_name": "Collection category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0276_30",
                        "class": "interests.collection_activity",
                        "friendly_name": "Police memorabilia collecting",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.collection_category.name_of_collection_activity",
                        "friendly_name": "Name of collection activity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collection_category . \nVALUES ?x1 { :m.0276_30 } \n?x0 :interests.collection_category.name_of_collection_activity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.collection_category (JOIN interests.collection_category.name_of_collection_activity m.0276_30))"
        }
    },
    "471": {
        "generations": "what type of mountain is mt kilimanjaro??",
        "ori_data_item": {
            "qid": 2101173000000,
            "question": "mt kilimanjaro is what type of volcano?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015kp7",
                    "entity_name": "Stratovolcano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07_9_",
                    "entity_name": "Volcano"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain_type",
                        "class": "geography.mountain_type",
                        "friendly_name": "Mountain type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01513b",
                        "class": "geography.mountain",
                        "friendly_name": "mt kilimanjaro",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain_type.mountains_of_this_type",
                        "friendly_name": "Mountains of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_type . \nVALUES ?x1 { :m.01513b } \n?x0 :geography.mountain_type.mountains_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain_type (JOIN geography.mountain_type.mountains_of_this_type m.01513b))"
        }
    },
    "472": {
        "generations": "how many defunct sports teams are there in the sport that was played in the 2001-02 La Liga soccer/football league season??",
        "ori_data_item": {
            "qid": 4301524010000,
            "question": "including only defunct teams, how many play the same sport as the teams in the 2001\u201302 la liga?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "9"
                }
            ],
            "function": "count",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.defunct_sports_team",
                        "class": "sports.defunct_sports_team",
                        "friendly_name": "Defunct Sports Team",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.sport",
                        "class": "sports.sport",
                        "friendly_name": "Sport",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "soccer.football_team",
                        "class": "soccer.football_team",
                        "friendly_name": "Football team",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0g73jm",
                        "class": "soccer.football_league_season",
                        "friendly_name": "2001\u201302 La Liga",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.defunct_sports_team.sport",
                        "friendly_name": "Sport"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "sports.sports_team.sport",
                        "friendly_name": "Sport"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "soccer.football_league_season.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.defunct_sports_team . \n?x1 :type.object.type :sports.sport . \n?x2 :type.object.type :soccer.football_team . \nVALUES ?x3 { :m.0g73jm } \n?x0 :sports.defunct_sports_team.sport ?x1 . \n?x2 :sports.sports_team.sport ?x1 . \n?x3 :soccer.football_league_season.teams ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "soccer",
                "sports"
            ],
            "s_expression": "(COUNT (AND sports.defunct_sports_team (JOIN sports.defunct_sports_team.sport (JOIN (R sports.sports_team.sport) (JOIN (R soccer.football_league_season.teams) m.0g73jm)))))"
        }
    },
    "473": {
        "generations": "what human language is spoken in martinique island??",
        "ori_data_item": {
            "qid": 2101869000000,
            "question": "what language do the people of martinique island speak?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064_8sq",
                    "entity_name": "French"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04k39q",
                    "entity_name": "Antillean Creole French"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06_qzl",
                    "entity_name": "Creole Patois"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.human_language",
                        "class": "language.human_language",
                        "friendly_name": "Human Language",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04vg8",
                        "class": "location.country",
                        "friendly_name": "martinique island",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.human_language.countries_spoken_in",
                        "friendly_name": "Spoken in countries"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.human_language . \nVALUES ?x1 { :m.04vg8 } \n?x0 :language.human_language.countries_spoken_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.human_language (JOIN language.human_language.countries_spoken_in m.04vg8))"
        }
    },
    "474": {
        "generations": "which comic strip character is married to moominmamma??",
        "ori_data_item": {
            "qid": 3202267001000,
            "question": "what fictional comic strip character is married to moominmamma?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p5nd8",
                    "entity_name": "Moominpappa"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_strips.comic_strip_character",
                        "class": "comic_strips.comic_strip_character",
                        "friendly_name": "Comic Strip Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.marriage_of_fictional_characters",
                        "class": "fictional_universe.marriage_of_fictional_characters",
                        "friendly_name": "Marriage (of Fictional Characters)",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02p5ncx",
                        "class": "comic_strips.comic_strip_character",
                        "friendly_name": "Moominmamma",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.married_to",
                        "friendly_name": "Married To"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.married_to",
                        "friendly_name": "Married To"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_strips.comic_strip_character . \n?x1 :type.object.type :fictional_universe.marriage_of_fictional_characters . \nVALUES ?x2 { :m.02p5ncx } \n?x0 :fictional_universe.fictional_character.married_to ?x1 . \n?x2 :fictional_universe.fictional_character.married_to ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND comic_strips.comic_strip_character (JOIN fictional_universe.fictional_character.married_to (JOIN (R fictional_universe.fictional_character.married_to) m.02p5ncx)))"
        }
    },
    "475": {
        "generations": "what visual art genre has artworks that use a support other than canvas or paper??",
        "ori_data_item": {
            "qid": 3200201012000,
            "question": "artworks of which visual art genre are supported by other?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dv4h",
                    "entity_name": "Portrait"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tl2",
                    "entity_name": "Allegory"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lw08",
                    "entity_name": "Religious art"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n21_p",
                    "entity_name": "Physical art"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_art_genre",
                        "class": "visual_art.visual_art_genre",
                        "friendly_name": "Visual Art Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.011cjmhb",
                        "class": "visual_art.visual_art_support",
                        "friendly_name": "Other",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_art_genre.artworks",
                        "friendly_name": "Artworks"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "visual_art.artwork.support",
                        "friendly_name": "Support"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_art_genre . \n?x1 :type.object.type :visual_art.artwork . \nVALUES ?x2 { :m.011cjmhb } \n?x0 :visual_art.visual_art_genre.artworks ?x1 . \n?x1 :visual_art.artwork.support ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_art_genre (JOIN visual_art.visual_art_genre.artworks (JOIN visual_art.artwork.support m.011cjmhb)))"
        }
    },
    "476": {
        "generations": "how many medical treatments have contraindications for gastrointestinal ulcers??",
        "ori_data_item": {
            "qid": 2104249003000,
            "question": "how many different contraindications are there of gastrointestinal ulcers?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_treatment",
                        "class": "medicine.medical_treatment",
                        "friendly_name": "Medical Treatment",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04zh6_3",
                        "class": "medicine.contraindication",
                        "friendly_name": "Gastrointestinal ulcers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_treatment.contraindications",
                        "friendly_name": "Contraindications"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_treatment . \nVALUES ?x1 { :m.04zh6_3 } \n?x0 :medicine.medical_treatment.contraindications ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(COUNT (AND medicine.medical_treatment (JOIN medicine.medical_treatment.contraindications m.04zh6_3)))"
        }
    },
    "477": {
        "generations": "which martial artist practices savate??",
        "ori_data_item": {
            "qid": 2102522001000,
            "question": "savate is practiced by what martial artists?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026jjt8",
                    "entity_name": "Pierre Vigny"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_artist",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "Martial Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06ydz",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "Savate",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "martial_arts.martial_artist.martial_art",
                        "friendly_name": "Martial Art(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_artist . \nVALUES ?x1 { :m.06ydz } \n?x0 :martial_arts.martial_artist.martial_art ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "martial_arts"
            ],
            "s_expression": "(AND martial_arts.martial_artist (JOIN martial_arts.martial_artist.martial_art m.06ydz))"
        }
    },
    "478": {
        "generations": "who is the TV actor that has a sibling named Thomas Jones??",
        "ori_data_item": {
            "qid": 3204512001000,
            "question": "what is the name of the actor that is related to thomas jones?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05827t",
                    "entity_name": "Julius Jones"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_actor",
                        "class": "tv.tv_actor",
                        "friendly_name": "TV Actor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.sibling_relationship",
                        "class": "people.sibling_relationship",
                        "friendly_name": "Sibling Relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05k0kp",
                        "class": "people.measured_person",
                        "friendly_name": "Thomas Jones",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.sibling_relationship.sibling",
                        "friendly_name": "Sibling"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.sibling_relationship.sibling",
                        "friendly_name": "Sibling"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_actor . \n?x1 :type.object.type :people.sibling_relationship . \nVALUES ?x2 { :m.05k0kp } \n?x1 :people.sibling_relationship.sibling ?x0 . \n?x1 :people.sibling_relationship.sibling ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND tv.tv_actor (JOIN (R people.sibling_relationship.sibling) (JOIN people.sibling_relationship.sibling m.05k0kp)))"
        }
    },
    "479": {
        "generations": "who is the developer of a programming language that follows the modular programming paradigm??",
        "ori_data_item": {
            "qid": 3202905023000,
            "question": "who is the developer of modular programming?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0878f",
                    "entity_name": "PARC"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language_developer",
                        "class": "computer.programming_language_developer",
                        "friendly_name": "Programming Language Developer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0fzlnq",
                        "class": "computer.programming_language_paradigm",
                        "friendly_name": "Modular Programming",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.programming_language_developer.programming_languages_developed",
                        "friendly_name": "Programming Languages Developed"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "computer.programming_language.language_paradigms",
                        "friendly_name": "Language Paradigms"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language_developer . \n?x1 :type.object.type :computer.programming_language . \nVALUES ?x2 { :m.0fzlnq } \n?x0 :computer.programming_language_developer.programming_languages_developed ?x1 . \n?x1 :computer.programming_language.language_paradigms ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language_developer (JOIN computer.programming_language_developer.programming_languages_developed (JOIN computer.programming_language.language_paradigms m.0fzlnq)))"
        }
    },
    "480": {
        "generations": "what radio format is played on station WQRW??",
        "ori_data_item": {
            "qid": 2100044013000,
            "question": "what radio format is wqrw?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vjzr",
                    "entity_name": "Adult contemporary music"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.radio_format",
                        "class": "broadcast.radio_format",
                        "friendly_name": "Radio format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03nxkqd",
                        "class": "broadcast.radio_station",
                        "friendly_name": "WQRW",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.radio_format.stations",
                        "friendly_name": "Stations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.radio_format . \nVALUES ?x1 { :m.03nxkqd } \n?x0 :broadcast.radio_format.stations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.radio_format (JOIN broadcast.radio_format.stations m.03nxkqd))"
        }
    },
    "481": {
        "generations": "what is the topic that includes mark allen macphail as a subject??",
        "ori_data_item": {
            "qid": 2101677011000,
            "question": "mark allen macphail is about what topic?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ght10n",
                    "entity_name": "Savannah Talks Troy Anthony Davis No. 12: U.S. Supreme Court Rejects Appeal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h4_qvj",
                    "entity_name": "Savannah Talks Troy Anthony Davis No. 15: Board Denies Clemency"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "common.topic",
                        "class": "common.topic",
                        "friendly_name": "Topic",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bnpj4q",
                        "class": "common.topic",
                        "friendly_name": "Mark Allen MacPhail",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "common.topic.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.topic . \nVALUES ?x1 { :m.0bnpj4q } \n?x0 :common.topic.subjects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "common"
            ],
            "s_expression": "(AND common.topic (JOIN common.topic.subjects m.0bnpj4q))"
        }
    },
    "482": {
        "generations": "what theater genre includes the play Dracula - Entre l'amour et la mort??",
        "ori_data_item": {
            "qid": 2101745001000,
            "question": "dracula \u2013 entre l'amour et la mort plays what genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0557q",
                    "entity_name": "Musical theatre"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_genre",
                        "class": "theater.theater_genre",
                        "friendly_name": "Theater Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.025zt31",
                        "class": "theater.play",
                        "friendly_name": "Dracula \u2013 Entre l'amour et la mort",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_genre.plays_in_this_genre",
                        "friendly_name": "Plays In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_genre . \nVALUES ?x1 { :m.025zt31 } \n?x0 :theater.theater_genre.plays_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_genre (JOIN theater.theater_genre.plays_in_this_genre m.025zt31))"
        }
    },
    "483": {
        "generations": "which celebrity has a romantic relationship with jill schoelen??",
        "ori_data_item": {
            "qid": 3203245001000,
            "question": "who is the celebrity that is in a romantic relationship involving jill schoelen?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0479b",
                    "entity_name": "Keanu Reeves"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c6qh",
                    "entity_name": "Brad Pitt"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "celebrities.celebrity",
                        "class": "celebrities.celebrity",
                        "friendly_name": "Celebrity",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "celebrities.romantic_relationship",
                        "class": "celebrities.romantic_relationship",
                        "friendly_name": "Romantic relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0fx7_x",
                        "class": "celebrities.celebrity",
                        "friendly_name": "Jill Schoelen",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "celebrities.romantic_relationship.celebrity",
                        "friendly_name": "Celebrity"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "celebrities.romantic_relationship.celebrity",
                        "friendly_name": "Celebrity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :celebrities.celebrity . \n?x1 :type.object.type :celebrities.romantic_relationship . \nVALUES ?x2 { :m.0fx7_x } \n?x1 :celebrities.romantic_relationship.celebrity ?x0 . \n?x1 :celebrities.romantic_relationship.celebrity ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "celebrities"
            ],
            "s_expression": "(AND celebrities.celebrity (JOIN (R celebrities.romantic_relationship.celebrity) (JOIN celebrities.romantic_relationship.celebrity m.0fx7_x)))"
        }
    },
    "484": {
        "generations": "which rocket manufacturer has the highest mass of rockets manufactured??",
        "ori_data_item": {
            "qid": 3203357002000,
            "question": "the heaviest rocket was made by what manufacturer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gcl8",
                    "entity_name": "North American Aviation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cp1t",
                    "entity_name": "Douglas Aircraft Company"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0178g",
                    "entity_name": "Boeing"
                }
            ],
            "function": "argmax",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_manufacturer",
                        "class": "spaceflight.rocket_manufacturer",
                        "friendly_name": "Rocket Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_manufacturer.rockets_manufactured",
                        "friendly_name": "Rockets Manufactured"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "spaceflight.rocket.mass",
                        "friendly_name": "Mass"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_manufacturer . \n?x1 :type.object.type :spaceflight.rocket . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :spaceflight.rocket_manufacturer . \n?y1 :type.object.type :spaceflight.rocket . \n?y0 :spaceflight.rocket_manufacturer.rockets_manufactured ?y1 . \n?y1 :spaceflight.rocket.mass ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :spaceflight.rocket_manufacturer.rockets_manufactured ?x1 . \n?x1 :spaceflight.rocket.mass ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(ARGMAX spaceflight.rocket_manufacturer (JOIN spaceflight.rocket_manufacturer.rockets_manufactured spaceflight.rocket.mass))"
        }
    },
    "485": {
        "generations": "which rocket engine fuel is used in the merlin rocket engines??",
        "ori_data_item": {
            "qid": 4302083002000,
            "question": "what type of fuel ran the engine on merlin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021vvd",
                    "entity_name": "RP-1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qvz",
                    "entity_name": "Ethanol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04bhf",
                    "entity_name": "Kerosene"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p6_",
                    "entity_name": "Ammonia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g0nz",
                    "entity_name": "Liquid hydrogen"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_fuel",
                        "class": "spaceflight.rocket_engine_fuel",
                        "friendly_name": "Rocket engine fuel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "spaceflight.bipropellant_rocket_engine",
                        "class": "spaceflight.bipropellant_rocket_engine",
                        "friendly_name": "Bipropellant rocket engine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_status",
                        "class": "spaceflight.rocket_engine_status",
                        "friendly_name": "Rocket engine development status",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.03g0k4",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "Merlin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine_fuel.rocket_engines",
                        "friendly_name": "Rocket engines"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine_status.rocket_engines",
                        "friendly_name": "Rocket engines"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "spaceflight.rocket_engine_status.rocket_engines",
                        "friendly_name": "Rocket engines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine_fuel . \n?x1 :type.object.type :spaceflight.bipropellant_rocket_engine . \n?x2 :type.object.type :spaceflight.rocket_engine_status . \nVALUES ?x3 { :m.03g0k4 } \n?x0 :spaceflight.rocket_engine_fuel.rocket_engines ?x1 . \n?x2 :spaceflight.rocket_engine_status.rocket_engines ?x1 . \n?x2 :spaceflight.rocket_engine_status.rocket_engines ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine_fuel (JOIN spaceflight.rocket_engine_fuel.rocket_engines (JOIN (R spaceflight.rocket_engine_status.rocket_engines) (JOIN spaceflight.rocket_engine_status.rocket_engines m.03g0k4))))"
        }
    },
    "486": {
        "generations": "what events are related to easter holiday??",
        "ori_data_item": {
            "qid": 3204121001000,
            "question": "easter is related to what holiday event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g3f9",
                    "entity_name": "Ascension of Jesus"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.event",
                        "class": "time.event",
                        "friendly_name": "Event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "time.holiday",
                        "class": "time.holiday",
                        "friendly_name": "Holiday",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04v0dg",
                        "class": "time.holiday_period",
                        "friendly_name": "easter",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "time.holiday.related_event",
                        "friendly_name": "Related Event"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "time.holiday_period.holidays",
                        "friendly_name": "Related Holidays"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.event . \n?x1 :type.object.type :time.holiday . \nVALUES ?x2 { :m.04v0dg } \n?x1 :time.holiday.related_event ?x0 . \n?x2 :time.holiday_period.holidays ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.event (JOIN (R time.holiday.related_event) (JOIN (R time.holiday_period.holidays) m.04v0dg)))"
        }
    },
    "487": {
        "generations": "which astronomer discovered the astronomical object 7769 Okuni??",
        "ori_data_item": {
            "qid": 2100624006000,
            "question": "what is the name of the astronomer that discovered 7769 okuni?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.038zst",
                    "entity_name": "Satoru Otomo"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.astronomer",
                        "class": "astronomy.astronomer",
                        "friendly_name": "Astronomer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03y7v76",
                        "class": "astronomy.astronomical_discovery",
                        "friendly_name": "7769 Okuni",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.astronomer.astronomical_objects_discovered",
                        "friendly_name": "Astronomical objects discovered"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.astronomer . \nVALUES ?x1 { :m.03y7v76 } \n?x0 :astronomy.astronomer.astronomical_objects_discovered ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.astronomer (JOIN astronomy.astronomer.astronomical_objects_discovered m.03y7v76))"
        }
    },
    "488": {
        "generations": "who are the chess players who were married on or after november 24, 1924??",
        "ori_data_item": {
            "qid": 3201787000000,
            "question": "what chess play got married after nov. the 24th, 1924",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081lh",
                    "entity_name": "Woody Allen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c5y",
                    "entity_name": "Garry Kasparov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01htw_",
                    "entity_name": "Susan Polgar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01_lj9",
                    "entity_name": "Paul Truong"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06k9jc",
                    "entity_name": "Bobby Fischer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048nyq",
                    "entity_name": "Miyoko Watai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l786",
                    "entity_name": "George C. Scott"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nn6w",
                    "entity_name": "Ephraim Kishon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01_97c",
                    "entity_name": "Michael Adams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vswwx",
                    "entity_name": "Bono"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f47xl",
                    "entity_name": "Vladimir Vladimirovich Nabokov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lzfs",
                    "entity_name": "Martin Amis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.041_g",
                    "entity_name": "Judit Polg\u00e1r"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06mn7",
                    "entity_name": "Stanley Kubrick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lc5",
                    "entity_name": "Charlie Chaplin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0389p4",
                    "entity_name": "Nathan Divinsky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06crk",
                    "entity_name": "Richard Feynman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sx5w",
                    "entity_name": "Howard Stern"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0472f",
                    "entity_name": "Josip Broz Tito"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgqq",
                    "entity_name": "John Cage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lbj1",
                    "entity_name": "Sting"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fjbs",
                    "entity_name": "Lennox Lewis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09k0f",
                    "entity_name": "Fidel Castro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bqch",
                    "entity_name": "Marcel Duchamp"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yd59",
                    "entity_name": "Hans Frank"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wvj",
                    "entity_name": "Sergei Prokofiev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01fdkr",
                    "entity_name": "Joshua Waitzkin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h0yt",
                    "entity_name": "Stephen Fry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01902h",
                    "entity_name": "Mikhail Tal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.016v92",
                    "entity_name": "Jos\u00e9 Ra\u00fal Capablanca"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0421f",
                    "entity_name": "John von Neumann"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086r9",
                    "entity_name": "Witold Gombrowicz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c8gb",
                    "entity_name": "Sofia Polgar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08l7ll",
                    "entity_name": "Yona Kosashvili"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01w9jh4",
                    "entity_name": "RZA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p_47",
                    "entity_name": "Steve Martin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03n6r",
                    "entity_name": "Humphrey Bogart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03rx9",
                    "entity_name": "Isaac Asimov"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dtsb",
                    "entity_name": "Natan Sharansky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026s9v",
                    "entity_name": "Steve Davis"
                }
            ],
            "function": ">=",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "chess.chess_player",
                        "class": "chess.chess_player",
                        "friendly_name": "Chess Player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.marriage",
                        "class": "people.marriage",
                        "friendly_name": "Marriage",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "1924-11-24^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Nov. the 24th, 1924",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.spouse_s",
                        "friendly_name": "Spouse (or domestic partner)"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.marriage.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :chess.chess_player . \n?x1 :type.object.type :people.marriage . \nFILTER (?x2 >= \"1924-11-24-08:00\"^^<http://www.w3.org/2001/XMLSchema#date>)\n?x0 :people.person.spouse_s ?x1 . \n?x1 :people.marriage.from ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND chess.chess_player (JOIN people.person.spouse_s (ge people.marriage.from 1924-11-24^^http://www.w3.org/2001/XMLSchema#date)))"
        }
    },
    "489": {
        "generations": "what is the engine type of the maybach 5.5L 12 cylinder 543 hp 664 ft-lbs turbo??",
        "ori_data_item": {
            "qid": 3200149011000,
            "question": "what engine is the same type as the one used in maybach 5.5l 12 cylinder 543 hp 664 ft-lbs turbo?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h2688g",
                    "entity_name": "Maybach 6.0L 12 Cylinder 620 hp 738 ft-lbs Turbo"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.engine",
                        "class": "automotive.engine",
                        "friendly_name": "Engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.engine_type",
                        "class": "automotive.engine_type",
                        "friendly_name": "Engine Type",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.040fm07",
                        "class": "automotive.engine",
                        "friendly_name": "Maybach 5.5L 12 Cylinder 543 hp 664 ft-lbs Turbo",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.engine.engine_type",
                        "friendly_name": "Engine Type"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "automotive.engine.engine_type",
                        "friendly_name": "Engine Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.engine . \n?x1 :type.object.type :automotive.engine_type . \nVALUES ?x2 { :m.040fm07 } \n?x0 :automotive.engine.engine_type ?x1 . \n?x2 :automotive.engine.engine_type ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.engine (JOIN automotive.engine.engine_type (JOIN (R automotive.engine.engine_type) m.040fm07)))"
        }
    },
    "490": {
        "generations": "what is the genomic locus that ends at base 152590403??",
        "ori_data_item": {
            "qid": 2102998009000,
            "question": "what is the genomic locus with 152590403 as the end base?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lnxlr",
                    "entity_name": "1 + [152564659,152590403]"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.genomic_locus",
                        "class": "biology.genomic_locus",
                        "friendly_name": "Genomic Locus",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "152590403^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "152590403",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.genomic_locus.end_base",
                        "friendly_name": "End Base"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.genomic_locus . \nVALUES ?x1 { \"152590403\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :biology.genomic_locus.end_base ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.genomic_locus (JOIN biology.genomic_locus.end_base 152590403^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "491": {
        "generations": "which fictional universe uses a calendar system that was preceded by the first age??",
        "ori_data_item": {
            "qid": 3202193004000,
            "question": "the fictional calender system preceded by first age is from which fictional universe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d0t_",
                    "entity_name": "Middle-earth"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_calendar_system",
                        "class": "fictional_universe.fictional_calendar_system",
                        "friendly_name": "Fictional Calendar System",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0hlks",
                        "class": "fictional_universe.fictional_calendar_system",
                        "friendly_name": "First Age",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_calendar_system.used_in_fictional_universes",
                        "friendly_name": "Used in fictional universes"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_calendar_system.preceded_by",
                        "friendly_name": "Preceded By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe . \n?x1 :type.object.type :fictional_universe.fictional_calendar_system . \nVALUES ?x2 { :m.0hlks } \n?x1 :fictional_universe.fictional_calendar_system.used_in_fictional_universes ?x0 . \n?x1 :fictional_universe.fictional_calendar_system.preceded_by ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe (JOIN (R fictional_universe.fictional_calendar_system.used_in_fictional_universes) (JOIN fictional_universe.fictional_calendar_system.preceded_by m.0hlks)))"
        }
    },
    "492": {
        "generations": "what is the more specialized form of a prairie skirt in the fashion industry??",
        "ori_data_item": {
            "qid": 3202794002000,
            "question": "what garment is a more specialized form of the garment whose specializations include the prairie skirt?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049gp6",
                    "entity_name": "Hobble skirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cmb2",
                    "entity_name": "Miniskirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1mx1",
                    "entity_name": "Poodle skirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05cb0c",
                    "entity_name": "Ballerina skirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bw3pd",
                    "entity_name": "Broomstick skirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d19j3",
                    "entity_name": "Denim skirt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ys_v67",
                    "entity_name": "Sulu"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fashion.garment",
                        "class": "fashion.garment",
                        "friendly_name": "Garment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fashion.garment",
                        "class": "fashion.garment",
                        "friendly_name": "Garment",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06g25n",
                        "class": "fashion.garment",
                        "friendly_name": "Prairie skirt",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fashion.garment.more_specialized_forms",
                        "friendly_name": "More specialized forms"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fashion.garment.specialization_of",
                        "friendly_name": "Specialization of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fashion.garment . \n?x1 :type.object.type :fashion.garment . \nVALUES ?x2 { :m.06g25n } \n?x1 :fashion.garment.more_specialized_forms ?x0 . \n?x2 :fashion.garment.specialization_of ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fashion"
            ],
            "s_expression": "(AND fashion.garment (JOIN (R fashion.garment.more_specialized_forms) (JOIN (R fashion.garment.specialization_of) m.06g25n)))"
        }
    },
    "493": {
        "generations": "which comic book publisher was created by dave gibbons and is the primary publisher of a fictional universe??",
        "ori_data_item": {
            "qid": 3204704000000,
            "question": "what comic book publisher is the primary publisher of a comic book fictional universe created by dave gibbons?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hvd",
                    "entity_name": "DC Comics"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_publisher",
                        "class": "comic_books.comic_book_publisher",
                        "friendly_name": "Comic Book Publisher",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_fictional_universe",
                        "class": "comic_books.comic_book_fictional_universe",
                        "friendly_name": "Comic Book Fictional Universe",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02th5t",
                        "class": "fictional_universe.fictional_universe_creator",
                        "friendly_name": "Dave Gibbons",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "comic_books.comic_book_fictional_universe.primary_publisher",
                        "friendly_name": "Primary Publisher"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_universe.created_by",
                        "friendly_name": "Created by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_publisher . \n?x1 :type.object.type :comic_books.comic_book_fictional_universe . \nVALUES ?x2 { :m.02th5t } \n?x1 :comic_books.comic_book_fictional_universe.primary_publisher ?x0 . \n?x1 :fictional_universe.fictional_universe.created_by ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe",
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_publisher (JOIN (R comic_books.comic_book_fictional_universe.primary_publisher) (JOIN fictional_universe.fictional_universe.created_by m.02th5t)))"
        }
    },
    "494": {
        "generations": "which martial artist has gracie as their instructor??",
        "ori_data_item": {
            "qid": 2101552001000,
            "question": "gracie instructs which martial artist?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0522m_m",
                    "entity_name": "Vinny Magalh\u00e3es"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_artist",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "Martial Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08t051",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "gracie",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "martial_arts.martial_artist.instructor",
                        "friendly_name": "Martial Arts Instructor(s)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_artist . \nVALUES ?x1 { :m.08t051 } \n?x0 :martial_arts.martial_artist.instructor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "martial_arts"
            ],
            "s_expression": "(AND martial_arts.martial_artist (JOIN martial_arts.martial_artist.instructor m.08t051))"
        }
    },
    "495": {
        "generations": "what government office or title is associated with the victorian legislative assembly??",
        "ori_data_item": {
            "qid": 2100250012000,
            "question": "the title of victorian legislative assembly is given to what specific government office?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ztzpd",
                    "entity_name": "Member of the Victorian Legislative Assembly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1sk4",
                    "entity_name": "Speaker of the Victorian Legislative Assembly"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_office_or_title",
                        "class": "government.government_office_or_title",
                        "friendly_name": "Government Office or Title",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02r67r",
                        "class": "government.governmental_body",
                        "friendly_name": "Victorian Legislative Assembly",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_office_or_title.governmental_body_if_any",
                        "friendly_name": "Governmental body (if any)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_office_or_title . \nVALUES ?x1 { :m.02r67r } \n?x0 :government.government_office_or_title.governmental_body_if_any ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_office_or_title (JOIN government.government_office_or_title.governmental_body_if_any m.02r67r))"
        }
    },
    "496": {
        "generations": "who is the tv writer of series 4, episode 3??",
        "ori_data_item": {
            "qid": 2101122010000,
            "question": "the tv episode series 4, episode 3 was written by what writer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bz61r",
                    "entity_name": "Russell Howard"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_writer",
                        "class": "tv.tv_writer",
                        "friendly_name": "TV Writer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ggnwzb",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "Series 4, Episode 3",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_writer.episodes_written",
                        "friendly_name": "TV Episodes Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_writer . \nVALUES ?x1 { :m.0ggnwzb } \n?x0 :tv.tv_writer.episodes_written ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_writer (JOIN tv.tv_writer.episodes_written m.0ggnwzb))"
        }
    },
    "497": {
        "generations": "what type of aircraft engine is used in the boeing b737 aircraft model??",
        "ori_data_item": {
            "qid": 3200931000000,
            "question": "the boeing b737 uses which type of aircraft engine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028g36",
                    "entity_name": "CFM International CFM56"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_engine_type",
                        "class": "aviation.aircraft_engine_type",
                        "friendly_name": "Aircraft Engine Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0137k8",
                        "class": "aviation.aircraft_line",
                        "friendly_name": "boeing b737",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "aviation.aircraft_model.engine_type",
                        "friendly_name": "Engine Type"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "aviation.aircraft_model.part_of_line",
                        "friendly_name": "Part Of Line"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_engine_type . \n?x1 :type.object.type :aviation.aircraft_model . \nVALUES ?x2 { :m.0137k8 } \n?x1 :aviation.aircraft_model.engine_type ?x0 . \n?x1 :aviation.aircraft_model.part_of_line ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_engine_type (JOIN (R aviation.aircraft_model.engine_type) (JOIN aviation.aircraft_model.part_of_line m.0137k8)))"
        }
    },
    "498": {
        "generations": "which fictional universe was created by the creator of the malacandra universe??",
        "ori_data_item": {
            "qid": 3204610003000,
            "question": "name the fictional universe created by the creator of malacandra universe.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051shsp",
                    "entity_name": "Narnian Multiverse"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe_creator",
                        "class": "fictional_universe.fictional_universe_creator",
                        "friendly_name": "Fictional universe creator",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04sf9zr",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Malacandra universe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.created_by",
                        "friendly_name": "Created by"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_universe_creator.fictional_universes_created",
                        "friendly_name": "Fictional universes created"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe . \n?x1 :type.object.type :fictional_universe.fictional_universe_creator . \nVALUES ?x2 { :m.04sf9zr } \n?x0 :fictional_universe.fictional_universe.created_by ?x1 . \n?x1 :fictional_universe.fictional_universe_creator.fictional_universes_created ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe (JOIN fictional_universe.fictional_universe.created_by (JOIN fictional_universe.fictional_universe_creator.fictional_universes_created m.04sf9zr)))"
        }
    },
    "499": {
        "generations": "which technical report has exactly 25 pages??",
        "ori_data_item": {
            "qid": 2101517006000,
            "question": "what is the title of the technical report with 25 pages?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.056rkyn",
                    "entity_name": "Range-wide Streaked Horned Lark (Eremophila alpestris strigata) Assessment and Preliminary Conservation Strategy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.technical_report",
                        "class": "book.technical_report",
                        "friendly_name": "Technical report",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "25^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "25",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.technical_report.number_of_pages",
                        "friendly_name": "Number of pages"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.technical_report . \nVALUES ?x1 { \"25\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :book.technical_report.number_of_pages ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.technical_report (JOIN book.technical_report.number_of_pages 25^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "500": {
        "generations": "what event ended on march 27, 1945??",
        "ori_data_item": {
            "qid": 2102594001000,
            "question": "on 03/27/1945 what event ended?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bz_9t",
                    "entity_name": "1945 NCAA Men's Division I Basketball Tournament"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h086n",
                    "entity_name": "Oklahoma A&M-NYU 1945  NCAA Men's Division I Basketball Tournament Game"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h083r",
                    "entity_name": "1945 NCAA Men's Division I Basketball Tournament - National Championship"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.event",
                        "class": "time.event",
                        "friendly_name": "Event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1945-03-27^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "03/27/1945",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.end_date",
                        "friendly_name": "End date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.event . \nVALUES ?x1 { \"1945-03-27-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :time.event.end_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.event (JOIN time.event.end_date 1945-03-27^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "501": {
        "generations": "who is the TV writer who wrote for The Terrible Thunderlizards??",
        "ori_data_item": {
            "qid": 2101581001000,
            "question": "which writer wrote the terrible thunderlizards?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06gf7_",
                    "entity_name": "Savage Steve Holland"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_writer",
                        "class": "tv.tv_writer",
                        "friendly_name": "TV Writer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02qb_m0",
                        "class": "tv.tv_episode_segment",
                        "friendly_name": "The Terrible Thunderlizards",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_writer.tv_segments_written",
                        "friendly_name": "TV Segments Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_writer . \nVALUES ?x1 { :m.02qb_m0 } \n?x0 :tv.tv_writer.tv_segments_written ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_writer (JOIN tv.tv_writer.tv_segments_written m.02qb_m0))"
        }
    },
    "502": {
        "generations": "which school district has exactly 4 schools??",
        "ori_data_item": {
            "qid": 2100118006000,
            "question": "what school district has 4 schools?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b75xx9",
                    "entity_name": "Colchester Public Schools"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p_99z",
                    "entity_name": "Senatobia Municipal School District"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0277vtf",
                    "entity_name": "Williamston Community Schools"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8b6m",
                    "entity_name": "Northwestern Lehigh School District"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school_district",
                        "class": "education.school_district",
                        "friendly_name": "School district",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "4^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "4",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.school_district.number_of_schools",
                        "friendly_name": "Number of schools"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nVALUES ?x1 { \"4\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :education.school_district.number_of_schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school_district (JOIN education.school_district.number_of_schools 4^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "503": {
        "generations": "which space mission is part of the skylab missions space program??",
        "ori_data_item": {
            "qid": 2100533014000,
            "question": "the skylab missions was part of what mission?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01zrms",
                    "entity_name": "Skylab 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034s5v",
                    "entity_name": "Skylab 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qdb3",
                    "entity_name": "Skylab 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j5r5v7",
                    "entity_name": "Skylab 1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.space_mission",
                        "class": "spaceflight.space_mission",
                        "friendly_name": "Space Mission",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hmw487",
                        "class": "spaceflight.space_program",
                        "friendly_name": "Skylab Missions",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.space_mission.space_program",
                        "friendly_name": "Space program"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.space_mission . \nVALUES ?x1 { :m.0hmw487 } \n?x0 :spaceflight.space_mission.space_program ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.space_mission (JOIN spaceflight.space_mission.space_program m.0hmw487))"
        }
    },
    "504": {
        "generations": "how many deceased organisms have Gallant Fox as their parent organism??",
        "ori_data_item": {
            "qid": 2103565008000,
            "question": "gallant fox is the parent of how many deceased organisms?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.deceased_organism",
                        "class": "biology.deceased_organism",
                        "friendly_name": "Deceased Organism",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03413g",
                        "class": "biology.owned_animal",
                        "friendly_name": "Gallant Fox",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "biology.organism.parents",
                        "friendly_name": "Parents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.deceased_organism . \nVALUES ?x1 { :m.03413g } \n?x1 :biology.organism.parents ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(COUNT (AND biology.deceased_organism (JOIN (R biology.organism.parents) m.03413g)))"
        }
    },
    "505": {
        "generations": "what occupation is shared by both rezin schneider and marcus in the fictional universe??",
        "ori_data_item": {
            "qid": 3205047007000,
            "question": "when it comes to rezin schneider and marcus what is the character occupation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.099md",
                    "entity_name": "Soldier"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ndtpt3",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Rezin Schneider",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.026hd9m",
                        "class": "cvg.game_character",
                        "friendly_name": "marcus",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x1 { :m.0ndtpt3 } \nVALUES ?x2 { :m.026hd9m } \n?x1 :fictional_universe.fictional_character.occupation ?x0 . \n?x2 :fictional_universe.fictional_character.occupation ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_occupation (AND (JOIN (R fictional_universe.fictional_character.occupation) m.0ndtpt3) (JOIN (R fictional_universe.fictional_character.occupation) m.026hd9m)))"
        }
    },
    "506": {
        "generations": "which day of the year falls in the month of september??",
        "ori_data_item": {
            "qid": 2102868001000,
            "question": "sep contains which day of the year?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yw0",
                    "entity_name": "September 7"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yvj",
                    "entity_name": "September 6"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.day_of_year",
                        "class": "time.day_of_year",
                        "friendly_name": "Day Of Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06vkl",
                        "class": "time.month",
                        "friendly_name": "sep",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.day_of_year.month",
                        "friendly_name": "Month"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.day_of_year . \nVALUES ?x1 { :m.06vkl } \n?x0 :time.day_of_year.month ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.day_of_year (JOIN time.day_of_year.month m.06vkl))"
        }
    },
    "507": {
        "generations": "which tropical cyclone occurred during the 1989 atlantic hurricane season and affected south carolina??",
        "ori_data_item": {
            "qid": 3205139005000,
            "question": "what cyclone from the 1989 atlantic hurricane season affected areas such as the south carolina?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pm2v",
                    "entity_name": "Hurricane Hugo"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Tropical Cyclone",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06yxd",
                        "class": "meteorology.cyclone_affected_area",
                        "friendly_name": "South Carolina",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03d900",
                        "class": "meteorology.tropical_cyclone_season",
                        "friendly_name": "1989 Atlantic hurricane season",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone.affected_areas",
                        "friendly_name": "Affected areas"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "meteorology.tropical_cyclone.tropical_cyclone_season",
                        "friendly_name": "Season"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone . \nVALUES ?x1 { :m.06yxd } \nVALUES ?x2 { :m.03d900 } \n?x0 :meteorology.tropical_cyclone.affected_areas ?x1 . \n?x0 :meteorology.tropical_cyclone.tropical_cyclone_season ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone (AND (JOIN meteorology.tropical_cyclone.affected_areas m.06yxd) (JOIN meteorology.tropical_cyclone.tropical_cyclone_season m.03d900)))"
        }
    },
    "508": {
        "generations": "what organization has a location at wal-mart 2278??",
        "ori_data_item": {
            "qid": 2100657002000,
            "question": "wal-mart 2278 is the location of which organization?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0841v",
                    "entity_name": "Walmart"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization",
                        "class": "organization.organization",
                        "friendly_name": "Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03nzrcc",
                        "class": "business.business_location",
                        "friendly_name": "Wal-Mart 2278",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.locations",
                        "friendly_name": "Organization locations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization . \nVALUES ?x1 { :m.03nzrcc } \n?x0 :organization.organization.locations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization (JOIN organization.organization.locations m.03nzrcc))"
        }
    },
    "509": {
        "generations": "what periodicals are related to the subject of outlooks in books??",
        "ori_data_item": {
            "qid": 2101518001000,
            "question": "on what periodical theme is outlooks based?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f5k",
                    "entity_name": "LGBT rights"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.periodical_subject",
                        "class": "book.periodical_subject",
                        "friendly_name": "Periodical Subject",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.058kb5",
                        "class": "book.periodical",
                        "friendly_name": "Outlooks",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.periodical_subject.periodicals",
                        "friendly_name": "Periodicals"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.periodical_subject . \nVALUES ?x1 { :m.058kb5 } \n?x0 :book.periodical_subject.periodicals ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.periodical_subject (JOIN book.periodical_subject.periodicals m.058kb5))"
        }
    },
    "510": {
        "generations": "what is the classification of the organism that is the species of vicu\u00f1a in a zoo exhibit??",
        "ori_data_item": {
            "qid": 3202020008000,
            "question": "species of vicu\u00f1a belong to what organism in zoo exhibit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wcf2",
                    "entity_name": "White rhinoceros"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k64b",
                    "entity_name": "Emu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03rls9",
                    "entity_name": "Scimitar oryx"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03x1w0",
                    "entity_name": "Grey crowned crane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04bff1",
                    "entity_name": "Lechwe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018zf1",
                    "entity_name": "Greater flamingo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jf9t",
                    "entity_name": "Scarlet ibis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rd7k",
                    "entity_name": "Wild turkey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vb62",
                    "entity_name": "Cattle egret"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0221bt",
                    "entity_name": "Coscoroba swan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qtp_",
                    "entity_name": "Humboldt penguin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06fx2y",
                    "entity_name": "Orange-winged amazon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01djxm",
                    "entity_name": "Meerkat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03k3r",
                    "entity_name": "Horse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.096mb",
                    "entity_name": "Lion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jhl9",
                    "entity_name": "White stork"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gd1z",
                    "entity_name": "California sea lion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xq0k1",
                    "entity_name": "Cattle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bk1",
                    "entity_name": "Giraffe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dm6",
                    "entity_name": "Tiger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gy7v",
                    "entity_name": "Guinea pig"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01fkbb",
                    "entity_name": "Red kangaroo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vbd8",
                    "entity_name": "White-faced saki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02mdrb",
                    "entity_name": "Guanaco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09f20",
                    "entity_name": "Hippopotamus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03s4yj",
                    "entity_name": "Scarlet macaw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01k_wh",
                    "entity_name": "Red-necked wallaby"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025sk_9",
                    "entity_name": "Greater rhea"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018zt6",
                    "entity_name": "Chilean flamingo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02zg6j",
                    "entity_name": "South American tapir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09h9sc",
                    "entity_name": "Golden-collared macaw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wb2_5",
                    "entity_name": "Collared mangabey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01j6gl",
                    "entity_name": "Western grey kangaroo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02f0zn",
                    "entity_name": "White cockatoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028b8w",
                    "entity_name": "Bactrian camel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06ggzm",
                    "entity_name": "Python molurus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wc8fm",
                    "entity_name": "Rodrigues flying fox"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b67lp",
                    "entity_name": "Patagonian mara"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crys19",
                    "entity_name": "Caribbean Flamingo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0267y",
                    "entity_name": "Common chimpanzee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02tlg4",
                    "entity_name": "European rabbit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028qcn",
                    "entity_name": "Pink-backed pelican"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gp83",
                    "entity_name": "Hamadryas baboon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03x0j0",
                    "entity_name": "Demoiselle crane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gxjt",
                    "entity_name": "Blue poison dart frog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037v2k",
                    "entity_name": "Sarus crane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05gbdz",
                    "entity_name": "African spurred tortoise"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism_classification",
                        "class": "biology.organism_classification",
                        "friendly_name": "Organism Classification",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "zoos.zoo_exhibit",
                        "class": "zoos.zoo_exhibit",
                        "friendly_name": "Zoo Exhibit",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02rbvf",
                        "class": "biology.animal",
                        "friendly_name": "Vicu\u00f1a",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "zoos.zoo_exhibit.species",
                        "friendly_name": "Species"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "zoos.zoo_exhibit.species",
                        "friendly_name": "Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification . \n?x1 :type.object.type :zoos.zoo_exhibit . \nVALUES ?x2 { :m.02rbvf } \n?x1 :zoos.zoo_exhibit.species ?x0 . \n?x1 :zoos.zoo_exhibit.species ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "zoos"
            ],
            "s_expression": "(AND biology.organism_classification (JOIN (R zoos.zoo_exhibit.species) (JOIN zoos.zoo_exhibit.species m.02rbvf)))"
        }
    },
    "511": {
        "generations": "which areas were affected by cyclone hamish??",
        "ori_data_item": {
            "qid": 2102189007000,
            "question": "the cyclone cyclone hamish affected which area?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g39h",
                    "entity_name": "Queensland"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.cyclone_affected_area",
                        "class": "meteorology.cyclone_affected_area",
                        "friendly_name": "Cyclone-affected area",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05n_g3n",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Cyclone Hamish",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.cyclone_affected_area.cyclones",
                        "friendly_name": "Affected by cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.cyclone_affected_area . \nVALUES ?x1 { :m.05n_g3n } \n?x0 :meteorology.cyclone_affected_area.cyclones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.cyclone_affected_area (JOIN meteorology.cyclone_affected_area.cyclones m.05n_g3n))"
        }
    },
    "512": {
        "generations": "what fictional universe includes the works set in the ghost brigades??",
        "ori_data_item": {
            "qid": 2102749007000,
            "question": "the ghost brigades belongs to which fictional universe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.040_ng3",
                    "entity_name": "The Old Man's War-verse"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02p_ymm",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "The Ghost Brigades",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.works_set_here",
                        "friendly_name": "Works Set Here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe . \nVALUES ?x1 { :m.02p_ymm } \n?x0 :fictional_universe.fictional_universe.works_set_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe (JOIN fictional_universe.fictional_universe.works_set_here m.02p_ymm))"
        }
    },
    "513": {
        "generations": "what is the most recent computer file format created by adobe systems inc??",
        "ori_data_item": {
            "qid": 3205804008000,
            "question": "what's the most recent file format adobe systems inc has created?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_2yh",
                    "entity_name": "Digital Negative"
                }
            ],
            "function": "argmax",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.file_format",
                        "class": "computer.file_format",
                        "friendly_name": "File Format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0vlf",
                        "class": "computer.software_developer",
                        "friendly_name": "adobe systems inc",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.file_format.format_creator",
                        "friendly_name": "Format Creator"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "computer.file_format.creation_date",
                        "friendly_name": "Creation Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.file_format . \nVALUES ?x1 { :m.0vlf } \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :computer.file_format . \nVALUES ?y1 { :m.0vlf } \n?y0 :computer.file_format.format_creator ?y1 . \n?y0 :computer.file_format.creation_date ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :computer.file_format.format_creator ?x1 . \n?x0 :computer.file_format.creation_date ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(ARGMAX (AND computer.file_format (JOIN computer.file_format.format_creator m.0vlf)) computer.file_format.creation_date)"
        }
    },
    "514": {
        "generations": "what deceased organism was a male leopard??",
        "ori_data_item": {
            "qid": 3203290014000,
            "question": "which males leopard is a deceased organism?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08txpc",
                    "entity_name": "Leopard of Rudraprayag"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08txp0",
                    "entity_name": "Leopard of Panar"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.deceased_organism",
                        "class": "biology.deceased_organism",
                        "friendly_name": "Deceased Organism",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c29q",
                        "class": "biology.organism_classification",
                        "friendly_name": "Leopard",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05zppz",
                        "class": "people.gender",
                        "friendly_name": "males",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism.organism_type",
                        "friendly_name": "Organism type"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "biology.organism.sex",
                        "friendly_name": "Sex"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.deceased_organism . \nVALUES ?x1 { :m.0c29q } \nVALUES ?x2 { :m.05zppz } \n?x0 :biology.organism.organism_type ?x1 . \n?x0 :biology.organism.sex ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.deceased_organism (AND (JOIN biology.organism.organism_type m.0c29q) (JOIN biology.organism.sex m.05zppz)))"
        }
    },
    "515": {
        "generations": "what programming language has a dialect called javascripts??",
        "ori_data_item": {
            "qid": 2101908011000,
            "question": "what is the type of programming language in javascripts?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019syg",
                    "entity_name": "ECMAScript"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02p97",
                        "class": "computer.programming_language",
                        "friendly_name": "javascripts",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.programming_language.dialects",
                        "friendly_name": "Dialects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language . \nVALUES ?x1 { :m.02p97 } \n?x0 :computer.programming_language.dialects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.programming_language (JOIN computer.programming_language.dialects m.02p97))"
        }
    },
    "516": {
        "generations": "which soccer player has scored the most total goals and has also scored 4 or more international goals??",
        "ori_data_item": {
            "qid": 4302771003000,
            "question": "among football players, who is the best scorer that has scored 4 goals in international games?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hyrg",
                    "entity_name": "Bobby Robson"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_player",
                        "class": "soccer.football_player",
                        "friendly_name": "Football player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "4^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "4",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "soccer.football_player_stats",
                        "class": "soccer.football_player_stats",
                        "friendly_name": "Football player stats",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_player.total_international_goals",
                        "friendly_name": "Number of International Goals"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "soccer.football_player_stats.player",
                        "friendly_name": "Player"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "soccer.football_player_stats.total_goals",
                        "friendly_name": "Number of goals scored"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_player . \nVALUES ?x1 { \"4\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x2 :type.object.type :soccer.football_player_stats . \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :soccer.football_player . \nVALUES ?y1 { \"4\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?y2 :type.object.type :soccer.football_player_stats . \n?y0 :soccer.football_player.total_international_goals ?y1 . \n?y2 :soccer.football_player_stats.player ?y0 . \n?y2 :soccer.football_player_stats.total_goals ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x0 :soccer.football_player.total_international_goals ?x1 . \n?x2 :soccer.football_player_stats.player ?x0 . \n?x2 :soccer.football_player_stats.total_goals ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(ARGMAX (AND soccer.football_player (JOIN soccer.football_player.total_international_goals 4^^http://www.w3.org/2001/XMLSchema#integer)) (JOIN (R soccer.football_player_stats.player) soccer.football_player_stats.total_goals))"
        }
    },
    "517": {
        "generations": "what medical trial is testing the safety and effectiveness of giving indinavir plus stavudine plus lamivudine to HIV-infected children??",
        "ori_data_item": {
            "qid": 3205174023000,
            "question": "which medical trial has the same medical trial type with safety and effectiveness of giving indinavir plus stavudine plus lamivudine to hiv-infected children?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d3jh_",
                    "entity_name": "Valganciclovir (Valcyte) for Chronic Fatigue Syndrome Patients Who Have Elevated Antibody Titers Against Human Herpes Virus 6 (HHV-6)and Epstein-Barr Virus (EBV)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbvr",
                    "entity_name": "Pharmacological Modulation of Cocaine Effects \u2013 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbw1",
                    "entity_name": "Cocaine Effects in Humans: Physiology and Behavior \u2013 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbw_",
                    "entity_name": "Postmenopausal Hormone Therapy in Unstable Angina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwc",
                    "entity_name": "Alendronate and/or Parathyroid Hormone for Osteoporosis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwp",
                    "entity_name": "Hypertension Prevention Trial (HPT) Feasibility Study"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwv",
                    "entity_name": "Vitamin E and C to Slow Progression of Common Carotid Artery Plaque Build-up"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbx4",
                    "entity_name": "A Phase I Evaluation of Azidothymidine (AZT) in Children with Acquired Immune Deficiency Syndrome (AIDS) or AIDS Related Complex (ARC)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbx9",
                    "entity_name": "Physicians' Health Study"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxg",
                    "entity_name": "Methadone Effects on Zidovudine (ZDV, AZT) Disposition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxs",
                    "entity_name": "A Multi-Center Clinical Trial to Evaluate Azidothymidine (AZT) in the Treatment of Human Immunodeficiency Virus (HIV) Infection in Patients with AIDS Post First Episode PCP"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxy",
                    "entity_name": "Phase II Trial of Sequential Chemotherapy and Radiotherapy for AIDS- Related Primary Central Nervous System Lymphoma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbby7",
                    "entity_name": "A Study of Atvogen in Healthy Volunteers and HIV-Infected Patients Who Have No Symptoms of Infection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbyd",
                    "entity_name": "A Phase III Study to Evaluate the Safety and Efficacy of Ganciclovir (Dihydroxypropoxymethyl Guanine [DHPG]) Treatment of Symptomatic Central Nervous System (CNS) Congenital Cytomegalovirus (CMV) Infections."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbyk",
                    "entity_name": "A Study of Zidovudine in HIV-Infected Patients With Liver Disease"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1vdb",
                    "entity_name": "Efficacy and Safety of SPD417 in Treatment of Manic Symptoms in Adults With Bipolar I Disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d2cxf",
                    "entity_name": "Memantine in Systemic Lupus Erythematosus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d2sb_",
                    "entity_name": "The Study of the Safety and Efficacy of Ampligen in Chronic Fatigue Syndrome"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mnw6d",
                    "entity_name": "Behavioral Insomnia Therapy With Chronic Fatigue Syndrome"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063hp3f",
                    "entity_name": "Nimotuzumab in Adults With Glioblastoma Multiforma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.092zz_w",
                    "entity_name": "A Study of Two Anti-HIV Drug Combinations in HIV-Infected Patients"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbvx",
                    "entity_name": "Feasibility Study of Take-Home LAAM Medication \u2013 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1kq9",
                    "entity_name": "Amoxicillin for the Treatment of Pediatric Autoimmune Disorders Associated With Streptococcal Infections"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwj",
                    "entity_name": "Oral Collagen for Rheumatoid Arthritis"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_trial",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Medical trial",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.medical_trial_type",
                        "class": "medicine.medical_trial_type",
                        "friendly_name": "Medical trial type",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03zbby2",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Safety and Effectiveness of Giving Indinavir Plus Stavudine Plus Lamivudine to HIV-Infected Children",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_trial.type_of_trial",
                        "friendly_name": "Type of trial"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "medicine.medical_trial.type_of_trial",
                        "friendly_name": "Type of trial"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial . \n?x1 :type.object.type :medicine.medical_trial_type . \nVALUES ?x2 { :m.03zbby2 } \n?x0 :medicine.medical_trial.type_of_trial ?x1 . \n?x2 :medicine.medical_trial.type_of_trial ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_trial (JOIN medicine.medical_trial.type_of_trial (JOIN (R medicine.medical_trial.type_of_trial) m.03zbby2)))"
        }
    },
    "518": {
        "generations": "who is Amanda Louise Marchant's supercouple partner??",
        "ori_data_item": {
            "qid": 2100508004000,
            "question": "amanda louise marchant is part of what supercouple?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02y_44x",
                    "entity_name": "Samanda"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "celebrities.supercouple",
                        "class": "celebrities.supercouple",
                        "friendly_name": "Supercouple",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07vd9tq",
                        "class": "celebrities.celebrity",
                        "friendly_name": "Amanda Louise Marchant",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "celebrities.supercouple.partners",
                        "friendly_name": "Partners"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :celebrities.supercouple . \nVALUES ?x1 { :m.07vd9tq } \n?x0 :celebrities.supercouple.partners ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "celebrities"
            ],
            "s_expression": "(AND celebrities.supercouple (JOIN celebrities.supercouple.partners m.07vd9tq))"
        }
    },
    "519": {
        "generations": "which fictional organization was founded by satan??",
        "ori_data_item": {
            "qid": 2100152001000,
            "question": "satan founded which fictional organization?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h31tx7",
                    "entity_name": "Fallen Angels"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06wzv",
                        "class": "fictional_universe.fictional_organization_founder",
                        "friendly_name": "Satan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization.fictional_organization_founder",
                        "friendly_name": "Fictional Organization Founder"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x1 { :m.06wzv } \n?x0 :fictional_universe.fictional_organization.fictional_organization_founder ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization (JOIN fictional_universe.fictional_organization.fictional_organization_founder m.06wzv))"
        }
    },
    "520": {
        "generations": "how many book characters have the same rank as Marth in the fictional universe??",
        "ori_data_item": {
            "qid": 3205618012000,
            "question": "the rank of marth has been given to how many book characters?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "23"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_character",
                        "class": "book.book_character",
                        "friendly_name": "Book Character",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.character_rank",
                        "class": "fictional_universe.character_rank",
                        "friendly_name": "Character Rank",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.029fqf",
                        "class": "cvg.game_character",
                        "friendly_name": "Marth",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.rank",
                        "friendly_name": "Rank"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.character_rank.characters_of_this_rank",
                        "friendly_name": "Characters of This Rank"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_character . \n?x1 :type.object.type :fictional_universe.character_rank . \nVALUES ?x2 { :m.029fqf } \n?x0 :fictional_universe.fictional_character.rank ?x1 . \n?x1 :fictional_universe.character_rank.characters_of_this_rank ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(COUNT (AND book.book_character (JOIN fictional_universe.fictional_character.rank (JOIN fictional_universe.character_rank.characters_of_this_rank m.029fqf))))"
        }
    },
    "521": {
        "generations": "what opera genre does mlada belong to??",
        "ori_data_item": {
            "qid": 2101492013000,
            "question": "mlada is part of which opera genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025thcf",
                    "entity_name": "Op\u00e9ra-ballet"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_genre",
                        "class": "opera.opera_genre",
                        "friendly_name": "Opera Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09drq7",
                        "class": "opera.opera",
                        "friendly_name": "Mlada",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera_genre.operas_in_this_genre",
                        "friendly_name": "Operas In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_genre . \nVALUES ?x1 { :m.09drq7 } \n?x0 :opera.opera_genre.operas_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.opera_genre (JOIN opera.opera_genre.operas_in_this_genre m.09drq7))"
        }
    },
    "522": {
        "generations": "which polling authority has conducted the most recent election poll taken by reuters??",
        "ori_data_item": {
            "qid": 4302896007000,
            "question": "what polling authority ran the most recent election polls taken by reuters?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08v0x0",
                    "entity_name": "Ipsos"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.polling_authority",
                        "class": "government.polling_authority",
                        "friendly_name": "Polling authority",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.election_poll",
                        "class": "government.election_poll",
                        "friendly_name": "Election poll",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0ps53",
                        "class": "government.polling_authority",
                        "friendly_name": "Reuters",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.polling_authority.polls",
                        "friendly_name": "Election polls"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "government.election_poll.poll_start_date",
                        "friendly_name": "Poll start date"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "government.election_poll.taken_by",
                        "friendly_name": "Taken by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.polling_authority . \n?x1 :type.object.type :government.election_poll . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :government.polling_authority . \n?y1 :type.object.type :government.election_poll . \nVALUES ?y3 { :m.0ps53 } \n?y0 :government.polling_authority.polls ?y1 . \n?y1 :government.election_poll.poll_start_date ?y2 . \n?y1 :government.election_poll.taken_by ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.0ps53 } \n?x0 :government.polling_authority.polls ?x1 . \n?x1 :government.election_poll.poll_start_date ?x2 . \n?x1 :government.election_poll.taken_by ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(ARGMAX (AND government.polling_authority (JOIN government.polling_authority.polls (JOIN government.election_poll.taken_by m.0ps53))) (JOIN government.polling_authority.polls government.election_poll.poll_start_date))"
        }
    },
    "523": {
        "generations": "which war involved the wyandot as combatants and had events included in it??",
        "ori_data_item": {
            "qid": 4304049013000,
            "question": "the wyandot was involved in which war?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0265mh",
                    "entity_name": "Creek War"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "military.war",
                        "class": "military.war",
                        "friendly_name": "War",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "military.military_conflict",
                        "class": "military.military_conflict",
                        "friendly_name": "Military Conflict",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "military.military_combatant_group",
                        "class": "military.military_combatant_group",
                        "friendly_name": "Military combatant group",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.011lcx",
                        "class": "military.military_combatant",
                        "friendly_name": "wyandot",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.included_in_event",
                        "friendly_name": "Included in event"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "military.military_combatant_group.conflict",
                        "friendly_name": "Conflict"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "military.military_combatant_group.combatants",
                        "friendly_name": "Combatants"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.war . \n?x1 :type.object.type :military.military_conflict . \n?x2 :type.object.type :military.military_combatant_group . \nVALUES ?x3 { :m.011lcx } \n?x0 :time.event.included_in_event ?x1 . \n?x2 :military.military_combatant_group.conflict ?x1 . \n?x2 :military.military_combatant_group.combatants ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "time",
                "military"
            ],
            "s_expression": "(AND military.war (JOIN time.event.included_in_event (JOIN (R military.military_combatant_group.conflict) (JOIN military.military_combatant_group.combatants m.011lcx))))"
        }
    },
    "524": {
        "generations": "which rocket has a mass of 240000.0??",
        "ori_data_item": {
            "qid": 2101475015000,
            "question": "which rocket has a mass of 240000.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qcfn2",
                    "entity_name": "Antares"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "240000.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "240000.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket.mass",
                        "friendly_name": "Mass"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \nVALUES ?x1 { \"240000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket.mass ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket (JOIN spaceflight.rocket.mass 240000.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "525": {
        "generations": "how many consumer products are associated with the brand three bridges??",
        "ori_data_item": {
            "qid": 2103592000000,
            "question": "three bridges has how many consumer products?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.consumer_product",
                        "class": "business.consumer_product",
                        "friendly_name": "Consumer product",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0121vcbt",
                        "class": "business.brand",
                        "friendly_name": "Three Bridges",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.consumer_product.brand",
                        "friendly_name": "Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.consumer_product . \nVALUES ?x1 { :m.0121vcbt } \n?x0 :business.consumer_product.brand ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(COUNT (AND business.consumer_product (JOIN business.consumer_product.brand m.0121vcbt)))"
        }
    },
    "526": {
        "generations": "which digital camera has an optical zoom of 4.0??",
        "ori_data_item": {
            "qid": 2101999001000,
            "question": "sensor type 4.0 fits which digital camera?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kc2_s",
                    "entity_name": "Panasonic Lumix DMC-GF1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n7mff",
                    "entity_name": "Canon PowerShot SD700"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n83xd",
                    "entity_name": "Canon Powershot A520"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ndbnz",
                    "entity_name": "Canon PowerShot G5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nt31q",
                    "entity_name": "Canon PowerShot A1100IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nt3j1",
                    "entity_name": "Canon PowerShot SD960 IS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n8_qg",
                    "entity_name": "Canon PowerShot G6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n7sx_",
                    "entity_name": "Nikon Coolpix 4500"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "4.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "4.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.digital_camera.optical_zoom",
                        "friendly_name": "Optical Zoom"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"4.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.optical_zoom ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.optical_zoom 4.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "527": {
        "generations": "what site listing category is associated with national battlefield in protected sites??",
        "ori_data_item": {
            "qid": 3205089007000,
            "question": "what site listing category is the category or criteria of a natural or cultural site listing that belongs to the category of national battlefield ? ",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01y4vb",
                    "entity_name": "National Memorial"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "protected_sites.site_listing_category",
                        "class": "protected_sites.site_listing_category",
                        "friendly_name": "Site Listing Category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "protected_sites.natural_or_cultural_site_listing",
                        "class": "protected_sites.natural_or_cultural_site_listing",
                        "friendly_name": "Natural or Cultural Site Listing",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05gjzks",
                        "class": "protected_sites.site_listing_category",
                        "friendly_name": "National Battlefield",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "protected_sites.natural_or_cultural_site_listing.category_or_criteria",
                        "friendly_name": "Category or Criteria"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "protected_sites.natural_or_cultural_site_listing.category_or_criteria",
                        "friendly_name": "Category or Criteria"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :protected_sites.site_listing_category . \n?x1 :type.object.type :protected_sites.natural_or_cultural_site_listing . \nVALUES ?x2 { :m.05gjzks } \n?x1 :protected_sites.natural_or_cultural_site_listing.category_or_criteria ?x0 . \n?x1 :protected_sites.natural_or_cultural_site_listing.category_or_criteria ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "protected_sites"
            ],
            "s_expression": "(AND protected_sites.site_listing_category (JOIN (R protected_sites.natural_or_cultural_site_listing.category_or_criteria) (JOIN protected_sites.natural_or_cultural_site_listing.category_or_criteria m.05gjzks)))"
        }
    },
    "528": {
        "generations": "who is the cricket coach with the lowest weight in kilograms??",
        "ori_data_item": {
            "qid": 2105144003000,
            "question": "which cricket coach weighs the least?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mrds",
                    "entity_name": "Adam Gilchrist"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_coach",
                        "class": "cricket.cricket_coach",
                        "friendly_name": "Cricket Coach",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_coach . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cricket.cricket_coach . \n?y0 :people.person.weight_kg ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN cricket.cricket_coach people.person.weight_kg)"
        }
    },
    "529": {
        "generations": "what olympic sport was contested at the 1924 olympics??",
        "ori_data_item": {
            "qid": 2100095016000,
            "question": "which sports were in the 1924 olympics?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.071t0",
                    "entity_name": "Shooting sport"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vx4",
                    "entity_name": "Football"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z6r",
                    "entity_name": "Swimming"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cgz",
                    "entity_name": "Boxing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wrt",
                    "entity_name": "Sailing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06f41",
                    "entity_name": "Rowing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02y8z",
                    "entity_name": "Fencing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06br8",
                    "entity_name": "Rugby union"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crlz",
                    "entity_name": "Water polo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03fyrh",
                    "entity_name": "Greco-Roman wrestling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07bs0",
                    "entity_name": "Tennis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0486tv",
                    "entity_name": "Freestyle wrestling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02bkg",
                    "entity_name": "Diving"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hr1p",
                    "entity_name": "Road cycling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07jjt",
                    "entity_name": "Track cycling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d1tm",
                    "entity_name": "Eventing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dwxr",
                    "entity_name": "Modern pentathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hp22",
                    "entity_name": "Artistic gymnastics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bynt",
                    "entity_name": "Track and field athletics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0849l",
                    "entity_name": "Olympic weightlifting"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d1t3",
                    "entity_name": "Dressage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yjkq",
                    "entity_name": "Cross country running"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063c7",
                    "entity_name": "Polo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.096f8",
                    "entity_name": "Show jumping"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_sport",
                        "class": "olympics.olympic_sport",
                        "friendly_name": "Olympic discipline",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0nbjq",
                        "class": "olympics.olympic_games",
                        "friendly_name": "1924 olympics",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_sport.olympic_games_contested",
                        "friendly_name": "Olympic games contested"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_sport . \nVALUES ?x1 { :m.0nbjq } \n?x0 :olympics.olympic_sport.olympic_games_contested ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_sport (JOIN olympics.olympic_sport.olympic_games_contested m.0nbjq))"
        }
    },
    "530": {
        "generations": "which music composition has lyrics written by jeff hanneman and is about heaven??",
        "ori_data_item": {
            "qid": 3203711004000,
            "question": "what composition written by jeff hanneman has the subject of heaven?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sftt",
                    "entity_name": "Raining Blood"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.composition",
                        "class": "music.composition",
                        "friendly_name": "Composition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03ld5",
                        "class": "book.book_subject",
                        "friendly_name": "Heaven",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04ckp1",
                        "class": "music.songwriter",
                        "friendly_name": "Jeff Hanneman",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.composition.subjects",
                        "friendly_name": "Subjects"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "music.lyricist.lyrics_written",
                        "friendly_name": "Lyrics Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.composition . \nVALUES ?x1 { :m.03ld5 } \nVALUES ?x2 { :m.04ckp1 } \n?x0 :music.composition.subjects ?x1 . \n?x2 :music.lyricist.lyrics_written ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.composition (AND (JOIN music.composition.subjects m.03ld5) (JOIN (R music.lyricist.lyrics_written) m.04ckp1)))"
        }
    },
    "531": {
        "generations": "how many books are written by ian duncan smith in the english language??",
        "ori_data_item": {
            "qid": 3206084009000,
            "question": "how many books did ian duncan smith write in the english-language?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book",
                        "class": "book.book",
                        "friendly_name": "Book",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0151p8",
                        "class": "book.author",
                        "friendly_name": "ian duncan smith",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02h40lc",
                        "class": "language.human_language",
                        "friendly_name": "english-language",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "book.written_work.original_language",
                        "friendly_name": "Original language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book . \nVALUES ?x1 { :m.0151p8 } \nVALUES ?x2 { :m.02h40lc } \n?x0 :book.written_work.author ?x1 . \n?x0 :book.written_work.original_language ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(COUNT (AND book.book (AND (JOIN book.written_work.author m.0151p8) (JOIN book.written_work.original_language m.02h40lc))))"
        }
    },
    "532": {
        "generations": "what type of glacier is the old sun glacier??",
        "ori_data_item": {
            "qid": 2103288013000,
            "question": "the old sun glacier is which type of glacier?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xx7q9",
                    "entity_name": "Mountain Glacier"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.glacier_type",
                        "class": "geography.glacier_type",
                        "friendly_name": "Glacier type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dlkgp5",
                        "class": "geography.glacier",
                        "friendly_name": "Old Sun Glacier",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "geography.glacier.glacier_type",
                        "friendly_name": "Glacier Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.glacier_type . \nVALUES ?x1 { :m.0dlkgp5 } \n?x1 :geography.glacier.glacier_type ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.glacier_type (JOIN (R geography.glacier.glacier_type) m.0dlkgp5))"
        }
    },
    "533": {
        "generations": "what is the name of the manufactured drug form that was labeled on january 4th, 2011??",
        "ori_data_item": {
            "qid": 2100775012000,
            "question": "which manufactured drug form has a label date of 2011-01-04?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlll1",
                    "entity_name": "Prochlorperazine Edisylate 5 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqvdz",
                    "entity_name": "Cardizem CD 180 capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgjy2",
                    "entity_name": "Levetiracetam 500 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhfw_",
                    "entity_name": "Vitamins A And D Diaper Rash 15.5/53.4 ointment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk40z",
                    "entity_name": "Clinimix E 570/316/33/10/283/132/165/201/159/51/110/154/261/187/138/217/112/116/50/11/160 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkg6k",
                    "entity_name": "Ms Contin 60 extended release film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqls9j",
                    "entity_name": "Carbamazepine 200 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqnwsv",
                    "entity_name": "Promethazine Hydrochloride 50 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhhh_",
                    "entity_name": "Paroxetine 40 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhncd",
                    "entity_name": "Levetiracetam 1000 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkg7h",
                    "entity_name": "Doxycycline Hyclate 100 capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hql09w",
                    "entity_name": "Diltiazem Hydrochloride 120 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqm8qb",
                    "entity_name": "Clinimix E 880/489/33/5/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqmvy8",
                    "entity_name": "Phendimetrazine Tartrate 35 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq6pm",
                    "entity_name": "Verapamil Hydrochloride 240 extended release film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq723",
                    "entity_name": "Clinimix E 880/489/33/25/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqkw9",
                    "entity_name": "Dilaudid 4 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr05b",
                    "entity_name": "Prochlorperazine Maleate 5 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqh01f",
                    "entity_name": "Promethazine Hydrochloride and Dextromethorphan Hydrobromide 15/6.25 syrup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhxyr",
                    "entity_name": "Ms Contin 100 extended release film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqjlhh",
                    "entity_name": "Quinapril 10 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk_wr",
                    "entity_name": "White Lavender And Mint Antibacterial Moisturizing Hand Sp 0.3 liquid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqms0b",
                    "entity_name": "Hyzaar 25/100 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqp8y0",
                    "entity_name": "Prochlorperazine Maleate 10 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqh3br",
                    "entity_name": "Micatin 20 cream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk01j",
                    "entity_name": "Oxycodone and Acetaminophen 10/325 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqm4ln",
                    "entity_name": "Childrens Earache Relief 10/15/12/12 solution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgf2t",
                    "entity_name": "Ceftriaxone 10 powder for injectable solution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhxfz",
                    "entity_name": "Skelaxin 800 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlg77",
                    "entity_name": "Clinimix E 880/489/33/25/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqljd0",
                    "entity_name": "Prevacid SoluTab 30 delayed release orally disintegrating tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgfr7",
                    "entity_name": "Aveeno Active Naturals Ageless Vitality Rejuvenating Day Moisturizer SPF 30 30/120/50/17/30 cream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhjlf",
                    "entity_name": "Clinimix E 880/489/33/5/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqjynx",
                    "entity_name": "Clinimix E 1035/575/33/20/515/240/300/365/290/51/200/280/261/340/250/340/59/210/90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlczn",
                    "entity_name": "Plum Emergency Eyewash pH Neutralizing 95.1 liquid"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqghq5",
                    "entity_name": "Diltiazem Hydrochloride 90 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgmmd",
                    "entity_name": "Clinimix E 570/316/33/5/283/132/165/201/159/51/110/154/261/187/138/217/112/116/50/11/160 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhxf0",
                    "entity_name": "Lovaza 1 liquid filled capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk6ym",
                    "entity_name": "Dyazide 25/37.5 capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkb_4",
                    "entity_name": "Hydrocodone Bitartrate and Homatropine Methylbromide 1.5/5 syrup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkbnx",
                    "entity_name": "Enteric Coated Aspirin Regular Strength 325 delayed release tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqknjw",
                    "entity_name": "Clinimix E 1035/575/33/20/515/240/300/365/290/51/200/280/261/340/250/340/59/210,90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqmgp8",
                    "entity_name": "Salsalate 750 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqp0nz",
                    "entity_name": "Clinimix E 880/489/33/10/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqzvs",
                    "entity_name": "Paroxetine 10 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqc2z",
                    "entity_name": "Paroxetine 20 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr1mb",
                    "entity_name": "Digoxin 0.125 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhc6w",
                    "entity_name": "Fluphenazine Hydrochloride 2.5 injectable solution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqjjc7",
                    "entity_name": "Phenytoin Sodium 100 extended release capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqndkb",
                    "entity_name": "Polymyxin B Sulfate and Trimethoprim 10000/1 solution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqp86q",
                    "entity_name": "Doxycycline Hyclate 100 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqm_vk",
                    "entity_name": "Clinimix E 1035/575/33/25/515/240/300/365/290/51/200/280/261/340/250/340/59/210/90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk2yp",
                    "entity_name": "Promethazine Hydrochloride 6.25 syrup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqj8kj",
                    "entity_name": "Levetiracetam 750 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqht6d",
                    "entity_name": "Promethazine Hydrochloride 12.5 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqpsdk",
                    "entity_name": "Clinimix E 1035/575/33/25/515/240/300/365/290/51/200/280/261/340/250/340/59/210/90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkv__",
                    "entity_name": "Carafate 1 suspension"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqn39q",
                    "entity_name": "Levetiracetam 250 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkcf9",
                    "entity_name": "Clinimix E 1035/575/33/15/515/240/300/365/290/51/200/280/261/340/250/340/59/210/90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhm7z",
                    "entity_name": "Clinimix E 880/489/33/10/438/204/255/311/247/51/170/238/261/289/213/297/77/179/77/17/247 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgjkg",
                    "entity_name": "Oxaprozin 600 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhbrd",
                    "entity_name": "Bupropion hydrochloride 150 extended release film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhw3g",
                    "entity_name": "Amlobenz 5/10 capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq5b9",
                    "entity_name": "Clinimix E 570/316/33/5/283/132/165/201/159/51/110/154/261/187/138/217/112/116/50/11/160 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlmn1",
                    "entity_name": "Diltiazem Hydrochloride 30 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqp_fs",
                    "entity_name": "Cefadroxil 1000 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlqk5",
                    "entity_name": "Clinimix E 570/316/33/10/283/132/165/201/159/51/110/154/261/187/138/217/112/116/50/11/160 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqjvzl",
                    "entity_name": "Rx Act Naproxen Sodium 220 liquid filled capsule"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqjnh0",
                    "entity_name": "Klonopin 1 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq6_9",
                    "entity_name": "Diltiazem Hydrochloride 60 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqntfh",
                    "entity_name": "Paroxetine 30 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqntpg",
                    "entity_name": "Ms Contin 30 extended release film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk_h6",
                    "entity_name": "Klonopin 0.5 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqpv64",
                    "entity_name": "Quinapril 5 tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqm14k",
                    "entity_name": "Clinimix E 1035/575/33/15/515/240/300/365/290/51/200/280/261/340/250/340/59/210/90/20/290 injection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq_r4",
                    "entity_name": "Anastrozole 1 tablet"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2011-01-04^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "2011-01-04",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.label_date",
                        "friendly_name": "Label date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { \"2011-01-04-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :medicine.manufactured_drug_form.label_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.label_date 2011-01-04^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "534": {
        "generations": "what compositions are written in croatian language??",
        "ori_data_item": {
            "qid": 2100794009000,
            "question": "what are some examples of compositions done in the croatian?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011pdqzv",
                    "entity_name": "Dolazi zima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013b9svr",
                    "entity_name": "Generacija"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zkfwlr",
                    "entity_name": "Nina gubi nadu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zlflg1",
                    "entity_name": "U mom gradu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f26rj",
                    "entity_name": "Nostalgija"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064jz06",
                    "entity_name": "Muzika i ti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dgrpyv",
                    "entity_name": "Brodovi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k53l2",
                    "entity_name": "Jedan dan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01l87x",
                    "entity_name": "Dr\u017eavna himna Bosne i Hercegovine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2s5t",
                    "entity_name": "Sveta ljubav"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3gg1t",
                    "entity_name": "Nebo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lbch",
                    "entity_name": "Lijepa na\u0161a domovino"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0660t_x",
                    "entity_name": "Tvoj dje\u010dak je tu\u017ean"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lg5wz",
                    "entity_name": "Mangup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2th4",
                    "entity_name": "Vukovi umiru sami"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dnyrg",
                    "entity_name": "Rock Me"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbzrg9",
                    "entity_name": "Lako je sve"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0464_z3",
                    "entity_name": "Romanca"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zh5g09",
                    "entity_name": "Sjaj izgubljene ljubavi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01358msz",
                    "entity_name": "Domovini i ljubavi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2svf",
                    "entity_name": "Kad zaspu an\u0111eli"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2tn9",
                    "entity_name": "Moja \u0161tikla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2sdp",
                    "entity_name": "Neka mi ne svane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2sq_",
                    "entity_name": "Marija Magdalena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zlrphg",
                    "entity_name": "Otac (Father, Croatian version)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2s8x",
                    "entity_name": "Probudi me"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0135gjnt",
                    "entity_name": "Daleko m\u2019e moj Split"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cm9g3x",
                    "entity_name": "\u010ce\u017enja"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f26md",
                    "entity_name": "Nek' ti bude ljubav sva"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0py22x_",
                    "entity_name": "Mi\u017eerja"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.composition",
                        "class": "music.composition",
                        "friendly_name": "Composition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0k0sv",
                        "class": "language.human_language",
                        "friendly_name": "croatian",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.composition.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.composition . \nVALUES ?x1 { :m.0k0sv } \n?x0 :music.composition.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.composition (JOIN music.composition.language m.0k0sv))"
        }
    },
    "535": {
        "generations": "which election poll was conducted by the american research group??",
        "ori_data_item": {
            "qid": 2101971006000,
            "question": "taken by what, was the american research group?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0mzfjkj",
                    "entity_name": "American Research Group, 2012 presidential election, 2012-09-10"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.election_poll",
                        "class": "government.election_poll",
                        "friendly_name": "Election poll",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0mzfnp8",
                        "class": "government.polling_authority",
                        "friendly_name": "American Research Group",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.election_poll.taken_by",
                        "friendly_name": "Taken by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.election_poll . \nVALUES ?x1 { :m.0mzfnp8 } \n?x0 :government.election_poll.taken_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.election_poll (JOIN government.election_poll.taken_by m.0mzfnp8))"
        }
    },
    "536": {
        "generations": "what animal breed has a coloring of mouse-gray??",
        "ori_data_item": {
            "qid": 2101509009000,
            "question": "mouse-gray is a color the describes which animal breed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02kwjt",
                    "entity_name": "Weimaraner"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.animal_breed",
                        "class": "biology.animal_breed",
                        "friendly_name": "Animal breed",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04kv46n",
                        "class": "biology.breed_coloring",
                        "friendly_name": "Mouse-gray",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.animal_breed.coloring",
                        "friendly_name": "Color"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.animal_breed . \nVALUES ?x1 { :m.04kv46n } \n?x0 :biology.animal_breed.coloring ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.animal_breed (JOIN biology.animal_breed.coloring m.04kv46n))"
        }
    },
    "537": {
        "generations": "which publishing company has published books in the English language??",
        "ori_data_item": {
            "qid": 3201583009000,
            "question": "what publisher publishes books in english?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p5mr9h",
                    "entity_name": "New Avenue Books"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.publishing_company",
                        "class": "book.publishing_company",
                        "friendly_name": "Publisher",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0p5ncbq",
                        "class": "language.human_language",
                        "friendly_name": "English",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.publishing_company.books_published",
                        "friendly_name": "Book editions published"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "book.book_edition.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.publishing_company . \n?x1 :type.object.type :book.book_edition . \nVALUES ?x2 { :m.0p5ncbq } \n?x0 :book.publishing_company.books_published ?x1 . \n?x1 :book.book_edition.language ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.publishing_company (JOIN book.publishing_company.books_published (JOIN book.book_edition.language m.0p5ncbq)))"
        }
    },
    "538": {
        "generations": "which galaxy has the smallest cosmological distance??",
        "ori_data_item": {
            "qid": 2103553004000,
            "question": "which galaxy is the closest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049xb9",
                    "entity_name": "Canis Major Overdensity"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.galaxy",
                        "class": "astronomy.galaxy",
                        "friendly_name": "Galaxy",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.celestial_object.cosmological_distance",
                        "friendly_name": "Distance"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.galaxy . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.galaxy . \n?y0 :astronomy.celestial_object.cosmological_distance ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.cosmological_distance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(ARGMIN astronomy.galaxy astronomy.celestial_object.cosmological_distance)"
        }
    },
    "539": {
        "generations": "what deity is worshiped at the meckenheim - assembly hall??",
        "ori_data_item": {
            "qid": 3200655012000,
            "question": "what is the deity of the religion that worships in meckenheim - assembly hall?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cbmlq",
                    "entity_name": "Jehovah"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.deity",
                        "class": "religion.deity",
                        "friendly_name": "Deity",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04b278s",
                        "class": "religion.place_of_worship",
                        "friendly_name": "Meckenheim - Assembly Hall",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.deities",
                        "friendly_name": "Deity Or Deities"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "religion.religion.places_of_worship",
                        "friendly_name": "Places of worship (current)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.deity . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.04b278s } \n?x1 :religion.religion.deities ?x0 . \n?x1 :religion.religion.places_of_worship ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.deity (JOIN (R religion.religion.deities) (JOIN religion.religion.places_of_worship m.04b278s)))"
        }
    },
    "540": {
        "generations": "what dissertations are related to the degree of bachelor of arts international??",
        "ori_data_item": {
            "qid": 2101540018000,
            "question": "what dissertation is written for the degree of bachelor of arts international?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0290m15",
                    "entity_name": "Bugs in OpenBSD / Youth culture and La Nouvelle Vague"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.dissertation",
                        "class": "education.dissertation",
                        "friendly_name": "Dissertation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0290m0s",
                        "class": "education.educational_degree",
                        "friendly_name": "Bachelor of Arts International",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.dissertation.degree",
                        "friendly_name": "Degree"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.dissertation . \nVALUES ?x1 { :m.0290m0s } \n?x0 :education.dissertation.degree ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.dissertation (JOIN education.dissertation.degree m.0290m0s))"
        }
    },
    "541": {
        "generations": "which government agency is part of the government of mexico??",
        "ori_data_item": {
            "qid": 2102174000000,
            "question": "name the government agency that is part of the government of mexico.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0415pdn",
                    "entity_name": "Conabio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q985r",
                    "entity_name": "Consejo Nacional de Fomento Educativo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bgl0m",
                    "entity_name": "National Institute of Statistics and Geography"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jnq72",
                    "entity_name": "Secretariat of Communications and Transportation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n8_ww1",
                    "entity_name": "F\u00e1brica de Artes y Oficios Oriente"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027t67c",
                    "entity_name": "Mexican General National Archive"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m3rtv",
                    "entity_name": "Secretar\u00eda de Gobernaci\u00f3n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dbs2n",
                    "entity_name": "Consejo Nacional de Ciencia y Tecnolog\u00eda"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_agency",
                        "class": "government.government_agency",
                        "friendly_name": "Government Agency",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09gfsgt",
                        "class": "government.government",
                        "friendly_name": "government of mexico",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_agency.government",
                        "friendly_name": "Government"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_agency . \nVALUES ?x1 { :m.09gfsgt } \n?x0 :government.government_agency.government ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_agency (JOIN government.government_agency.government m.09gfsgt))"
        }
    },
    "542": {
        "generations": "what governmental body has a committee called Comisi\u00f3n de Turismo y Deporte (Legislatura de Buenos Aires)??",
        "ori_data_item": {
            "qid": 2101903012000,
            "question": "the committee of comisi\u00f3n de turismo y deporte (legislatura de buenos aires) belongs to what governmental body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07k9zyq",
                    "entity_name": "Buenos Aires City Legislature"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07vrhxc",
                        "class": "government.legislative_committee",
                        "friendly_name": "Comisi\u00f3n de Turismo y Deporte (Legislatura de Buenos Aires)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.committees",
                        "friendly_name": "Committees"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { :m.07vrhxc } \n?x0 :government.governmental_body.committees ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.committees m.07vrhxc))"
        }
    },
    "543": {
        "generations": "which processor manufacturer produces VIA C7 processors??",
        "ori_data_item": {
            "qid": 2100373003000,
            "question": "via c7 was manufactured by what processor manufacturer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dgmy",
                    "entity_name": "VIA Technologies"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.processor_manufacturer",
                        "class": "computer.processor_manufacturer",
                        "friendly_name": "Processor Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02p3fvy",
                        "class": "computer.computer_processor",
                        "friendly_name": "VIA C7",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.processor_manufacturer.processors_manufactured",
                        "friendly_name": "Processors Manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \nVALUES ?x1 { :m.02p3fvy } \n?x0 :computer.processor_manufacturer.processors_manufactured ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.processor_manufacturer (JOIN computer.processor_manufacturer.processors_manufactured m.02p3fvy))"
        }
    },
    "544": {
        "generations": "how many nebulae have a magnitude of 4.0 or less??",
        "ori_data_item": {
            "qid": 2105049015000,
            "question": "how many nebula's apparent magnitude is 4.0?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.nebula",
                        "class": "astronomy.nebula",
                        "friendly_name": "Nebula",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "4.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "4.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.celestial_object.magnitude",
                        "friendly_name": "Apparent Magnitude"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.nebula . \nVALUES ?x1 { \"4.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(COUNT (AND astronomy.nebula (JOIN astronomy.celestial_object.magnitude 4.0^^http://www.w3.org/2001/XMLSchema#float)))"
        }
    },
    "545": {
        "generations": "what is the genomic locus that ends at base 1898130??",
        "ori_data_item": {
            "qid": 2102998003000,
            "question": "1898130 is the end base for what genomic locus?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lr6lv",
                    "entity_name": "12 - [1771383,1898130]"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.genomic_locus",
                        "class": "biology.genomic_locus",
                        "friendly_name": "Genomic Locus",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1898130^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "1898130",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.genomic_locus.end_base",
                        "friendly_name": "End Base"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.genomic_locus . \nVALUES ?x1 { \"1898130\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :biology.genomic_locus.end_base ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.genomic_locus (JOIN biology.genomic_locus.end_base 1898130^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "546": {
        "generations": "what comic book story is part of the story arc defoe: brethren of the night??",
        "ori_data_item": {
            "qid": 2103003006000,
            "question": "defoe: brethren of the night comes from what comic book story?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kcxbm",
                    "entity_name": "Defoe: Brethren of the Night (Part 6)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04kfx_1",
                        "class": "comic_books.comic_book_story_arc",
                        "friendly_name": "Defoe: Brethren of the Night",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.part_of_story_arc",
                        "friendly_name": "Part Of Story Arc"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.04kfx_1 } \n?x0 :comic_books.comic_book_story.part_of_story_arc ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.part_of_story_arc m.04kfx_1))"
        }
    },
    "547": {
        "generations": "which opera was written by john boynton priestley??",
        "ori_data_item": {
            "qid": 2101546011000,
            "question": "john boynton priestley was the librettist of what opera?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p9jjk",
                    "entity_name": "The Olympians"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera",
                        "class": "opera.opera",
                        "friendly_name": "Opera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0lzh6",
                        "class": "opera.librettist",
                        "friendly_name": "John Boynton Priestley",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera.librettist",
                        "friendly_name": "Librettist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera . \nVALUES ?x1 { :m.0lzh6 } \n?x0 :opera.opera.librettist ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.opera (JOIN opera.opera.librettist m.0lzh6))"
        }
    },
    "548": {
        "generations": "who is the illustrator of the magazine cover for the magazine of fantasy and science fiction in september 1964??",
        "ori_data_item": {
            "qid": 2101588011000,
            "question": "who did the illustration for the cover of the magazine of fantasy and science fiction, september 1964?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ggd7l",
                    "entity_name": "Mel Hunter"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.illustrator",
                        "class": "book.illustrator",
                        "friendly_name": "Illustrator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hj0f9r",
                        "class": "book.magazine_issue",
                        "friendly_name": "The Magazine of Fantasy and Science Fiction, September 1964",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.illustrator.magazine_covers",
                        "friendly_name": "Magazine covers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.illustrator . \nVALUES ?x1 { :m.0hj0f9r } \n?x0 :book.illustrator.magazine_covers ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.illustrator (JOIN book.illustrator.magazine_covers m.0hj0f9r))"
        }
    },
    "549": {
        "generations": "what multi-event tournament includes motorcycle racing??",
        "ori_data_item": {
            "qid": 2101774001000,
            "question": "what events feature motorcycle racing?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010fccyc",
                    "entity_name": "2014 Argentine motorcycle Grand Prix"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.multi_event_tournament",
                        "class": "sports.multi_event_tournament",
                        "friendly_name": "Multi-event tournament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03gq92j",
                        "class": "sports.sport",
                        "friendly_name": "Motorcycle racing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.multi_event_tournament.sports",
                        "friendly_name": "Sports"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.multi_event_tournament . \nVALUES ?x1 { :m.03gq92j } \n?x0 :sports.multi_event_tournament.sports ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.multi_event_tournament (JOIN sports.multi_event_tournament.sports m.03gq92j))"
        }
    },
    "550": {
        "generations": "which comic book character belongs to the primary universe of wonderland??",
        "ori_data_item": {
            "qid": 2100297013000,
            "question": "wonderland is the primary univers of which comic book character",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw8_",
                    "entity_name": "Alice"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t627",
                    "entity_name": "White Rabbit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013290",
                    "entity_name": "Cheshire Cat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xlmy",
                    "entity_name": "Caterpillar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0478t06",
                    "entity_name": "The Mad March Hare"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_character",
                        "class": "comic_books.comic_book_character",
                        "friendly_name": "Comic Book Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04tmzpj",
                        "class": "comic_books.comic_book_fictional_universe",
                        "friendly_name": "Wonderland",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_character.primary_universe",
                        "friendly_name": "Primary Universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_character . \nVALUES ?x1 { :m.04tmzpj } \n?x0 :comic_books.comic_book_character.primary_universe ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_character (JOIN comic_books.comic_book_character.primary_universe m.04tmzpj))"
        }
    },
    "551": {
        "generations": "what US patent is associated with Elastomer Spatial Light Modulators for EUV Lithography??",
        "ori_data_item": {
            "qid": 2101973009000,
            "question": "the invention of elastomer spatial light modulators for euv lithography, is associated with which patents?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j3ly5x",
                    "entity_name": "Elastomer spatial light modulators for extreme ultraviolet lithography: U.S. Patent No. 7,092,138"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j2tqc3",
                        "class": "law.invention",
                        "friendly_name": "Elastomer Spatial Light Modulators for EUV Lithography",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.associated_inventions",
                        "friendly_name": "Associated Inventions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.0j2tqc3 } \n?x0 :law.us_patent.associated_inventions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.associated_inventions m.0j2tqc3))"
        }
    },
    "552": {
        "generations": "what infectious disease can be transmitted orally and is caused by a viral illness??",
        "ori_data_item": {
            "qid": 3204730013000,
            "question": "the disease that is transmitted through oral transmission is what viral illness?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.040v9ln",
                    "entity_name": "Cytomegalovirus Infections"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0qjk8",
                    "entity_name": "Infectious mononucleosis"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.infectious_disease",
                        "class": "medicine.infectious_disease",
                        "friendly_name": "Infectious Disease",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05c9scs",
                        "class": "medicine.transmission_route",
                        "friendly_name": "Oral Transmission",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0g9pc",
                        "class": "medicine.type_of_infectious_agent",
                        "friendly_name": "viral illness",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.infectious_disease.transmission",
                        "friendly_name": "Transmission route"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "medicine.type_of_infectious_agent.diseases",
                        "friendly_name": "Diseases with this type of agent"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.infectious_disease . \nVALUES ?x1 { :m.05c9scs } \nVALUES ?x2 { :m.0g9pc } \n?x0 :medicine.infectious_disease.transmission ?x1 . \n?x2 :medicine.type_of_infectious_agent.diseases ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.infectious_disease (AND (JOIN medicine.infectious_disease.transmission m.05c9scs) (JOIN (R medicine.type_of_infectious_agent.diseases) m.0g9pc)))"
        }
    },
    "553": {
        "generations": "who is the songwriter of the song \"Smells Like Teen Spirit\"??",
        "ori_data_item": {
            "qid": 2103293014000,
            "question": "who is the author of smells like teen spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0484q",
                    "entity_name": "Kurt Cobain"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.songwriter",
                        "class": "music.songwriter",
                        "friendly_name": "Songwriter",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gb9l",
                        "class": "film.film_song",
                        "friendly_name": "Smells Like Teen Spirit",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.lyricist.lyrics_written",
                        "friendly_name": "Lyrics Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.songwriter . \nVALUES ?x1 { :m.0gb9l } \n?x0 :music.lyricist.lyrics_written ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.songwriter (JOIN music.lyricist.lyrics_written m.0gb9l))"
        }
    },
    "554": {
        "generations": "which quotations are incorrectly attributed to dejan stojanovi\u0107??",
        "ori_data_item": {
            "qid": 2100983007000,
            "question": "what quotation is incorrectly attributed to dejan stojanovi\u0107?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048bz6z",
                    "entity_name": "Tell me what you like and I'll tell you what you are."
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0crdtyf",
                        "class": "people.person",
                        "friendly_name": "Dejan Stojanovi\u0107",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.quotation.incorrectly_attributed_to",
                        "friendly_name": "Incorrectly attributed to"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \nVALUES ?x1 { :m.0crdtyf } \n?x0 :media_common.quotation.incorrectly_attributed_to ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.quotation (JOIN media_common.quotation.incorrectly_attributed_to m.0crdtyf))"
        }
    },
    "555": {
        "generations": "who is a well-known practitioner of the martial art mentioned??",
        "ori_data_item": {
            "qid": 2102505008000,
            "question": "what is the name of the martial art practiced by manus boonjumnong?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cgz",
                    "entity_name": "Boxing"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "martial_arts.martial_art",
                        "class": "martial_arts.martial_art",
                        "friendly_name": "Martial Art",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07rs9k",
                        "class": "martial_arts.martial_artist",
                        "friendly_name": "Manus Boonjumnong",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "martial_arts.martial_art.well_known_practitioner",
                        "friendly_name": "Practitioner"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_art . \nVALUES ?x1 { :m.07rs9k } \n?x0 :martial_arts.martial_art.well_known_practitioner ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "martial_arts"
            ],
            "s_expression": "(AND martial_arts.martial_art (JOIN martial_arts.martial_art.well_known_practitioner m.07rs9k))"
        }
    },
    "556": {
        "generations": "which influence node is influenced by carlos??",
        "ori_data_item": {
            "qid": 2102275012000,
            "question": "carlos influenced what influence node?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g_5z4",
                    "entity_name": "Richard Misrach"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gg5xb9",
                    "entity_name": "Gerhard Gruber"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "influence.influence_node",
                        "class": "influence.influence_node",
                        "friendly_name": "Influence Node",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hp96",
                        "class": "influence.influence_node",
                        "friendly_name": "carlos",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "influence.influence_node.influenced_by",
                        "friendly_name": "Influenced By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :influence.influence_node . \nVALUES ?x1 { :m.0hp96 } \n?x0 :influence.influence_node.influenced_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "influence"
            ],
            "s_expression": "(AND influence.influence_node (JOIN influence.influence_node.influenced_by m.0hp96))"
        }
    },
    "557": {
        "generations": "what aircraft model is associated with the great artiste??",
        "ori_data_item": {
            "qid": 3203258004000,
            "question": "find the aircrafts within the model family of the great artiste",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018sk0",
                    "entity_name": "Bockscar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02m5s",
                    "entity_name": "Enola Gay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fr9pk",
                    "entity_name": "Big Stink"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fr8hx",
                    "entity_name": "Full House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fr8nd",
                    "entity_name": "Jabit III"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft",
                        "class": "aviation.aircraft",
                        "friendly_name": "Aircraft",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01r3mq",
                        "class": "aviation.aircraft",
                        "friendly_name": "The Great Artiste",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "aviation.aircraft_model.aircraft",
                        "friendly_name": "Aircraft"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "aviation.aircraft.model",
                        "friendly_name": "Model"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft . \n?x1 :type.object.type :aviation.aircraft_model . \nVALUES ?x2 { :m.01r3mq } \n?x1 :aviation.aircraft_model.aircraft ?x0 . \n?x2 :aviation.aircraft.model ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft (JOIN (R aviation.aircraft_model.aircraft) (JOIN (R aviation.aircraft.model) m.01r3mq)))"
        }
    },
    "558": {
        "generations": "which processor manufacturer produces variants of P6??",
        "ori_data_item": {
            "qid": 3200999015000,
            "question": "which processor manufacturer manufactures the variants of p6?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03s7h",
                    "entity_name": "Intel"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.processor_manufacturer",
                        "class": "computer.processor_manufacturer",
                        "friendly_name": "Processor Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.computer_processor",
                        "class": "computer.computer_processor",
                        "friendly_name": "Computer Processor",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07g2j9",
                        "class": "computer.computer_processor",
                        "friendly_name": "P6",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.computer_processor.manufacturers",
                        "friendly_name": "Manufacturers"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "computer.computer_processor.variants",
                        "friendly_name": "Variants"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.processor_manufacturer . \n?x1 :type.object.type :computer.computer_processor . \nVALUES ?x2 { :m.07g2j9 } \n?x1 :computer.computer_processor.manufacturers ?x0 . \n?x2 :computer.computer_processor.variants ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.processor_manufacturer (JOIN (R computer.computer_processor.manufacturers) (JOIN (R computer.computer_processor.variants) m.07g2j9)))"
        }
    },
    "559": {
        "generations": "which transport operator serves travel destinations that include bay terrace??",
        "ori_data_item": {
            "qid": 3203799000000,
            "question": "what transportation transport operator has terminus at bay terrace?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01t_4s",
                    "entity_name": "Staten Island Railway"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.transport_operator",
                        "class": "travel.transport_operator",
                        "friendly_name": "Transport operator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.transportation",
                        "class": "travel.transportation",
                        "friendly_name": "Transportation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03gr7gz",
                        "class": "travel.transport_terminus",
                        "friendly_name": "Bay Terrace",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.transport_operator.travel_destinations_served",
                        "friendly_name": "Travel destinations served"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "travel.transportation.transport_terminus",
                        "friendly_name": "Transport terminus"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.transport_operator . \n?x1 :type.object.type :travel.transportation . \nVALUES ?x2 { :m.03gr7gz } \n?x0 :travel.transport_operator.travel_destinations_served ?x1 . \n?x1 :travel.transportation.transport_terminus ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.transport_operator (JOIN travel.transport_operator.travel_destinations_served (JOIN travel.transportation.transport_terminus m.03gr7gz)))"
        }
    },
    "560": {
        "generations": "who is the creator of the fictional universes that feature wood and sinew laminate as a fictional substance??",
        "ori_data_item": {
            "qid": 3200289009000,
            "question": "the appearance of wood and sinew laminate occurred in which creator's fictional universe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048v1m",
                    "entity_name": "Andrew J. Offutt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cptv",
                    "entity_name": "Robert Asprin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dz4n",
                    "entity_name": "Marion Zimmer Bradley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01963w",
                    "entity_name": "C. J. Cherryh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dhmw",
                    "entity_name": "Joe Haldeman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047slxn",
                    "entity_name": "Chris Morris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dzxdk",
                    "entity_name": "Janet Morris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r9r5",
                    "entity_name": "Lynn Abbey"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe_creator",
                        "class": "fictional_universe.fictional_universe_creator",
                        "friendly_name": "Fictional universe creator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0dg8dbd",
                        "class": "fictional_universe.fictional_substance",
                        "friendly_name": "wood and sinew laminate",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe_creator.fictional_universes_created",
                        "friendly_name": "Fictional universes created"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_substance.appears_in_fictional_universe",
                        "friendly_name": "Appears in Fictional Universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe_creator . \n?x1 :type.object.type :fictional_universe.fictional_universe . \nVALUES ?x2 { :m.0dg8dbd } \n?x0 :fictional_universe.fictional_universe_creator.fictional_universes_created ?x1 . \n?x2 :fictional_universe.fictional_substance.appears_in_fictional_universe ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe_creator (JOIN fictional_universe.fictional_universe_creator.fictional_universes_created (JOIN (R fictional_universe.fictional_substance.appears_in_fictional_universe) m.0dg8dbd)))"
        }
    },
    "561": {
        "generations": "who is the theatrical composer with the lowest weight in kilograms??",
        "ori_data_item": {
            "qid": 2103543001000,
            "question": "name the theatrical composer who is the lightest",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02f1c",
                    "entity_name": "Dolly Parton"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theatrical_composer",
                        "class": "theater.theatrical_composer",
                        "friendly_name": "Theatrical Composer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.theatrical_composer . \n?y0 :people.person.weight_kg ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN theater.theatrical_composer people.person.weight_kg)"
        }
    },
    "562": {
        "generations": "what is the place of worship with the fewest number of floors in its building??",
        "ori_data_item": {
            "qid": 2103660003000,
            "question": "find place of worship with the smallest floors?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm833",
                    "entity_name": "St. Paul's Episcopal Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl7j37",
                    "entity_name": "LDS Chapels"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mnxb6",
                    "entity_name": "St. Clare of Assissi Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbm467",
                    "entity_name": "Trinity Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl7gww",
                    "entity_name": "LDS Stake Centers"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.place_of_worship",
                        "class": "religion.place_of_worship",
                        "friendly_name": "Place of worship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.building.floors",
                        "friendly_name": "Floors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.place_of_worship . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :religion.place_of_worship . \n?y0 :architecture.building.floors ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :architecture.building.floors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(ARGMIN religion.place_of_worship architecture.building.floors)"
        }
    },
    "563": {
        "generations": "what work was lost due to the media common cause of loss??",
        "ori_data_item": {
            "qid": 2102342015000,
            "question": "how was the portrait of a young man work lost?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pnk",
                    "entity_name": "Theft"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.cause_of_loss",
                        "class": "media_common.cause_of_loss",
                        "friendly_name": "Cause of loss",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0b74qb7",
                        "class": "media_common.lost_work",
                        "friendly_name": "Portrait of a Young Man",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.cause_of_loss.works_lost_this_way",
                        "friendly_name": "Works lost this way"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.cause_of_loss . \nVALUES ?x1 { :m.0b74qb7 } \n?x0 :media_common.cause_of_loss.works_lost_this_way ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.cause_of_loss (JOIN media_common.cause_of_loss.works_lost_this_way m.0b74qb7))"
        }
    },
    "564": {
        "generations": "which video game character has a weight of at most 65.0 and shares the same occupation with peter parker??",
        "ori_data_item": {
            "qid": 4303260013000,
            "question": "what video game character weighs less than 65.0 kgs and has the same occupation as peter parker?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0470s",
                    "entity_name": "Jean Grey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02321x",
                    "entity_name": "Kitty Pryde"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0czcz_6",
                    "entity_name": "Von Kaiser"
                }
            ],
            "function": "<=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cvg.game_character",
                        "class": "cvg.game_character",
                        "friendly_name": "Video Game Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "65.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "65.0",
                        "question_node": 0,
                        "function": "<="
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.06ys2",
                        "class": "comic_strips.comic_strip_character",
                        "friendly_name": "Peter Parker",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.weight",
                        "friendly_name": "Weight"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "fictional_universe.character_occupation.characters_with_this_occupation",
                        "friendly_name": "Characters With This Occupation"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "fictional_universe.character_occupation.characters_with_this_occupation",
                        "friendly_name": "Characters With This Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_character . \nFILTER (?x1 <= \"65.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x2 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x3 { :m.06ys2 } \n?x0 :fictional_universe.fictional_character.weight ?x1 . \n?x2 :fictional_universe.character_occupation.characters_with_this_occupation ?x0 . \n?x2 :fictional_universe.character_occupation.characters_with_this_occupation ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND cvg.game_character (AND (le fictional_universe.fictional_character.weight 65.0^^http://www.w3.org/2001/XMLSchema#float) (JOIN (R fictional_universe.character_occupation.characters_with_this_occupation) (JOIN fictional_universe.character_occupation.characters_with_this_occupation m.06ys2))))"
        }
    },
    "565": {
        "generations": "who designed the rocket engines RD-261 for spaceflight??",
        "ori_data_item": {
            "qid": 2102706013000,
            "question": "the rd-261 rocket engine was designed by who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p_3s6",
                    "entity_name": "NPO Energomash"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_designer",
                        "class": "spaceflight.rocket_engine_designer",
                        "friendly_name": "Rocket engine designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02xltp2",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "RD-261",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine_designer.rocket_engines",
                        "friendly_name": "Rocket engines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine_designer . \nVALUES ?x1 { :m.02xltp2 } \n?x0 :spaceflight.rocket_engine_designer.rocket_engines ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine_designer (JOIN spaceflight.rocket_engine_designer.rocket_engines m.02xltp2))"
        }
    },
    "566": {
        "generations": "who was the monarch during the coronation of elizabeth i of england??",
        "ori_data_item": {
            "qid": 2100780003000,
            "question": "what monarch performs a coronation of elizabeth i of england?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rg_",
                    "entity_name": "Elizabeth I of England"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.monarch",
                        "class": "royalty.monarch",
                        "friendly_name": "Monarch",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0528jpv",
                        "class": "royalty.coronation",
                        "friendly_name": "Coronation of Elizabeth I of England",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "royalty.monarch.coronation_event",
                        "friendly_name": "Coronation event"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \nVALUES ?x1 { :m.0528jpv } \n?x0 :royalty.monarch.coronation_event ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.monarch (JOIN royalty.monarch.coronation_event m.0528jpv))"
        }
    },
    "567": {
        "generations": "which work of fiction features joker venom as a fictional object??",
        "ori_data_item": {
            "qid": 3204148000000,
            "question": "name the comics that has joker venom.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzz_1h",
                    "entity_name": "Batman: Year One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030shcp",
                    "entity_name": "The Joker"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c4cyp",
                    "entity_name": "Endgame, Part Three: ...Sleep In Heavenly Peace..."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgqd",
                    "entity_name": "Mr. Who Lives Again"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rl00",
                    "entity_name": "The Batman Wars Against the Dirigible of Doom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgqr",
                    "entity_name": "Buenos Aires"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkcfz",
                    "entity_name": "The Submarine Strikes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgpq",
                    "entity_name": "Dr. Clever"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kwy5d",
                    "entity_name": "The Gathering"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lkhv8",
                    "entity_name": "Justice Be Done"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ywk1n",
                    "entity_name": "SOS Green Lantern!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzz_sb",
                    "entity_name": "Batman: The Dark Knight Returns"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kkx2",
                    "entity_name": "The Sandman: Dream Country"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_57s8",
                    "entity_name": "Fa\u00e7ade"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5qs3",
                    "entity_name": "Batman: Inferno"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bwtqr",
                    "entity_name": "The Atom Cave Raiders!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bx124",
                    "entity_name": "Double Image"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_f3g",
                    "entity_name": "Chapter Five: Father's Day"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_f9k",
                    "entity_name": "Chapter Six: Husbands and Wives"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c_fg9",
                    "entity_name": "Chapter Seven: The Hero's Life"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cp11z",
                    "entity_name": "Chapter Two: House of Lies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cpvn2",
                    "entity_name": "Chapter Three: Serial Killer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cq2b8",
                    "entity_name": "Chapter Four: Who Benefits"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cp0jk",
                    "entity_name": "Chapter One: Coffin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036kdkt",
                    "entity_name": "A Death in the Family, Part One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036lcnm",
                    "entity_name": "A Death in the Family, Part Two"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011jpj1n",
                    "entity_name": "Justice League: Throne of Atlantis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bw1d7",
                    "entity_name": "Fruit of the Earth, Part Two"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jtpwh",
                    "entity_name": "The Race of Wheel and Keel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgq1",
                    "entity_name": "Black Jack"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vvtjq",
                    "entity_name": "Hush - Chapter Four: The City"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0394ts9",
                    "entity_name": "A Death in the Family, Part Three"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bn3jw",
                    "entity_name": "A Death in the Family, Part Four"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bw1ng",
                    "entity_name": "Mark of Cain, Part Two"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wlyzm",
                    "entity_name": "Spore, Part 4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkcd6",
                    "entity_name": "Case of the Namesake Murders"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkchc",
                    "entity_name": "Secret Mission in Honduras"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ywk1b",
                    "entity_name": "Secret of the Flaming Spear!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03dfhgd",
                    "entity_name": "A Gotham Tale, Part One - Gargoyles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bvxx7",
                    "entity_name": "The Bigger They Are"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04hz0j_",
                    "entity_name": "D.O.A.: The GOD of WAR!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r96zb",
                    "entity_name": "Batman: The Last Arkham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ylb8d",
                    "entity_name": "Batman: The Killing Joke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wlyz0",
                    "entity_name": "Dead Reckoning, Part 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030scwl",
                    "entity_name": "The Legend of the Batman - Who He is, and How he Came to Be"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vtvbp",
                    "entity_name": "The Last Days of Krypton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ywk1z",
                    "entity_name": "Menace of the Runaway Missile!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j5449",
                    "entity_name": "The Man Who Broke the Time Barrier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rkpy",
                    "entity_name": "Night of the Living Dead!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkchq",
                    "entity_name": "The Black Knight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgpc",
                    "entity_name": "The Silent City"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rkmx",
                    "entity_name": "Daughter of the Demon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rkk2",
                    "entity_name": "Cut... and Run"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j543z",
                    "entity_name": "Mystery of the Human Thunderbolt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dnvg7",
                    "entity_name": "For the Man Who Has Everything"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jtpx5",
                    "entity_name": "The Coldest Man On Earth!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rkkq",
                    "entity_name": "Mark of Cain, Part One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkcg9",
                    "entity_name": "The Vanishing Menaces"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkcgn",
                    "entity_name": "Murder Takes the Spotlight"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jtpwv",
                    "entity_name": "The Secret of the Empty Box"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jtpym",
                    "entity_name": "The Gun That Dropped Through Time!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039nhk7",
                    "entity_name": "Batman #655"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030rkj4",
                    "entity_name": "Into the Den of the Death-Dealers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkch0",
                    "entity_name": "Mr. Who"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgnp",
                    "entity_name": "Introducing Percival Popp the Super-Cop"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xkgp0",
                    "entity_name": "The Case of the Dead Thoroughbred"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lmk8m",
                    "entity_name": "Summons From Space!"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lmk8z",
                    "entity_name": "The Invisible Destroyer!"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.work_of_fiction",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "Work of Fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_fictional_universe",
                        "class": "comic_books.comic_book_fictional_universe",
                        "friendly_name": "Comic Book Fictional Universe",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0115mdrf",
                        "class": "fictional_universe.fictional_object",
                        "friendly_name": "Joker venom",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_universe.works_set_here",
                        "friendly_name": "Works Set Here"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_object.featured_in_fictional_universe",
                        "friendly_name": "Featured in Fictional Universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.work_of_fiction . \n?x1 :type.object.type :comic_books.comic_book_fictional_universe . \nVALUES ?x2 { :m.0115mdrf } \n?x1 :fictional_universe.fictional_universe.works_set_here ?x0 . \n?x2 :fictional_universe.fictional_object.featured_in_fictional_universe ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.work_of_fiction (JOIN (R fictional_universe.fictional_universe.works_set_here) (JOIN (R fictional_universe.fictional_object.featured_in_fictional_universe) m.0115mdrf)))"
        }
    },
    "568": {
        "generations": "what is the rank of organisms that are classified lower than family??",
        "ori_data_item": {
            "qid": 2101803012000,
            "question": "what classifications of organisms has a lower rank than family?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gqpx",
                    "entity_name": "Order"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02sddyl",
                    "entity_name": "Superfamily"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wly0p",
                    "entity_name": "Infraorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02sdd3k",
                    "entity_name": "Suborder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wly2t",
                    "entity_name": "Parvorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0517nvv",
                    "entity_name": "Viral Group"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism_classification_rank",
                        "class": "biology.organism_classification_rank",
                        "friendly_name": "Organism Classification Rank",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fl35",
                        "class": "biology.organism_classification_rank",
                        "friendly_name": "Family",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism_classification_rank.lower_rank",
                        "friendly_name": "Lower rank"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.0fl35 } \n?x0 :biology.organism_classification_rank.lower_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.lower_rank m.0fl35))"
        }
    },
    "569": {
        "generations": "who is the founder of the family that includes hugh de rosel??",
        "ori_data_item": {
            "qid": 2102351000000,
            "question": "what is the name of the family that created hugh de rosel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s2blq",
                    "entity_name": "Clan Russell"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.family",
                        "class": "people.family",
                        "friendly_name": "Family",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0_xwfc1",
                        "class": "people.family_member",
                        "friendly_name": "Hugh de Rosel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.family.founder",
                        "friendly_name": "Founder"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.family . \nVALUES ?x1 { :m.0_xwfc1 } \n?x0 :people.family.founder ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.family (JOIN people.family.founder m.0_xwfc1))"
        }
    },
    "570": {
        "generations": "in what works does the event \"emissary\" appear in fiction??",
        "ori_data_item": {
            "qid": 2100652002000,
            "question": "which event appears in emissary?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01d503",
                    "entity_name": "Battle of Wolf 359"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.event_in_fiction",
                        "class": "fictional_universe.event_in_fiction",
                        "friendly_name": "Event in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.023x1b",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "Emissary",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.event_in_fiction.appears_in_these_works",
                        "friendly_name": "Appears in these works"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.event_in_fiction . \nVALUES ?x1 { :m.023x1b } \n?x0 :fictional_universe.event_in_fiction.appears_in_these_works ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.event_in_fiction (JOIN fictional_universe.event_in_fiction.appears_in_these_works m.023x1b))"
        }
    },
    "571": {
        "generations": "which site is associated with the internet api called whitepages.com??",
        "ori_data_item": {
            "qid": 2100315000000,
            "question": "whitepages.com's api is what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042zfqr",
                    "entity_name": "http://developer.whitepages.com/"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.api",
                        "class": "internet.api",
                        "friendly_name": "API",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.042zfqj",
                        "class": "internet.website",
                        "friendly_name": "WhitePages.com",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.api.site",
                        "friendly_name": "Site"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.api . \nVALUES ?x1 { :m.042zfqj } \n?x0 :internet.api.site ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.api (JOIN internet.api.site m.042zfqj))"
        }
    },
    "572": {
        "generations": "which ship class has a beam of 18.2 meters??",
        "ori_data_item": {
            "qid": 2102253003000,
            "question": "find ship class whose beam is 18.2.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g2h5",
                    "entity_name": "Oscar-class submarine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boats.ship_class",
                        "class": "boats.ship_class",
                        "friendly_name": "Ship class",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "18.2^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "18.2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.ship_class.beam_meters",
                        "friendly_name": "Beam"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship_class . \nVALUES ?x1 { \"18.2\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :boats.ship_class.beam_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(AND boats.ship_class (JOIN boats.ship_class.beam_meters 18.2^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "573": {
        "generations": "which manufacturer produces the manufactured drug form??",
        "ori_data_item": {
            "qid": 2100931005000,
            "question": "what drug form is manufactured by dentsply caulk?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqm686",
                    "entity_name": "Topex 220 dentifrice gel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqnhq4",
                    "entity_name": "Topex 220 dentifrice gel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhnsc",
                    "entity_name": "Topex 220 dentifrice gel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlhd7",
                    "entity_name": "Topex 220 dentifrice gel"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqyrv0",
                        "class": "medicine.drug_manufacturer",
                        "friendly_name": "DENTSPLY Caulk",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.manufacturer",
                        "friendly_name": "Manufacturer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.0hqyrv0 } \n?x0 :medicine.manufactured_drug_form.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.manufacturer m.0hqyrv0))"
        }
    },
    "574": {
        "generations": "who is the author of the journal article \"Ontogeny and phylogeny\u2014revisited and reunited\"??",
        "ori_data_item": {
            "qid": 3203247002000,
            "question": "ontogeny and phylogeny\u2014revisited and reunited cited joseph t. eastman's work in what journal article?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bnng80",
                    "entity_name": "Phyletic devergence and specialization for pelagic life in the Antarctic nototheniid fish Pleuragramma antarcticum"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.journal_article",
                        "class": "book.journal_article",
                        "friendly_name": "Journal article",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bnngzf",
                        "class": "book.author",
                        "friendly_name": "Joseph T. Eastman",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0bhh_lk",
                        "class": "book.cited_work",
                        "friendly_name": "Ontogeny and phylogeny\u2014revisited and reunited",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "book.cited_work.cited_in",
                        "friendly_name": "Cited in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.journal_article . \nVALUES ?x1 { :m.0bnngzf } \nVALUES ?x2 { :m.0bhh_lk } \n?x0 :book.written_work.author ?x1 . \n?x2 :book.cited_work.cited_in ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.journal_article (AND (JOIN book.written_work.author m.0bnngzf) (JOIN (R book.cited_work.cited_in) m.0bhh_lk)))"
        }
    },
    "575": {
        "generations": "what comic book stories are classified as short stories??",
        "ori_data_item": {
            "qid": 2102891002000,
            "question": "short story is the genre for which comic book stories?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmckm",
                    "entity_name": "Calliope"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcj8",
                    "entity_name": "A Midsummer Night's Dream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcmh",
                    "entity_name": "A Dream of a Thousand Cats"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hpmcnc",
                    "entity_name": "Fa\u00e7ade"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0707q",
                        "class": "comic_books.comic_book_genre",
                        "friendly_name": "Short story",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.genre",
                        "friendly_name": "Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.0707q } \n?x0 :comic_books.comic_book_story.genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.genre m.0707q))"
        }
    },
    "576": {
        "generations": "what travel destination can be reached using metro transport in sydney??",
        "ori_data_item": {
            "qid": 2100849005000,
            "question": "which travel destination has local transportation of metro transport sydney?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y57",
                    "entity_name": "Sydney"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.travel_destination",
                        "class": "travel.travel_destination",
                        "friendly_name": "Travel destination",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09zfxx",
                        "class": "metropolitan_transit.transit_system",
                        "friendly_name": "Metro Transport Sydney",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.travel_destination.local_transportation",
                        "friendly_name": "Local transportation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.travel_destination . \nVALUES ?x1 { :m.09zfxx } \n?x0 :travel.travel_destination.local_transportation ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.travel_destination (JOIN travel.travel_destination.local_transportation m.09zfxx))"
        }
    },
    "577": {
        "generations": "what basketball division does the SMU Mustangs men's basketball team belong to??",
        "ori_data_item": {
            "qid": 2101031009000,
            "question": "what is the basketball division of team smu mustangs men's basketball?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031fsz",
                    "entity_name": "Division I (NCAA)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_division",
                        "class": "basketball.basketball_division",
                        "friendly_name": "Basketball Division",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05g16k0",
                        "class": "basketball.basketball_team",
                        "friendly_name": "SMU Mustangs men's basketball",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_division.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_division . \nVALUES ?x1 { :m.05g16k0 } \n?x0 :basketball.basketball_division.teams ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_division (JOIN basketball.basketball_division.teams m.05g16k0))"
        }
    },
    "578": {
        "generations": "what is the earliest broadcast tv channel??",
        "ori_data_item": {
            "qid": 2104211002000,
            "question": "which tv channel was the earliest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cbb_2",
                    "entity_name": "Pershyi Natsionalnyi"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.tv_channel",
                        "class": "broadcast.tv_channel",
                        "friendly_name": "TV Channel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.tv_channel.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.tv_channel . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :broadcast.tv_channel . \n?y0 :broadcast.tv_channel.from ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :broadcast.tv_channel.from ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(ARGMIN broadcast.tv_channel broadcast.tv_channel.from)"
        }
    },
    "579": {
        "generations": "what media format is associated with releases produced by steve harris in the music industry??",
        "ori_data_item": {
            "qid": 3202872015000,
            "question": "in what format does steve harris distribute his musical recordings?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01www",
                    "entity_name": "Compact disc"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.media_format",
                        "class": "music.media_format",
                        "friendly_name": "Media Format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.release_component",
                        "class": "music.release_component",
                        "friendly_name": "Musical Release Component",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01s2tk",
                        "class": "music.producer",
                        "friendly_name": "Steve Harris",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "music.release.format",
                        "friendly_name": "Format"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "music.producer.releases_produced",
                        "friendly_name": "Releases produced"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.media_format . \n?x1 :type.object.type :music.release_component . \nVALUES ?x2 { :m.01s2tk } \n?x1 :music.release.format ?x0 . \n?x2 :music.producer.releases_produced ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.media_format (JOIN (R music.release.format) (JOIN (R music.producer.releases_produced) m.01s2tk)))"
        }
    },
    "580": {
        "generations": "which aviation airliner accident involved the operator interflug??",
        "ori_data_item": {
            "qid": 2100329012000,
            "question": "which aviation icident was interflug the operator of?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sc6zt",
                    "entity_name": "1972 K\u00f6nigs Wusterhausen air disaster"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02qxq0",
                        "class": "aviation.airline",
                        "friendly_name": "Interflug",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.operator",
                        "friendly_name": "Operator"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { :m.02qxq0 } \n?x0 :aviation.airliner_accident.operator ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.operator m.02qxq0))"
        }
    },
    "581": {
        "generations": "what tournament event was contested in the 2009 hockey champions challenge II??",
        "ori_data_item": {
            "qid": 2100401003000,
            "question": "2009 hockey champions challenge ii is the content of what tournament event?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zxl45",
                    "entity_name": "2009 Men's Hockey Champions Challenge II"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.tournament_event",
                        "class": "sports.tournament_event",
                        "friendly_name": "Tournament event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zfwy85",
                        "class": "sports.multi_event_tournament",
                        "friendly_name": "2009 Hockey Champions Challenge II",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.tournament_event.tournaments_contested_in",
                        "friendly_name": "Tournaments contested in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.tournament_event . \nVALUES ?x1 { :m.0zfwy85 } \n?x0 :sports.tournament_event.tournaments_contested_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.tournament_event (JOIN sports.tournament_event.tournaments_contested_in m.0zfwy85))"
        }
    },
    "582": {
        "generations": "which TV station is owned by the University of New Mexico??",
        "ori_data_item": {
            "qid": 2100276004000,
            "question": "university of new mexico own what tv station?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09c4s9",
                    "entity_name": "KNME-TV"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.tv_station",
                        "class": "broadcast.tv_station",
                        "friendly_name": "TV Station",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02482c",
                        "class": "broadcast.tv_station_owner",
                        "friendly_name": "University of New Mexico",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.tv_station.owner",
                        "friendly_name": "Owner"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.tv_station . \nVALUES ?x1 { :m.02482c } \n?x0 :broadcast.tv_station.owner ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.tv_station (JOIN broadcast.tv_station.owner m.02482c))"
        }
    },
    "583": {
        "generations": "what TV crew role was involved in the TV episode Jesse James: Legend, Outlaw, Terrorist??",
        "ori_data_item": {
            "qid": 3200282005000,
            "question": "what tv crew role is the job associated with a tv crew gig in the episode jesse james: legend, outlaw, terrorist?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hplmpp",
                    "entity_name": "On-Line Editor"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_crew_role",
                        "class": "tv.tv_crew_role",
                        "friendly_name": "TV crew role",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_crew_gig",
                        "class": "tv.tv_crew_gig",
                        "friendly_name": "TV crew gig",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0b44rcb",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "Jesse James: Legend, Outlaw, Terrorist",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_crew_role.tv_episodes",
                        "friendly_name": "TV episodes with this job"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_crew_gig.episode",
                        "friendly_name": "Episode"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_crew_role . \n?x1 :type.object.type :tv.tv_crew_gig . \nVALUES ?x2 { :m.0b44rcb } \n?x0 :tv.tv_crew_role.tv_episodes ?x1 . \n?x1 :tv.tv_crew_gig.episode ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_crew_role (JOIN tv.tv_crew_role.tv_episodes (JOIN tv.tv_crew_gig.episode m.0b44rcb)))"
        }
    },
    "584": {
        "generations": "which school district has at least 50 number of schools??",
        "ori_data_item": {
            "qid": 2105064014000,
            "question": "which school district has no less than 50 schools?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03kfzw",
                    "entity_name": "Seattle Public Schools"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06c9t0",
                    "entity_name": "Poudre School District"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01twq9",
                    "entity_name": "Houston Independent School District"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vwd20",
                    "entity_name": "School District of Palm Beach County"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kg57b",
                    "entity_name": "Commission scolaire de Montr\u00e9al"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026ymlg",
                    "entity_name": "Cherry Creek School District"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0480x9b",
                    "entity_name": "Marion County School District"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3nkny",
                    "entity_name": "Allied Schools"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09kwy_",
                    "entity_name": "Suffolk County Council"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d40w5",
                    "entity_name": "Uttar Pradesh Madhyamik Shiksha Parishad"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlmwjg",
                    "entity_name": "Steiner Schools Australia"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school_district",
                        "class": "education.school_district",
                        "friendly_name": "School district",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "50^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "50",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.school_district.number_of_schools",
                        "friendly_name": "Number of schools"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school_district . \nFILTER (?x1 >= \"50\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :education.school_district.number_of_schools ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school_district (ge education.school_district.number_of_schools 50^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "585": {
        "generations": "which organizations are involved in the sector of consumer protections??",
        "ori_data_item": {
            "qid": 2101339009000,
            "question": "what is the name of the organization that has a sector of consumer protections?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030sgz",
                    "entity_name": "NRMA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cpz5s",
                    "entity_name": "Corporate Accountability International"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bvkn",
                    "entity_name": "Public Citizen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0281wzm",
                    "entity_name": "Funeral Consumers Alliance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q7mt",
                    "entity_name": "Association of Community Organizations for Reform Now"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01tk2",
                    "entity_name": "Campaign for Real Ale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w8s",
                    "entity_name": "Free Software Foundation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y2syv",
                    "entity_name": "Which?"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n5k2r",
                    "entity_name": "Society for the Preservation of Beers from the Wood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01q1hy",
                    "entity_name": "Consumers Union"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063yvt5",
                    "entity_name": "Japan Offspring Fund"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.061tp4",
                    "entity_name": "Center for Science in the Public Interest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025xk6w",
                    "entity_name": "Physicians for a National Health Program"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fcx23",
                    "entity_name": "Food & Water Watch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025v6c9",
                    "entity_name": "Norwegian Consumer Council"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.061_24",
                    "entity_name": "Consumers International"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03r0kt",
                    "entity_name": "Consumer organization"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bb7h",
                    "entity_name": "Choice"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04sg2y",
                    "entity_name": "STOP Foodborne Illness"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06622l",
                    "entity_name": "LobbyWatch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dh12q",
                    "entity_name": "Public Citizen Litigation Group"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043bmp",
                    "entity_name": "Cooler Heads Coalition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0272qny",
                    "entity_name": "Consumers' Association of Ireland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.091j8_",
                    "entity_name": "ANEC"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.088fqy",
                    "entity_name": "Consumer NZ"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wh9nc",
                    "entity_name": "Kids In Danger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mycr",
                    "entity_name": "Consumer Federation of America"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022x0l",
                    "entity_name": "National Consumers League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f4yy",
                    "entity_name": "Consumers' Research"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09hwwh",
                    "entity_name": "BBB Wise Giving Alliance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v7pp",
                    "entity_name": "Public Patent Foundation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qchtg",
                    "entity_name": "Norwegian Consumer Ombudsman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09znd6",
                    "entity_name": "Stiftung Warentest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.091pwh",
                    "entity_name": "CASPIAN"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063zfrh",
                    "entity_name": "Consumer Action"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vr9ms",
                    "entity_name": "European Beer Consumers' Union"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bz_bh",
                    "entity_name": "Royal Automobile Club of Western Australia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030sfl",
                    "entity_name": "Royal Automobile Club of Australia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06f71f",
                    "entity_name": "Consumer Agency"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030sh9",
                    "entity_name": "Imperial Service Club"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ds64v",
                    "entity_name": "Consumer Attorneys of California"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08z2hb",
                    "entity_name": "Royal Automobile Club of Queensland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.062817",
                    "entity_name": "Consumers' Federation of Australia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization",
                        "class": "organization.organization",
                        "friendly_name": "Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fcm9",
                        "class": "organization.organization_sector",
                        "friendly_name": "consumer protections",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.sectors",
                        "friendly_name": "Sectors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization . \nVALUES ?x1 { :m.0fcm9 } \n?x0 :organization.organization.sectors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization (JOIN organization.organization.sectors m.0fcm9))"
        }
    },
    "586": {
        "generations": "which star is located in a constellation that borders reticulum??",
        "ori_data_item": {
            "qid": 4300899003000,
            "question": "a constellation near reticulum includes what star?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v5g1",
                    "entity_name": "Eta2 Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pfkh2n",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pfl_pt",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg280y",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg2rbl",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg3c0f",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pgp13h",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11b41hfqn",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gd59q",
                    "entity_name": "R136c"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x7gj9",
                    "entity_name": "Delta Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c3rvb",
                    "entity_name": "HD 30177"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f1ll",
                    "entity_name": "R Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_84dyx",
                    "entity_name": "R136a2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bd_v6",
                    "entity_name": "R 66 and R 126"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmd0lf",
                    "entity_name": "R136a1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwyj89",
                    "entity_name": "Melnick 42"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j29v1h",
                    "entity_name": "VFTS 102"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z8p68k",
                    "entity_name": "HD 38282"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g4vq",
                    "entity_name": "GJ 1061"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mgh4s",
                    "entity_name": "Zeta Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pp6s",
                    "entity_name": "S Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wb35m",
                    "entity_name": "MACHO-LMC-5"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wfbr9",
                    "entity_name": "HDE 268835"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wfbtc",
                    "entity_name": "HD 37974"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wfkh8",
                    "entity_name": "R136b"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wfld_",
                    "entity_name": "Eta1 Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wj6t1",
                    "entity_name": "SGR 0525-66"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0406t0v",
                    "entity_name": "HD 269810"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0409076",
                    "entity_name": "LH54-425"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0414hmm",
                    "entity_name": "BB Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lh1fh",
                    "entity_name": "Beta Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n0pwc",
                    "entity_name": "Beta Horologii"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zxglv",
                    "entity_name": "Gamma Doradus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04zy0g2",
                    "entity_name": "WOH G64"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08s7kp",
                    "entity_name": "Alpha Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08t0wz",
                    "entity_name": "HE 0437-5439"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b8pls",
                    "entity_name": "R Horologii"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c023v",
                    "entity_name": "Alpha Horologii"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dnstt",
                    "entity_name": "PSR J0537-6910"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n525y1",
                    "entity_name": "Nu Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n52dw3",
                    "entity_name": "Gamma Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n542jq",
                    "entity_name": "Epsilon Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n5438y",
                    "entity_name": "Delta Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pfmnnm",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg8ng7",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg7cjm",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03r88g",
                    "entity_name": "Beta Hydri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg16vr",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg74v8",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg8_5_",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06hb_r",
                    "entity_name": "Iota Horologii"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg7hr9",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg9_jy",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122tpdd8",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11cfjqt6r",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pfzynf",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11h1tx3m_",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg7hwd",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.099g49",
                    "entity_name": "GJ 3021"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.1227vl2b",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pgcpt8",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pfzpn7",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.119pg0bkm",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star",
                        "class": "astronomy.star",
                        "friendly_name": "Star",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "astronomy.constellation",
                        "class": "astronomy.constellation",
                        "friendly_name": "Constellation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "astronomy.constellation_bordering_relationship",
                        "class": "astronomy.constellation_bordering_relationship",
                        "friendly_name": "Constellation bordering relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.01f170",
                        "class": "astronomy.constellation",
                        "friendly_name": "Reticulum",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "astronomy.constellation.contains",
                        "friendly_name": "Stars"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "astronomy.constellation_bordering_relationship.constellations",
                        "friendly_name": "Constellations"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "astronomy.constellation.bordering_constellations_new",
                        "friendly_name": "Bordering constellations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \n?x1 :type.object.type :astronomy.constellation . \n?x2 :type.object.type :astronomy.constellation_bordering_relationship . \nVALUES ?x3 { :m.01f170 } \n?x1 :astronomy.constellation.contains ?x0 . \n?x2 :astronomy.constellation_bordering_relationship.constellations ?x1 . \n?x3 :astronomy.constellation.bordering_constellations_new ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star (JOIN (R astronomy.constellation.contains) (JOIN (R astronomy.constellation_bordering_relationship.constellations) (JOIN (R astronomy.constellation.bordering_constellations_new) m.01f170))))"
        }
    },
    "587": {
        "generations": "what is the netflix genre of the title 1941??",
        "ori_data_item": {
            "qid": 2101087004000,
            "question": "1941 belongs to which netflix genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw5nwl",
                    "entity_name": "Screwball Comedies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p553",
                    "entity_name": "Comedy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw5nxs",
                    "entity_name": "Comedies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03btsm8",
                    "entity_name": "Action/Adventure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06qm3",
                    "entity_name": "Screwball comedy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cq22t1",
                    "entity_name": "Action Comedies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw5rxh",
                    "entity_name": "Military Action & Adventure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cq22mq",
                    "entity_name": "Spoofs and Satire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gw5sn3",
                    "entity_name": "Satires"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.netflix_genre",
                        "class": "media_common.netflix_genre",
                        "friendly_name": "Netflix Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04t6fk",
                        "class": "media_common.netflix_title",
                        "friendly_name": "1941",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.netflix_genre.titles",
                        "friendly_name": "Titles"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.netflix_genre . \nVALUES ?x1 { :m.04t6fk } \n?x0 :media_common.netflix_genre.titles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.netflix_genre (JOIN media_common.netflix_genre.titles m.04t6fk))"
        }
    },
    "588": {
        "generations": "what is the name of the higher rank of the organism classification rank superclass??",
        "ori_data_item": {
            "qid": 2101895016000,
            "question": "which organism classification ranks higher as superclass?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gqpg",
                    "entity_name": "Class"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_sz8ds",
                    "entity_name": "Unranked class"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism_classification_rank",
                        "class": "biology.organism_classification_rank",
                        "friendly_name": "Organism Classification Rank",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02sddxv",
                        "class": "biology.organism_classification_rank",
                        "friendly_name": "Superclass",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism_classification_rank.higher_rank",
                        "friendly_name": "Higher rank"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification_rank . \nVALUES ?x1 { :m.02sddxv } \n?x0 :biology.organism_classification_rank.higher_rank ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism_classification_rank (JOIN biology.organism_classification_rank.higher_rank m.02sddxv))"
        }
    },
    "589": {
        "generations": "which comic book character appears in a story that was inked by dan adkins??",
        "ori_data_item": {
            "qid": 3201659005000,
            "question": "what comic book character is present in a comic book story written by dan adkins?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0231pt",
                    "entity_name": "Kevin Sydney"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_character",
                        "class": "comic_books.comic_book_character",
                        "friendly_name": "Comic Book Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.081qr2",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "Dan Adkins",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "comic_books.comic_book_story.characters",
                        "friendly_name": "Characters"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "comic_books.comic_book_inker.comic_books_inked",
                        "friendly_name": "Comic Stories Inked"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_character . \n?x1 :type.object.type :comic_books.comic_book_story . \nVALUES ?x2 { :m.081qr2 } \n?x1 :comic_books.comic_book_story.characters ?x0 . \n?x2 :comic_books.comic_book_inker.comic_books_inked ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_character (JOIN (R comic_books.comic_book_story.characters) (JOIN (R comic_books.comic_book_inker.comic_books_inked) m.081qr2)))"
        }
    },
    "590": {
        "generations": "which musical release credits ed mashal as an engineer??",
        "ori_data_item": {
            "qid": 2102901003000,
            "question": "ed mashal engineered which musical release?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031s8k0",
                    "entity_name": "One of These Nights"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release",
                        "class": "music.release",
                        "friendly_name": "Musical Release",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05ccj9t",
                        "class": "music.engineer",
                        "friendly_name": "Ed Mashal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release.engineers",
                        "friendly_name": "Engineers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.05ccj9t } \n?x0 :music.release.engineers ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.release (JOIN music.release.engineers m.05ccj9t))"
        }
    },
    "591": {
        "generations": "which TV series episode was written by Brian Finch??",
        "ori_data_item": {
            "qid": 2101073010000,
            "question": "brian finch wrote which tv episode?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9bc",
                    "entity_name": "The Family Way"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9qs",
                    "entity_name": "The Frighteners"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l42fj",
                    "entity_name": "The Origin Story (4)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l42fw",
                    "entity_name": "The Origin Story (5)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mybd3",
                    "entity_name": "The Battleground Part 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9q9",
                    "entity_name": "Riders of the Storm"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_gml_",
                    "entity_name": "Robbo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq96t",
                    "entity_name": "Blood Sports"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9mg",
                    "entity_name": "Love Child"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9bg",
                    "entity_name": "Local Knowledge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpx0s",
                    "entity_name": "Whatever Lola Wants"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq91g",
                    "entity_name": "Who Needs Enemies"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq923",
                    "entity_name": "Kids"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq92w",
                    "entity_name": "Catch Us If You Can"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq99x",
                    "entity_name": "Pig in the Middle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dr4xs",
                    "entity_name": "Childsplay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl549",
                    "entity_name": "Advice and Consent"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl554",
                    "entity_name": "Golden Lads and Girls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq90x",
                    "entity_name": "Hollywood or Bust"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xvt3b",
                    "entity_name": "All's Fair"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmn3bk",
                    "entity_name": "Exit Lines"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9q3",
                    "entity_name": "Father's Day"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9kz",
                    "entity_name": "No Hiding Place"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1ljq",
                    "entity_name": "The Medusa Strain (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl55f",
                    "entity_name": "Puppy Love"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl55x",
                    "entity_name": "Cats and Dogs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9gs",
                    "entity_name": "Fall Out"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl568",
                    "entity_name": "Ways and Means"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq95z",
                    "entity_name": "Vigilante"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq8z2",
                    "entity_name": "Bang to Rights"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ktx8ht",
                    "entity_name": "The Lord God Made Them All (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l42dv",
                    "entity_name": "The Origin Story (3)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07mr3vm",
                    "entity_name": "Circles Of Doom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1lr8",
                    "entity_name": "The Medusa Strain (3)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1ltp",
                    "entity_name": "The Vanishing Earth (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kxlbq",
                    "entity_name": "Clever Dick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9n0",
                    "entity_name": "A Winter's Tale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpx1q",
                    "entity_name": "What Dreams May Come True"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1lwf",
                    "entity_name": "The Vanishing Earth (2)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl562",
                    "entity_name": "The Name of the Game"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9pb",
                    "entity_name": "Primal Instinct"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1lp4",
                    "entity_name": "The Medusa Strain (2)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpw_y",
                    "entity_name": "Trenchard's Last Case"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq94c",
                    "entity_name": "The Dear Departed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dt8ys",
                    "entity_name": "Goodbye, Mr. Chips"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq8w5",
                    "entity_name": "Say It with Flowers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9gz",
                    "entity_name": "Friends Like You"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dr4y1",
                    "entity_name": "Daughter of the Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9ns",
                    "entity_name": "Witch Hunt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpx3z",
                    "entity_name": "Root and Branch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l42d0",
                    "entity_name": "The Origin Story (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq9jg",
                    "entity_name": "Shadows and Substances"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpw_2",
                    "entity_name": "Roots of Evil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1m45",
                    "entity_name": "The Vanishing Earth (4)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1m0b",
                    "entity_name": "The Vanishing Earth (3)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dhy1r",
                    "entity_name": "Killers (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl56k",
                    "entity_name": "Judgment Day"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl551",
                    "entity_name": "Dog Days"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lg1lsl",
                    "entity_name": "The Medusa Strain (4)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dpwyl",
                    "entity_name": "A Touch of Eastern Promise"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq8w8",
                    "entity_name": "Rustlers and Hustlers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dl543",
                    "entity_name": "Bulldog Breed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kxl87",
                    "entity_name": "Accidental Death"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dq95p",
                    "entity_name": "Domestic"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07l42dj",
                    "entity_name": "The Origin Story (2)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xvt31",
                    "entity_name": "The Creeper"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_episode",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "TV Episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03cv6j1",
                        "class": "tv.tv_writer",
                        "friendly_name": "Brian Finch",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_episode.writer",
                        "friendly_name": "Writer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { :m.03cv6j1 } \n?x0 :tv.tv_series_episode.writer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.writer m.03cv6j1))"
        }
    },
    "592": {
        "generations": "what file formats belong to the computer graphics genre??",
        "ori_data_item": {
            "qid": 2102154006000,
            "question": "computer graphics is the genre of what file format?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01zdj4",
                    "entity_name": "PICT"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.file_format",
                        "class": "computer.file_format",
                        "friendly_name": "File Format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01xfp",
                        "class": "computer.file_format_genre",
                        "friendly_name": "computer graphics",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.file_format.genre",
                        "friendly_name": "Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.file_format . \nVALUES ?x1 { :m.01xfp } \n?x0 :computer.file_format.genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.file_format (JOIN computer.file_format.genre m.01xfp))"
        }
    },
    "593": {
        "generations": "what food has an energy content greater than 1623.0 per 100g??",
        "ori_data_item": {
            "qid": 2103514004000,
            "question": "which food has more than 1623.0 energy per 100g?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015_77",
                    "entity_name": "Walnut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fg0m",
                    "entity_name": "Peanut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m4v",
                    "entity_name": "Almond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.020vl",
                    "entity_name": "Chocolate"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pyqft",
                    "entity_name": "Smorz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04bdh_",
                    "entity_name": "Count Chocula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bm43t",
                    "entity_name": "Reese's Puffs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k0rw8",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011ntvbb",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012fvyrh",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h259",
                    "entity_name": "Cashew"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01pl1k",
                    "entity_name": "Caerphilly cheese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qfcj",
                    "entity_name": "Peanut butter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01sbt1",
                    "entity_name": "Parmigiano-Reggiano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02b0h8",
                    "entity_name": "Candlenut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b3lj",
                    "entity_name": "Pistachio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bp_wy",
                    "entity_name": "Oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn1d",
                    "entity_name": "Puff pastry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0408w6",
                    "entity_name": "Franken Berry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058ksc",
                    "entity_name": "Pork belly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k80r6",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nkt",
                    "entity_name": "Cheese"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0chyh",
                    "entity_name": "Butter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03m2bz",
                    "entity_name": "Honey Nut Cheerios"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04glj6r",
                    "entity_name": "Crunchy Nut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019pht",
                    "entity_name": "Mustard seed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p5lkw",
                    "entity_name": "Grape seed extract"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037wcy",
                    "entity_name": "Safflower"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.056cn0",
                    "entity_name": "Choux pastry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09sglw",
                    "entity_name": "Mee pok"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bccc4",
                    "entity_name": "Guanciale"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0frq6",
                    "entity_name": "Pork"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtcd",
                    "entity_name": "Custard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04pgq7",
                    "entity_name": "Bread crumbs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h0xm",
                    "entity_name": "Bacon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011l9w",
                    "entity_name": "Lard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01btbt",
                    "entity_name": "Pecan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hh4n",
                    "entity_name": "Foie gras"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030mv8",
                    "entity_name": "Chia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04bdjb",
                    "entity_name": "Boo Berry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ggfp5",
                    "entity_name": "Celery salt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kjbv6",
                    "entity_name": "Canola Oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05v6cgd",
                    "entity_name": "Sesame seed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064vtx",
                    "entity_name": "Kaboom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06bxfh",
                    "entity_name": "Frosted Cheerios"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pzs_",
                    "entity_name": "Canarium ovatum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08rwqz",
                    "entity_name": "Oxtail"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gms",
                    "entity_name": "Ramen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09psh",
                    "entity_name": "Flax"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b97cn",
                    "entity_name": "Lamian"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g0y_",
                    "entity_name": "Sunflower seed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hnyx",
                    "entity_name": "Pastry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012bw_vz",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09lnn",
                    "entity_name": "Nutmeg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0101c6sm",
                    "entity_name": "Kellogg's Froot Loops"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01064jgy",
                    "entity_name": "Trix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06v628",
                    "entity_name": "Cookie Crisp"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l71b",
                    "entity_name": "Cap'n Crunch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01dk8s",
                    "entity_name": "Powdered sugar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01f3v2",
                    "entity_name": "Ghee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qf18",
                    "entity_name": "Tahini"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0233qc",
                    "entity_name": "Crouton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025rq9y",
                    "entity_name": "French Toast Crunch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xzt_",
                    "entity_name": "Cinnamon Crunch Crispix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03n8fs7",
                    "entity_name": "safflower oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nn2g",
                    "entity_name": "Sesame oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.045fbf",
                    "entity_name": "Schmaltz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gdv9",
                    "entity_name": "Peanut oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.050hyr",
                    "entity_name": "Winged bean"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0585y",
                    "entity_name": "Matzo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c5_4k",
                    "entity_name": "Poppy seed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05rr0j",
                    "entity_name": "Chocolate chip"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05yr18_",
                    "entity_name": "Unsalted Butter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wyb6",
                    "entity_name": "Pumpkin seed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_ykq",
                    "entity_name": "Peanut sauce"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rfnnkj",
                    "entity_name": "General Mills Cocoa Puffs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07pb77",
                    "entity_name": "Duck meat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0316bq",
                    "entity_name": "Shortening"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k81xj",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bfqc",
                    "entity_name": "Margarine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g2vp",
                    "entity_name": "Rapeseed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qrvs",
                    "entity_name": "Brazil nut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xg7s",
                    "entity_name": "Chorizo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04121p",
                    "entity_name": "Copha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t8xj",
                    "entity_name": "Pancetta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ml4",
                    "entity_name": "Olive oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sqq8b",
                    "entity_name": "Extra virgin olive oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08ct4m",
                    "entity_name": "Sunflower oil"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08vthq",
                    "entity_name": "Cracklin' Oat Bran"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l4_r",
                    "entity_name": "Sesame"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015fyw",
                    "entity_name": "Poppy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6jb",
                    "entity_name": "Lucky Charms"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rp_vg6",
                    "entity_name": "General Mills Golden Grahams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rpjhll",
                    "entity_name": "Kellog's Apple Jacks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rn_82t",
                    "entity_name": "Cinnamon Toast Crunch Ready-to-Eat Cereals"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k0vb8",
                    "entity_name": "Popped Amaranth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01012w80",
                    "entity_name": "Crisco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011vjv8g",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tl7bdc",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011lkgp3",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hvzf8",
                    "entity_name": "NIKONI \"HONEY WITH TAHINI\""
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t_n25d",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011k7_zg",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011shfhk",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t_571l",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v1lf5y",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tl7bdj",
                    "entity_name": "null"
                }
            ],
            "function": ">",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.food",
                        "class": "food.food",
                        "friendly_name": "Food",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1623.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "1623.0",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.food.energy",
                        "friendly_name": "Energy per 100g"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.food . \nFILTER (?x1 > \"1623.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :food.food.energy ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.food (gt food.food.energy 1623.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "594": {
        "generations": "which ships are powered by windpower??",
        "ori_data_item": {
            "qid": 2102400015000,
            "question": "the windpower are a means of propulsion for which ship?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c15_j",
                    "entity_name": "Plastiki"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boats.ship",
                        "class": "boats.ship",
                        "friendly_name": "Ship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01phdl",
                        "class": "boats.means_of_propulsion",
                        "friendly_name": "windpower",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.ship.means_of_propulsion",
                        "friendly_name": "Means of propulsion"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \nVALUES ?x1 { :m.01phdl } \n?x0 :boats.ship.means_of_propulsion ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(AND boats.ship (JOIN boats.ship.means_of_propulsion m.01phdl))"
        }
    },
    "595": {
        "generations": "what is the tv rating for the show ice & brimstone??",
        "ori_data_item": {
            "qid": 2101826008000,
            "question": "ice & brimstone was rated what?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030p0gj",
                    "entity_name": "TV PG"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_rating",
                        "class": "tv.tv_rating",
                        "friendly_name": "TV Rating",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0115h_7x",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "Ice & Brimstone",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_rating.tv_episodes",
                        "friendly_name": "TV Episodes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_rating . \nVALUES ?x1 { :m.0115h_7x } \n?x0 :tv.tv_rating.tv_episodes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_rating (JOIN tv.tv_rating.tv_episodes m.0115h_7x))"
        }
    },
    "596": {
        "generations": "which ice hockey coach is currently coaching a team that has won the president's award??",
        "ori_data_item": {
            "qid": 4302070005000,
            "question": "who currently coaches the winning team of the president's awards award?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08bfvx",
                    "entity_name": "Sylvain Lefebvre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqrsw",
                    "entity_name": "Todd Nelson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs0155",
                    "entity_name": "Mark French"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_coach",
                        "class": "ice_hockey.hockey_coach",
                        "friendly_name": "Ice hockey coach",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_team",
                        "class": "ice_hockey.hockey_team",
                        "friendly_name": "Ice hockey team",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "sports.sports_award",
                        "class": "sports.sports_award",
                        "friendly_name": "Sports League Award",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0pdn9r5",
                        "class": "sports.sports_award_type",
                        "friendly_name": "President's Awards",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "ice_hockey.hockey_coach.current_team",
                        "friendly_name": "Current Team Coached"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "sports.sports_award.team",
                        "friendly_name": "Team"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "sports.sports_award_type.winners",
                        "friendly_name": "Winners"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :ice_hockey.hockey_coach . \n?x1 :type.object.type :ice_hockey.hockey_team . \n?x2 :type.object.type :sports.sports_award . \nVALUES ?x3 { :m.0pdn9r5 } \n?x0 :ice_hockey.hockey_coach.current_team ?x1 . \n?x2 :sports.sports_award.team ?x1 . \n?x3 :sports.sports_award_type.winners ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "sports",
                "ice_hockey"
            ],
            "s_expression": "(AND ice_hockey.hockey_coach (JOIN ice_hockey.hockey_coach.current_team (JOIN (R sports.sports_award.team) (JOIN (R sports.sports_award_type.winners) m.0pdn9r5))))"
        }
    },
    "597": {
        "generations": "what amusement park has the ride called piring oleng??",
        "ori_data_item": {
            "qid": 2100280013000,
            "question": "piring oleng is featured in what amusement park?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b65fpr",
                    "entity_name": "Dunia Fantasi"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.park",
                        "class": "amusement_parks.park",
                        "friendly_name": "Amusement Park",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0b65gbp",
                        "class": "amusement_parks.ride",
                        "friendly_name": "piring oleng",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.park.rides",
                        "friendly_name": "Rides"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.park . \nVALUES ?x1 { :m.0b65gbp } \n?x0 :amusement_parks.park.rides ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.park (JOIN amusement_parks.park.rides m.0b65gbp))"
        }
    },
    "598": {
        "generations": "which musical group contributed to the album anything goes (1988 london studio cast)??",
        "ori_data_item": {
            "qid": 3205108001000,
            "question": "which musical group contributed to anything goes (1988 london studio cast)",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.014hr0",
                    "entity_name": "London Symphony Orchestra"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.musical_group",
                        "class": "music.musical_group",
                        "friendly_name": "Musical Group",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.recording_contribution",
                        "class": "music.recording_contribution",
                        "friendly_name": "Musical Contribution",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01jrvbq",
                        "class": "theater.musical_soundtrack",
                        "friendly_name": "Anything Goes (1988 London studio cast)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "music.recording_contribution.contributor",
                        "friendly_name": "Contributor"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.recording_contribution.album",
                        "friendly_name": "Album"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.musical_group . \n?x1 :type.object.type :music.recording_contribution . \nVALUES ?x2 { :m.01jrvbq } \n?x1 :music.recording_contribution.contributor ?x0 . \n?x1 :music.recording_contribution.album ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.musical_group (JOIN (R music.recording_contribution.contributor) (JOIN music.recording_contribution.album m.01jrvbq)))"
        }
    },
    "599": {
        "generations": "which hotel brand includes luana waikiki as one of its operating brands??",
        "ori_data_item": {
            "qid": 3203250015000,
            "question": "which hotel is part of the same hotel brand with luana waikiki?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbp5",
                    "entity_name": "Polynesian Plaza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhblx",
                    "entity_name": "Hilo Naniloa Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2fp",
                    "entity_name": "Aqua Wave"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbmx",
                    "entity_name": "Pagoda Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbq7",
                    "entity_name": "White Sands Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx28v",
                    "entity_name": "Aqua Ilikai Hotel & Suites"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2fb",
                    "entity_name": "Volcano House"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbl5",
                    "entity_name": "Maile Sky Court"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbfz",
                    "entity_name": "Ewa Hotel Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx24b",
                    "entity_name": "Aqua Suites Guam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2cz",
                    "entity_name": "Aqua Palms Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx29j",
                    "entity_name": "Aqua Kauai Beach Resort"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbh0",
                    "entity_name": "Hokele Suites Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx22p",
                    "entity_name": "Aqua Aloha Surf Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2c8",
                    "entity_name": "Aqua Oasis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2d9",
                    "entity_name": "Aqua Waikiki Pearl"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2d_",
                    "entity_name": "Aqua Skyline at Island Colony"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2cm",
                    "entity_name": "Aqua Pacific Monarch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2bx",
                    "entity_name": "Lotus Honolulu at Diamond Head"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx271",
                    "entity_name": "Aqua Bamboo Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx29w",
                    "entity_name": "Kauai Shores Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2b6",
                    "entity_name": "Aqua Hotel Lanai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx2dn",
                    "entity_name": "Park Shore Waikiki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx295",
                    "entity_name": "Aqua Queen Kapiolani"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vx1xy",
                    "entity_name": "Aqua Hotel Molokai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhbjq",
                    "entity_name": "Maui Beach Hotel"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.hotel",
                        "class": "travel.hotel",
                        "friendly_name": "Hotel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.hotel_brand",
                        "class": "travel.hotel_brand",
                        "friendly_name": "Hotel Brand",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.012vx2bk",
                        "class": "travel.hotel",
                        "friendly_name": "Luana Waikiki",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.hotel_brand.hotels_in_this_brand",
                        "friendly_name": "Hotels in this Brand"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "travel.hotel.operating_brand",
                        "friendly_name": "Part of Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.hotel . \n?x1 :type.object.type :travel.hotel_brand . \nVALUES ?x2 { :m.012vx2bk } \n?x1 :travel.hotel_brand.hotels_in_this_brand ?x0 . \n?x2 :travel.hotel.operating_brand ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.hotel (JOIN (R travel.hotel_brand.hotels_in_this_brand) (JOIN (R travel.hotel.operating_brand) m.012vx2bk)))"
        }
    },
    "600": {
        "generations": "in what cricket match did the australian cricket team bat first??",
        "ori_data_item": {
            "qid": 2102210003000,
            "question": "the australian cricket team's first batting team is which cricket match?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k888f",
                    "entity_name": "Ashes 2005, First Test"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_match",
                        "class": "cricket.cricket_match",
                        "friendly_name": "Cricket Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.020wyp",
                        "class": "cricket.cricket_team",
                        "friendly_name": "australian cricket team",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_match.first_batting_team",
                        "friendly_name": "First Batting Team"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match . \nVALUES ?x1 { :m.020wyp } \n?x0 :cricket.cricket_match.first_batting_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_match (JOIN cricket.cricket_match.first_batting_team m.020wyp))"
        }
    },
    "601": {
        "generations": "which sports league season includes the championship of super bowl XLIII??",
        "ori_data_item": {
            "qid": 2101482000000,
            "question": "the super bowl xliii is the championship event of what sports league?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gqdq7",
                    "entity_name": "2008 NFL season"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_league_season",
                        "class": "sports.sports_league_season",
                        "friendly_name": "Sports League Season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04n7r5",
                        "class": "sports.sports_championship_event",
                        "friendly_name": "Super Bowl XLIII",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_league_season.championship",
                        "friendly_name": "Championship"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_league_season . \nVALUES ?x1 { :m.04n7r5 } \n?x0 :sports.sports_league_season.championship ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_league_season (JOIN sports.sports_league_season.championship m.04n7r5))"
        }
    },
    "602": {
        "generations": "what model of car is similar to the nissan fuga and also an example of the automotive class that includes the TX4??",
        "ori_data_item": {
            "qid": 5400062011000,
            "question": "the nissan fuga is related to what model of tx4?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05lhh1",
                    "entity_name": "Nissan Cedric"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03vb9y",
                    "entity_name": "Infiniti M"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bkzv8",
                    "entity_name": "Nissan Leopard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05w5xh",
                    "entity_name": "Nissan Cima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0341q3",
                    "entity_name": "Infiniti G"
                }
            ],
            "function": "none",
            "num_node": 5,
            "num_edge": 4,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model",
                        "class": "automotive.model",
                        "friendly_name": "Automobile Model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.automotive_class",
                        "class": "automotive.automotive_class",
                        "friendly_name": "Automotive Class",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "automotive.similar_automobile_models",
                        "class": "automotive.similar_automobile_models",
                        "friendly_name": "Similar automobile models",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.03vb72",
                        "class": "automotive.model",
                        "friendly_name": "Nissan Fuga",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 4,
                        "node_type": "entity",
                        "id": "m.027qc63",
                        "class": "automotive.model",
                        "friendly_name": "TX4",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "automotive.automotive_class.examples",
                        "friendly_name": "Examples"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "automotive.similar_automobile_models.related_model",
                        "friendly_name": "Related model"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "automotive.similar_automobile_models.related_model",
                        "friendly_name": "Related model"
                    },
                    {
                        "start": 1,
                        "end": 4,
                        "relation": "automotive.automotive_class.examples",
                        "friendly_name": "Examples"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model . \n?x1 :type.object.type :automotive.automotive_class . \n?x2 :type.object.type :automotive.similar_automobile_models . \nVALUES ?x3 { :m.03vb72 } \nVALUES ?x4 { :m.027qc63 } \n?x1 :automotive.automotive_class.examples ?x0 . \n?x2 :automotive.similar_automobile_models.related_model ?x0 . \n?x2 :automotive.similar_automobile_models.related_model ?x3 . \n?x1 :automotive.automotive_class.examples ?x4 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x0 != ?x4 && ?x1 != ?x2 && ?x1 != ?x3 && ?x1 != ?x4 && ?x2 != ?x3 && ?x2 != ?x4 && ?x3 != ?x4  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model (AND (JOIN (R automotive.automotive_class.examples) (JOIN automotive.automotive_class.examples m.027qc63)) (JOIN (R automotive.similar_automobile_models.related_model) (JOIN automotive.similar_automobile_models.related_model m.03vb72))))"
        }
    },
    "603": {
        "generations": "which tennis player has a career loss record of at most 124 in singles matches??",
        "ori_data_item": {
            "qid": 2100186005000,
            "question": "who is the tennis player with 124 losses in their career?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gpr",
                    "entity_name": "Bj\u00f6rn Borg"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tennis.tennis_player",
                        "class": "tennis.tennis_player",
                        "friendly_name": "Tennis Player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "124^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "124",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tennis.tennis_player.career_losses_singles",
                        "friendly_name": "Career Losses (singles)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_player . \nVALUES ?x1 { \"124\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tennis.tennis_player.career_losses_singles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tennis"
            ],
            "s_expression": "(AND tennis.tennis_player (JOIN tennis.tennis_player.career_losses_singles 124^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "604": {
        "generations": "which olympic event competition was held at the rose bowl??",
        "ori_data_item": {
            "qid": 2100423010000,
            "question": "what olympic events took place at rose bowl?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cm9nhx",
                    "entity_name": "Cycling at the 1932 Summer Olympics \u2013 Men's sprint"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmbd38",
                    "entity_name": "Cycling at the 1932 Summer Olympics \u2013 Men's 1000 m time trial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmd_c9",
                    "entity_name": "Cycling at the 1932 Summer Olympics \u2013 Men's tandem"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b9pnx",
                    "entity_name": "Football at the 1984 Summer Olympics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmddxs",
                    "entity_name": "Cycling at the 1932 Summer Olympics \u2013 Men's team pursuit"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_event_competition",
                        "class": "olympics.olympic_event_competition",
                        "friendly_name": "Olympic event competition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04j5_p",
                        "class": "olympics.olympic_venue",
                        "friendly_name": "Rose Bowl",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_event_competition.venue",
                        "friendly_name": "Venue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_event_competition . \nVALUES ?x1 { :m.04j5_p } \n?x0 :olympics.olympic_event_competition.venue ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_event_competition (JOIN olympics.olympic_event_competition.venue m.04j5_p))"
        }
    },
    "605": {
        "generations": "what rocket engine has a dry mass of 10255.0??",
        "ori_data_item": {
            "qid": 2100875003000,
            "question": "what is the name of the rocket engine with a dry mass of 10255.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlvsj",
                    "entity_name": "RD-172"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "Rocket engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "10255.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "10255.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine.dry_mass",
                        "friendly_name": "Dry mass"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"10255.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.dry_mass ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.dry_mass 10255.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "606": {
        "generations": "what images are tagged with light-emitting diode??",
        "ori_data_item": {
            "qid": 2101277000000,
            "question": "light-emitting diode is a tag of what image?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jst8nw",
                    "entity_name": "Solar_LED_hat_Mitchel_Rodwell.jpg"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "common.image",
                        "class": "common.image",
                        "friendly_name": "Image",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04myn",
                        "class": "common.topic",
                        "friendly_name": "Light-emitting diode",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "common.image.image_tags",
                        "friendly_name": "Image Tags"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.image . \nVALUES ?x1 { :m.04myn } \n?x0 :common.image.image_tags ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "common"
            ],
            "s_expression": "(AND common.image (JOIN common.image.image_tags m.04myn))"
        }
    },
    "607": {
        "generations": "what religious order has a monastery called abbey of regina laudis??",
        "ori_data_item": {
            "qid": 2101326002000,
            "question": "the abbey of regina laudis belongs to which religious order?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cfj",
                    "entity_name": "Order of Saint Benedict"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_order",
                        "class": "religion.religious_order",
                        "friendly_name": "Religious order",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08jkdh",
                        "class": "religion.monastery",
                        "friendly_name": "Abbey of Regina Laudis",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religious_order.monasteries",
                        "friendly_name": "Monasteries"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_order . \nVALUES ?x1 { :m.08jkdh } \n?x0 :religion.religious_order.monasteries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religious_order (JOIN religion.religious_order.monasteries m.08jkdh))"
        }
    },
    "608": {
        "generations": "which hotels are operated by the brand InterContinental??",
        "ori_data_item": {
            "qid": 2100540000000,
            "question": "intercontinental is a brand of which hotel?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08k3hn",
                    "entity_name": "InterContinental Carlton Cannes Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xcj6",
                    "entity_name": "Willard InterContinental Washington"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027721y",
                    "entity_name": "InterContinental San Francisco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c_8xf",
                    "entity_name": "InterContinental Warsaw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qtqvs",
                    "entity_name": "InterContinental Amstel Amsterdam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z8n48",
                    "entity_name": "InterContinental Bucharest"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09k5rww",
                    "entity_name": "InterContinental London Park Lane"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gb5_x",
                    "entity_name": "InterContinental Kuwait Downtown"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027tddq",
                    "entity_name": "InterContinental Miami"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h79zs",
                    "entity_name": "Mark Hopkins Hotel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c40xfm",
                    "entity_name": "Intercontinental Hotel Bali"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0404sw8",
                    "entity_name": "InterContinental Phnom Penh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0640cyl",
                    "entity_name": "InterContinental Boston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y882",
                    "entity_name": "Hotel Inter-Continental Kabul"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j66hw_",
                    "entity_name": "InterContinental Manila"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08xm7j",
                    "entity_name": "InterContinental Hong Kong"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.hotel",
                        "class": "travel.hotel",
                        "friendly_name": "Hotel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04ykg6",
                        "class": "travel.hotel_brand",
                        "friendly_name": "InterContinental",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.hotel.operating_brand",
                        "friendly_name": "Part of Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.hotel . \nVALUES ?x1 { :m.04ykg6 } \n?x0 :travel.hotel.operating_brand ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.hotel (JOIN travel.hotel.operating_brand m.04ykg6))"
        }
    },
    "609": {
        "generations": "what breeds have the same temperament as liver & tan in biology??",
        "ori_data_item": {
            "qid": 3203519005000,
            "question": "what breed temperament has breeds of liver & tan?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpkl6",
                    "entity_name": "Gentle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kwzcs",
                    "entity_name": "Familial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lcy3h",
                    "entity_name": "Adaptable"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lb_r9",
                    "entity_name": "Spirited"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kr5dq",
                    "entity_name": "Faithful"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpkr6",
                    "entity_name": "Sociable"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kt4wv",
                    "entity_name": "Sensitive"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04krk98",
                    "entity_name": "Amiable"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kp0qh",
                    "entity_name": "Playful"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpjnr",
                    "entity_name": "Affectionate"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kqp3v",
                    "entity_name": "Friendly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kqp3l",
                    "entity_name": "Alert"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpkld",
                    "entity_name": "Intelligent"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kwz71",
                    "entity_name": "Trainable"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kp0qp",
                    "entity_name": "Stubborn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04krk8w",
                    "entity_name": "Even Tempered"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lk50r",
                    "entity_name": "Boisterous"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kr4vj",
                    "entity_name": "Quiet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpkrd",
                    "entity_name": "Clever"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kqqrz",
                    "entity_name": "Docile"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lbzq_",
                    "entity_name": "Cautious"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kpkll",
                    "entity_name": "Good-tempered"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.breed_temperament",
                        "class": "biology.breed_temperament",
                        "friendly_name": "Breed temperament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.animal_breed",
                        "class": "biology.animal_breed",
                        "friendly_name": "Animal breed",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04lc0cs",
                        "class": "biology.breed_coloring",
                        "friendly_name": "Liver & Tan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.breed_temperament.breeds",
                        "friendly_name": "Breeds"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "biology.breed_coloring.breeds",
                        "friendly_name": "Breeds"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.breed_temperament . \n?x1 :type.object.type :biology.animal_breed . \nVALUES ?x2 { :m.04lc0cs } \n?x0 :biology.breed_temperament.breeds ?x1 . \n?x2 :biology.breed_coloring.breeds ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.breed_temperament (JOIN biology.breed_temperament.breeds (JOIN (R biology.breed_coloring.breeds) m.04lc0cs)))"
        }
    },
    "610": {
        "generations": "which politician is both a diplomat and a piano player??",
        "ori_data_item": {
            "qid": 3201947007000,
            "question": "piano player and diplomat are two titles of which politician?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034wc7",
                    "entity_name": "Ignacy Jan Paderewski"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.politician",
                        "class": "government.politician",
                        "friendly_name": "Politician",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.080ntlp",
                        "class": "people.profession",
                        "friendly_name": "Diplomat",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05vyk",
                        "class": "music.musician_profession",
                        "friendly_name": "piano player",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.profession.people_with_this_profession",
                        "friendly_name": "People With This Profession"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "people.person.profession",
                        "friendly_name": "Profession"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.politician . \nVALUES ?x1 { :m.080ntlp } \nVALUES ?x2 { :m.05vyk } \n?x1 :people.profession.people_with_this_profession ?x0 . \n?x0 :people.person.profession ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND government.politician (AND (JOIN (R people.profession.people_with_this_profession) m.080ntlp) (JOIN people.person.profession m.05vyk)))"
        }
    },
    "611": {
        "generations": "what grade level has a typical maximum age of 5 years old??",
        "ori_data_item": {
            "qid": 2100200010000,
            "question": "5 is the typical age (maximum) for which grade level?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ns232",
                    "entity_name": "Kindergarten"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027wyv",
                    "entity_name": "Preschool"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wypd",
                    "entity_name": "Pre-kindergarten"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ns04m",
                    "entity_name": "Junior Kindergarten"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ns1jd",
                    "entity_name": "Reception"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04typz6",
                    "entity_name": "Middle section"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ns1c5",
                    "entity_name": "Year One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ncmcbl",
                    "entity_name": "Groep 1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.grade_level",
                        "class": "education.grade_level",
                        "friendly_name": "Grade level",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "5",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.grade_level.typical_age_maximum",
                        "friendly_name": "Typical age (maximum)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.grade_level . \nVALUES ?x1 { \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :education.grade_level.typical_age_maximum ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.grade_level (JOIN education.grade_level.typical_age_maximum 5^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "612": {
        "generations": "what animal breed has a coloring of silver black and tan??",
        "ori_data_item": {
            "qid": 2101509008000,
            "question": "silver black & tan is the color of which animal breed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05h0pv",
                    "entity_name": "Australian Silky Terrier"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.animal_breed",
                        "class": "biology.animal_breed",
                        "friendly_name": "Animal breed",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04mk4zx",
                        "class": "biology.breed_coloring",
                        "friendly_name": "Silver Black & Tan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.animal_breed.coloring",
                        "friendly_name": "Color"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.animal_breed . \nVALUES ?x1 { :m.04mk4zx } \n?x0 :biology.animal_breed.coloring ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.animal_breed (JOIN biology.animal_breed.coloring m.04mk4zx))"
        }
    },
    "613": {
        "generations": "what is the orbital relationship of a celestial body with a semi-major axis of 2.3148e+07?",
        "ori_data_item": {
            "qid": 2102492005000,
            "question": "if you were interested in finding a semi-major axis of 2.3148e+07, which orbital relationship would you look at?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t02q",
                    "entity_name": "Eurydome"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.orbital_relationship",
                        "class": "astronomy.orbital_relationship",
                        "friendly_name": "Orbital Relationship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2.3148e+07^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "2.3148e+07",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.orbital_relationship.semi_major_axis",
                        "friendly_name": "Semi-major Axis"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.orbital_relationship . \nVALUES ?x1 { \"2.3148e+07\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :astronomy.orbital_relationship.semi_major_axis ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.orbital_relationship (JOIN astronomy.orbital_relationship.semi_major_axis 2.3148e+07^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "614": {
        "generations": "how many ice hockey coaches are currently coaching the philadelphia flyers??",
        "ori_data_item": {
            "qid": 2103063005000,
            "question": "what are the number of coaches that coached the ice hockey team currently coach by philadelphia flyers?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_coach",
                        "class": "ice_hockey.hockey_coach",
                        "friendly_name": "Ice hockey coach",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hn2q",
                        "class": "ice_hockey.hockey_team",
                        "friendly_name": "Philadelphia Flyers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "ice_hockey.hockey_coach.current_team",
                        "friendly_name": "Current Team Coached"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :ice_hockey.hockey_coach . \nVALUES ?x1 { :m.0hn2q } \n?x0 :ice_hockey.hockey_coach.current_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "ice_hockey"
            ],
            "s_expression": "(COUNT (AND ice_hockey.hockey_coach (JOIN ice_hockey.hockey_coach.current_team m.0hn2q)))"
        }
    },
    "615": {
        "generations": "who developed the BCG vaccine??",
        "ori_data_item": {
            "qid": 2102341002000,
            "question": "who developed bcg?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t985",
                    "entity_name": "Albert Calmette"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tmkg",
                    "entity_name": "Camille Gu\u00e9rin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.vaccine_developer",
                        "class": "medicine.vaccine_developer",
                        "friendly_name": "Vaccine Developer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01bzn",
                        "class": "medicine.vaccine",
                        "friendly_name": "bcg",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.vaccine_developer.vaccine",
                        "friendly_name": "Vaccine"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.vaccine_developer . \nVALUES ?x1 { :m.01bzn } \n?x0 :medicine.vaccine_developer.vaccine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.vaccine_developer (JOIN medicine.vaccine_developer.vaccine m.01bzn))"
        }
    },
    "616": {
        "generations": "what collection category does the miss sapphire barbie doll #k8698 belong to??",
        "ori_data_item": {
            "qid": 2102088011000,
            "question": "miss sapphire barbie doll #k8698 belongs to what group?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015w6q",
                    "entity_name": "Barbie"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collection_category",
                        "class": "interests.collection_category",
                        "friendly_name": "Collection category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05gyvcr",
                        "class": "interests.collectable_item",
                        "friendly_name": "Miss Sapphire Barbie Doll #K8698",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.collection_category.items_in_this_category",
                        "friendly_name": "Items in this category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collection_category . \nVALUES ?x1 { :m.05gyvcr } \n?x0 :interests.collection_category.items_in_this_category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.collection_category (JOIN interests.collection_category.items_in_this_category m.05gyvcr))"
        }
    },
    "617": {
        "generations": "what type of infusion style is used in distilled spirits' infused spirit that is called bitters??",
        "ori_data_item": {
            "qid": 2101787004000,
            "question": "bitters is the style of which infused spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04x9wp",
                    "entity_name": "Becherovka"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.infused_spirit",
                        "class": "distilled_spirits.infused_spirit",
                        "friendly_name": "Infused spirit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01qpbt",
                        "class": "distilled_spirits.infused_spirit_style",
                        "friendly_name": "Bitters",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.infused_spirit.infusion_style",
                        "friendly_name": "Infusion style"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.infused_spirit . \nVALUES ?x1 { :m.01qpbt } \n?x0 :distilled_spirits.infused_spirit.infusion_style ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.infused_spirit (JOIN distilled_spirits.infused_spirit.infusion_style m.01qpbt))"
        }
    },
    "618": {
        "generations": "what celestial objects are part of the ursa constellation and also part of an asterism with stars??",
        "ori_data_item": {
            "qid": 3200148000000,
            "question": "what kind of celestial object is the stars of an asterism that appears in ursa?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xcg",
                    "entity_name": "Mizar and Alcor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.013l3",
                    "entity_name": "Epsilon Ursae Majoris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047l3c",
                    "entity_name": "Alpha Ursae Majoris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0492s_",
                    "entity_name": "Beta Ursae Majoris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057s61",
                    "entity_name": "Eta Ursae Majoris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06f3wf",
                    "entity_name": "Delta Ursae Majoris"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zcv1",
                    "entity_name": "Gamma Ursae Majoris"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.celestial_object",
                        "class": "astronomy.celestial_object",
                        "friendly_name": "Celestial Object",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "astronomy.asterism",
                        "class": "astronomy.asterism",
                        "friendly_name": "Asterism",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07t7j",
                        "class": "astronomy.constellation",
                        "friendly_name": "ursa",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "astronomy.asterism.stars",
                        "friendly_name": "Stars"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "astronomy.asterism.constellations",
                        "friendly_name": "Constellations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.celestial_object . \n?x1 :type.object.type :astronomy.asterism . \nVALUES ?x2 { :m.07t7j } \n?x1 :astronomy.asterism.stars ?x0 . \n?x1 :astronomy.asterism.constellations ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.celestial_object (JOIN (R astronomy.asterism.stars) (JOIN astronomy.asterism.constellations m.07t7j)))"
        }
    },
    "619": {
        "generations": "what industry has both trade unions and auto industry as its child industries??",
        "ori_data_item": {
            "qid": 4301917006000,
            "question": "what parent industry do the auto industry and the industry in which union operates have in common?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0126b6d7",
                    "entity_name": "Ballyclare Limited"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.054w78",
                        "class": "business.trade_union",
                        "friendly_name": "union",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.015smg",
                        "class": "business.industry",
                        "friendly_name": "auto industry",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "business.industry.child_industry",
                        "friendly_name": "Child Industry"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.industry.trade_unions",
                        "friendly_name": "Trade unions"
                    },
                    {
                        "start": 3,
                        "end": 0,
                        "relation": "business.industry.child_industry",
                        "friendly_name": "Child Industry"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.industry . \n?x1 :type.object.type :business.industry . \nVALUES ?x2 { :m.054w78 } \nVALUES ?x3 { :m.015smg } \n?x1 :business.industry.child_industry ?x0 . \n?x1 :business.industry.trade_unions ?x2 . \n?x3 :business.industry.child_industry ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.industry (AND (JOIN (R business.industry.child_industry) (JOIN business.industry.trade_unions m.054w78)) (JOIN (R business.industry.child_industry) m.015smg)))"
        }
    },
    "620": {
        "generations": "how many genes are located on chromosome 22 in humans??",
        "ori_data_item": {
            "qid": 2104226001000,
            "question": "when it comes to chromosome 22 (human) how many gene's are there?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "427"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.gene",
                        "class": "biology.gene",
                        "friendly_name": "Gene",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02kwgmg",
                        "class": "biology.chromosome",
                        "friendly_name": "Chromosome 22 (human)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.gene.chromosome",
                        "friendly_name": "Chromosome"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.gene . \nVALUES ?x1 { :m.02kwgmg } \n?x0 :biology.gene.chromosome ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(COUNT (AND biology.gene (JOIN biology.gene.chromosome m.02kwgmg)))"
        }
    },
    "621": {
        "generations": "which comic book inker has worked on comic books in the same genre as hellstar remina??",
        "ori_data_item": {
            "qid": 4301690010000,
            "question": "find artists that ink comics in the same genre as hellstar remina.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kcxgg",
                    "entity_name": "Lee Townsend"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xcjg",
                    "entity_name": "Kev Walker"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_inker",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "Comic Book Inker",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "comic_books.comic_book_genre",
                        "class": "comic_books.comic_book_genre",
                        "friendly_name": "Comic Book Genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0fqqn9t",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Hellstar Remina",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_inker.comic_books_inked",
                        "friendly_name": "Comic Stories Inked"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "comic_books.comic_book_genre.stories_in_this_genre",
                        "friendly_name": "Comic Book Stories In This Genre"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "comic_books.comic_book_series.genre",
                        "friendly_name": "Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_inker . \n?x1 :type.object.type :comic_books.comic_book_story . \n?x2 :type.object.type :comic_books.comic_book_genre . \nVALUES ?x3 { :m.0fqqn9t } \n?x0 :comic_books.comic_book_inker.comic_books_inked ?x1 . \n?x2 :comic_books.comic_book_genre.stories_in_this_genre ?x1 . \n?x3 :comic_books.comic_book_series.genre ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_inker (JOIN comic_books.comic_book_inker.comic_books_inked (JOIN (R comic_books.comic_book_genre.stories_in_this_genre) (JOIN (R comic_books.comic_book_series.genre) m.0fqqn9t))))"
        }
    },
    "622": {
        "generations": "what subclass does naugahyde belong to in the field of engineering materials??",
        "ori_data_item": {
            "qid": 2100439002000,
            "question": "naugahyde is a child material class of what material type?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06glwy",
                    "entity_name": "Artificial leather"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.material",
                        "class": "engineering.material",
                        "friendly_name": "Material",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02q59m",
                        "class": "engineering.material",
                        "friendly_name": "Naugahyde",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.material.subclass",
                        "friendly_name": "Child material class"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.material . \nVALUES ?x1 { :m.02q59m } \n?x0 :engineering.material.subclass ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.material (JOIN engineering.material.subclass m.02q59m))"
        }
    },
    "623": {
        "generations": "what is the city limit of jonathanwlowe's location that includes the bounds_city of Kobar??",
        "ori_data_item": {
            "qid": 2101593003000,
            "question": "kobar has what as its city limit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c11l",
                    "entity_name": "Ramallah"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "user.jonathanwlowe.location.city_limits",
                        "class": "user.jonathanwlowe.location.city_limits",
                        "friendly_name": "City Limits",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.047sslh",
                        "class": "location.citytown",
                        "friendly_name": "Kobar",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "user.jonathanwlowe.location.city_limits.bounds_city",
                        "friendly_name": "Bounds City"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.jonathanwlowe.location.city_limits . \nVALUES ?x1 { :m.047sslh } \n?x0 :user.jonathanwlowe.location.city_limits.bounds_city ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "user.jonathanwlowe.location"
            ],
            "s_expression": "(AND user.jonathanwlowe.location.city_limits (JOIN user.jonathanwlowe.location.city_limits.bounds_city m.047sslh))"
        }
    },
    "624": {
        "generations": "what is the date of the soccer match that had a goal scored in the 32nd minute and is the most recent match??",
        "ori_data_item": {
            "qid": 4302706006000,
            "question": "can you tell me a football match where the was a goal after 32 minutes is the earliest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qts6b",
                    "entity_name": "2014 Netherlands vs Wales International Friendly Football Match"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_match",
                        "class": "soccer.football_match",
                        "friendly_name": "Football Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "soccer.football_goal",
                        "class": "soccer.football_goal",
                        "friendly_name": "Football Goal",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "32^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "32",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_match.goals",
                        "friendly_name": "Goal Scorers"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "soccer.football_goal.minute",
                        "friendly_name": "Minute"
                    },
                    {
                        "start": 0,
                        "end": 3,
                        "relation": "time.event.start_date",
                        "friendly_name": "Start date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_match . \n?x1 :type.object.type :soccer.football_goal . \nVALUES ?x2 { \"32\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :soccer.football_match . \n?y1 :type.object.type :soccer.football_goal . \nVALUES ?y2 { \"32\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?y0 :soccer.football_match.goals ?y1 . \n?y1 :soccer.football_goal.minute ?y2 . \n?y0 :time.event.start_date ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x0 :soccer.football_match.goals ?x1 . \n?x1 :soccer.football_goal.minute ?x2 . \n?x0 :time.event.start_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "soccer",
                "time"
            ],
            "s_expression": "(ARGMAX (AND soccer.football_match (JOIN soccer.football_match.goals (JOIN soccer.football_goal.minute 32^^http://www.w3.org/2001/XMLSchema#integer))) time.event.start_date)"
        }
    },
    "625": {
        "generations": "what fictional calendar system was preceded by the first age??",
        "ori_data_item": {
            "qid": 2100409002000,
            "question": "first age precedes what fictional calendar system?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hlj_",
                    "entity_name": "Second Age"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_calendar_system",
                        "class": "fictional_universe.fictional_calendar_system",
                        "friendly_name": "Fictional Calendar System",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hlks",
                        "class": "fictional_universe.fictional_calendar_system",
                        "friendly_name": "First Age",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_calendar_system.preceded_by",
                        "friendly_name": "Preceded By"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_calendar_system . \nVALUES ?x1 { :m.0hlks } \n?x0 :fictional_universe.fictional_calendar_system.preceded_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_calendar_system (JOIN fictional_universe.fictional_calendar_system.preceded_by m.0hlks))"
        }
    },
    "626": {
        "generations": "what type of lake is classified as lakes in geography??",
        "ori_data_item": {
            "qid": 2101860018000,
            "question": "what lake is of the lake type of lakes ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0108bn_k",
                    "entity_name": "Beech Hill Pond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010fgzfq",
                    "entity_name": "Ala-Kintaus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010gnvgl",
                    "entity_name": "Lake McCoy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010hmz3p",
                    "entity_name": "Little Grassy Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010hnvz2",
                    "entity_name": "Retteri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010lrbzn",
                    "entity_name": "Lake Hunter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010pdrv5",
                    "entity_name": "Lake Wire"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010pj5my",
                    "entity_name": "Inhottu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qk0vd",
                    "entity_name": "Lake James"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011134km",
                    "entity_name": "Khaste lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0113vn4k",
                    "entity_name": "Fall River Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011px3l5",
                    "entity_name": "Winslow Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011pxhdj",
                    "entity_name": "Lac Ste.-Th\u00e9r\u00e8se"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011pzfj3",
                    "entity_name": "Wolverine Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011q6grg",
                    "entity_name": "Lac Pivabiska"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011snd76",
                    "entity_name": "Shebandowan Lakes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011spc9z",
                    "entity_name": "Ferguson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011stb1v",
                    "entity_name": "Swallow Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011v6ccd",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011v7kgl",
                    "entity_name": "Partridge Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011v8wwt",
                    "entity_name": "Fox Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012c5kgc",
                    "entity_name": "Pogubie Wielkie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gbmz7",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012gc5sc",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hc_q7",
                    "entity_name": "Big Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hchby",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hcv0_",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hd02w",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hdkcz",
                    "entity_name": "Duncan (Amazay) Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hdrr8",
                    "entity_name": "Little Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hf_47",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hfpl0",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hg204",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hg8t4",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012r5lw5",
                    "entity_name": "De Lesseps Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012stwh6",
                    "entity_name": "Doghole Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012vhm2x",
                    "entity_name": "Belmont Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012w3r4d",
                    "entity_name": "Blue Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0131w6vd",
                    "entity_name": "Lake Elmo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0280sy8",
                    "entity_name": "Lanser Moor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pswn0",
                    "entity_name": "Grafsee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02psy11",
                    "entity_name": "Gr\u00fcnsee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_hxf",
                    "entity_name": "Hirzkar Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_j2z",
                    "entity_name": "Taferlklaussee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qbdtx",
                    "entity_name": "Vall\u00fclasee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02x77nk",
                    "entity_name": "Charge Pond"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c0hbh",
                    "entity_name": "Lake Urru"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c236d",
                    "entity_name": "Butte Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qnlss",
                    "entity_name": "Laguna Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03xv19",
                    "entity_name": "Lake Alta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047sgd8",
                    "entity_name": "Deadhorse Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ht82",
                    "entity_name": "Kasshabog Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06g52x",
                    "entity_name": "Lake Micmac"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w159r",
                    "entity_name": "Lake Nosbonsing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w3mdh",
                    "entity_name": "Smoothrock Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w45z8",
                    "entity_name": "Cat Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.070pj3",
                    "entity_name": "Winnisquam Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s9j9c",
                    "entity_name": "Indian Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07zyx6",
                    "entity_name": "Lake Cowal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08qkz0",
                    "entity_name": "Lake Afton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08tdnm",
                    "entity_name": "Shubenacadie Grand Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08x169",
                    "entity_name": "Kivesj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.092ylr",
                    "entity_name": "Lake Gibson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.097ny9",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09k5f2g",
                    "entity_name": "Lake Pal\u010dje"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_1gt46",
                    "entity_name": "Lake June in Winter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8z749",
                    "entity_name": "Lake Charlotte"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_fnvc8",
                    "entity_name": "Lake Sirena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_fnwxk",
                    "entity_name": "Lake Butler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_fq7vl",
                    "entity_name": "Lake Henry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_gz63g",
                    "entity_name": "Lake Parrish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x6qk4",
                    "entity_name": "Kernaalanj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x8zlp",
                    "entity_name": "Iivantiira"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_xbj4v",
                    "entity_name": "Sinerv\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_xcryf",
                    "entity_name": "Arcadia Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yg2gn",
                    "entity_name": "Kankarisvesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6d3b_",
                    "entity_name": "Loppij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6d3cb",
                    "entity_name": "Pieni-Onkamo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6djby",
                    "entity_name": "Kangasvesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6dzcn",
                    "entity_name": "Kannonselk\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6dzdp",
                    "entity_name": "Suininki"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6f08y",
                    "entity_name": "Iso Lohij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6f0b9",
                    "entity_name": "Otermanj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6f699",
                    "entity_name": "Summasj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6f895",
                    "entity_name": "Lake Kero"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6fb0k",
                    "entity_name": "Lampaanj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ffvy",
                    "entity_name": "Lake Mallos"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6fmd5",
                    "entity_name": "Koivuj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6fr1d",
                    "entity_name": "Kolkonj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ft22",
                    "entity_name": "Ruunaanj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6fw2b",
                    "entity_name": "Saanij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6g416",
                    "entity_name": "Porovesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6g_ff",
                    "entity_name": "Lappalanj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6gv0t",
                    "entity_name": "Iso-Kiimanen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6gv1h",
                    "entity_name": "Lannevesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6gv1v",
                    "entity_name": "Paljavesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h1gy",
                    "entity_name": "Surnuj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h3c9",
                    "entity_name": "Iso-Pyh\u00e4nt\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h3c_",
                    "entity_name": "Lentiira"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h3cn",
                    "entity_name": "Korpij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h3db",
                    "entity_name": "Muurasj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6h5d9",
                    "entity_name": "Suuri-Onkamo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6hc3j",
                    "entity_name": "Iso-Vietonen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6hgxf",
                    "entity_name": "Kukkia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6hr3t",
                    "entity_name": "Posionj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6hsvv",
                    "entity_name": "P\u00f6yrisj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6j_cm",
                    "entity_name": "S\u00e4lev\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6jg_w",
                    "entity_name": "Pautuj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6jjv0",
                    "entity_name": "Suuri-Pieks\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6jlmh",
                    "entity_name": "Suurij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6jrt9",
                    "entity_name": "Muuruej\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6k1dr",
                    "entity_name": "J\u00e4\u00e4sj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6k1ff",
                    "entity_name": "Sapsoj\u00e4rvet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6k8j6",
                    "entity_name": "Hiirenvesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6kbp7",
                    "entity_name": "Kuorasj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6kjwy",
                    "entity_name": "Lake Unari"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ktss",
                    "entity_name": "\u00c4k\u00e4sj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6kybg",
                    "entity_name": "Lake Uurainen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6kybt",
                    "entity_name": "Lentua"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6l166",
                    "entity_name": "Kiesim\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6l16k",
                    "entity_name": "Raanuj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6l3b8",
                    "entity_name": "Lepp\u00e4vesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6lg51",
                    "entity_name": "Pesi\u00f6j\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6lj1t",
                    "entity_name": "Syysj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6lrqm",
                    "entity_name": "Niskaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ltlz",
                    "entity_name": "Jonku"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ly3t",
                    "entity_name": "Norvaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6lzsz",
                    "entity_name": "Kuttaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6m0l6",
                    "entity_name": "Hyrynj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6m4kq",
                    "entity_name": "Lake Sevettij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6m6b2",
                    "entity_name": "Tallusj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mcsv",
                    "entity_name": "Rahaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mnzg",
                    "entity_name": "Liesvesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mx43",
                    "entity_name": "Lievestuoreenj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mz6k",
                    "entity_name": "Vanttausj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6mz6x",
                    "entity_name": "Livoj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6n1pc",
                    "entity_name": "Pieks\u00e4nj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6n5l9",
                    "entity_name": "Vesijako"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6n7g6",
                    "entity_name": "Joukamoj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nc6q",
                    "entity_name": "Nuoramoisj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nlj5",
                    "entity_name": "Kuvansi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p17d",
                    "entity_name": "Laakaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p34s",
                    "entity_name": "Tipasj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p560",
                    "entity_name": "Maaninkaj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p70q",
                    "entity_name": "Iso Lamuj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p71d",
                    "entity_name": "Maavesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6p95q",
                    "entity_name": "Tyr\u00e4j\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b76d02",
                    "entity_name": "Casummit Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fv86m",
                    "entity_name": "Salerno Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g53x1v",
                    "entity_name": "White Sitch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5705x",
                    "entity_name": "Lake Nakatsuna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g8nt_",
                    "entity_name": "Harker Park Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gttxf9",
                    "entity_name": "Marion County Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwzc5q",
                    "entity_name": "Big Pond, Otis MA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h1cmgy",
                    "entity_name": "Donje Bare"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3ml0q",
                    "entity_name": "Menindee Lakes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h97l28",
                    "entity_name": "Darwan Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzhq_d",
                    "entity_name": "Loch Spey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzqbyq",
                    "entity_name": "Douglas Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j26gjk",
                    "entity_name": "Manali aeri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j44nr_",
                    "entity_name": "Kow Swamp"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j63gvb",
                    "entity_name": "Lake Effie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9pvm1",
                    "entity_name": "Jiesa Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_33s9",
                    "entity_name": "Lake Silver"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0qpnd",
                    "entity_name": "Lake Easy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0vsq0",
                    "entity_name": "Lake Conine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k2kg_w",
                    "entity_name": "Dushu Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k3lf_3",
                    "entity_name": "Shihu Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kbh5b7",
                    "entity_name": "Lake Jarg\u00f6"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hcxlx",
                    "entity_name": "Lake Wallace"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pqt09",
                    "entity_name": "Lake Tyrrell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bh8__d",
                    "entity_name": "Murtnaghurt Lagoon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011lhm0k",
                    "entity_name": "Sharbot Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cy3dp",
                    "entity_name": "Toronto Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k0lfml",
                    "entity_name": "Lake Moody"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08jx80",
                    "entity_name": "Lake Albert"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6ltm9",
                    "entity_name": "Nitsij\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdk89y",
                    "entity_name": "Lake Idylwild"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7kywx",
                    "entity_name": "Lake Smart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nq52",
                    "entity_name": "Kallavesi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd38g_",
                    "entity_name": "Wallatani Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.089kz0",
                    "entity_name": "Tule Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6dbqv",
                    "entity_name": "Lummene"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nn9h",
                    "entity_name": "Kyr\u00f6sj\u00e4rvi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8pg78",
                    "entity_name": "Lake Josephine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n8znqy",
                    "entity_name": "Lake Conache"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n_8wz_",
                    "entity_name": "Lake Florence"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbvcs1",
                    "entity_name": "Lake Mariam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd3hmb",
                    "entity_name": "Lake Martha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd3j93",
                    "entity_name": "Bass Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nd459g",
                    "entity_name": "Sunset Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ndj4w3",
                    "entity_name": "Lake Otis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p7cjtf",
                    "entity_name": "Lake Dexter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pclw0g",
                    "entity_name": "Lake Disappear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pcm5xz",
                    "entity_name": "Lake Daisy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pk__8q",
                    "entity_name": "Lake Elbert"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0py300x",
                    "entity_name": "Lake Gross"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ql11x6",
                    "entity_name": "Kelly Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4lkyr",
                    "entity_name": "Christina Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4scjl",
                    "entity_name": "Lake Canyon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rf94vx",
                    "entity_name": "Lake Wimauma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rpg31r",
                    "entity_name": "Lake August"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rytx5w",
                    "entity_name": "Lake Reed"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sgh3nb",
                    "entity_name": "Lake Fox"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0swmwtk",
                    "entity_name": "Lily Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vps72b",
                    "entity_name": "Lake McLeod"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpssgx",
                    "entity_name": "Lake Hart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vsghxx",
                    "entity_name": "Eagle Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vsgnz2",
                    "entity_name": "Lake Shipp"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzscmj",
                    "entity_name": "Lake Ring"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1f_kw",
                    "entity_name": "Lake Buckeye"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1fqkg",
                    "entity_name": "Lake Elizabeth"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w2zwrs",
                    "entity_name": "Twin Lakes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w3352d",
                    "entity_name": "Lake Calabay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wbj1vv",
                    "entity_name": "Lake Maude"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wdpnv8",
                    "entity_name": "Lake Barco"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wfz8h9",
                    "entity_name": "Lake May"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wk_sjp",
                    "entity_name": "Lake Gem"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxr03w",
                    "entity_name": "Korattur aeri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxrd4v",
                    "entity_name": "Lake Fannie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxs_s8",
                    "entity_name": "Lake Idyl"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wyjs_r",
                    "entity_name": "Chitlapakkam aeri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wzzkc7",
                    "entity_name": "McNulty Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x2ht00",
                    "entity_name": "Middle Lake Hamilton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0xnc744",
                    "entity_name": "Lake Hamilton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y4vvwt",
                    "entity_name": "Lake Mirror"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y69fg1",
                    "entity_name": "Spring Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynsglz",
                    "entity_name": "Little Lake Hamilton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yp00kw",
                    "entity_name": "Lake V\u00e4sman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yp357m",
                    "entity_name": "Lake Cannon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z2n17s",
                    "entity_name": "Engineers Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z8g2g0",
                    "entity_name": "Lake Pansy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z8zy44",
                    "entity_name": "Lake Hartridge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zc17nl",
                    "entity_name": "Lake Norconian"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zc1hpv",
                    "entity_name": "Lake Valencia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zmxynw",
                    "entity_name": "Reeves Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zrmyrz",
                    "entity_name": "Lake Lachard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zrnpl_",
                    "entity_name": "Lake Rochelle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zt9ls5",
                    "entity_name": "Lake Echo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ztf6d4",
                    "entity_name": "Mangal aeri, Chennai"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwpdh5",
                    "entity_name": "Lake Clay"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.lake",
                        "class": "geography.lake",
                        "friendly_name": "Lake",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04h4w",
                        "class": "geography.lake_type",
                        "friendly_name": "lakes",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.lake.lake_type",
                        "friendly_name": "Lake Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \nVALUES ?x1 { :m.04h4w } \n?x0 :geography.lake.lake_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.lake (JOIN geography.lake.lake_type m.04h4w))"
        }
    },
    "627": {
        "generations": "what genome is associated with chromosome 8 in humans??",
        "ori_data_item": {
            "qid": 2100803021000,
            "question": "which genomes does chromosome 8 (human) contain?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bsdc",
                    "entity_name": "Human genome"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.genome",
                        "class": "biology.genome",
                        "friendly_name": "Genome",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02kwgjd",
                        "class": "biology.chromosome",
                        "friendly_name": "Chromosome 8 (human)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.genome.chromosome",
                        "friendly_name": "Chromosome"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.genome . \nVALUES ?x1 { :m.02kwgjd } \n?x0 :biology.genome.chromosome ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.genome (JOIN biology.genome.chromosome m.02kwgjd))"
        }
    },
    "628": {
        "generations": "what religious practice is associated with the titular church??",
        "ori_data_item": {
            "qid": 3205210003000,
            "question": "name the practices of the religion in titular church?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k4xw",
                    "entity_name": "Chrismation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0197d_",
                    "entity_name": "Requiem"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cvx",
                    "entity_name": "Baptism"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yr_",
                    "entity_name": "Anointing of the Sick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0238f7",
                    "entity_name": "Marriage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dtnr6",
                    "entity_name": "Eucharist in the Catholic Church"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dtnh5",
                    "entity_name": "Confirmation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dv0y_",
                    "entity_name": "Sacrament of Penance"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01197vh8",
                    "entity_name": "Latin Mass"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f4prp",
                    "entity_name": "Holy orders"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_practice",
                        "class": "religion.religious_practice",
                        "friendly_name": "Religious Practice",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0423wc",
                        "class": "religion.type_of_place_of_worship",
                        "friendly_name": "Titular church",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "religion.type_of_place_of_worship.religion",
                        "friendly_name": "Religion"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_practice . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.0423wc } \n?x1 :religion.religion.practices ?x0 . \n?x2 :religion.type_of_place_of_worship.religion ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religious_practice (JOIN (R religion.religion.practices) (JOIN (R religion.type_of_place_of_worship.religion) m.0423wc)))"
        }
    },
    "629": {
        "generations": "which rocket engine has the lowest vacuum specific impulse??",
        "ori_data_item": {
            "qid": 2104347001000,
            "question": "what is the name of the rocket engine that has the smallest isp?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlvp4",
                    "entity_name": "RD-2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlvqg",
                    "entity_name": "RD-1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlvpt",
                    "entity_name": "RD-1KhZ"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xlvnk",
                    "entity_name": "RD-3"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "Rocket engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_engine.isp_vacuum",
                        "friendly_name": "Isp (vacuum)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :spaceflight.rocket_engine . \n?y0 :spaceflight.rocket_engine.isp_vacuum ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :spaceflight.rocket_engine.isp_vacuum ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(ARGMIN spaceflight.rocket_engine spaceflight.rocket_engine.isp_vacuum)"
        }
    },
    "630": {
        "generations": "which tennis player has won a tournament and has also won matches against rafael nadal??",
        "ori_data_item": {
            "qid": 3202321015000,
            "question": "r nadal won what tennis tournament?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cp_nq",
                    "entity_name": "Marc L\u00f3pez"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tennis.tennis_tournament_champion",
                        "class": "tennis.tennis_tournament_champion",
                        "friendly_name": "Tennis Tournament Champion",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tennis.tennis_match",
                        "class": "tennis.tennis_match",
                        "friendly_name": "Tennis Match",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.051q39",
                        "class": "tennis.tennis_tournament_champion",
                        "friendly_name": "r nadal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tennis.tennis_player.matches_won",
                        "friendly_name": "Matches Won"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "tennis.tennis_player.matches_won",
                        "friendly_name": "Matches Won"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_tournament_champion . \n?x1 :type.object.type :tennis.tennis_match . \nVALUES ?x2 { :m.051q39 } \n?x0 :tennis.tennis_player.matches_won ?x1 . \n?x2 :tennis.tennis_player.matches_won ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tennis"
            ],
            "s_expression": "(AND tennis.tennis_tournament_champion (JOIN tennis.tennis_player.matches_won (JOIN (R tennis.tennis_player.matches_won) m.051q39)))"
        }
    },
    "631": {
        "generations": "which images are tagged with ajax??",
        "ori_data_item": {
            "qid": 2101277010000,
            "question": "ajax is a tag of what image?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wrh7t",
                    "entity_name": "InfiView logo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wrhc3",
                    "entity_name": "InfiView network topology"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wrhbk",
                    "entity_name": "Flight Browser demo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wrhfc",
                    "entity_name": "InfiView applications"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "common.image",
                        "class": "common.image",
                        "friendly_name": "Image",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dky53",
                        "class": "common.topic",
                        "friendly_name": "ajax",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "common.image.image_tags",
                        "friendly_name": "Image Tags"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.image . \nVALUES ?x1 { :m.0dky53 } \n?x0 :common.image.image_tags ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "common"
            ],
            "s_expression": "(AND common.image (JOIN common.image.image_tags m.0dky53))"
        }
    },
    "632": {
        "generations": "what images appear in the topic gallery for trillium lake??",
        "ori_data_item": {
            "qid": 2101959008000,
            "question": "which image appears in topic gallery trillium lake?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02c33k8",
                    "entity_name": "MtHood TrilliumLake"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "common.image",
                        "class": "common.image",
                        "friendly_name": "Image",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0272j4x",
                        "class": "common.topic",
                        "friendly_name": "Trillium Lake",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "common.image.appears_in_topic_gallery",
                        "friendly_name": "Appears In Topic Gallery"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.image . \nVALUES ?x1 { :m.0272j4x } \n?x0 :common.image.appears_in_topic_gallery ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "common"
            ],
            "s_expression": "(AND common.image (JOIN common.image.appears_in_topic_gallery m.0272j4x))"
        }
    },
    "633": {
        "generations": "which deity is associated with st nicholas day??",
        "ori_data_item": {
            "qid": 3203021005000,
            "question": "which deity is worshiped by a religion with holidays including st nicholas day?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qsc",
                    "entity_name": "Holy Spirit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.045m1_",
                    "entity_name": "Jesus Christ"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d05l6",
                    "entity_name": "God"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.077_fbm",
                    "entity_name": "The Father"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.deity",
                        "class": "religion.deity",
                        "friendly_name": "Deity",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0n_fbc8",
                        "class": "time.holiday",
                        "friendly_name": "St Nicholas Day",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.deity.deity_of",
                        "friendly_name": "Religion(s) That Worship This Deity"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "religion.religion.holidays",
                        "friendly_name": "Holidays"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.deity . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.0n_fbc8 } \n?x0 :religion.deity.deity_of ?x1 . \n?x1 :religion.religion.holidays ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.deity (JOIN religion.deity.deity_of (JOIN religion.religion.holidays m.0n_fbc8)))"
        }
    },
    "634": {
        "generations": "what TV program is about the subject of glory??",
        "ori_data_item": {
            "qid": 2101665006000,
            "question": "which tv programs have glory as subjects?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010hrlcj",
                    "entity_name": "Glory World Series"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gvsyrl",
                        "class": "tv.tv_subject",
                        "friendly_name": "Glory",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.subjects",
                        "friendly_name": "Subjects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { :m.0gvsyrl } \n?x0 :tv.tv_program.subjects ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.subjects m.0gvsyrl))"
        }
    },
    "635": {
        "generations": "which rocket engine cycle is manufactured by the same company as RD-253F??",
        "ori_data_item": {
            "qid": 4301867005000,
            "question": "what is the engine cycle of the bipropellant rocket engine manufactured by the manufacturer of rd-253f?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qqvv",
                    "entity_name": "Gas-generator cycle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jz5zd",
                    "entity_name": "Externally powered pump cycle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qqmt",
                    "entity_name": "Staged combustion cycle"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_cycle",
                        "class": "spaceflight.rocket_engine_cycle",
                        "friendly_name": "Rocket engine cycle",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "spaceflight.bipropellant_rocket_engine",
                        "class": "spaceflight.bipropellant_rocket_engine",
                        "friendly_name": "Bipropellant rocket engine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_manufacturer",
                        "class": "spaceflight.rocket_engine_manufacturer",
                        "friendly_name": "Rocket engine manufacturer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.02xltqp",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "RD-253F",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "spaceflight.bipropellant_rocket_engine.engine_cycle",
                        "friendly_name": "Engine cycle"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "spaceflight.rocket_engine.manufactured_by",
                        "friendly_name": "Manufactured by"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "spaceflight.rocket_engine.manufactured_by",
                        "friendly_name": "Manufactured by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine_cycle . \n?x1 :type.object.type :spaceflight.bipropellant_rocket_engine . \n?x2 :type.object.type :spaceflight.rocket_engine_manufacturer . \nVALUES ?x3 { :m.02xltqp } \n?x1 :spaceflight.bipropellant_rocket_engine.engine_cycle ?x0 . \n?x1 :spaceflight.rocket_engine.manufactured_by ?x2 . \n?x3 :spaceflight.rocket_engine.manufactured_by ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine_cycle (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) (JOIN spaceflight.rocket_engine.manufactured_by (JOIN (R spaceflight.rocket_engine.manufactured_by) m.02xltqp))))"
        }
    },
    "636": {
        "generations": "what is the name of the plutoid that belongs to the star system solar-system in astronomy??",
        "ori_data_item": {
            "qid": 2101703000000,
            "question": "which planets make up the solar-system?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c3qy",
                    "entity_name": "Pluto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gb731",
                    "entity_name": "Eris"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.plutoid",
                        "class": "astronomy.plutoid",
                        "friendly_name": "Plutoid",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06p5g",
                        "class": "astronomy.star_system",
                        "friendly_name": "solar-system",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.plutoid.star_system",
                        "friendly_name": "Star System"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.plutoid . \nVALUES ?x1 { :m.06p5g } \n?x0 :astronomy.plutoid.star_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.plutoid (JOIN astronomy.plutoid.star_system m.06p5g))"
        }
    },
    "637": {
        "generations": "what category of government office does the governor of the administrative arrondissement brussels-capital belong to??",
        "ori_data_item": {
            "qid": 2100623014000,
            "question": "what category of government does a governor of the administrative arrondissement brussels-capital belong to?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fkvn",
                    "entity_name": "Governor"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_office_category",
                        "class": "government.government_office_category",
                        "friendly_name": "Government office category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03h0bx",
                        "class": "government.government_office_or_title",
                        "friendly_name": "Governor of the Administrative Arrondissement Brussels-Capital",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_office_category.offices",
                        "friendly_name": "Offices"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_office_category . \nVALUES ?x1 { :m.03h0bx } \n?x0 :government.government_office_category.offices ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_office_category (JOIN government.government_office_category.offices m.03h0bx))"
        }
    },
    "638": {
        "generations": "what zoo exhibit features the giant sea star species??",
        "ori_data_item": {
            "qid": 2100840008000,
            "question": "the giant sea star is in what zoo exhibit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzw6w2",
                    "entity_name": "Edge of the Sea Touch Tank"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hzw6w8",
                    "entity_name": "Gulf of Maine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "zoos.zoo_exhibit",
                        "class": "zoos.zoo_exhibit",
                        "friendly_name": "Zoo Exhibit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03qn1k5",
                        "class": "biology.organism_classification",
                        "friendly_name": "Giant sea star",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "zoos.zoo_exhibit.species",
                        "friendly_name": "Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :zoos.zoo_exhibit . \nVALUES ?x1 { :m.03qn1k5 } \n?x0 :zoos.zoo_exhibit.species ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "zoos"
            ],
            "s_expression": "(AND zoos.zoo_exhibit (JOIN zoos.zoo_exhibit.species m.03qn1k5))"
        }
    },
    "639": {
        "generations": "in what chess game did charles ii, duke of brunswick play as the black player??",
        "ori_data_item": {
            "qid": 4301857007000,
            "question": "in what chess game did charles ii, duke of brunswick play black?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yw03",
                    "entity_name": "Morphy versus the Duke of Brunswick and Count Isouard"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "chess.chess_game",
                        "class": "chess.chess_game",
                        "friendly_name": "Chess Game",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "chess.chess_game_participation",
                        "class": "chess.chess_game_participation",
                        "friendly_name": "Chess Game Participation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.019sc",
                        "class": "chess.chess_color",
                        "friendly_name": "Black",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0c2455",
                        "class": "chess.chess_player",
                        "friendly_name": "Charles II, Duke of Brunswick",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "chess.chess_game_participation.game",
                        "friendly_name": "Game"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "chess.chess_game_participation.color",
                        "friendly_name": "Color"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "chess.chess_game_participation.player",
                        "friendly_name": "Player"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :chess.chess_game . \n?x1 :type.object.type :chess.chess_game_participation . \nVALUES ?x2 { :m.019sc } \nVALUES ?x3 { :m.0c2455 } \n?x1 :chess.chess_game_participation.game ?x0 . \n?x1 :chess.chess_game_participation.color ?x2 . \n?x1 :chess.chess_game_participation.player ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "chess"
            ],
            "s_expression": "(AND chess.chess_game (JOIN (R chess.chess_game_participation.game) (AND (JOIN chess.chess_game_participation.color m.019sc) (JOIN chess.chess_game_participation.player m.0c2455))))"
        }
    },
    "640": {
        "generations": "what is the name of the airline with the IATA designator KE??",
        "ori_data_item": {
            "qid": 2102830014000,
            "question": "what airline's iata designator is ke?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01ts9r",
                    "entity_name": "Korean Air"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airline",
                        "class": "aviation.airline",
                        "friendly_name": "Airline",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02h7yv2",
                        "class": "aviation.iata_airline_designator",
                        "friendly_name": "KE",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airline.IATA_designator",
                        "friendly_name": "IATA designator"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airline . \nVALUES ?x1 { :m.02h7yv2 } \n?x0 :aviation.airline.IATA_designator ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airline (JOIN aviation.airline.IATA_designator m.02h7yv2))"
        }
    },
    "641": {
        "generations": "what calendar includes the month of april in its month names??",
        "ori_data_item": {
            "qid": 2101336002000,
            "question": "which calendar system uses april as month name?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037d3",
                    "entity_name": "Gregorian calendar"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.calendar",
                        "class": "time.calendar",
                        "friendly_name": "Calendar System",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0lkm",
                        "class": "common.topic",
                        "friendly_name": "April",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.calendar.month_names",
                        "friendly_name": "Month Names"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.calendar . \nVALUES ?x1 { :m.0lkm } \n?x0 :time.calendar.month_names ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.calendar (JOIN time.calendar.month_names m.0lkm))"
        }
    },
    "642": {
        "generations": "what order of chivalry belongs to the japanese category??",
        "ori_data_item": {
            "qid": 2101675007000,
            "question": "the order of chivalry that would best fit the category of japanese order is?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r56k",
                    "entity_name": "Order of Culture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qc40",
                    "entity_name": "Order of the Golden Kite"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04g6vq",
                    "entity_name": "Order of the Rising Sun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qc6x",
                    "entity_name": "Order of the Chrysanthemum"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qc1j",
                    "entity_name": "Order of the Sacred Treasure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r5df",
                    "entity_name": "Order of the Precious Crown"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.order_of_chivalry",
                        "class": "royalty.order_of_chivalry",
                        "friendly_name": "Order of Chivalry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09rjbx5",
                        "class": "royalty.order_of_chivalry_category",
                        "friendly_name": "Japanese Order",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "royalty.order_of_chivalry.category",
                        "friendly_name": "Category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.order_of_chivalry . \nVALUES ?x1 { :m.09rjbx5 } \n?x0 :royalty.order_of_chivalry.category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.order_of_chivalry (JOIN royalty.order_of_chivalry.category m.09rjbx5))"
        }
    },
    "643": {
        "generations": "which fraternity or sorority has exactly 137 chapters??",
        "ori_data_item": {
            "qid": 2102537004000,
            "question": "name the fraternity/sorority which has 137 chapters.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jfkb",
                    "entity_name": "Delta Chi"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.fraternity_sorority",
                        "class": "education.fraternity_sorority",
                        "friendly_name": "Fraternity/Sorority",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "137^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "137",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.fraternity_sorority.number_of_chapters",
                        "friendly_name": "Number of chapters"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.fraternity_sorority . \nVALUES ?x1 { \"137\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :education.fraternity_sorority.number_of_chapters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.fraternity_sorority (JOIN education.fraternity_sorority.number_of_chapters 137^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "644": {
        "generations": "what web browser extension is developed by mozilla organization and is an extension of a software developed by a computer software developer??",
        "ori_data_item": {
            "qid": 3204143003000,
            "question": "what is the name of the web browser extension of the mozilla organization web browser?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r1w_p",
                    "entity_name": "Stylish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r9t63",
                    "entity_name": "Firebug"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j4nmy",
                    "entity_name": "Ubiquity"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0631pt",
                    "entity_name": "Greasemonkey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010ppz7m",
                    "entity_name": "HTTPS Everywhere"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0116dx4b",
                    "entity_name": "Privacy Badger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026lvy7",
                    "entity_name": "Zotero"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qc91y",
                    "entity_name": "Bing Bar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p5n9w",
                    "entity_name": "LastPass"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.060bm4",
                    "entity_name": "Adblock Plus"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.web_browser_extension",
                        "class": "computer.web_browser_extension",
                        "friendly_name": "Web browser extension",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.web_browser",
                        "class": "computer.web_browser",
                        "friendly_name": "Web browser",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.021sfk",
                        "class": "computer.software_developer",
                        "friendly_name": "mozilla organization",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.web_browser.extensions",
                        "friendly_name": "Extensions"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "computer.software_developer.software",
                        "friendly_name": "Software"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser_extension . \n?x1 :type.object.type :computer.web_browser . \nVALUES ?x2 { :m.021sfk } \n?x1 :computer.web_browser.extensions ?x0 . \n?x2 :computer.software_developer.software ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.web_browser_extension (JOIN (R computer.web_browser.extensions) (JOIN (R computer.software_developer.software) m.021sfk)))"
        }
    },
    "645": {
        "generations": "which user profile has set theory as their favorite topic??",
        "ori_data_item": {
            "qid": 2100883006000,
            "question": "which one of the freebase topics have the user profile set theory?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022q6wb",
                    "entity_name": "kesava"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.025l5b",
                        "class": "common.topic",
                        "friendly_name": "Set theory",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.favorite_topics",
                        "friendly_name": "Favorite Freebase Topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.025l5b } \n?x0 :freebase.user_profile.favorite_topics ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.favorite_topics m.025l5b))"
        }
    },
    "646": {
        "generations": "which music video features the artist bada??",
        "ori_data_item": {
            "qid": 2100551012000,
            "question": "artist bada made which music video?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z51hhd",
                    "entity_name": "Mad"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.music_video",
                        "class": "music.music_video",
                        "friendly_name": "Music video",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01pnnmj",
                        "class": "music.artist",
                        "friendly_name": "Bada",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.music_video.artist",
                        "friendly_name": "Artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video . \nVALUES ?x1 { :m.01pnnmj } \n?x0 :music.music_video.artist ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.music_video (JOIN music.music_video.artist m.01pnnmj))"
        }
    },
    "647": {
        "generations": "what is the legal status of drugs containing levocarnitine??",
        "ori_data_item": {
            "qid": 3204269002000,
            "question": "do you know the legal status for the drug formulations that have levocarnitine as an active ingredient?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b86_",
                    "entity_name": "Over-the-counter drug"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01_7r6",
                    "entity_name": "Prescription drug"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqz202",
                    "entity_name": "Not evaluated by FDA"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_legal_status",
                        "class": "medicine.drug_legal_status",
                        "friendly_name": "Drug legal status",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "medicine.drug_formulation",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Drug formulation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cbkrv",
                        "class": "medicine.drug_ingredient",
                        "friendly_name": "Levocarnitine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "medicine.drug_formulation.legal_status",
                        "friendly_name": "Legal status"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "medicine.drug_formulation.active_ingredients",
                        "friendly_name": "Active ingredients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_legal_status . \n?x1 :type.object.type :medicine.drug_formulation . \nVALUES ?x2 { :m.0cbkrv } \n?x1 :medicine.drug_formulation.legal_status ?x0 . \n?x1 :medicine.drug_formulation.active_ingredients ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_legal_status (JOIN (R medicine.drug_formulation.legal_status) (JOIN medicine.drug_formulation.active_ingredients m.0cbkrv)))"
        }
    },
    "648": {
        "generations": "what beer is produced by spinnakers brewery??",
        "ori_data_item": {
            "qid": 2100570015000,
            "question": "the brewery spinnakers brewery is what type of beer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dqt80",
                    "entity_name": "Spinnakers Brewery Mitchell's Extra Special Bitter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dqj5x",
                    "entity_name": "Spinnakers' Honey Pale Ale"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.beer",
                        "class": "food.beer",
                        "friendly_name": "Beer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04drcmh",
                        "class": "food.brewery_brand_of_beer",
                        "friendly_name": "Spinnakers Brewery",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.beer.brewery_brand",
                        "friendly_name": "Brewery / brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.beer . \nVALUES ?x1 { :m.04drcmh } \n?x0 :food.beer.brewery_brand ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.beer (JOIN food.beer.brewery_brand m.04drcmh))"
        }
    },
    "649": {
        "generations": "what is the ISO range of the Nikon Coolpix S510 camera with a sensor resolution of at most 12.9?",
        "ori_data_item": {
            "qid": 4302467005000,
            "question": "on the nikon coolpix s510 what is the iso capability and is there another digital camera with sensor resolution at most 12.9?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_x",
                    "entity_name": "100"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0220vx9",
                    "entity_name": "80"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_7",
                    "entity_name": "Auto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_g",
                    "entity_name": "400"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrf_p",
                    "entity_name": "200"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrg58",
                    "entity_name": "800"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xrg51",
                    "entity_name": "1600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04l497s",
                    "entity_name": "2000"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04nrl44",
                    "entity_name": "160"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04nrl4h",
                    "entity_name": "320"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04p7pwg",
                    "entity_name": "130"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04pf295",
                    "entity_name": "120"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04l497_",
                    "entity_name": "64"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04npjzb",
                    "entity_name": "1000"
                }
            ],
            "function": "<=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_iso",
                        "class": "digicams.camera_iso",
                        "friendly_name": "Camera ISO Capability",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "g.121dcjk8",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Nikon Coolpix S510",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "12.9^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "12.9",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_iso.cameras",
                        "friendly_name": "Cameras"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "digicams.camera_iso.cameras",
                        "friendly_name": "Cameras"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "digicams.digital_camera.sensor_resolution",
                        "friendly_name": "Sensor resolution"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_iso . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :g.121dcjk8 } \nFILTER (?x3 <= \"12.9\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :digicams.camera_iso.cameras ?x1 . \n?x0 :digicams.camera_iso.cameras ?x2 . \n?x1 :digicams.digital_camera.sensor_resolution ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_iso (AND (JOIN digicams.camera_iso.cameras (le digicams.digital_camera.sensor_resolution 12.9^^http://www.w3.org/2001/XMLSchema#float)) (JOIN digicams.camera_iso.cameras g.121dcjk8)))"
        }
    },
    "650": {
        "generations": "who owns the newspaper Kronen Zeitung??",
        "ori_data_item": {
            "qid": 2101856007000,
            "question": "who is kronen zeitung owned by?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0660s1p",
                    "entity_name": "Hans Dichand"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ymrnb",
                    "entity_name": "Funke Mediengruppe"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.newspaper_owner",
                        "class": "book.newspaper_owner",
                        "friendly_name": "Newspaper Owner",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.043zm7",
                        "class": "book.newspaper",
                        "friendly_name": "Kronen Zeitung",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.newspaper_owner.newspapers_owned",
                        "friendly_name": "Newspapers Owned"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.newspaper_owner . \nVALUES ?x1 { :m.043zm7 } \n?x0 :book.newspaper_owner.newspapers_owned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.newspaper_owner (JOIN book.newspaper_owner.newspapers_owned m.043zm7))"
        }
    },
    "651": {
        "generations": "which rocket engine cycle is manufactured by the same company as RD-215U??",
        "ori_data_item": {
            "qid": 4301867001000,
            "question": "what engine cycle of the bipropellant rocket also manufactured the rd-215u?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qqvv",
                    "entity_name": "Gas-generator cycle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jz5zd",
                    "entity_name": "Externally powered pump cycle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04qqmt",
                    "entity_name": "Staged combustion cycle"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_cycle",
                        "class": "spaceflight.rocket_engine_cycle",
                        "friendly_name": "Rocket engine cycle",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "spaceflight.bipropellant_rocket_engine",
                        "class": "spaceflight.bipropellant_rocket_engine",
                        "friendly_name": "Bipropellant rocket engine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "spaceflight.rocket_engine_manufacturer",
                        "class": "spaceflight.rocket_engine_manufacturer",
                        "friendly_name": "Rocket engine manufacturer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.02xlvdf",
                        "class": "spaceflight.rocket_engine",
                        "friendly_name": "RD-215U",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "spaceflight.bipropellant_rocket_engine.engine_cycle",
                        "friendly_name": "Engine cycle"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "spaceflight.rocket_engine.manufactured_by",
                        "friendly_name": "Manufactured by"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "spaceflight.rocket_engine.manufactured_by",
                        "friendly_name": "Manufactured by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine_cycle . \n?x1 :type.object.type :spaceflight.bipropellant_rocket_engine . \n?x2 :type.object.type :spaceflight.rocket_engine_manufacturer . \nVALUES ?x3 { :m.02xlvdf } \n?x1 :spaceflight.bipropellant_rocket_engine.engine_cycle ?x0 . \n?x1 :spaceflight.rocket_engine.manufactured_by ?x2 . \n?x3 :spaceflight.rocket_engine.manufactured_by ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_engine_cycle (JOIN (R spaceflight.bipropellant_rocket_engine.engine_cycle) (JOIN spaceflight.rocket_engine.manufactured_by (JOIN (R spaceflight.rocket_engine.manufactured_by) m.02xlvdf))))"
        }
    },
    "652": {
        "generations": "what is the name of the rocket that was made in north korea??",
        "ori_data_item": {
            "qid": 2100762003000,
            "question": "the country of north korea has what rocket?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05s_8j3",
                    "entity_name": "Paektusan"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05b7q",
                        "class": "location.country",
                        "friendly_name": "North Korea",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket.country_of_origin",
                        "friendly_name": "Country Of Origin"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \nVALUES ?x1 { :m.05b7q } \n?x0 :spaceflight.rocket.country_of_origin ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket (JOIN spaceflight.rocket.country_of_origin m.05b7q))"
        }
    },
    "653": {
        "generations": "which TV series episode was directed by Kenny Ortega??",
        "ori_data_item": {
            "qid": 2102125003000,
            "question": "kenny ortega directed what tv episode?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gp9",
                    "entity_name": "Emily Says Hello"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052kp21",
                    "entity_name": "Face-Off"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079k1d4",
                    "entity_name": "Pilot (1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dqs7t",
                    "entity_name": "Playing Through"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06yw6lv",
                    "entity_name": "Mrs. Finnerty, You've Got a Lovely Daughter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079k1ds",
                    "entity_name": "Pilot (3)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xjbg_",
                    "entity_name": "Episode One"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xjbgp",
                    "entity_name": "Pilot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c5b20",
                    "entity_name": "A Deep-Fried Korean Thanksgiving"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052kp1h",
                    "entity_name": "They Shoot Gilmores, Don't They?"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gq7",
                    "entity_name": "Come Home"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zbzjj",
                    "entity_name": "Another One Bites The Dust"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gx5",
                    "entity_name": "Let Me Hear Your Balalaikas Ringing Out"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zbz7g",
                    "entity_name": "Reach Out And Touch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ncckg",
                    "entity_name": "Friday Night's Alright for Fighting"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gnp",
                    "entity_name": "You Jump, I Jump, Jack"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dqnls",
                    "entity_name": "The Good Samaritan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gmf",
                    "entity_name": "Written in the Stars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079k1dg",
                    "entity_name": "Pilot (2)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dfn1t",
                    "entity_name": "Mascaras"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9ghb",
                    "entity_name": "A Family Matter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y9gxh",
                    "entity_name": "He's Slippin\u2019 \u2018Em Bread... Dig?"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zbz8q",
                    "entity_name": "The Pursuit of Unhappiness"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05dm9h3",
                    "entity_name": "Walk Like A Man"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kcv156",
                    "entity_name": "Liver, Hold the Mushrooms"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06xjbhy",
                    "entity_name": "Episode Four"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05ncch0",
                    "entity_name": "Knit, People, Knit!"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_series_episode",
                        "class": "tv.tv_series_episode",
                        "friendly_name": "TV Episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0b1967",
                        "class": "tv.tv_director",
                        "friendly_name": "Kenny Ortega",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_series_episode.director",
                        "friendly_name": "Director"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { :m.0b1967 } \n?x0 :tv.tv_series_episode.director ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.director m.0b1967))"
        }
    },
    "654": {
        "generations": "which language family is a member of the atlantic languages??",
        "ori_data_item": {
            "qid": 2102565006000,
            "question": "atlantic languages is considered a member of what language family?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h4t70",
                    "entity_name": "Savanna languages"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gt1s_",
                    "entity_name": "Volta\u2013Niger languages"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_family",
                        "class": "language.language_family",
                        "friendly_name": "Language Family",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0nl8y",
                        "class": "language.language_family",
                        "friendly_name": "Atlantic languages",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_family.member_of_language_families",
                        "friendly_name": "member of language families"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_family . \nVALUES ?x1 { :m.0nl8y } \n?x0 :language.language_family.member_of_language_families ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_family (JOIN language.language_family.member_of_language_families m.0nl8y))"
        }
    },
    "655": {
        "generations": "which artist has a track called party up??",
        "ori_data_item": {
            "qid": 2101926012000,
            "question": "who performed party up?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vvzb1",
                    "entity_name": "DMX"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.artist",
                        "class": "music.artist",
                        "friendly_name": "Musical Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dpbbgt",
                        "class": "music.recording",
                        "friendly_name": "Party Up",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.artist.track",
                        "friendly_name": "Recordings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.artist . \nVALUES ?x1 { :m.0dpbbgt } \n?x0 :music.artist.track ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.artist (JOIN music.artist.track m.0dpbbgt))"
        }
    },
    "656": {
        "generations": "who is the lyricist for the song \"Live for Life\"??",
        "ori_data_item": {
            "qid": 4301118006000,
            "question": "live for life was written by which lyricist who also wrote aujourd'hui c'est toi?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09yp21",
                    "entity_name": "Norman Gimbel"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.lyricist",
                        "class": "music.lyricist",
                        "friendly_name": "Lyricist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0_6jt9w",
                        "class": "music.arrangement",
                        "friendly_name": "Live for Life",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "music.lyricist",
                        "class": "music.lyricist",
                        "friendly_name": "Lyricist",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0zlc_gj",
                        "class": "tv.tv_theme_song",
                        "friendly_name": "Aujourd'hui c'est toi",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.lyricist.lyrics_written",
                        "friendly_name": "Lyrics Written"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.composition.lyricist",
                        "friendly_name": "Lyricist"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "music.composition.lyricist",
                        "friendly_name": "Lyricist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.lyricist . \nVALUES ?x1 { :m.0_6jt9w } \n?x2 :type.object.type :music.lyricist . \nVALUES ?x3 { :m.0zlc_gj } \n?x0 :music.lyricist.lyrics_written ?x1 . \n?x1 :music.composition.lyricist ?x2 . \n?x3 :music.composition.lyricist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.lyricist (JOIN music.lyricist.lyrics_written m.0_6jt9w))"
        }
    },
    "657": {
        "generations": "which kingdom was ruled by a royal line that was preceded by the bourbon dynasty??",
        "ori_data_item": {
            "qid": 3204401007000,
            "question": "preceding the bourbon dynasty what kingdom is ruled by a royal line?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01m41_",
                    "entity_name": "Kingdom of Naples"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06mkj",
                    "entity_name": "Spain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.059j2",
                    "entity_name": "Netherlands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jt5h",
                    "entity_name": "Kingdom of Italy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn_tpv",
                    "entity_name": "Kingdom of France"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.033bdl",
                    "entity_name": "Kingdom of Navarre"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03wp6f",
                    "entity_name": "County of Foix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bw_lf",
                    "entity_name": "Duchy of Burgundy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05sn04",
                    "entity_name": "Kingdom of Westphalia"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.kingdom",
                        "class": "royalty.kingdom",
                        "friendly_name": "Kingdom",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "royalty.royal_line",
                        "class": "royalty.royal_line",
                        "friendly_name": "Royal line",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0c5fr",
                        "class": "royalty.royal_line",
                        "friendly_name": "bourbon dynasty",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "royalty.royal_line.kingdom_s_ruled",
                        "friendly_name": "Kingdom(s) ruled"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "royalty.royal_line.preceded_by",
                        "friendly_name": "Preceded by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.kingdom . \n?x1 :type.object.type :royalty.royal_line . \nVALUES ?x2 { :m.0c5fr } \n?x1 :royalty.royal_line.kingdom_s_ruled ?x0 . \n?x2 :royalty.royal_line.preceded_by ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.kingdom (JOIN (R royalty.royal_line.kingdom_s_ruled) (JOIN (R royalty.royal_line.preceded_by) m.0c5fr)))"
        }
    },
    "658": {
        "generations": "what satellite was launched on september 12, 2002??",
        "ori_data_item": {
            "qid": 2100932012000,
            "question": "which satellite was launched in 2002-09-12",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0286wf5",
                    "entity_name": "Kalpana-1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.satellite",
                        "class": "spaceflight.satellite",
                        "friendly_name": "Satellite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2002-09-12^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "2002-09-12",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.satellite.launch_date",
                        "friendly_name": "Launch Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.satellite . \nVALUES ?x1 { \"2002-09-12-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :spaceflight.satellite.launch_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.satellite (JOIN spaceflight.satellite.launch_date 2002-09-12^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "659": {
        "generations": "what recipes are suitable for a low-fat diet??",
        "ori_data_item": {
            "qid": 2102290000000,
            "question": "low-fat diet is suitable for what kind of recipe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07b_sxk",
                    "entity_name": "Spicy Orange and Ginger Chicken"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe",
                        "class": "food.recipe",
                        "friendly_name": "Recipe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02wbd4f",
                        "class": "food.diet",
                        "friendly_name": "Low-fat diet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.recipe.suitable_for_diets",
                        "friendly_name": "Suitable for diets"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe . \nVALUES ?x1 { :m.02wbd4f } \n?x0 :food.recipe.suitable_for_diets ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.recipe (JOIN food.recipe.suitable_for_diets m.02wbd4f))"
        }
    },
    "660": {
        "generations": "what type of image stabilization is used in the digital camera with the model number 8000??",
        "ori_data_item": {
            "qid": 3205499021000,
            "question": "for cameras with camera iso capability 8000, what camera image stabilization type is used?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022q2pk",
                    "entity_name": "Lens based optical stabilization"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.image_stabilization_type",
                        "class": "digicams.image_stabilization_type",
                        "friendly_name": "Camera Image Stabilization Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0h27q94",
                        "class": "digicams.camera_iso",
                        "friendly_name": "8000",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.image_stabilization_type.digital_camera",
                        "friendly_name": "Digital camera"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "digicams.camera_iso.cameras",
                        "friendly_name": "Cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.image_stabilization_type . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :m.0h27q94 } \n?x0 :digicams.image_stabilization_type.digital_camera ?x1 . \n?x2 :digicams.camera_iso.cameras ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.image_stabilization_type (JOIN digicams.image_stabilization_type.digital_camera (JOIN (R digicams.camera_iso.cameras) m.0h27q94)))"
        }
    },
    "661": {
        "generations": "what generation is the ford t-bird model part of in the automotive industry??",
        "ori_data_item": {
            "qid": 2100353005000,
            "question": "the ford t-bird is a model for what automobile generation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06422_x",
                    "entity_name": "Tenth Generation Ford Thunderbird"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0642707",
                    "entity_name": "First Generation Ford Thunderbird"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01rx0d",
                        "class": "automotive.model",
                        "friendly_name": "ford t-bird",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.model",
                        "friendly_name": "Model"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \nVALUES ?x1 { :m.01rx0d } \n?x0 :automotive.generation.model ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (JOIN automotive.generation.model m.01rx0d))"
        }
    },
    "662": {
        "generations": "how many types of cheese are made from cow's milk??",
        "ori_data_item": {
            "qid": 2105163005000,
            "question": "how many cheeses are the cheeses of cows?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "315"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese",
                        "class": "food.cheese",
                        "friendly_name": "Cheese",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01xq0k1",
                        "class": "food.cheese_milk_source",
                        "friendly_name": "cows",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "food.cheese_milk_source.cheeses",
                        "friendly_name": "Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese . \nVALUES ?x1 { :m.01xq0k1 } \n?x1 :food.cheese_milk_source.cheeses ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(COUNT (AND food.cheese (JOIN (R food.cheese_milk_source.cheeses) m.01xq0k1)))"
        }
    },
    "663": {
        "generations": "who is the deceased person buried on june 21, 1908??",
        "ori_data_item": {
            "qid": 2101064008000,
            "question": "which person is buried on jun. the 21st, 1908?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031gkd",
                    "entity_name": "David Kaw\u0101nanakoa"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.deceased_person",
                        "class": "people.deceased_person",
                        "friendly_name": "Deceased Person",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1908-06-21^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Jun. the 21st, 1908",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.deceased_person.date_of_burial",
                        "friendly_name": "Date of burial"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.deceased_person . \nVALUES ?x1 { \"1908-06-21-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :people.deceased_person.date_of_burial ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.deceased_person (JOIN people.deceased_person.date_of_burial 1908-06-21^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "664": {
        "generations": "what drug has Calcium Chloride Intravenous as one of its routed drugs??",
        "ori_data_item": {
            "qid": 2102902008000,
            "question": "calcium chloride intravenous is the method of administering which drug?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01z341",
                    "entity_name": "Calcium chloride"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug",
                        "class": "medicine.drug",
                        "friendly_name": "Drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0z3xv1y",
                        "class": "medicine.routed_drug",
                        "friendly_name": "Calcium Chloride Intravenous",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug.routed_drugs",
                        "friendly_name": "Routed drugs"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug . \nVALUES ?x1 { :m.0z3xv1y } \n?x0 :medicine.drug.routed_drugs ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug (JOIN medicine.drug.routed_drugs m.0z3xv1y))"
        }
    },
    "665": {
        "generations": "which automotive make is founded by george brough's parent company??",
        "ori_data_item": {
            "qid": 3204665004000,
            "question": "george brough founded the parent company of what automobile make?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j688p5",
                    "entity_name": "Brough Superior"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.make",
                        "class": "automotive.make",
                        "friendly_name": "Automobile Make",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "automotive.company",
                        "class": "automotive.company",
                        "friendly_name": "Automobile Company",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.048jcg",
                        "class": "organization.organization_founder",
                        "friendly_name": "George Brough",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.make.parent_company",
                        "friendly_name": "Parent Company"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "organization.organization_founder.organizations_founded",
                        "friendly_name": "Organizations founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.make . \n?x1 :type.object.type :automotive.company . \nVALUES ?x2 { :m.048jcg } \n?x0 :automotive.make.parent_company ?x1 . \n?x2 :organization.organization_founder.organizations_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "automotive",
                "organization"
            ],
            "s_expression": "(AND automotive.make (JOIN automotive.make.parent_company (JOIN (R organization.organization_founder.organizations_founded) m.048jcg)))"
        }
    },
    "666": {
        "generations": "what cricket tournament event was hosted by the netherlands??",
        "ori_data_item": {
            "qid": 2102616007000,
            "question": "what was the name of the netherlands's cricket tournament?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018q2f",
                    "entity_name": "1999 Cricket World Cup"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_tournament_event",
                        "class": "cricket.cricket_tournament_event",
                        "friendly_name": "Cricket Tournament Event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.059j2",
                        "class": "location.country",
                        "friendly_name": "the netherlands",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_tournament_event.host",
                        "friendly_name": "Host"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_tournament_event . \nVALUES ?x1 { :m.059j2 } \n?x0 :cricket.cricket_tournament_event.host ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_tournament_event (JOIN cricket.cricket_tournament_event.host m.059j2))"
        }
    },
    "667": {
        "generations": "which boxer has the shortest reach??",
        "ori_data_item": {
            "qid": 2105348006000,
            "question": "which boxer's reach is the shortest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c_d5j",
                    "entity_name": "K\u014dki Kameda"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.boxer",
                        "class": "sports.boxer",
                        "friendly_name": "Boxer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.boxer.reach",
                        "friendly_name": "Reach"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxer . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :sports.boxer . \n?y0 :sports.boxer.reach ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :sports.boxer.reach ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(ARGMIN sports.boxer sports.boxer.reach)"
        }
    },
    "668": {
        "generations": "what is the cricket bowling technique used by rodney redmond??",
        "ori_data_item": {
            "qid": 2103252007000,
            "question": "what is the cricket bowling technique that is used by rodney redmond?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04m23",
                    "entity_name": "Left-arm orthodox spin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_bowling_technique",
                        "class": "cricket.cricket_bowling_technique",
                        "friendly_name": "Cricket Bowling Technique",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08l4fj",
                        "class": "cricket.cricket_bowler",
                        "friendly_name": "Rodney Redmond",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "cricket.cricket_bowler.technique",
                        "friendly_name": "Technique"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_bowling_technique . \nVALUES ?x1 { :m.08l4fj } \n?x1 :cricket.cricket_bowler.technique ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_bowling_technique (JOIN (R cricket.cricket_bowler.technique) m.08l4fj))"
        }
    },
    "669": {
        "generations": "what aviation airliner accidents were caused by landings??",
        "ori_data_item": {
            "qid": 2101312010000,
            "question": "which aviation incident is of the type landings?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hnvh0",
                    "entity_name": "British Airways Flight 38"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01hh79",
                        "class": "aviation.accident_type",
                        "friendly_name": "landings",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.accident_type",
                        "friendly_name": "Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { :m.01hh79 } \n?x0 :aviation.airliner_accident.accident_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.accident_type m.01hh79))"
        }
    },
    "670": {
        "generations": "which department has Isabela Mares as an old academic??",
        "ori_data_item": {
            "qid": 2101704000000,
            "question": "isabela mares belongs to which department?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dc1clk",
                    "entity_name": "Columbia University Department of Political Science"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dg79sv",
                        "class": "education.academic",
                        "friendly_name": "Isabela Mares",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.department.academics_old",
                        "friendly_name": "Academics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.0dg79sv } \n?x0 :education.department.academics_old ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.department (JOIN education.department.academics_old m.0dg79sv))"
        }
    },
    "671": {
        "generations": "which venues were used in the 1908 olympic games??",
        "ori_data_item": {
            "qid": 2101790000000,
            "question": "what was the venue where the 1908 olympic games held?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03r6fh",
                    "entity_name": "White City Stadium"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_venue",
                        "class": "olympics.olympic_venue",
                        "friendly_name": "Olympic venue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.018qb4",
                        "class": "olympics.olympic_games",
                        "friendly_name": "1908 olympic games",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_venue.olympic_games_used_in",
                        "friendly_name": "Olympic games used in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_venue . \nVALUES ?x1 { :m.018qb4 } \n?x0 :olympics.olympic_venue.olympic_games_used_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_venue (JOIN olympics.olympic_venue.olympic_games_used_in m.018qb4))"
        }
    },
    "672": {
        "generations": "what sports league season has the most recent start date??",
        "ori_data_item": {
            "qid": 2104923001000,
            "question": "which sports league season started latest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011139f7",
                    "entity_name": "2015 World Rugby Under 20 Championship"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_league_season",
                        "class": "sports.sports_league_season",
                        "friendly_name": "Sports League Season",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.start_date",
                        "friendly_name": "Start date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_league_season . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :sports.sports_league_season . \n?y0 :time.event.start_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.event.start_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMAX sports.sports_league_season time.event.start_date)"
        }
    },
    "673": {
        "generations": "which browser is compatible with the html layout engine opera mobile??",
        "ori_data_item": {
            "qid": 2101977011000,
            "question": "what is the name of the html layout engine used by opera mobile?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v2wn",
                    "entity_name": "Presto"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.html_layout_engine",
                        "class": "computer.html_layout_engine",
                        "friendly_name": "HTML Layout Engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02698vp",
                        "class": "computer.web_browser",
                        "friendly_name": "Opera Mobile",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.html_layout_engine.browsers",
                        "friendly_name": "Browsers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.html_layout_engine . \nVALUES ?x1 { :m.02698vp } \n?x0 :computer.html_layout_engine.browsers ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.html_layout_engine (JOIN computer.html_layout_engine.browsers m.02698vp))"
        }
    },
    "674": {
        "generations": "which episode of the colbert report features a segment on copayment in the intro topics??",
        "ori_data_item": {
            "qid": 2102115013000,
            "question": "the copayment is covered on which colbert report episode?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nxbc6",
                    "entity_name": "Paulina Porizkova"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.the_colbert_report_episode",
                        "class": "tv.the_colbert_report_episode",
                        "friendly_name": "The Colbert Report episode",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06qkjn",
                        "class": "common.topic",
                        "friendly_name": "Copayment",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.the_colbert_report_episode.intro_topics",
                        "friendly_name": "Intro topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.the_colbert_report_episode . \nVALUES ?x1 { :m.06qkjn } \n?x0 :tv.the_colbert_report_episode.intro_topics ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.the_colbert_report_episode (JOIN tv.the_colbert_report_episode.intro_topics m.06qkjn))"
        }
    },
    "675": {
        "generations": "which TV personality has appeared as a host in their TV segment appearances??",
        "ori_data_item": {
            "qid": 3200097001000,
            "question": "what is the tv personality of tv segment personal appearance host?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b370",
                    "entity_name": "Martha Stewart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f0c5",
                    "entity_name": "Charles Osgood"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086bkb",
                    "entity_name": "Terry Moran"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crzn_",
                    "entity_name": "Guy Fieri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fcm53",
                    "entity_name": "Cynthia McFadden"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0xmr267",
                    "entity_name": "Steve Dolinsky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g4w3",
                    "entity_name": "Martin Bashir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jg82",
                    "entity_name": "Jacques P\u00e9pin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wvmm",
                    "entity_name": "Bernard Shaw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0v_1xj_",
                    "entity_name": "Martha Teichner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0271lyt",
                    "entity_name": "Tatiana Stefanidou"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pdj3",
                    "entity_name": "Robert Krulwich"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05wwj5t",
                    "entity_name": "Derek Waters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zfn2ds",
                    "entity_name": "Vince Gerasole"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s5vp9",
                    "entity_name": "Jessica Dominguez"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_personality",
                        "class": "tv.tv_personality",
                        "friendly_name": "TV Personality",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_segment_personal_appearance",
                        "class": "tv.tv_segment_personal_appearance",
                        "friendly_name": "TV segment personal appearance",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02nrqjz",
                        "class": "tv.non_character_role",
                        "friendly_name": "Host",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_personality.tv_segment_appearances",
                        "friendly_name": "TV segment appearances"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_segment_personal_appearance.appearance_type",
                        "friendly_name": "Appearance type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_personality . \n?x1 :type.object.type :tv.tv_segment_personal_appearance . \nVALUES ?x2 { :m.02nrqjz } \n?x0 :tv.tv_personality.tv_segment_appearances ?x1 . \n?x1 :tv.tv_segment_personal_appearance.appearance_type ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_personality (JOIN tv.tv_personality.tv_segment_appearances (JOIN tv.tv_segment_personal_appearance.appearance_type m.02nrqjz)))"
        }
    },
    "676": {
        "generations": "what is the oldest court that is inferior to the hong kong court of final appeal??",
        "ori_data_item": {
            "qid": 3200648021000,
            "question": "which court, inferior to the hong kong court of final appeal was founded first?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.072h0h",
                    "entity_name": "Court of Appeal"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.court",
                        "class": "law.court",
                        "friendly_name": "Court",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03wndv",
                        "class": "law.court",
                        "friendly_name": "hong kong court of final appeal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.court.founded",
                        "friendly_name": "Founded"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "law.court.inferior_courts",
                        "friendly_name": "Inferior courts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.court . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :law.court . \nVALUES ?y2 { :m.03wndv } \n?y0 :law.court.founded ?y1 . \n?y2 :law.court.inferior_courts ?y0 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.03wndv } \n?x0 :law.court.founded ?x1 . \n?x2 :law.court.inferior_courts ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(ARGMIN (AND law.court (JOIN (R law.court.inferior_courts) m.03wndv)) law.court.founded)"
        }
    },
    "677": {
        "generations": "what medical trial is an interventional type of trial??",
        "ori_data_item": {
            "qid": 2102950000000,
            "question": "what is limited by the maximum age for eligibility of interventional?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d3jh_",
                    "entity_name": "Valganciclovir (Valcyte) for Chronic Fatigue Syndrome Patients Who Have Elevated Antibody Titers Against Human Herpes Virus 6 (HHV-6)and Epstein-Barr Virus (EBV)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbvr",
                    "entity_name": "Pharmacological Modulation of Cocaine Effects \u2013 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbw1",
                    "entity_name": "Cocaine Effects in Humans: Physiology and Behavior \u2013 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbw_",
                    "entity_name": "Postmenopausal Hormone Therapy in Unstable Angina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwc",
                    "entity_name": "Alendronate and/or Parathyroid Hormone for Osteoporosis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwp",
                    "entity_name": "Hypertension Prevention Trial (HPT) Feasibility Study"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwv",
                    "entity_name": "Vitamin E and C to Slow Progression of Common Carotid Artery Plaque Build-up"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbx4",
                    "entity_name": "A Phase I Evaluation of Azidothymidine (AZT) in Children with Acquired Immune Deficiency Syndrome (AIDS) or AIDS Related Complex (ARC)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbx9",
                    "entity_name": "Physicians' Health Study"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxg",
                    "entity_name": "Methadone Effects on Zidovudine (ZDV, AZT) Disposition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxs",
                    "entity_name": "A Multi-Center Clinical Trial to Evaluate Azidothymidine (AZT) in the Treatment of Human Immunodeficiency Virus (HIV) Infection in Patients with AIDS Post First Episode PCP"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbxy",
                    "entity_name": "Phase II Trial of Sequential Chemotherapy and Radiotherapy for AIDS- Related Primary Central Nervous System Lymphoma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbby2",
                    "entity_name": "Safety and Effectiveness of Giving Indinavir Plus Stavudine Plus Lamivudine to HIV-Infected Children"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbby7",
                    "entity_name": "A Study of Atvogen in Healthy Volunteers and HIV-Infected Patients Who Have No Symptoms of Infection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbyd",
                    "entity_name": "A Phase III Study to Evaluate the Safety and Efficacy of Ganciclovir (Dihydroxypropoxymethyl Guanine [DHPG]) Treatment of Symptomatic Central Nervous System (CNS) Congenital Cytomegalovirus (CMV) Infections."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbyk",
                    "entity_name": "A Study of Zidovudine in HIV-Infected Patients With Liver Disease"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1vdb",
                    "entity_name": "Efficacy and Safety of SPD417 in Treatment of Manic Symptoms in Adults With Bipolar I Disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d2cxf",
                    "entity_name": "Memantine in Systemic Lupus Erythematosus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d2sb_",
                    "entity_name": "The Study of the Safety and Efficacy of Ampligen in Chronic Fatigue Syndrome"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mnw6d",
                    "entity_name": "Behavioral Insomnia Therapy With Chronic Fatigue Syndrome"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063hp3f",
                    "entity_name": "Nimotuzumab in Adults With Glioblastoma Multiforma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.092zz_w",
                    "entity_name": "A Study of Two Anti-HIV Drug Combinations in HIV-Infected Patients"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbvx",
                    "entity_name": "Feasibility Study of Take-Home LAAM Medication \u2013 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d1kq9",
                    "entity_name": "Amoxicillin for the Treatment of Pediatric Autoimmune Disorders Associated With Streptococcal Infections"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zbbwj",
                    "entity_name": "Oral Collagen for Rheumatoid Arthritis"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.medical_trial",
                        "class": "medicine.medical_trial",
                        "friendly_name": "Medical trial",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03zbgdr",
                        "class": "medicine.medical_trial_type",
                        "friendly_name": "Interventional",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.medical_trial.type_of_trial",
                        "friendly_name": "Type of trial"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial . \nVALUES ?x1 { :m.03zbgdr } \n?x0 :medicine.medical_trial.type_of_trial ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.medical_trial (JOIN medicine.medical_trial.type_of_trial m.03zbgdr))"
        }
    },
    "678": {
        "generations": "which constitutional amendment is part of the constitution of the united states??",
        "ori_data_item": {
            "qid": 2100631007000,
            "question": "what amendments does the constitution of the united states have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6pt",
                    "entity_name": "Twenty-seventh Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sn7",
                    "entity_name": "Fifteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sgz",
                    "entity_name": "First Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sn_",
                    "entity_name": "Seventeenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07smh",
                    "entity_name": "Thirteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6my",
                    "entity_name": "Twenty-second Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07spc",
                    "entity_name": "Nineteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sjg",
                    "entity_name": "Fifth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07shq",
                    "entity_name": "Second Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07snm",
                    "entity_name": "Sixteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07smw",
                    "entity_name": "Fourteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07skz",
                    "entity_name": "Ninth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07skl",
                    "entity_name": "Eighth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07shb",
                    "entity_name": "Third Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sj2",
                    "entity_name": "Fourth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sjv",
                    "entity_name": "Sixth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sk6",
                    "entity_name": "Seventh Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07slc",
                    "entity_name": "Tenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07slr",
                    "entity_name": "Eleventh Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sm3",
                    "entity_name": "Twelfth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07spr",
                    "entity_name": "Eighteenth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sq4",
                    "entity_name": "Twentieth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6mk",
                    "entity_name": "Twenty-first Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6n9",
                    "entity_name": "Twenty-third Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6np",
                    "entity_name": "Twenty-fourth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6p1",
                    "entity_name": "Twenty-fifth Amendment to the United States Constitution"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j6pf",
                    "entity_name": "Twenty-sixth Amendment to the United States Constitution"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.constitutional_amendment",
                        "class": "law.constitutional_amendment",
                        "friendly_name": "Constitutional Amendment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07sdd",
                        "class": "law.constitution",
                        "friendly_name": "constitution of the united states",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.constitutional_amendment.constitution",
                        "friendly_name": "Constitution"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment . \nVALUES ?x1 { :m.07sdd } \n?x0 :law.constitutional_amendment.constitution ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.constitutional_amendment (JOIN law.constitutional_amendment.constitution m.07sdd))"
        }
    },
    "679": {
        "generations": "which airliner accident had a crew of 12 people??",
        "ori_data_item": {
            "qid": 2102506005000,
            "question": "name the aviation incident involving 12 crews",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11b5q7s113",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11bbsz_x9f",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.12b02tqgk",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0113lq25",
                    "entity_name": "1991 Indonesian Air Force Lockheed C-130 Hercules crash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nb7g",
                    "entity_name": "Air France Flight 8969"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.021yb5",
                    "entity_name": "Ethiopian Airlines Flight 961"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027jyh2",
                    "entity_name": "TWA Flight 843"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z5w65",
                    "entity_name": "National Airlines Flight 27"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cdn8n",
                    "entity_name": "Spair Airlines Flight 3601"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cpkhb",
                    "entity_name": "Olympic Airways Flight 417"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qsm1",
                    "entity_name": "Siberia Airlines Flight 1812"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lf3wj",
                    "entity_name": "1959 Air Charter Turkey crash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f45h_",
                    "entity_name": "Varig Flight 797"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nys1",
                    "entity_name": "Korean Air Lines Flight 902"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.060vz1",
                    "entity_name": "World Airways Flight 30"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064nsf2",
                    "entity_name": "Aerol\u00edneas Argentinas Flight 322"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064qt1q",
                    "entity_name": "Air France Flight 447"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06608nd",
                    "entity_name": "Air India Flight 403"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076r74",
                    "entity_name": "Air France Flight 358"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_8z3gh",
                    "entity_name": "Iran Air Tours Flight 956"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x6q01",
                    "entity_name": "Malaysia Airlines Flight 370"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6nvxj",
                    "entity_name": "Cubana de Aviaci\u00f3n Flight 310"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b7qsg",
                    "entity_name": "Aeroflot Flight 593"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c04kp",
                    "entity_name": "PIA Flight 268"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g594dj",
                    "entity_name": "1971 January 22 Surgut Aeroflot Antonov An-12 crash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5qg9n",
                    "entity_name": "Iran Air Flight 277"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9vg8n",
                    "entity_name": "South African Airways Flight 228"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hmmz",
                    "entity_name": "Operation Entebbe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7llm0",
                    "entity_name": "Swissair Flight 316"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w30ncw",
                    "entity_name": "1993 Tehran mid-air collision"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zg63lt",
                    "entity_name": "1948 Air France Lat\u00e9co\u00e8re 631 disappearance"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "12^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "12",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.crew",
                        "friendly_name": "Crew"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { \"12\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :aviation.airliner_accident.crew ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.crew 12^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "680": {
        "generations": "which exoplanet has a mass of 0.71 jupiter masses??",
        "ori_data_item": {
            "qid": 2100773004000,
            "question": "what exoplanet is known to have a mass of 0.71?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qkn93",
                    "entity_name": "OGLE-2006-BLG-109Lb"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "base.exoplanetology.exoplanet",
                        "class": "base.exoplanetology.exoplanet",
                        "friendly_name": "Exoplanet",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0.71^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.71",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "base.exoplanetology.exoplanet.mass_jupiter",
                        "friendly_name": "Mass (jupiter)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.exoplanetology.exoplanet . \nVALUES ?x1 { \"0.71\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :base.exoplanetology.exoplanet.mass_jupiter ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "base.exoplanetology"
            ],
            "s_expression": "(AND base.exoplanetology.exoplanet (JOIN base.exoplanetology.exoplanet.mass_jupiter 0.71^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "681": {
        "generations": "what is the oldest club in terms of date founded??",
        "ori_data_item": {
            "qid": 2104474003000,
            "question": "what club most recently opened?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011r98m_",
                    "entity_name": "null"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.club",
                        "class": "organization.club",
                        "friendly_name": "Club",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.date_founded",
                        "friendly_name": "Date founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.club . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :organization.club . \n?y0 :organization.organization.date_founded ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :organization.organization.date_founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(ARGMAX organization.club organization.organization.date_founded)"
        }
    },
    "682": {
        "generations": "what software is in pdf format and belongs to what software genre??",
        "ori_data_item": {
            "qid": 2101693010000,
            "question": "what software's genre is pdf format?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vjrj",
                    "entity_name": "Preview"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qjpkl",
                    "entity_name": "RedMon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r4ws3",
                    "entity_name": "Zetadocs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vwkjn",
                    "entity_name": "PrimoPDF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047t63z",
                    "entity_name": "doPDF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0571lg",
                    "entity_name": "Evince"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05_7bk",
                    "entity_name": "PDFCreator"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.062gtt",
                    "entity_name": "Xpdf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crgn99",
                    "entity_name": "Soda PDF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dtsr7",
                    "entity_name": "novaPDF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bjh64",
                    "entity_name": "CutePDF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cyrg",
                    "entity_name": "Adobe Acrobat"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.software",
                        "class": "computer.software",
                        "friendly_name": "Software",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0600q",
                        "class": "computer.software_genre",
                        "friendly_name": "pdf format",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.software.software_genre",
                        "friendly_name": "Software Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.software . \nVALUES ?x1 { :m.0600q } \n?x0 :computer.software.software_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.software (JOIN computer.software.software_genre m.0600q))"
        }
    },
    "683": {
        "generations": "what certification does boursin cheese have??",
        "ori_data_item": {
            "qid": 2101174000000,
            "question": "boursin cheese has which cheese certification?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j6kd",
                    "entity_name": "Appellation d'origine contr\u00f4l\u00e9e"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese_certification",
                        "class": "food.cheese_certification",
                        "friendly_name": "Cheese certification",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02qvtb",
                        "class": "food.cheese",
                        "friendly_name": "Boursin cheese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.cheese_certification.certified_cheeses",
                        "friendly_name": "Certified Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese_certification . \nVALUES ?x1 { :m.02qvtb } \n?x0 :food.cheese_certification.certified_cheeses ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.cheese_certification (JOIN food.cheese_certification.certified_cheeses m.02qvtb))"
        }
    },
    "684": {
        "generations": "which chess player attended sherborne school for their education??",
        "ori_data_item": {
            "qid": 3200545008000,
            "question": "what chess player went to school at the institution of sherborne school?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n00",
                    "entity_name": "Alan Turing"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "chess.chess_player",
                        "class": "chess.chess_player",
                        "friendly_name": "Chess Player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.031nmw",
                        "class": "education.school",
                        "friendly_name": "Sherborne School",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.education",
                        "friendly_name": "Education"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "education.education.institution",
                        "friendly_name": "Institution"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :chess.chess_player . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.031nmw } \n?x0 :people.person.education ?x1 . \n?x1 :education.education.institution ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education",
                "people"
            ],
            "s_expression": "(AND chess.chess_player (JOIN people.person.education (JOIN education.education.institution m.031nmw)))"
        }
    },
    "685": {
        "generations": "which basketball coach had 47 or more season losses??",
        "ori_data_item": {
            "qid": 2101359000000,
            "question": "which basketball coach has 47 career losses?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qwtlq",
                    "entity_name": "Sean Miller"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_coach",
                        "class": "basketball.basketball_coach",
                        "friendly_name": "Basketball Coach",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "47^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "47",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_coach.season_losses",
                        "friendly_name": "Career Losses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_coach . \nVALUES ?x1 { \"47\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :basketball.basketball_coach.season_losses ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_coach (JOIN basketball.basketball_coach.season_losses 47^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "686": {
        "generations": "what governmental body was formed in the year 1924??",
        "ori_data_item": {
            "qid": 2100571002000,
            "question": "on 1924, which governmental body was formed?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0415qb1",
                    "entity_name": "Southern Rhodesian Legislative Assembly"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1924^^http://www.w3.org/2001/XMLSchema#gYear",
                        "class": "type.datetime",
                        "friendly_name": "1924",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.date_formed",
                        "friendly_name": "Date formed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { \"1924-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear> } \n?x0 :government.governmental_body.date_formed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.date_formed 1924^^http://www.w3.org/2001/XMLSchema#gYear))"
        }
    },
    "687": {
        "generations": "which theater production was performed at a theater where heather zimmerman was the musical director??",
        "ori_data_item": {
            "qid": 3201282009000,
            "question": "which theater did heather zimmerman work at as a music director ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jdd_",
                    "entity_name": "Delacorte Theater"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater",
                        "class": "theater.theater",
                        "friendly_name": "Theater",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "theater.theater_production",
                        "class": "theater.theater_production",
                        "friendly_name": "Theater Production",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01w3463",
                        "class": "theater.musical_director",
                        "friendly_name": "Heather Zimmerman",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "theater.theater_production.performed_at",
                        "friendly_name": "Performed At"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "theater.musical_director.musical_director_for",
                        "friendly_name": "Music Director For"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater . \n?x1 :type.object.type :theater.theater_production . \nVALUES ?x2 { :m.01w3463 } \n?x1 :theater.theater_production.performed_at ?x0 . \n?x2 :theater.musical_director.musical_director_for ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater (JOIN (R theater.theater_production.performed_at) (JOIN (R theater.musical_director.musical_director_for) m.01w3463)))"
        }
    },
    "688": {
        "generations": "what sports team was previously known as the olean oilers??",
        "ori_data_item": {
            "qid": 2100811004000,
            "question": "the olean oilers was the previous name of what pro sports team?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025wndm",
                    "entity_name": "Olean Yankees"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team",
                        "class": "sports.sports_team",
                        "friendly_name": "Sports Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02w8mdw",
                        "class": "sports.defunct_sports_team",
                        "friendly_name": "Olean Oilers",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_team.previously_known_as",
                        "friendly_name": "Previously Known As"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team . \nVALUES ?x1 { :m.02w8mdw } \n?x0 :sports.sports_team.previously_known_as ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team (JOIN sports.sports_team.previously_known_as m.02w8mdw))"
        }
    },
    "689": {
        "generations": "which school is part of the north loup scotia public schools district??",
        "ori_data_item": {
            "qid": 2101375001000,
            "question": "what is the school located in the school district of north loup scotia public schools?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076q1wc",
                    "entity_name": "Elem School At North Loup"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076kltv",
                    "entity_name": "High School At Scotia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.school",
                        "class": "education.school",
                        "friendly_name": "School",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0482_b3",
                        "class": "education.school_district",
                        "friendly_name": "North Loup Scotia Public Schools",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.school.school_district",
                        "friendly_name": "School district"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.school . \nVALUES ?x1 { :m.0482_b3 } \n?x0 :education.school.school_district ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.school (JOIN education.school.school_district m.0482_b3))"
        }
    },
    "690": {
        "generations": "which governmental body had sessions during the 2nd new zealand parliament??",
        "ori_data_item": {
            "qid": 2100366008000,
            "question": "2nd new zealand parliament is a session in what government body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01y0wm",
                    "entity_name": "New Zealand Parliament"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03_8z1",
                        "class": "government.legislative_session",
                        "friendly_name": "2nd New Zealand Parliament",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.sessions",
                        "friendly_name": "Sessions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { :m.03_8z1 } \n?x0 :government.governmental_body.sessions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.sessions m.03_8z1))"
        }
    },
    "691": {
        "generations": "which aircraft model is part of the piper pa-28 line??",
        "ori_data_item": {
            "qid": 2102681001000,
            "question": "what aircraft model has piper pa-28 as part of line?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j43",
                    "entity_name": "Piper PA-28-236 Dakota"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwn6gd",
                    "entity_name": "Piper PA-28-180 Cherokee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwn6gp",
                    "entity_name": "Piper PA-28-181 Archer II"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j4h",
                    "entity_name": "Piper PA-28R-201 Arrow III"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j4q",
                    "entity_name": "Piper PA-28R-200 Arrow II"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j4x",
                    "entity_name": "Piper PA-28-151 Cherokee Warrior"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j59",
                    "entity_name": "Piper PA-28R-201T Turbo Arrow III"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j5h",
                    "entity_name": "Piper PA-28-150 Cherokee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j5p",
                    "entity_name": "Piper PA-28-140 Cherokee Cruiser"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j5w",
                    "entity_name": "Piper PA-28-235 Cherokee Pathfinder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j61",
                    "entity_name": "Piper PA-28RT-201T Turbo Arrow IV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j67",
                    "entity_name": "Piper PA-28-180 Archer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j6_",
                    "entity_name": "Piper PA-28-235 Cherokee Pathfinder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j6f",
                    "entity_name": "Piper PA-28-181 Archer III"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j6m",
                    "entity_name": "Piper PA-28S-160 Cherokee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j6t",
                    "entity_name": "Piper PA-28-160 Cherokee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j75",
                    "entity_name": "Piper PA-28R-180 Arrow"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j7c",
                    "entity_name": "Piper PA-28R-200 Arrow"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j7k",
                    "entity_name": "Piper PA-28-161 Warrior III"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j7r",
                    "entity_name": "Piper PA-28-161 Warrior II"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j7y",
                    "entity_name": "Piper PA-28-201T Turbo Dakota"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j49",
                    "entity_name": "Piper PA-28S-180 Cherokee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j51j53",
                    "entity_name": "Piper PA-28RT-201 Arrow IV"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0179h4",
                        "class": "aviation.aircraft_line",
                        "friendly_name": "piper pa-28",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_model.part_of_line",
                        "friendly_name": "Part Of Line"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nVALUES ?x1 { :m.0179h4 } \n?x0 :aviation.aircraft_model.part_of_line ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_model (JOIN aviation.aircraft_model.part_of_line m.0179h4))"
        }
    },
    "692": {
        "generations": "which organizations have a sports committee??",
        "ori_data_item": {
            "qid": 2101436010000,
            "question": "what organization is possessed of committee of sports committee?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02tcj",
                    "entity_name": "European Broadcasting Union"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "organization.organization",
                        "class": "organization.organization",
                        "friendly_name": "Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012h6rl0",
                        "class": "organization.organization_committee",
                        "friendly_name": "Sports Committee",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "organization.organization.committees",
                        "friendly_name": "Committees"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :organization.organization . \nVALUES ?x1 { :m.012h6rl0 } \n?x0 :organization.organization.committees ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "organization"
            ],
            "s_expression": "(AND organization.organization (JOIN organization.organization.committees m.012h6rl0))"
        }
    },
    "693": {
        "generations": "what department at stanford university is the stanford pain management center a part of??",
        "ori_data_item": {
            "qid": 3202678012000,
            "question": "what is the name of the department of stanford pain management center that is a subsidiary of stanford university ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1d2_9",
                    "entity_name": "Stanford Anesthesia"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fq58v9",
                        "class": "education.department",
                        "friendly_name": "Stanford Pain Management Center",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0285vq",
                        "class": "education.university",
                        "friendly_name": "stanford university",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.department.department_of",
                        "friendly_name": "Subsidiary department of"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "education.university.departments",
                        "friendly_name": "Departments"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.0fq58v9 } \nVALUES ?x2 { :m.0285vq } \n?x1 :education.department.department_of ?x0 . \n?x2 :education.university.departments ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.department (AND (JOIN (R education.department.department_of) m.0fq58v9) (JOIN (R education.university.departments) m.0285vq)))"
        }
    },
    "694": {
        "generations": "which mountain is part of the Carnic Prealps mountain range??",
        "ori_data_item": {
            "qid": 2100740001000,
            "question": "carnic prealps is a part of what mountain range?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c02x2q",
                    "entity_name": "Monte Cridola"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0415rlr",
                    "entity_name": "Cima dei Preti"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jkzr5d",
                        "class": "geography.mountain_range",
                        "friendly_name": "Carnic Prealps",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.mountain_range",
                        "friendly_name": "Mountain range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { :m.0jkzr5d } \n?x0 :geography.mountain.mountain_range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.mountain_range m.0jkzr5d))"
        }
    },
    "695": {
        "generations": "what governmental jurisdiction has a mayor of corte madera??",
        "ori_data_item": {
            "qid": 2101565011000,
            "question": "what jurisdiction of government has the position mayor of corte madera?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r1cs",
                    "entity_name": "Corte Madera"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_jurisdiction",
                        "class": "government.governmental_jurisdiction",
                        "friendly_name": "Governmental Jurisdiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04hcdly",
                        "class": "government.government_office_or_title",
                        "friendly_name": "Mayor of Corte Madera",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_jurisdiction.government_positions",
                        "friendly_name": "Government positions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_jurisdiction . \nVALUES ?x1 { :m.04hcdly } \n?x0 :government.governmental_jurisdiction.government_positions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_jurisdiction (JOIN government.governmental_jurisdiction.government_positions m.04hcdly))"
        }
    },
    "696": {
        "generations": "what multi-event tournament has exactly 42 events??",
        "ori_data_item": {
            "qid": 2101650008000,
            "question": "what is the tournament with 42 events?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07bmx6",
                    "entity_name": "1994 World Junior Championships in Athletics"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5r69k",
                    "entity_name": "2004 Lithuanian Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gx05wd",
                    "entity_name": "2011 Asian Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vpxk0c",
                    "entity_name": "1991 European Athletics Junior Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crcgz3",
                    "entity_name": "2007 Lithuanian Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cnyj0b",
                    "entity_name": "1990 Lithuanian Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w34d53",
                    "entity_name": "2013 Asian Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cp06q3",
                    "entity_name": "2010 Oceania Athletics Championships"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0vzv14q",
                    "entity_name": "Swimming at the 2013 Summer Universiade"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.multi_event_tournament",
                        "class": "sports.multi_event_tournament",
                        "friendly_name": "Multi-event tournament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "42^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "42",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.multi_event_tournament.number_of_events",
                        "friendly_name": "Number of Events"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.multi_event_tournament . \nVALUES ?x1 { \"42\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :sports.multi_event_tournament.number_of_events ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.multi_event_tournament (JOIN sports.multi_event_tournament.number_of_events 42^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "697": {
        "generations": "what color of wine is Barbera d'Alba??",
        "ori_data_item": {
            "qid": 3203479002000,
            "question": "which is the color of the wine that is in barbera d'alba style?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wsb20",
                    "entity_name": "Red Wine"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine_color",
                        "class": "wine.wine_color",
                        "friendly_name": "Wine color",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "wine.wine",
                        "class": "wine.wine",
                        "friendly_name": "Wine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.07yf24l",
                        "class": "food.wine_style",
                        "friendly_name": "Barbera d'Alba",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.wine_color.wines",
                        "friendly_name": "Wines"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "wine.wine.wine_style",
                        "friendly_name": "Wine style"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine_color . \n?x1 :type.object.type :wine.wine . \nVALUES ?x2 { :m.07yf24l } \n?x0 :wine.wine_color.wines ?x1 . \n?x1 :wine.wine.wine_style ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine_color (JOIN wine.wine_color.wines (JOIN wine.wine.wine_style m.07yf24l)))"
        }
    },
    "698": {
        "generations": "what comic book story is part of the story arc hush??",
        "ori_data_item": {
            "qid": 2103003007000,
            "question": "hush is found in what comic book story?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09vvtjq",
                    "entity_name": "Hush - Chapter Four: The City"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09vvv9g",
                        "class": "comic_books.comic_book_story_arc",
                        "friendly_name": "Hush",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.part_of_story_arc",
                        "friendly_name": "Part Of Story Arc"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.09vvv9g } \n?x0 :comic_books.comic_book_story.part_of_story_arc ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.part_of_story_arc m.09vvv9g))"
        }
    },
    "699": {
        "generations": "what multipart release was produced by a producer who also worked on the recording around the world??",
        "ori_data_item": {
            "qid": 3205691005000,
            "question": "what is the name of the multi-part musical release that was produced by a record producer that is also the producer of around the world?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0402p0t",
                    "entity_name": "The Beatles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0402ngz",
                    "entity_name": "Anthology 3"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_n948",
                    "entity_name": "Wingspan: Hits and History"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0402ntz",
                    "entity_name": "The Beatles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0402nc_",
                    "entity_name": "Anthology 2"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03z_xbl",
                    "entity_name": "Sgt. Pepper's Lonely Hearts Club Band"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.multipart_release",
                        "class": "music.multipart_release",
                        "friendly_name": "Multi-Part Musical Release",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.producer",
                        "class": "music.producer",
                        "friendly_name": "Record Producer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0fth9y_",
                        "class": "music.recording",
                        "friendly_name": "Around The World",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "music.producer.releases_produced",
                        "friendly_name": "Releases produced"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "music.recording.producer",
                        "friendly_name": "Producer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.multipart_release . \n?x1 :type.object.type :music.producer . \nVALUES ?x2 { :m.0fth9y_ } \n?x1 :music.producer.releases_produced ?x0 . \n?x2 :music.recording.producer ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.multipart_release (JOIN (R music.producer.releases_produced) (JOIN (R music.recording.producer) m.0fth9y_)))"
        }
    },
    "700": {
        "generations": "which visual artist is associated with the period or movement of arte povera??",
        "ori_data_item": {
            "qid": 2100985010000,
            "question": "arte povera is an art period/movement that is associated with what visual artist?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027lys3",
                    "entity_name": "John Davis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09h5rh",
                    "entity_name": "Mario Merz"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p18h",
                    "entity_name": "Jannis Kounellis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jt11kg",
                    "entity_name": "Gilberto Zorio"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026xmm7",
                    "entity_name": "Alighiero Boetti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lf036",
                    "entity_name": "Pino Pascali"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02vnxn8",
                    "entity_name": "Luciano Fabro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v629q",
                    "entity_name": "Marisa Merz"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_artist",
                        "class": "visual_art.visual_artist",
                        "friendly_name": "Visual Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04_d7p",
                        "class": "visual_art.art_period_movement",
                        "friendly_name": "Arte Povera",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_artist.associated_periods_or_movements",
                        "friendly_name": "Associated periods or movements"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_artist . \nVALUES ?x1 { :m.04_d7p } \n?x0 :visual_art.visual_artist.associated_periods_or_movements ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_artist (JOIN visual_art.visual_artist.associated_periods_or_movements m.04_d7p))"
        }
    },
    "701": {
        "generations": "which wine has 42% new oak??",
        "ori_data_item": {
            "qid": 2101423008000,
            "question": "42 is the percent new oak of what wine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d0_x5",
                    "entity_name": "2006 Testarossa \"Palazzio\" Central Coast Pinot Noir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fctkb",
                    "entity_name": "2005 Lafond \"Arita Hills Vineyard\" Santa Rita Hills Pinot Noir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042zy6j",
                    "entity_name": "2004 Nickel & Nickel \"Block 4, Regusci Vineyard\" Stags Leap District Cabernet Sauvignon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042zwdd",
                    "entity_name": "2004 Nickel & Nickel \"John C. Sullenger Vineyard\" Oakville Cabernet Sauvignon"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine",
                        "class": "wine.wine",
                        "friendly_name": "Wine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "42^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "42",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.wine.percent_new_oak",
                        "friendly_name": "Percent new oak"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { \"42\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :wine.wine.percent_new_oak ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine (JOIN wine.wine.percent_new_oak 42^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "702": {
        "generations": "what beliefs are shared by both christian religion and the sikh religion??",
        "ori_data_item": {
            "qid": 3200236012000,
            "question": "christian religion and the sikh religion hold which common belief?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xy3",
                    "entity_name": "Monotheism"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.belief",
                        "class": "religion.belief",
                        "friendly_name": "Belief",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01lp8",
                        "class": "religion.religion",
                        "friendly_name": "christian religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06yyp",
                        "class": "religion.religion",
                        "friendly_name": "the sikh religion",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.belief.belief_of",
                        "friendly_name": "Belief Of"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "religion.belief.belief_of",
                        "friendly_name": "Belief Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.belief . \nVALUES ?x1 { :m.01lp8 } \nVALUES ?x2 { :m.06yyp } \n?x0 :religion.belief.belief_of ?x1 . \n?x0 :religion.belief.belief_of ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.belief (AND (JOIN religion.belief.belief_of m.01lp8) (JOIN religion.belief.belief_of m.06yyp)))"
        }
    },
    "703": {
        "generations": "which user profile has dress as their favorite topic??",
        "ori_data_item": {
            "qid": 2100883012000,
            "question": "which user profile has dress as one of the favorite freebase topics ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j422v",
                    "entity_name": "mariarainer"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "freebase.user_profile",
                        "class": "freebase.user_profile",
                        "friendly_name": "User Profile",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01d40f",
                        "class": "common.topic",
                        "friendly_name": "Dress",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "freebase.user_profile.favorite_topics",
                        "friendly_name": "Favorite Freebase Topics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.user_profile . \nVALUES ?x1 { :m.01d40f } \n?x0 :freebase.user_profile.favorite_topics ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "freebase"
            ],
            "s_expression": "(AND freebase.user_profile (JOIN freebase.user_profile.favorite_topics m.01d40f))"
        }
    },
    "704": {
        "generations": "what is the status of the website material design??",
        "ori_data_item": {
            "qid": 2101024009000,
            "question": "material design site has what status?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hsn4g",
                    "entity_name": "Active"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.website_status",
                        "class": "internet.website_status",
                        "friendly_name": "Website Status",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.011jm7fw",
                        "class": "internet.website",
                        "friendly_name": "Material design",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.website_status.sites",
                        "friendly_name": "Sites"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.website_status . \nVALUES ?x1 { :m.011jm7fw } \n?x0 :internet.website_status.sites ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.website_status (JOIN internet.website_status.sites m.011jm7fw))"
        }
    },
    "705": {
        "generations": "which governmental body has continental sessions??",
        "ori_data_item": {
            "qid": 2100366014000,
            "question": "continental is a session of what government body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09k5k",
                    "entity_name": "Continental Congress"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01_yhm",
                        "class": "government.legislative_session",
                        "friendly_name": "continental",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.sessions",
                        "friendly_name": "Sessions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { :m.01_yhm } \n?x0 :government.governmental_body.sessions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.sessions m.01_yhm))"
        }
    },
    "706": {
        "generations": "which comic book issue features cover inks by mignola??",
        "ori_data_item": {
            "qid": 2101666009000,
            "question": "mignola drew the cover for which comic book issue?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wkc7r",
                    "entity_name": "Batman #426"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wkcbz",
                    "entity_name": "Batman #429"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wkc9c",
                    "entity_name": "Batman #427"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_issue",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Comic Book Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03h0l7",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "mignola",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_issue.cover_inks",
                        "friendly_name": "Cover Inks"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_issue . \nVALUES ?x1 { :m.03h0l7 } \n?x0 :comic_books.comic_book_issue.cover_inks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_issue (JOIN comic_books.comic_book_issue.cover_inks m.03h0l7))"
        }
    },
    "707": {
        "generations": "which music release track has a length of 536.0??",
        "ori_data_item": {
            "qid": 2101119008000,
            "question": "536.0 is the length of what music release track?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ls49k2",
                    "entity_name": "Sutradhar, Part 1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release_track",
                        "class": "music.release_track",
                        "friendly_name": "Release track",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "536.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "536.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release_track.length",
                        "friendly_name": "Length"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release_track . \nVALUES ?x1 { \"536.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :music.release_track.length ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.release_track (JOIN music.release_track.length 536.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "708": {
        "generations": "which boxing weight division did yuriorkis gamboa and terence crawford match in??",
        "ori_data_item": {
            "qid": 2102151000000,
            "question": "name the bosing weight division which matches to yuriorkis gamboa vs. terence crawford.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034z2h",
                    "entity_name": "Lightweight"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.boxing_weight_division",
                        "class": "sports.boxing_weight_division",
                        "friendly_name": "Boxing Weight Division",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01110d1m",
                        "class": "boxing.boxing_match",
                        "friendly_name": "Yuriorkis Gamboa vs. Terence Crawford",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.boxing_weight_division.matches",
                        "friendly_name": "Matches"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_weight_division . \nVALUES ?x1 { :m.01110d1m } \n?x0 :sports.boxing_weight_division.matches ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.boxing_weight_division (JOIN sports.boxing_weight_division.matches m.01110d1m))"
        }
    },
    "709": {
        "generations": "what performance venue hosted 4 intimate nights with beyonc\u00e9 concerts??",
        "ori_data_item": {
            "qid": 2102000001000,
            "question": "which concert venue did 4 intimate nights with beyonc\u00e9 occur?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c87l2",
                    "entity_name": "Roseland Ballroom"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.performance_venue",
                        "class": "music.performance_venue",
                        "friendly_name": "Concert Performance Venue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h3wfpl",
                        "class": "music.concert",
                        "friendly_name": "4 Intimate Nights with Beyonc\u00e9",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.performance_venue.concerts",
                        "friendly_name": "Concerts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.performance_venue . \nVALUES ?x1 { :m.0h3wfpl } \n?x0 :music.performance_venue.concerts ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.performance_venue (JOIN music.performance_venue.concerts m.0h3wfpl))"
        }
    },
    "710": {
        "generations": "which basketball coach had 47 or more season losses??",
        "ori_data_item": {
            "qid": 2101359004000,
            "question": "find basketball coach with 47 career losses.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qwtlq",
                    "entity_name": "Sean Miller"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_coach",
                        "class": "basketball.basketball_coach",
                        "friendly_name": "Basketball Coach",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "47^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "47",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_coach.season_losses",
                        "friendly_name": "Career Losses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_coach . \nVALUES ?x1 { \"47\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :basketball.basketball_coach.season_losses ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_coach (JOIN basketball.basketball_coach.season_losses 47^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "711": {
        "generations": "what type of storage is supported by the casio exilim ex-z75 digital camera with high iso auto setting??",
        "ori_data_item": {
            "qid": 4302372001000,
            "question": "casio exilim ex-z75 supports which storage type along with the digital camera with iso setting of high iso auto?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01tthm",
                    "entity_name": "Secure Digital"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0220vm1",
                    "entity_name": "SDHC Card"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01z76m",
                    "entity_name": "MultiMediaCard"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_storage_type",
                        "class": "digicams.camera_storage_type",
                        "friendly_name": "Camera Storage Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03q2qv9",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Casio Exilim EX-Z75",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.02nqg65",
                        "class": "digicams.camera_iso",
                        "friendly_name": "High ISO Auto",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "digicams.digital_camera.supported_storage_types",
                        "friendly_name": "Supported Storage Types"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "digicams.digital_camera.supported_storage_types",
                        "friendly_name": "Supported Storage Types"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "digicams.digital_camera.iso_setting",
                        "friendly_name": "ISO settings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_storage_type . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :m.03q2qv9 } \nVALUES ?x3 { :m.02nqg65 } \n?x1 :digicams.digital_camera.supported_storage_types ?x0 . \n?x2 :digicams.digital_camera.supported_storage_types ?x0 . \n?x1 :digicams.digital_camera.iso_setting ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_storage_type (AND (JOIN (R digicams.digital_camera.supported_storage_types) (JOIN digicams.digital_camera.iso_setting m.02nqg65)) (JOIN (R digicams.digital_camera.supported_storage_types) m.03q2qv9)))"
        }
    },
    "712": {
        "generations": "which digital camera has the lowest number of LCD pixels??",
        "ori_data_item": {
            "qid": 2103500002000,
            "question": "the lowest lcd screen resolution is had by which digital camera?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h27p1f",
                    "entity_name": "Olympus E-PL3"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.digital_camera.lcd_pixels",
                        "friendly_name": "LCD screen resolution"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :digicams.digital_camera . \n?y0 :digicams.digital_camera.lcd_pixels ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :digicams.digital_camera.lcd_pixels ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(ARGMIN digicams.digital_camera digicams.digital_camera.lcd_pixels)"
        }
    },
    "713": {
        "generations": "which TV channel was broadcasting on May 29, 2010??",
        "ori_data_item": {
            "qid": 2102470004000,
            "question": "which tv channel began on 2010-05-29?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0t5409r",
                    "entity_name": "Channel UFX"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5t2d1",
                    "entity_name": "V Televisi\u00f3n"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.tv_channel",
                        "class": "broadcast.tv_channel",
                        "friendly_name": "TV Channel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2010-05-29^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "2010-05-29",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.tv_channel.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.tv_channel . \nVALUES ?x1 { \"2010-05-29-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :broadcast.tv_channel.from ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.tv_channel (JOIN broadcast.tv_channel.from 2010-05-29^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "714": {
        "generations": "what instruments belong to the harpsichords family in music??",
        "ori_data_item": {
            "qid": 2101786013000,
            "question": "the family harpsichords includes what musical instrument?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02712f0",
                    "entity_name": "Oval spinet"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.instrument",
                        "class": "music.instrument",
                        "friendly_name": "Musical instrument",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03q5t",
                        "class": "music.instrument",
                        "friendly_name": "harpsichords",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.instrument.family",
                        "friendly_name": "Family"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.instrument . \nVALUES ?x1 { :m.03q5t } \n?x0 :music.instrument.family ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.instrument (JOIN music.instrument.family m.03q5t))"
        }
    },
    "715": {
        "generations": "which monarchs have ruled over the princely family of liechtenstein??",
        "ori_data_item": {
            "qid": 3200334015000,
            "question": "what monarch is the ruler of a kingdom that is also ruled by princely family of liechtenstein?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lbgr",
                    "entity_name": "Wenceslaus II of Bohemia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nyy3",
                    "entity_name": "Matthias Corvinus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gqg4",
                    "entity_name": "Vladislaus II of Hungary"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hz90",
                    "entity_name": "George of Pod\u011bbrady"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p_4r",
                    "entity_name": "Wenceslaus III of Bohemia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09j48",
                    "entity_name": "John of Bohemia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hpb8c",
                    "entity_name": "Casimir II, Duke of Cieszyn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08rmj0",
                    "entity_name": "John Corvinus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h4zjc",
                    "entity_name": "Nicholas I, Duke of Troppau"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b4vfd",
                    "entity_name": "Boles\u0142aw III the Generous"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.monarch",
                        "class": "royalty.monarch",
                        "friendly_name": "Monarch",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "royalty.kingdom",
                        "class": "royalty.kingdom",
                        "friendly_name": "Kingdom",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.08kx6_",
                        "class": "royalty.royal_line",
                        "friendly_name": "Princely Family of Liechtenstein",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "royalty.kingdom.rulers",
                        "friendly_name": "Rulers"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "royalty.royal_line.kingdom_s_ruled",
                        "friendly_name": "Kingdom(s) ruled"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.monarch . \n?x1 :type.object.type :royalty.kingdom . \nVALUES ?x2 { :m.08kx6_ } \n?x1 :royalty.kingdom.rulers ?x0 . \n?x2 :royalty.royal_line.kingdom_s_ruled ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.monarch (JOIN (R royalty.kingdom.rulers) (JOIN (R royalty.royal_line.kingdom_s_ruled) m.08kx6_)))"
        }
    },
    "716": {
        "generations": "what type of aviation accident was the 1963 aeroflot tupolev tu-124 neva river ditching??",
        "ori_data_item": {
            "qid": 2102209009000,
            "question": "what type of failure cause the 1963 aeroflot tupolev tu-124 neva river ditching accident?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0742yy",
                    "entity_name": "Pilot error"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.accident_type",
                        "class": "aviation.accident_type",
                        "friendly_name": "Aircraft accident type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gsqbl",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "1963 Aeroflot Tupolev Tu-124 Neva river ditching",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.accident_type.aircraft_accidents_of_this_type",
                        "friendly_name": "Aircraft accidents of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.accident_type . \nVALUES ?x1 { :m.0gsqbl } \n?x0 :aviation.accident_type.aircraft_accidents_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.accident_type (JOIN aviation.accident_type.aircraft_accidents_of_this_type m.0gsqbl))"
        }
    },
    "717": {
        "generations": "what type of camera storage is supported by canon eos 5ds and has an iso setting of 8000??",
        "ori_data_item": {
            "qid": 4302372003000,
            "question": "which camera storage type can support a canon eos 5ds and a digital camera with a 8000 iso setting?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01tthm",
                    "entity_name": "Secure Digital"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_storage_type",
                        "class": "digicams.camera_storage_type",
                        "friendly_name": "Camera Storage Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "digicams.digital_camera",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Digital Camera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.012sq5lf",
                        "class": "digicams.digital_camera",
                        "friendly_name": "Canon EOS 5DS",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0h27q94",
                        "class": "digicams.camera_iso",
                        "friendly_name": "8000",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "digicams.digital_camera.supported_storage_types",
                        "friendly_name": "Supported Storage Types"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "digicams.digital_camera.supported_storage_types",
                        "friendly_name": "Supported Storage Types"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "digicams.digital_camera.iso_setting",
                        "friendly_name": "ISO settings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_storage_type . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :m.012sq5lf } \nVALUES ?x3 { :m.0h27q94 } \n?x1 :digicams.digital_camera.supported_storage_types ?x0 . \n?x2 :digicams.digital_camera.supported_storage_types ?x0 . \n?x1 :digicams.digital_camera.iso_setting ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_storage_type (AND (JOIN (R digicams.digital_camera.supported_storage_types) (JOIN digicams.digital_camera.iso_setting m.0h27q94)) (JOIN (R digicams.digital_camera.supported_storage_types) m.012sq5lf)))"
        }
    },
    "718": {
        "generations": "what type of content belongs to both the organizations and social sciences genres in broadcasting??",
        "ori_data_item": {
            "qid": 3202202010000,
            "question": "what is an example of a organizations and social sciences broadcast content?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.045726f",
                    "entity_name": "Interview With A Psychiatrist: Slavery Today In The U.S.A."
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.content",
                        "class": "broadcast.content",
                        "friendly_name": "Broadcast Content",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03bv30x",
                        "class": "broadcast.genre",
                        "friendly_name": "Organizations",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03wm70j",
                        "class": "broadcast.genre",
                        "friendly_name": "Social Sciences",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "broadcast.genre.content",
                        "friendly_name": "Content"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "broadcast.genre.content",
                        "friendly_name": "Content"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.content . \nVALUES ?x1 { :m.03bv30x } \nVALUES ?x2 { :m.03wm70j } \n?x1 :broadcast.genre.content ?x0 . \n?x2 :broadcast.genre.content ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.content (AND (JOIN (R broadcast.genre.content) m.03bv30x) (JOIN (R broadcast.genre.content) m.03wm70j)))"
        }
    },
    "719": {
        "generations": "what appellation is 2004 oberon napa valley cabernet sauvignon a part of??",
        "ori_data_item": {
            "qid": 2102055012000,
            "question": "2004 oberon napa valley cabernet sauvignon wines are examples of which designated appellation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026b9gc",
                    "entity_name": "Napa Valley AVA"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.appellation",
                        "class": "wine.appellation",
                        "friendly_name": "Appellation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.042wjsh",
                        "class": "wine.wine",
                        "friendly_name": "2004 Oberon Napa Valley Cabernet Sauvignon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.appellation.wines",
                        "friendly_name": "Wines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.appellation . \nVALUES ?x1 { :m.042wjsh } \n?x0 :wine.appellation.wines ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.appellation (JOIN wine.appellation.wines m.042wjsh))"
        }
    },
    "720": {
        "generations": "what is the current status of galactic interactions for the galaxies that are interacting in this way according to astronomy??",
        "ori_data_item": {
            "qid": 3200830003000,
            "question": "what is the current status galactic interaction?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cgl16t",
                    "entity_name": "Galactic collision"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.galactic_interaction_type",
                        "class": "astronomy.galactic_interaction_type",
                        "friendly_name": "Galactic interaction type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "astronomy.galactic_interaction",
                        "class": "astronomy.galactic_interaction",
                        "friendly_name": "Galactic interaction",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03khhv",
                        "class": "astronomy.galactic_interaction_status",
                        "friendly_name": "current status",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.galactic_interaction_type.galaxy_s_interacting_this_way",
                        "friendly_name": "Galaxy's interacting this way"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "astronomy.galactic_interaction_status.galactic_interactions",
                        "friendly_name": "Galactic interactions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.galactic_interaction_type . \n?x1 :type.object.type :astronomy.galactic_interaction . \nVALUES ?x2 { :m.03khhv } \n?x0 :astronomy.galactic_interaction_type.galaxy_s_interacting_this_way ?x1 . \n?x2 :astronomy.galactic_interaction_status.galactic_interactions ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.galactic_interaction_type (JOIN astronomy.galactic_interaction_type.galaxy_s_interacting_this_way (JOIN (R astronomy.galactic_interaction_status.galactic_interactions) m.03khhv)))"
        }
    },
    "721": {
        "generations": "which rockets support the function of Saphir in spaceflight??",
        "ori_data_item": {
            "qid": 2101206014000,
            "question": "what function is supported by saphir?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lz4c",
                    "entity_name": "Sounding rocket"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_function",
                        "class": "spaceflight.rocket_function",
                        "friendly_name": "Rocket Function",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0518x9",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Saphir",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_function.rockets_supporting_this_function",
                        "friendly_name": "Rockets supporting this function"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_function . \nVALUES ?x1 { :m.0518x9 } \n?x0 :spaceflight.rocket_function.rockets_supporting_this_function ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_function (JOIN spaceflight.rocket_function.rockets_supporting_this_function m.0518x9))"
        }
    },
    "722": {
        "generations": "which department has academics that include jonathan a. glickstein??",
        "ori_data_item": {
            "qid": 2101704014000,
            "question": "which department does jonathan a. glickstein belong to?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dl64kr",
                    "entity_name": "UC Santa Barbara Department of History"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.department",
                        "class": "education.department",
                        "friendly_name": "Department",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c4pd76",
                        "class": "education.academic",
                        "friendly_name": "Jonathan A. Glickstein",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.department.academics_old",
                        "friendly_name": "Academics"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.department . \nVALUES ?x1 { :m.0c4pd76 } \n?x0 :education.department.academics_old ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.department (JOIN education.department.academics_old m.0c4pd76))"
        }
    },
    "723": {
        "generations": "what file format was created on september 27, 2004 in the field of computer??",
        "ori_data_item": {
            "qid": 2101536014000,
            "question": "what's the name of the file format that was created on 2004-09-27?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03_2yh",
                    "entity_name": "Digital Negative"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.file_format",
                        "class": "computer.file_format",
                        "friendly_name": "File Format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2004-09-27^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "2004-09-27",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.file_format.creation_date",
                        "friendly_name": "Creation Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.file_format . \nVALUES ?x1 { \"2004-09-27-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :computer.file_format.creation_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.file_format (JOIN computer.file_format.creation_date 2004-09-27^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "724": {
        "generations": "which recipe author has the ethnicity of nighthorse campbell??",
        "ori_data_item": {
            "qid": 3200732007000,
            "question": "nighthorse campbell has the same ethnicity as which recipe author?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z648",
                    "entity_name": "Emeril Lagasse"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe_author",
                        "class": "food.recipe_author",
                        "friendly_name": "Recipe author",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.ethnicity",
                        "class": "people.ethnicity",
                        "friendly_name": "Ethnicity",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01xw7g",
                        "class": "military.military_person",
                        "friendly_name": "nighthorse campbell",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.ethnicity",
                        "friendly_name": "Ethnicity"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.ethnicity.people",
                        "friendly_name": "People of this ethnicity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe_author . \n?x1 :type.object.type :people.ethnicity . \nVALUES ?x2 { :m.01xw7g } \n?x0 :people.person.ethnicity ?x1 . \n?x1 :people.ethnicity.people ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND food.recipe_author (JOIN people.person.ethnicity (JOIN people.ethnicity.people m.01xw7g)))"
        }
    },
    "725": {
        "generations": "which asteroid is a member of the same asteroid family as 720 Bohlinia??",
        "ori_data_item": {
            "qid": 3201325012000,
            "question": "what is an example of an asteroid in the asteroid family 720 bohlinia?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0580v5",
                    "entity_name": "263 Dresda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_8sw",
                    "entity_name": "1223 Neckar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02xv7w",
                    "entity_name": "3975 Verdi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yfpv",
                    "entity_name": "2985 Shakespeare"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037x_0",
                    "entity_name": "158 Koronis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0394ln",
                    "entity_name": "167 Urda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mdlxn",
                    "entity_name": "9916 Kibirev"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03mhmk6",
                    "entity_name": "9908 Aue"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057sln",
                    "entity_name": "208 Lacrimosa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058153",
                    "entity_name": "277 Elvira"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05880t",
                    "entity_name": "311 Claudia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058873",
                    "entity_name": "321 Florentina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05gmtg",
                    "entity_name": "5141 Tachibana"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086gw3",
                    "entity_name": "452 Hamiltonia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.086h2z",
                    "entity_name": "462 Eriphyla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08lwlb",
                    "entity_name": "534 Nassovia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08lz63",
                    "entity_name": "658 Asteria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08m08d",
                    "entity_name": "761 Brendelia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08m7f2",
                    "entity_name": "811 Nauheima"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08m7q9",
                    "entity_name": "832 Karin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08mby2",
                    "entity_name": "975 Perseverantia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08mcb6",
                    "entity_name": "962 Asl\u00f6g"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cq9x",
                    "entity_name": "243 Ida"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.asteroid",
                        "class": "astronomy.asteroid",
                        "friendly_name": "Asteroid",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "astronomy.asteroid_family",
                        "class": "astronomy.asteroid_family",
                        "friendly_name": "Asteroid Family",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.08l_lp",
                        "class": "astronomy.asteroid",
                        "friendly_name": "720 Bohlinia",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "astronomy.asteroid_family.asteroid_family_member",
                        "friendly_name": "Asteroid Family Member"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "astronomy.asteroid.member_of_asteroid_family",
                        "friendly_name": "Member of Asteroid Family"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.asteroid . \n?x1 :type.object.type :astronomy.asteroid_family . \nVALUES ?x2 { :m.08l_lp } \n?x1 :astronomy.asteroid_family.asteroid_family_member ?x0 . \n?x2 :astronomy.asteroid.member_of_asteroid_family ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.asteroid (JOIN (R astronomy.asteroid_family.asteroid_family_member) (JOIN (R astronomy.asteroid.member_of_asteroid_family) m.08l_lp)))"
        }
    },
    "726": {
        "generations": "how many sports equipment are used for fastpitch??",
        "ori_data_item": {
            "qid": 2103196015000,
            "question": "how many items of equipment are used in fastpitch?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_equipment",
                        "class": "sports.sports_equipment",
                        "friendly_name": "Sports Equipment",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02r7cb4",
                        "class": "sports.sport",
                        "friendly_name": "fastpitch",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_equipment.sport_used_for",
                        "friendly_name": "Sport used for"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_equipment . \nVALUES ?x1 { :m.02r7cb4 } \n?x0 :sports.sports_equipment.sport_used_for ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(COUNT (AND sports.sports_equipment (JOIN sports.sports_equipment.sport_used_for m.02r7cb4)))"
        }
    },
    "727": {
        "generations": "what vaccine is used to prevent the flu??",
        "ori_data_item": {
            "qid": 2101976001000,
            "question": "the flu is prevented by which vaccine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0416v7",
                    "entity_name": "Influenza vaccine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.vaccine",
                        "class": "medicine.vaccine",
                        "friendly_name": "Vaccine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cycc",
                        "class": "medicine.infectious_disease",
                        "friendly_name": "the flu",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.vaccine.infectious_disease",
                        "friendly_name": "Infectious Disease"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.vaccine . \nVALUES ?x1 { :m.0cycc } \n?x0 :medicine.vaccine.infectious_disease ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.vaccine (JOIN medicine.vaccine.infectious_disease m.0cycc))"
        }
    },
    "728": {
        "generations": "what type of waypoint is DMACK??",
        "ori_data_item": {
            "qid": 2102989008000,
            "question": "what is the waypoint type of dmack?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdh7rx",
                    "entity_name": "REP-PT"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.waypoint_type",
                        "class": "aviation.waypoint_type",
                        "friendly_name": "Waypoint type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0zfmb7n",
                        "class": "aviation.aviation_waypoint",
                        "friendly_name": "DMACK",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.waypoint_type.waypoints_of_this_type",
                        "friendly_name": "Waypoints of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.waypoint_type . \nVALUES ?x1 { :m.0zfmb7n } \n?x0 :aviation.waypoint_type.waypoints_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.waypoint_type (JOIN aviation.waypoint_type.waypoints_of_this_type m.0zfmb7n))"
        }
    },
    "729": {
        "generations": "which exhibition was produced by penn center??",
        "ori_data_item": {
            "qid": 2101578007000,
            "question": "what exhibitions have been produced by the penn center?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h89v76",
                    "entity_name": "Songs of My People"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h89wfk",
                        "class": "exhibitions.exhibition_producer",
                        "friendly_name": "Penn Center",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition.produced_by",
                        "friendly_name": "Produced by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition . \nVALUES ?x1 { :m.0h89wfk } \n?x0 :exhibitions.exhibition.produced_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition (JOIN exhibitions.exhibition.produced_by m.0h89wfk))"
        }
    },
    "730": {
        "generations": "which public library is part of the new york public library system??",
        "ori_data_item": {
            "qid": 2101719011000,
            "question": "new york public library has which public library in it's library system?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q3k0p",
                    "entity_name": "New York Public Library for the Performing Arts"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03gyv_y",
                    "entity_name": "New York Public Library Main Branch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08hz3z",
                    "entity_name": "Schomburg Center for Research in Black Culture"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "library.public_library",
                        "class": "library.public_library",
                        "friendly_name": "Public Library",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01hyd9",
                        "class": "library.public_library_system",
                        "friendly_name": "New York Public Library",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "library.public_library.library_system",
                        "friendly_name": "Library System"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :library.public_library . \nVALUES ?x1 { :m.01hyd9 } \n?x0 :library.public_library.library_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "library"
            ],
            "s_expression": "(AND library.public_library (JOIN library.public_library.library_system m.01hyd9))"
        }
    },
    "731": {
        "generations": "which TV actor has appeared as a guest in an episode with Bill O'Reilly??",
        "ori_data_item": {
            "qid": 3202660002000,
            "question": "which bill o'reilly episode did an actor appear on?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019t77",
                    "entity_name": "Bill O'Reilly"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_actor",
                        "class": "tv.tv_actor",
                        "friendly_name": "TV Actor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_guest_role",
                        "class": "tv.tv_guest_role",
                        "friendly_name": "TV episode performance",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06z2yb7",
                        "class": "tv.the_colbert_report_episode",
                        "friendly_name": "Bill O'Reilly",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_actor.guest_roles",
                        "friendly_name": "TV episode performances"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_guest_role.episodes_appeared_in",
                        "friendly_name": "Episode"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_actor . \n?x1 :type.object.type :tv.tv_guest_role . \nVALUES ?x2 { :m.06z2yb7 } \n?x0 :tv.tv_actor.guest_roles ?x1 . \n?x1 :tv.tv_guest_role.episodes_appeared_in ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_actor (JOIN tv.tv_actor.guest_roles (JOIN tv.tv_guest_role.episodes_appeared_in m.06z2yb7)))"
        }
    },
    "732": {
        "generations": "which concert tour has a concert film or video called family values tour '98??",
        "ori_data_item": {
            "qid": 2101906017000,
            "question": "to what concert tour does the concert film family values tour '98 belong?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08b5r5",
                    "entity_name": "Family Values Tour 1998"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.concert_tour",
                        "class": "music.concert_tour",
                        "friendly_name": "Concert tour",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0crv6yy",
                        "class": "music.concert_film",
                        "friendly_name": "Family Values Tour '98",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.concert_tour.concert_films_or_videos",
                        "friendly_name": "Concert Films or Videos"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.concert_tour . \nVALUES ?x1 { :m.0crv6yy } \n?x0 :music.concert_tour.concert_films_or_videos ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.concert_tour (JOIN music.concert_tour.concert_films_or_videos m.0crv6yy))"
        }
    },
    "733": {
        "generations": "what type of cricket match has the lowest number of innings per team??",
        "ori_data_item": {
            "qid": 2105160000000,
            "question": "which type of cricket match has the fewest innings per team?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03b34z",
                    "entity_name": "Twenty20"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_match_type",
                        "class": "cricket.cricket_match_type",
                        "friendly_name": "Cricket Match Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_match_type.innings_per_team",
                        "friendly_name": "Innings Per Team"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match_type . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cricket.cricket_match_type . \n?y0 :cricket.cricket_match_type.innings_per_team ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :cricket.cricket_match_type.innings_per_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(ARGMIN cricket.cricket_match_type cricket.cricket_match_type.innings_per_team)"
        }
    },
    "734": {
        "generations": "what celestial objects have the same spectral type as alpha centauri A??",
        "ori_data_item": {
            "qid": 2101120013000,
            "question": "what spectral type does the star alpha centauri a fall under?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nvp6w",
                    "entity_name": "G2V"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.spectral_type",
                        "class": "astronomy.spectral_type",
                        "friendly_name": "Spectral Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0kjxwb9",
                        "class": "astronomy.star",
                        "friendly_name": "Alpha Centauri A",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.spectral_type.celestial_objects_of_this_spectral_type",
                        "friendly_name": "Objects of this spectral type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.spectral_type . \nVALUES ?x1 { :m.0kjxwb9 } \n?x0 :astronomy.spectral_type.celestial_objects_of_this_spectral_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.spectral_type (JOIN astronomy.spectral_type.celestial_objects_of_this_spectral_type m.0kjxwb9))"
        }
    },
    "735": {
        "generations": "what drug brand contains the active ingredient doxorubicin??",
        "ori_data_item": {
            "qid": 2102426005000,
            "question": "which drug brand contains the active ingredients doxorubicin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bdpd3b",
                    "entity_name": "Rubex"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_brand",
                        "class": "medicine.drug_brand",
                        "friendly_name": "Drug brand",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05y6n3",
                        "class": "medicine.drug",
                        "friendly_name": "Doxorubicin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_brand.active_ingredients",
                        "friendly_name": "Active ingredients"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_brand . \nVALUES ?x1 { :m.05y6n3 } \n?x0 :medicine.drug_brand.active_ingredients ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_brand (JOIN medicine.drug_brand.active_ingredients m.05y6n3))"
        }
    },
    "736": {
        "generations": "which recipe author is associated with the religious text shiva purana??",
        "ori_data_item": {
            "qid": 3203993017000,
            "question": "which recipe author believes in the religion whose literature is centered around shiva purana?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04t7rn",
                    "entity_name": "Madhur Jaffrey"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe_author",
                        "class": "food.recipe_author",
                        "friendly_name": "Recipe author",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0bdslq",
                        "class": "religion.religious_text",
                        "friendly_name": "Shiva Purana",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.religion",
                        "friendly_name": "Religion"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "religion.religion.texts",
                        "friendly_name": "Texts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe_author . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.0bdslq } \n?x0 :people.person.religion ?x1 . \n?x1 :religion.religion.texts ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion",
                "people"
            ],
            "s_expression": "(AND food.recipe_author (JOIN people.person.religion (JOIN religion.religion.texts m.0bdslq)))"
        }
    },
    "737": {
        "generations": "which fictional creatures belong to the species of chimpanzees??",
        "ori_data_item": {
            "qid": 2101502005000,
            "question": "which fictional creature is about the chimpanzees species?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.088b9x",
                    "entity_name": "Tobias Sirinial Santorelli"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_creature",
                        "class": "fictional_universe.fictional_creature",
                        "friendly_name": "Fictional Creature",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0kjxx",
                        "class": "fictional_universe.character_species",
                        "friendly_name": "chimpanzees",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_creature.fictional_creature_species",
                        "friendly_name": "Fictional Creature Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_creature . \nVALUES ?x1 { :m.0kjxx } \n?x0 :fictional_universe.fictional_creature.fictional_creature_species ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_creature (JOIN fictional_universe.fictional_creature.fictional_creature_species m.0kjxx))"
        }
    },
    "738": {
        "generations": "how many albums feature sierra leone as the artist??",
        "ori_data_item": {
            "qid": 2103373015000,
            "question": "how many albums has sierra leone been the main contributor?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.album",
                        "class": "music.album",
                        "friendly_name": "Musical Album",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01v7bp9",
                        "class": "music.featured_artist",
                        "friendly_name": "Sierra Leone",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album.featured_artists",
                        "friendly_name": "Featured artists"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album . \nVALUES ?x1 { :m.01v7bp9 } \n?x0 :music.album.featured_artists ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(COUNT (AND music.album (JOIN music.album.featured_artists m.01v7bp9)))"
        }
    },
    "739": {
        "generations": "what dish uses a ladle as a culinary tool in its recipe??",
        "ori_data_item": {
            "qid": 3206501009000,
            "question": "what is a dish that utilizes a ladle?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01qf88",
                    "entity_name": "Gumbo"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.dish",
                        "class": "food.dish",
                        "friendly_name": "Dish",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "food.recipe",
                        "class": "food.recipe",
                        "friendly_name": "Recipe",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.027rl48",
                        "class": "food.culinary_tool",
                        "friendly_name": "Ladle",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "food.recipe.dish",
                        "friendly_name": "Dish"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "food.culinary_tool.used_in_recipes",
                        "friendly_name": "Used in recipes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.dish . \n?x1 :type.object.type :food.recipe . \nVALUES ?x2 { :m.027rl48 } \n?x1 :food.recipe.dish ?x0 . \n?x2 :food.culinary_tool.used_in_recipes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.dish (JOIN (R food.recipe.dish) (JOIN (R food.culinary_tool.used_in_recipes) m.027rl48)))"
        }
    },
    "740": {
        "generations": "what drug formulation has the dosage form of emulsion for injection??",
        "ori_data_item": {
            "qid": 2100036006000,
            "question": "what drug formulations use the dosage form emulsion for injection?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqr6y_",
                    "entity_name": "Propofol 10 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqvb16",
                    "entity_name": "Phytonadione 2 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqv3y6",
                    "entity_name": "Soybean oil, egg phospholipids, and glycerin 300/18/25 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqrxh8",
                    "entity_name": "Phytonadione 10 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqt5wf",
                    "entity_name": "Phytonadione 2 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs1dh",
                    "entity_name": "Soybean oil, egg phospholipids, and glycerin 100/12/25 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqtnjq",
                    "entity_name": "Safflower oil, soybean oil, egg phospholipids, and glycerin 50/50/12/25 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqv76v",
                    "entity_name": "Safflower oil, soybean oil, egg phospholipids, and glycerin 100/50/12/25 injectable emulsion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqvb2q",
                    "entity_name": "Soybean oil, egg phospholipids, and glycerin 200/12/25 injectable emulsion"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_formulation",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Drug formulation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04kdv4z",
                        "class": "medicine.drug_dosage_form",
                        "friendly_name": "Emulsion for Injection",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_formulation.dosage_form",
                        "friendly_name": "Dosage form"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_formulation . \nVALUES ?x1 { :m.04kdv4z } \n?x0 :medicine.drug_formulation.dosage_form ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_formulation (JOIN medicine.drug_formulation.dosage_form m.04kdv4z))"
        }
    },
    "741": {
        "generations": "who is the film producer that weighs less than 54.5 kg??",
        "ori_data_item": {
            "qid": 2105104013000,
            "question": "which film producer is heavier than 54.5?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0127s7",
                    "entity_name": "Christina Aguilera"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018fyy",
                    "entity_name": "Traci Lords"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01l2fn",
                    "entity_name": "Keira Knightley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01vs_v8",
                    "entity_name": "Madonna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026c6lr",
                    "entity_name": "Sasha Grey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042xh",
                    "entity_name": "J. K. Rowling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c1xv",
                    "entity_name": "Stella Stevens"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09l3p",
                    "entity_name": "Natalie Portman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09yrh",
                    "entity_name": "Jennifer Aniston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h64f0w",
                    "entity_name": "Gabby Douglas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jwtj",
                    "entity_name": "Jenna Jameson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t_99",
                    "entity_name": "Jenny McCarthy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0227vl",
                    "entity_name": "Paris Hilton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cyv3r",
                    "entity_name": "Ku Hye-sun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03zz8b",
                    "entity_name": "Amanda Seyfried"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.073tjg",
                    "entity_name": "Christina Ferguson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kd5ctn",
                    "entity_name": "Sara Oliveira"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.067sqt",
                    "entity_name": "Jennifer Morrison"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g35x3",
                    "entity_name": "Naoko Watanabe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02732z0",
                    "entity_name": "Mehr Jesia Rampal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h7r047",
                    "entity_name": "Susan Hart"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z888b",
                    "entity_name": "Susannah Mills"
                }
            ],
            "function": "<",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.producer",
                        "class": "film.producer",
                        "friendly_name": "Film producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "54.5^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "54.5",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 < \"54.5\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND film.producer (lt people.person.weight_kg 54.5^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "742": {
        "generations": "which TV song performer has performed in an episode segment that includes a song composed by Butch??",
        "ori_data_item": {
            "qid": 4301593003000,
            "question": "what is the name of the singer who performed the tv song that was composed by butch?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f_hhk",
                    "entity_name": "Gin Wigmore"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_song_performer",
                        "class": "tv.tv_song_performer",
                        "friendly_name": "TV song performer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_segment_song_relationship",
                        "class": "tv.tv_segment_song_relationship",
                        "friendly_name": "TV segment song relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "tv.tv_song",
                        "class": "tv.tv_song",
                        "friendly_name": "TV song",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.05l2y3",
                        "class": "music.composer",
                        "friendly_name": "butch",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_song_performer.episode_segments",
                        "friendly_name": "Episode segments"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_segment_song_relationship.song",
                        "friendly_name": "Song"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "music.composition.composer",
                        "friendly_name": "Composer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_song_performer . \n?x1 :type.object.type :tv.tv_segment_song_relationship . \n?x2 :type.object.type :tv.tv_song . \nVALUES ?x3 { :m.05l2y3 } \n?x0 :tv.tv_song_performer.episode_segments ?x1 . \n?x1 :tv.tv_segment_song_relationship.song ?x2 . \n?x2 :music.composition.composer ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "music",
                "tv"
            ],
            "s_expression": "(AND tv.tv_song_performer (JOIN tv.tv_song_performer.episode_segments (JOIN tv.tv_segment_song_relationship.song (JOIN music.composition.composer m.05l2y3))))"
        }
    },
    "743": {
        "generations": "which distilled spirit type is made from a fermentation base that also produces brandies??",
        "ori_data_item": {
            "qid": 3200512009000,
            "question": "brandies shares a fermentation base with which other distilled spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057pl6",
                    "entity_name": "Eau de vie"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit_type",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "Distilled spirit type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "distilled_spirits.fermentation_base",
                        "class": "distilled_spirits.fermentation_base",
                        "friendly_name": "Fermentation base",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0c93f",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "brandies",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "distilled_spirits.fermentation_base.spirit_products",
                        "friendly_name": "Spirit products"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "distilled_spirits.fermentation_base.spirit_products",
                        "friendly_name": "Spirit products"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit_type . \n?x1 :type.object.type :distilled_spirits.fermentation_base . \nVALUES ?x2 { :m.0c93f } \n?x1 :distilled_spirits.fermentation_base.spirit_products ?x0 . \n?x1 :distilled_spirits.fermentation_base.spirit_products ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit_type (JOIN (R distilled_spirits.fermentation_base.spirit_products) (JOIN distilled_spirits.fermentation_base.spirit_products m.0c93f)))"
        }
    },
    "744": {
        "generations": "what business issue is related to WATTYL LIMITED-BONUS common stock??",
        "ori_data_item": {
            "qid": 3204900002000,
            "question": "what issue has the same issuer as wattyl limited-bonus common stock?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cknw6g",
                    "entity_name": "WATTYL LTD Common Stock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cks5w0",
                    "entity_name": "WATTYL LIMITED - CUM DIV Common Stock"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.issue",
                        "class": "business.issue",
                        "friendly_name": "Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.issuer",
                        "class": "business.issuer",
                        "friendly_name": "Issuer",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cl3btc",
                        "class": "business.issue",
                        "friendly_name": "WATTYL LIMITED-BONUS Common Stock",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "business.issuer.issue",
                        "friendly_name": "Issue"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.issuer.issue",
                        "friendly_name": "Issue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.issue . \n?x1 :type.object.type :business.issuer . \nVALUES ?x2 { :m.0cl3btc } \n?x1 :business.issuer.issue ?x0 . \n?x1 :business.issuer.issue ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.issue (JOIN (R business.issuer.issue) (JOIN business.issuer.issue m.0cl3btc)))"
        }
    },
    "745": {
        "generations": "who is the american football player that has been quoted about self-improvement??",
        "ori_data_item": {
            "qid": 3200863012000,
            "question": "tell me the american football player who is known for quotes about the self-improvement?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gw8n",
                    "entity_name": "Lou Holtz"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "american_football.football_player",
                        "class": "american_football.football_player",
                        "friendly_name": "American football player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.048krb_",
                        "class": "media_common.quotation_subject",
                        "friendly_name": "Self-improvement",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.quotation.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "media_common.quotation_subject.quotations_about_this_subject",
                        "friendly_name": "Quotations About This Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :american_football.football_player . \n?x1 :type.object.type :media_common.quotation . \nVALUES ?x2 { :m.048krb_ } \n?x1 :media_common.quotation.author ?x0 . \n?x2 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND american_football.football_player (JOIN (R media_common.quotation.author) (JOIN (R media_common.quotation_subject.quotations_about_this_subject) m.048krb_)))"
        }
    },
    "746": {
        "generations": "what is the name of the airline with the ICAO designator AIC??",
        "ori_data_item": {
            "qid": 2100783008000,
            "question": "aic is what airline's icao designer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k670",
                    "entity_name": "Air India"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airline",
                        "class": "aviation.airline",
                        "friendly_name": "Airline",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02h7zdn",
                        "class": "aviation.icao_airline_designator",
                        "friendly_name": "AIC",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airline.ICAO_designator",
                        "friendly_name": "ICAO designator"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airline . \nVALUES ?x1 { :m.02h7zdn } \n?x0 :aviation.airline.ICAO_designator ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airline (JOIN aviation.airline.ICAO_designator m.02h7zdn))"
        }
    },
    "747": {
        "generations": "what collection category does barbie as catwoman belong to??",
        "ori_data_item": {
            "qid": 2102088012000,
            "question": "what category does barbie as catwoman have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015w6q",
                    "entity_name": "Barbie"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collection_category",
                        "class": "interests.collection_category",
                        "friendly_name": "Collection category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05gns1z",
                        "class": "interests.collectable_item",
                        "friendly_name": "Barbie as Catwoman",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.collection_category.items_in_this_category",
                        "friendly_name": "Items in this category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collection_category . \nVALUES ?x1 { :m.05gns1z } \n?x0 :interests.collection_category.items_in_this_category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.collection_category (JOIN interests.collection_category.items_in_this_category m.05gns1z))"
        }
    },
    "748": {
        "generations": "who is the recipe author that belongs to the same ethnicity as eugene roe??",
        "ori_data_item": {
            "qid": 3200732005000,
            "question": "eugene roe has the same ethnicity as which recipe author?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dkfwx",
                    "entity_name": "Thad Guidry"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe_author",
                        "class": "food.recipe_author",
                        "friendly_name": "Recipe author",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.ethnicity",
                        "class": "people.ethnicity",
                        "friendly_name": "Ethnicity",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.097fsl",
                        "class": "military.military_person",
                        "friendly_name": "Eugene Roe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.ethnicity",
                        "friendly_name": "Ethnicity"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.ethnicity.people",
                        "friendly_name": "People of this ethnicity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe_author . \n?x1 :type.object.type :people.ethnicity . \nVALUES ?x2 { :m.097fsl } \n?x0 :people.person.ethnicity ?x1 . \n?x1 :people.ethnicity.people ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND food.recipe_author (JOIN people.person.ethnicity (JOIN people.ethnicity.people m.097fsl)))"
        }
    },
    "749": {
        "generations": "which fictional universe uses old english as a language??",
        "ori_data_item": {
            "qid": 2100174012000,
            "question": "which fictional universe speaks old english?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pc64s0",
                    "entity_name": "The Hector Hornsmith Pirate Chronicles"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05p2d",
                        "class": "fictional_universe.fictional_language",
                        "friendly_name": "Old English",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.languages",
                        "friendly_name": "Languages"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe . \nVALUES ?x1 { :m.05p2d } \n?x0 :fictional_universe.fictional_universe.languages ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe (JOIN fictional_universe.fictional_universe.languages m.05p2d))"
        }
    },
    "750": {
        "generations": "which order of chivalry was founded by the knights of the templar??",
        "ori_data_item": {
            "qid": 2100907010000,
            "question": "knights of the templar founded which order of chivalry?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f93v",
                    "entity_name": "Order of Christ"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.order_of_chivalry",
                        "class": "royalty.order_of_chivalry",
                        "friendly_name": "Order of Chivalry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.049jc",
                        "class": "royalty.chivalric_order_founder",
                        "friendly_name": "knights of the templar",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "royalty.order_of_chivalry.founders",
                        "friendly_name": "Founders"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.order_of_chivalry . \nVALUES ?x1 { :m.049jc } \n?x0 :royalty.order_of_chivalry.founders ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.order_of_chivalry (JOIN royalty.order_of_chivalry.founders m.049jc))"
        }
    },
    "751": {
        "generations": "what compositional form is the anomaly (calling your name) composition a part of??",
        "ori_data_item": {
            "qid": 3205222008000,
            "question": "what is the type of composition that has the recorded version of anomaly (calling your name)?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.074ft",
                    "entity_name": "Song"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.compositional_form",
                        "class": "music.compositional_form",
                        "friendly_name": "Composition type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.composition",
                        "class": "music.composition",
                        "friendly_name": "Composition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01c2t8h",
                        "class": "music.recording",
                        "friendly_name": "Anomaly (Calling Your Name)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.compositional_form.compositions",
                        "friendly_name": "Compositions"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.composition.recordings",
                        "friendly_name": "Recorded versions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.compositional_form . \n?x1 :type.object.type :music.composition . \nVALUES ?x2 { :m.01c2t8h } \n?x0 :music.compositional_form.compositions ?x1 . \n?x1 :music.composition.recordings ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.compositional_form (JOIN music.compositional_form.compositions (JOIN music.composition.recordings m.01c2t8h)))"
        }
    },
    "752": {
        "generations": "what religion has a collective term for its adherents and is part of shaafi'i??",
        "ori_data_item": {
            "qid": 3201680027000,
            "question": "shaafi'i has what religion adherents?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t80c7",
                    "entity_name": "Sunnis"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.adherents",
                        "class": "religion.adherents",
                        "friendly_name": "Adherents",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01l1yv",
                        "class": "religion.religion",
                        "friendly_name": "shaafi'i",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.collective_term_for_adherents",
                        "friendly_name": "Adherents"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "religion.religion.is_part_of",
                        "friendly_name": "Is Part Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.adherents . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.01l1yv } \n?x1 :religion.religion.collective_term_for_adherents ?x0 . \n?x2 :religion.religion.is_part_of ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.adherents (JOIN (R religion.religion.collective_term_for_adherents) (JOIN (R religion.religion.is_part_of) m.01l1yv)))"
        }
    },
    "753": {
        "generations": "who is the assignee of the patent for the multidimensional digital waveguide signal synthesis system and method (tetrahedral extension)??",
        "ori_data_item": {
            "qid": 2100987003000,
            "question": "the patent multidimensional digital waveguide signal synthesis system and method (tetrahedral extension) is assigned to who?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06pwq",
                    "entity_name": "Stanford University"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.patent_assignee",
                        "class": "law.patent_assignee",
                        "friendly_name": "Patent Assignee",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09tg1f8",
                        "class": "law.us_patent",
                        "friendly_name": "Multidimensional digital waveguide signal synthesis system and method (tetrahedral extension)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.patent_assignee.patents_assigned",
                        "friendly_name": "Patents assigned"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.patent_assignee . \nVALUES ?x1 { :m.09tg1f8 } \n?x0 :law.patent_assignee.patents_assigned ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.patent_assignee (JOIN law.patent_assignee.patents_assigned m.09tg1f8))"
        }
    },
    "754": {
        "generations": "what generation of the pontiac gto succeeded the 1974 generation??",
        "ori_data_item": {
            "qid": 2101777004000,
            "question": "which automobile generation is the successor of 1974 pontiac gto (generation)",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k_kvb",
                    "entity_name": "1973 Pontiac GTO (Generation)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02k_kvm",
                        "class": "automotive.generation",
                        "friendly_name": "1974 Pontiac GTO (Generation)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.successor",
                        "friendly_name": "Successor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \nVALUES ?x1 { :m.02k_kvm } \n?x0 :automotive.generation.successor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (JOIN automotive.generation.successor m.02k_kvm))"
        }
    },
    "755": {
        "generations": "what is the name of the gene ontology group that is a broader group of negative regulation by symbiont of host defense response??",
        "ori_data_item": {
            "qid": 2102532005000,
            "question": "what's the broader group of negative regulation by symbiont of host defense response?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9qtk",
                    "entity_name": "negative regulation by symbiont of host ethylene-mediated defense response"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9qwf",
                    "entity_name": "negative regulation by symbiont of host salicylic acid-mediated defense response"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9r6s",
                    "entity_name": "negative regulation by symbiont of host inflammatory response"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9rch",
                    "entity_name": "negative regulation by symbiont of defense-related host callose deposition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9rkh",
                    "entity_name": "negative regulation by symbiont of host jasmonic acid-mediated defense response"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.gene_ontology_group",
                        "class": "biology.gene_ontology_group",
                        "friendly_name": "Gene Ontology Group",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02l9r69",
                        "class": "biology.gene_ontology_group",
                        "friendly_name": "negative regulation by symbiont of host defense response",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.gene_ontology_group.broader_group",
                        "friendly_name": "Broader Group"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.gene_ontology_group . \nVALUES ?x1 { :m.02l9r69 } \n?x0 :biology.gene_ontology_group.broader_group ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.gene_ontology_group (JOIN biology.gene_ontology_group.broader_group m.02l9r69))"
        }
    },
    "756": {
        "generations": "which conference ended the earliest??",
        "ori_data_item": {
            "qid": 2104010001000,
            "question": "what is the earliest conference?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffyn",
                    "entity_name": "Seneca Falls Convention"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "conferences.conference",
                        "class": "conferences.conference",
                        "friendly_name": "Conference event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.event.end_date",
                        "friendly_name": "End date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :conferences.conference . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :conferences.conference . \n?y0 :time.event.end_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.event.end_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMIN conferences.conference time.event.end_date)"
        }
    },
    "757": {
        "generations": "what wine region is 2006 terra valentine russian river valley pinot noir from??",
        "ori_data_item": {
            "qid": 2101469009000,
            "question": "what is the location where 2006 terra valentine russian river valley pinot noir is made?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01n7q",
                    "entity_name": "California"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine_region",
                        "class": "wine.wine_region",
                        "friendly_name": "Wine Region",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04d0zlh",
                        "class": "wine.wine",
                        "friendly_name": "2006 Terra Valentine Russian River Valley Pinot Noir",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.wine_region.wines",
                        "friendly_name": "Wines"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine_region . \nVALUES ?x1 { :m.04d0zlh } \n?x0 :wine.wine_region.wines ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine_region (JOIN wine.wine_region.wines m.04d0zlh))"
        }
    },
    "758": {
        "generations": "what sports equipment is related to a sport coached by fabio capello??",
        "ori_data_item": {
            "qid": 3201019010000,
            "question": "fabio capello coaches a sport, what is the equipment that is used?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dpm1v",
                    "entity_name": "Ball"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_equipment",
                        "class": "sports.sports_equipment",
                        "friendly_name": "Sports Equipment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.sport",
                        "class": "sports.sport",
                        "friendly_name": "Sport",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.030_wt",
                        "class": "sports.sports_team_coach",
                        "friendly_name": "Fabio Capello",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "sports.sport.related_equipment",
                        "friendly_name": "Related Equipment"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "sports.sport.team_coaches",
                        "friendly_name": "Team coaches"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_equipment . \n?x1 :type.object.type :sports.sport . \nVALUES ?x2 { :m.030_wt } \n?x1 :sports.sport.related_equipment ?x0 . \n?x1 :sports.sport.team_coaches ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_equipment (JOIN (R sports.sport.related_equipment) (JOIN sports.sport.team_coaches m.030_wt)))"
        }
    },
    "759": {
        "generations": "which soccer player has a total career appearances of 44 or more??",
        "ori_data_item": {
            "qid": 2101922014000,
            "question": "which football player has 44 career appearance?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4kmnl",
                    "entity_name": "Michael Rutherford"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_player",
                        "class": "soccer.football_player",
                        "friendly_name": "Football player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "44^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "44",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_player.total_career_appearances",
                        "friendly_name": "Number of Career Appearances"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_player . \nVALUES ?x1 { \"44\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :soccer.football_player.total_career_appearances ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_player (JOIN soccer.football_player.total_career_appearances 44^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "760": {
        "generations": "which aircraft designer is credited with designing the aircraft model with the largest wingspan??",
        "ori_data_item": {
            "qid": 3202303001000,
            "question": "what is the name of the designer of the aircraft with greatest wingspan?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03n93",
                    "entity_name": "Howard Hughes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039vcv",
                    "entity_name": "Henry J. Kaiser"
                }
            ],
            "function": "argmax",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_designer",
                        "class": "aviation.aircraft_designer",
                        "friendly_name": "Aircraft designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_designer.aircraft_models_designed",
                        "friendly_name": "Aircraft models designed"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "aviation.aircraft_model.wingspan",
                        "friendly_name": "Wingspan"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_designer . \n?x1 :type.object.type :aviation.aircraft_model . \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :aviation.aircraft_designer . \n?y1 :type.object.type :aviation.aircraft_model . \n?y0 :aviation.aircraft_designer.aircraft_models_designed ?y1 . \n?y1 :aviation.aircraft_model.wingspan ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :aviation.aircraft_designer.aircraft_models_designed ?x1 . \n?x1 :aviation.aircraft_model.wingspan ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(ARGMAX aviation.aircraft_designer (JOIN aviation.aircraft_designer.aircraft_models_designed aviation.aircraft_model.wingspan))"
        }
    },
    "761": {
        "generations": "which TV episode segment was written by Paul Sheer??",
        "ori_data_item": {
            "qid": 2102758002000,
            "question": "what is the segment of a tv episode written by paul sheer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0106rsty",
                    "entity_name": "U-KO'ed (Part 1)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zctwv0",
                    "entity_name": "CCSI"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_episode_segment",
                        "class": "tv.tv_episode_segment",
                        "friendly_name": "TV episode segment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.076wp0",
                        "class": "tv.tv_writer",
                        "friendly_name": "paul sheer",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_episode_segment.writer",
                        "friendly_name": "Writer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_episode_segment . \nVALUES ?x1 { :m.076wp0 } \n?x0 :tv.tv_episode_segment.writer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_episode_segment (JOIN tv.tv_episode_segment.writer m.076wp0))"
        }
    },
    "762": {
        "generations": "what government office or title is under the jurisdiction of the netherlands??",
        "ori_data_item": {
            "qid": 2100241014000,
            "question": "the netherlands has what government office?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06nq8wd",
                    "entity_name": "Member of the House of Representatives of the Netherlands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bb66jj",
                    "entity_name": "Member of the Senate of the Netherlands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p1tq",
                    "entity_name": "Prime Minister of the Netherlands"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jl1mms",
                    "entity_name": "President of the House of Representatives"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_office_or_title",
                        "class": "government.government_office_or_title",
                        "friendly_name": "Government Office or Title",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.059j2",
                        "class": "government.governmental_jurisdiction",
                        "friendly_name": "the netherlands",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_office_or_title.jurisdiction",
                        "friendly_name": "Jurisdiction"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_office_or_title . \nVALUES ?x1 { :m.059j2 } \n?x0 :government.government_office_or_title.jurisdiction ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_office_or_title (JOIN government.government_office_or_title.jurisdiction m.059j2))"
        }
    },
    "763": {
        "generations": "what is the parent model of the dell precision t3600 workstation computer??",
        "ori_data_item": {
            "qid": 2100913002000,
            "question": "what is the name of the computer that has the parent model of dell precision t3600 workstation",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pxm4b8",
                    "entity_name": "Precision T1650"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pxm4bg",
                    "entity_name": "Precision T7600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pxm4b2",
                    "entity_name": "Precision T5600"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pxm4bn",
                    "entity_name": "Precision T3600"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer",
                        "class": "computer.computer",
                        "friendly_name": "Computer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0pmb23f",
                        "class": "computer.computer",
                        "friendly_name": "Dell Precision T3600 workstation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer.parent_model",
                        "friendly_name": "Parent Model"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer . \nVALUES ?x1 { :m.0pmb23f } \n?x0 :computer.computer.parent_model ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer (JOIN computer.computer.parent_model m.0pmb23f))"
        }
    },
    "764": {
        "generations": "what collection category includes the activity of coin collecting??",
        "ori_data_item": {
            "qid": 2100290005000,
            "question": "coin collector is a collection activity in which collection category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0242l",
                    "entity_name": "Coin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collection_category",
                        "class": "interests.collection_category",
                        "friendly_name": "Collection category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01nb8",
                        "class": "interests.collection_activity",
                        "friendly_name": "coin collector",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.collection_category.name_of_collection_activity",
                        "friendly_name": "Name of collection activity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collection_category . \nVALUES ?x1 { :m.01nb8 } \n?x0 :interests.collection_category.name_of_collection_activity ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.collection_category (JOIN interests.collection_category.name_of_collection_activity m.01nb8))"
        }
    },
    "765": {
        "generations": "where is luke milbourne interred??",
        "ori_data_item": {
            "qid": 2102236000000,
            "question": "where was luke milbourne laid to rest?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0923zq",
                    "entity_name": "St Leonard's, Shoreditch"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.place_of_interment",
                        "class": "people.place_of_interment",
                        "friendly_name": "Place of interment",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bbjfng",
                        "class": "people.deceased_person",
                        "friendly_name": "Luke Milbourne",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.place_of_interment.interred_here",
                        "friendly_name": "People interred here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.place_of_interment . \nVALUES ?x1 { :m.0bbjfng } \n?x0 :people.place_of_interment.interred_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.place_of_interment (JOIN people.place_of_interment.interred_here m.0bbjfng))"
        }
    },
    "766": {
        "generations": "who is the inventor quoted as saying \"when you feel that you have reached the end and that you cannot go one step further, when life seems to be drained of all purpose: What a wonderful opportunity o start all over again, to turn over a new page.\"??",
        "ori_data_item": {
            "qid": 4301654000000,
            "question": "what inventor has a quote related to when you feel that you have reached the end and that you cannot go one step further, when life seems to be drained of all purpose: what a wonderful opportunity o start all over again, to turn over a new page.?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07bty",
                    "entity_name": "Thomas Edison"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019fz",
                    "entity_name": "Benjamin Franklin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p8wy",
                    "entity_name": "Charles F. Kettering"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.inventor",
                        "class": "law.inventor",
                        "friendly_name": "Inventor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "media_common.quotation_subject",
                        "class": "media_common.quotation_subject",
                        "friendly_name": "Quotation Subject",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.048g_l1",
                        "class": "media_common.quotation",
                        "friendly_name": "When you feel that you have reached the end and that you cannot go one step further, when life seems to be drained of all purpose: What a wonderful opportunity o start all over again, to turn over a new page.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.quotation.author",
                        "friendly_name": "Author"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "media_common.quotation.subjects",
                        "friendly_name": "Subjects"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "media_common.quotation_subject.quotations_about_this_subject",
                        "friendly_name": "Quotations About This Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.inventor . \n?x1 :type.object.type :media_common.quotation . \n?x2 :type.object.type :media_common.quotation_subject . \nVALUES ?x3 { :m.048g_l1 } \n?x1 :media_common.quotation.author ?x0 . \n?x1 :media_common.quotation.subjects ?x2 . \n?x2 :media_common.quotation_subject.quotations_about_this_subject ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND law.inventor (JOIN (R media_common.quotation.author) (JOIN media_common.quotation.subjects (JOIN media_common.quotation_subject.quotations_about_this_subject m.048g_l1))))"
        }
    },
    "767": {
        "generations": "what is the next model year for the 2015 chevy spark in the automotive industry??",
        "ori_data_item": {
            "qid": 2100298002000,
            "question": "what model year is the next for 2015 chevy spark?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012br3w2",
                    "entity_name": "2014 Chevy Spark"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model_year",
                        "class": "automotive.model_year",
                        "friendly_name": "Automobile Model Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012br30_",
                        "class": "automotive.model_year",
                        "friendly_name": "2015 Chevy Spark",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model_year.next_model_year",
                        "friendly_name": "Next Model Year"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model_year . \nVALUES ?x1 { :m.012br30_ } \n?x0 :automotive.model_year.next_model_year ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model_year (JOIN automotive.model_year.next_model_year m.012br30_))"
        }
    },
    "768": {
        "generations": "which recording has a track called depressive hibernation??",
        "ori_data_item": {
            "qid": 2100990004000,
            "question": "the depressive hibernation tracks are in what musical recording?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f5sr0m",
                    "entity_name": "Depressive Hibernation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.recording",
                        "class": "music.recording",
                        "friendly_name": "Musical Recording",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0m49l7v",
                        "class": "music.release_track",
                        "friendly_name": "Depressive Hibernation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.recording.tracks",
                        "friendly_name": "Tracks"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \nVALUES ?x1 { :m.0m49l7v } \n?x0 :music.recording.tracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.recording (JOIN music.recording.tracks m.0m49l7v))"
        }
    },
    "769": {
        "generations": "which lighthouse was constructed using cement??",
        "ori_data_item": {
            "qid": 2100894002000,
            "question": "name the lighthouses made out of cement.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05fpjh",
                    "entity_name": "Point Iroquois Light"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h4791",
                    "entity_name": "Point Bonita Lighthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04bpgc",
                    "entity_name": "Fire Island Lighthouse"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.lighthouse",
                        "class": "architecture.lighthouse",
                        "friendly_name": "Lighthouse",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01ynw",
                        "class": "architecture.lighthouse_construction_material",
                        "friendly_name": "Cement",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.lighthouse.construction",
                        "friendly_name": "Construction"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.lighthouse . \nVALUES ?x1 { :m.01ynw } \n?x0 :architecture.lighthouse.construction ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.lighthouse (JOIN architecture.lighthouse.construction m.01ynw))"
        }
    },
    "770": {
        "generations": "what adaptation is based on both the shaker spiritual and early shaker spirituals??",
        "ori_data_item": {
            "qid": 3200506012000,
            "question": "what is an adaptation of the the shaker spiritual of early shaker spirituals?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qn7yv",
                    "entity_name": "Early Shaker Spirituals: A Record Album Interpretation"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.adaptation",
                        "class": "media_common.adaptation",
                        "friendly_name": "Adaptation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.069pc08",
                        "class": "media_common.adapted_work",
                        "friendly_name": "The Shaker spiritual",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.010rbq8x",
                        "class": "media_common.adapted_work",
                        "friendly_name": "Early Shaker Spirituals",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.adapted_work.adaptations",
                        "friendly_name": "Adaptations"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "media_common.adapted_work.adaptations",
                        "friendly_name": "Adaptations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.adaptation . \nVALUES ?x1 { :m.069pc08 } \nVALUES ?x2 { :m.010rbq8x } \n?x1 :media_common.adapted_work.adaptations ?x0 . \n?x2 :media_common.adapted_work.adaptations ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.adaptation (AND (JOIN (R media_common.adapted_work.adaptations) m.069pc08) (JOIN (R media_common.adapted_work.adaptations) m.010rbq8x)))"
        }
    },
    "771": {
        "generations": "what book edition series is part of the political diaries of the persian gulf series??",
        "ori_data_item": {
            "qid": 2100630006000,
            "question": "political diaries of the persian gulf is a part of series in which edition of book?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.094c1lf",
                    "entity_name": "Political Diaries of the Persian Gulf, 1904-1965, Set"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0qz9jcy",
                        "class": "book.book_edition_series",
                        "friendly_name": "Political Diaries of the Persian Gulf",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition_series.part_of_series",
                        "friendly_name": "Part of series"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition_series . \nVALUES ?x1 { :m.0qz9jcy } \n?x0 :book.book_edition_series.part_of_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition_series (JOIN book.book_edition_series.part_of_series m.0qz9jcy))"
        }
    },
    "772": {
        "generations": "what museum was founded in the same place as harding academy, and is also a tourist attraction??",
        "ori_data_item": {
            "qid": 3205477011000,
            "question": "the travel destination at which harding academy is founded contains what tourist attractions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0l6t9",
                    "entity_name": "Graceland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qs9k6",
                    "entity_name": "Memphis Brooks Museum of Art"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.museum",
                        "class": "architecture.museum",
                        "friendly_name": "Museum",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.travel_destination",
                        "class": "travel.travel_destination",
                        "friendly_name": "Travel destination",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0d6386",
                        "class": "education.school",
                        "friendly_name": "Harding Academy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.travel_destination.tourist_attractions",
                        "friendly_name": "Tourist attractions"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "organization.organization.place_founded",
                        "friendly_name": "Place founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.museum . \n?x1 :type.object.type :travel.travel_destination . \nVALUES ?x2 { :m.0d6386 } \n?x1 :travel.travel_destination.tourist_attractions ?x0 . \n?x2 :organization.organization.place_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel",
                "organization"
            ],
            "s_expression": "(AND architecture.museum (JOIN (R travel.travel_destination.tourist_attractions) (JOIN (R organization.organization.place_founded) m.0d6386)))"
        }
    },
    "773": {
        "generations": "what short story features the character Hamid??",
        "ori_data_item": {
            "qid": 2102718004000,
            "question": "hamid is a character in what short story?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wsd71x",
                    "entity_name": "Idgah"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.short_story",
                        "class": "book.short_story",
                        "friendly_name": "Short Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0w_x4yx",
                        "class": "book.book_character",
                        "friendly_name": "Hamid",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.short_story.characters",
                        "friendly_name": "Characters"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.short_story . \nVALUES ?x1 { :m.0w_x4yx } \n?x0 :book.short_story.characters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.short_story (JOIN book.short_story.characters m.0w_x4yx))"
        }
    },
    "774": {
        "generations": "what diseases are related to the medical specialty of psychology??",
        "ori_data_item": {
            "qid": 2100304001000,
            "question": "what disease or medical condition is associated with psycology?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h99n",
                    "entity_name": "Attention deficit hyperactivity disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tkm",
                    "entity_name": "Erectile dysfunction"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ftsr",
                    "entity_name": "Anxiety disorder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08053hx",
                    "entity_name": "Denial of pregnancy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.disease",
                        "class": "medicine.disease",
                        "friendly_name": "Disease or medical condition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05qfh",
                        "class": "medicine.medical_specialty",
                        "friendly_name": "psycology",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.disease.medical_specialties",
                        "friendly_name": "Associated medical specialties"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.disease . \nVALUES ?x1 { :m.05qfh } \n?x0 :medicine.disease.medical_specialties ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.disease (JOIN medicine.disease.medical_specialties m.05qfh))"
        }
    },
    "775": {
        "generations": "which business issuer has issued common stock for sunray holdings ltd??",
        "ori_data_item": {
            "qid": 2102201007000,
            "question": "which issuer issued sunray holdings ltd common stock?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cp54k7",
                    "entity_name": "Sunray Holdings Ltd."
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.issuer",
                        "class": "business.issuer",
                        "friendly_name": "Issuer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ckdj0h",
                        "class": "business.issue",
                        "friendly_name": "SUNRAY HOLDINGS LTD Common Stock",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.issuer.issue",
                        "friendly_name": "Issue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.issuer . \nVALUES ?x1 { :m.0ckdj0h } \n?x0 :business.issuer.issue ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.issuer (JOIN business.issuer.issue m.0ckdj0h))"
        }
    },
    "776": {
        "generations": "what theater genre is associated with the play cats (chicago musical revue)??",
        "ori_data_item": {
            "qid": 3201778003000,
            "question": "the soundtrack of cats (chicago musical revue) belongs to what theater genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0557q",
                    "entity_name": "Musical theatre"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_genre",
                        "class": "theater.theater_genre",
                        "friendly_name": "Theater Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "theater.play",
                        "class": "theater.play",
                        "friendly_name": "Play",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01hs4by",
                        "class": "theater.musical_soundtrack",
                        "friendly_name": "Cats (Chicago Musical Revue)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "theater.play.genre",
                        "friendly_name": "Genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "theater.play.soundtracks",
                        "friendly_name": "Soundtracks"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_genre . \n?x1 :type.object.type :theater.play . \nVALUES ?x2 { :m.01hs4by } \n?x1 :theater.play.genre ?x0 . \n?x1 :theater.play.soundtracks ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_genre (JOIN (R theater.play.genre) (JOIN theater.play.soundtracks m.01hs4by)))"
        }
    },
    "777": {
        "generations": "which ride manufacturer made the Klondike Gold Mine ride??",
        "ori_data_item": {
            "qid": 2102861004000,
            "question": "which amusement ride manufacturer manufactured klondike gold mine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qn54y",
                    "entity_name": "Pinfari"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_manufacturer",
                        "class": "amusement_parks.ride_manufacturer",
                        "friendly_name": "Amusement Ride Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.026n61g",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Klondike Gold Mine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride_manufacturer.rides",
                        "friendly_name": "Rides Manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_manufacturer . \nVALUES ?x1 { :m.026n61g } \n?x0 :amusement_parks.ride_manufacturer.rides ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride_manufacturer (JOIN amusement_parks.ride_manufacturer.rides m.026n61g))"
        }
    },
    "778": {
        "generations": "what certification is Morbier cheese a part of??",
        "ori_data_item": {
            "qid": 2101174019000,
            "question": "morbier cheese has which cheese certification?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j6kd",
                    "entity_name": "Appellation d'origine contr\u00f4l\u00e9e"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.cheese_certification",
                        "class": "food.cheese_certification",
                        "friendly_name": "Cheese certification",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01mzty",
                        "class": "food.cheese",
                        "friendly_name": "Morbier cheese",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.cheese_certification.certified_cheeses",
                        "friendly_name": "Certified Cheeses"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.cheese_certification . \nVALUES ?x1 { :m.01mzty } \n?x0 :food.cheese_certification.certified_cheeses ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.cheese_certification (JOIN food.cheese_certification.certified_cheeses m.01mzty))"
        }
    },
    "779": {
        "generations": "what is the earliest written work by the european bird census council??",
        "ori_data_item": {
            "qid": 3202492010000,
            "question": "name the first technical report published by the european bird census council.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q67yd",
                    "entity_name": "The EBCC Atlas of European Breeding Birds"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.technical_report",
                        "class": "book.technical_report",
                        "friendly_name": "Technical report",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05ly_s3",
                        "class": "book.report_issuing_institution",
                        "friendly_name": "European Bird Census Council",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.written_work.date_of_first_publication",
                        "friendly_name": "Date of first publication"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "book.technical_report.institution",
                        "friendly_name": "Institution"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.technical_report . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :book.technical_report . \nVALUES ?y2 { :m.05ly_s3 } \n?y0 :book.written_work.date_of_first_publication ?y1 . \n?y0 :book.technical_report.institution ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.05ly_s3 } \n?x0 :book.written_work.date_of_first_publication ?x1 . \n?x0 :book.technical_report.institution ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(ARGMIN (AND book.technical_report (JOIN book.technical_report.institution m.05ly_s3)) book.written_work.date_of_first_publication)"
        }
    },
    "780": {
        "generations": "which disease is known to have affected leonard frey??",
        "ori_data_item": {
            "qid": 2102670008000,
            "question": "leonard frey is made notable by having which kind of medical condition or disease?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d19y2",
                    "entity_name": "HIV/AIDS"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.disease",
                        "class": "medicine.disease",
                        "friendly_name": "Disease or medical condition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04yyl2",
                        "class": "medicine.notable_person_with_medical_condition",
                        "friendly_name": "Leonard Frey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.disease.notable_people_with_this_condition",
                        "friendly_name": "Notable people with this condition"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.disease . \nVALUES ?x1 { :m.04yyl2 } \n?x0 :medicine.disease.notable_people_with_this_condition ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.disease (JOIN medicine.disease.notable_people_with_this_condition m.04yyl2))"
        }
    },
    "781": {
        "generations": "what type of organism is Farma Way classified as??",
        "ori_data_item": {
            "qid": 2100169004000,
            "question": "farma way falls under what organism classification?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03k3r",
                    "entity_name": "Horse"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism_classification",
                        "class": "biology.organism_classification",
                        "friendly_name": "Organism Classification",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03b_f2b",
                        "class": "biology.organism",
                        "friendly_name": "Farma Way",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism_classification.organisms_of_this_type",
                        "friendly_name": "Organisms of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism_classification . \nVALUES ?x1 { :m.03b_f2b } \n?x0 :biology.organism_classification.organisms_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism_classification (JOIN biology.organism_classification.organisms_of_this_type m.03b_f2b))"
        }
    },
    "782": {
        "generations": "which fictional characters have the occupation of ambassador's assistant??",
        "ori_data_item": {
            "qid": 3200753008000,
            "question": "what is the occupation for tv haracter with occupation ambassador\u2019s assistant?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ywz_b",
                    "entity_name": "Commercial telepath"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ywzzz",
                    "entity_name": "Rebel"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_character",
                        "class": "tv.tv_character",
                        "friendly_name": "TV Character",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03ywz_4",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Ambassador\u2019s assistant",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.character_occupation.characters_with_this_occupation",
                        "friendly_name": "Characters With This Occupation"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_occupation . \n?x1 :type.object.type :tv.tv_character . \nVALUES ?x2 { :m.03ywz_4 } \n?x0 :fictional_universe.character_occupation.characters_with_this_occupation ?x1 . \n?x1 :fictional_universe.fictional_character.occupation ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_occupation (JOIN fictional_universe.character_occupation.characters_with_this_occupation (JOIN fictional_universe.fictional_character.occupation m.03ywz_4)))"
        }
    },
    "783": {
        "generations": "what computer has the Playstation 4 Eye as a peripheral??",
        "ori_data_item": {
            "qid": 2101038000000,
            "question": "which computer has a playstation 4 eye peripheral?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r4_kmc",
                    "entity_name": "PlayStation 4"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.computer",
                        "class": "computer.computer",
                        "friendly_name": "Computer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0w1vh8t",
                        "class": "computer.computer_peripheral",
                        "friendly_name": "Playstation 4 Eye",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.computer.peripherals",
                        "friendly_name": "Peripherals"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer . \nVALUES ?x1 { :m.0w1vh8t } \n?x0 :computer.computer.peripherals ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.computer (JOIN computer.computer.peripherals m.0w1vh8t))"
        }
    },
    "784": {
        "generations": "what ride type is found in carowinds amusement park??",
        "ori_data_item": {
            "qid": 3201487002000,
            "question": "what are some types of amusement rides that you can find in carowinds?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04m7sh",
                    "entity_name": "Wild Mouse roller coaster"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_type",
                        "class": "amusement_parks.ride_type",
                        "friendly_name": "Amusement Ride Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04td00",
                        "class": "amusement_parks.park",
                        "friendly_name": "Carowinds",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "amusement_parks.ride.ride_type",
                        "friendly_name": "Ride Type"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "amusement_parks.ride.park",
                        "friendly_name": "Park"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_type . \n?x1 :type.object.type :amusement_parks.ride . \nVALUES ?x2 { :m.04td00 } \n?x1 :amusement_parks.ride.ride_type ?x0 . \n?x1 :amusement_parks.ride.park ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride_type (JOIN (R amusement_parks.ride.ride_type) (JOIN amusement_parks.ride.park m.04td00)))"
        }
    },
    "785": {
        "generations": "what is the advertising slogan for FranConnect??",
        "ori_data_item": {
            "qid": 3201773003000,
            "question": "the brand franconnect's slogan for advertisements is what exactly?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0116jq6m",
                    "entity_name": "Building Smarter Franchise Systems"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.advertising_slogan",
                        "class": "business.advertising_slogan",
                        "friendly_name": "Advertising slogan",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.brand_slogan",
                        "class": "business.brand_slogan",
                        "friendly_name": "Brand slogan",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0116jg_v",
                        "class": "business.brand",
                        "friendly_name": "FranConnect",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.advertising_slogan.brand",
                        "friendly_name": "Brand"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "business.brand_slogan.brand",
                        "friendly_name": "Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.advertising_slogan . \n?x1 :type.object.type :business.brand_slogan . \nVALUES ?x2 { :m.0116jg_v } \n?x0 :business.advertising_slogan.brand ?x1 . \n?x1 :business.brand_slogan.brand ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.advertising_slogan (JOIN business.advertising_slogan.brand (JOIN business.brand_slogan.brand m.0116jg_v)))"
        }
    },
    "786": {
        "generations": "which airline has only 5 destinations??",
        "ori_data_item": {
            "qid": 2100732009000,
            "question": "what airline's destinations total 5?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bwrn",
                    "entity_name": "Virgin America"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airline",
                        "class": "aviation.airline",
                        "friendly_name": "Airline",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "5",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airline.number_of_destinations",
                        "friendly_name": "Number of destinations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airline . \nVALUES ?x1 { \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :aviation.airline.number_of_destinations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airline (JOIN aviation.airline.number_of_destinations 5^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "787": {
        "generations": "which nebula has a magnitude of at most 6.8??",
        "ori_data_item": {
            "qid": 2104581009000,
            "question": "what is a nebula with an apparent magnitude of at most 6.8?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.032qry",
                    "entity_name": "Horsehead Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0180sq",
                    "entity_name": "Orion Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cqsrx",
                    "entity_name": "Flame Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03tfyz",
                    "entity_name": "Omega Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03rv_9",
                    "entity_name": "Carina Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05br1d",
                    "entity_name": "California Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03s0r1",
                    "entity_name": "Lagoon Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jn15",
                    "entity_name": "Trifid Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01v8lq",
                    "entity_name": "Eagle Nebula"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yr9f",
                    "entity_name": "North America Nebula"
                }
            ],
            "function": "<=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.nebula",
                        "class": "astronomy.nebula",
                        "friendly_name": "Nebula",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "6.8^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "6.8",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.celestial_object.magnitude",
                        "friendly_name": "Apparent Magnitude"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.nebula . \nFILTER (?x1 <= \"6.8\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :astronomy.celestial_object.magnitude ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.nebula (le astronomy.celestial_object.magnitude 6.8^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "788": {
        "generations": "which album is associated with the demi world tour??",
        "ori_data_item": {
            "qid": 2100363011000,
            "question": "what is the musical album that has supporting tours including demi world tour?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sghhtb",
                    "entity_name": "Demi"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.album",
                        "class": "music.album",
                        "friendly_name": "Musical Album",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.010pzj9k",
                        "class": "music.concert_tour",
                        "friendly_name": "Demi World Tour",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album.supporting_tours",
                        "friendly_name": "Supporting tours"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.album . \nVALUES ?x1 { :m.010pzj9k } \n?x0 :music.album.supporting_tours ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.album (JOIN music.album.supporting_tours m.010pzj9k))"
        }
    },
    "789": {
        "generations": "who is the theatrical composer with the lowest weight in kilograms??",
        "ori_data_item": {
            "qid": 2103543003000,
            "question": "which theatrical composer is the lightest one?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02f1c",
                    "entity_name": "Dolly Parton"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theatrical_composer",
                        "class": "theater.theatrical_composer",
                        "friendly_name": "Theatrical Composer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.theatrical_composer . \n?y0 :people.person.weight_kg ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(ARGMIN theater.theatrical_composer people.person.weight_kg)"
        }
    },
    "790": {
        "generations": "what routed drug is administered through irrigation??",
        "ori_data_item": {
            "qid": 2101191014000,
            "question": "what's the name of the routed drug that is delivered by the path irrigation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3w04d",
                    "entity_name": "Sodium Chloride/Sodium Acetate Anhydrous/Sodium Gluconate/Potassium Chloride/Magnesium Chloride Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3yjk2",
                    "entity_name": "Sodium Chloride/Sodium Lactate/Potassium Chloride/Calcium Chloride Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3vy_2",
                    "entity_name": "Sodium Cation/Potassium Cation/Calcium Cation Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3x25b",
                    "entity_name": "Calcium Chloride/Magnesium Chloride/Potassium Chloride/Sodium Acetate/Sodium Chloride/Sodium Citrate Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3x66t",
                    "entity_name": "Sodium Cation/Potassium Cation/Magnesium Cation Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3x6d5",
                    "entity_name": "Chlorhexidine Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xcb_",
                    "entity_name": "Sorbitol Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xlw4",
                    "entity_name": "Sodium Cation/Potassium Cation/Calcium Cation/Magnesium Cation Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xqp4",
                    "entity_name": "Glycine Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xwxb",
                    "entity_name": "Mannitol Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3xztp",
                    "entity_name": "Sodium Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3y3xp",
                    "entity_name": "Water Drug Preparation Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3yhy7",
                    "entity_name": "Sodium Chloride Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3ymvv",
                    "entity_name": "Sodium Chloride/Potassium Chloride/Magnesium Chloride/Sodium Phosphate/Potassium Phosphate Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3ywlh",
                    "entity_name": "Neomycin/Polymyxin B Irrigation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3yxnp",
                    "entity_name": "Acetic Acid Irrigation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.routed_drug",
                        "class": "medicine.routed_drug",
                        "friendly_name": "Routed drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqx81z",
                        "class": "medicine.drug_administration_route",
                        "friendly_name": "Irrigation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.routed_drug.route_of_administration",
                        "friendly_name": "Route of administration"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.routed_drug . \nVALUES ?x1 { :m.0hqx81z } \n?x0 :medicine.routed_drug.route_of_administration ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.routed_drug (JOIN medicine.routed_drug.route_of_administration m.0hqx81z))"
        }
    },
    "791": {
        "generations": "which radio station was founded on june 30th, 2006??",
        "ori_data_item": {
            "qid": 2100125010000,
            "question": "name the radio station founded on 06/30/2006",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dp19z",
                    "entity_name": "WGPB"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.radio_station",
                        "class": "broadcast.radio_station",
                        "friendly_name": "Radio Station",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2006-06-30^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "06/30/2006",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.radio_station.founded",
                        "friendly_name": "Founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.radio_station . \nVALUES ?x1 { \"2006-06-30-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :broadcast.radio_station.founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.radio_station (JOIN broadcast.radio_station.founded 2006-06-30^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "792": {
        "generations": "which star has a temperature of 25000.0 Kelvin??",
        "ori_data_item": {
            "qid": 2101001004000,
            "question": "can you name a star were the temperature is 25000.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x0fmkl",
                    "entity_name": "Beta Centauri A"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x0fmlg",
                    "entity_name": "Beta Centauri B"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x0g91n",
                    "entity_name": "VV Cephei B"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star",
                        "class": "astronomy.star",
                        "friendly_name": "Star",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "25000.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "25000.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star.temperature_k",
                        "friendly_name": "Temperature"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nVALUES ?x1 { \"25000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :astronomy.star.temperature_k ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star (JOIN astronomy.star.temperature_k 25000.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "793": {
        "generations": "which music release is part of the album 2013-3012??",
        "ori_data_item": {
            "qid": 2100695003000,
            "question": "which musical release did 2013-3012 make?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nth_4y",
                    "entity_name": "2013-3012"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release",
                        "class": "music.release",
                        "friendly_name": "Musical Release",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0np5dvl",
                        "class": "music.album",
                        "friendly_name": "2013-3012",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release.album",
                        "friendly_name": "Release of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.0np5dvl } \n?x0 :music.release.album ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.release (JOIN music.release.album m.0np5dvl))"
        }
    },
    "794": {
        "generations": "which mountain is part of the saltoro mountains??",
        "ori_data_item": {
            "qid": 2100740008000,
            "question": "which mountain is contained in the range saltoro mountains?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05nm4_",
                    "entity_name": "K12"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c4fbc",
                    "entity_name": "Saltoro Kangri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d6r52",
                    "entity_name": "Ghent Kangri"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c_4b5",
                        "class": "geography.mountain_range",
                        "friendly_name": "Saltoro Mountains",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.mountain_range",
                        "friendly_name": "Mountain range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { :m.0c_4b5 } \n?x0 :geography.mountain.mountain_range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.mountain_range m.0c_4b5))"
        }
    },
    "795": {
        "generations": "what consumer product is associated with the brand Acneen??",
        "ori_data_item": {
            "qid": 2100188014000,
            "question": "the brand acneen includes which consumer products?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqhjp7",
                    "entity_name": "Acneen 0.02 lotion"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.consumer_product",
                        "class": "business.consumer_product",
                        "friendly_name": "Consumer product",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j4tfty",
                        "class": "business.brand",
                        "friendly_name": "Acneen",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.consumer_product.brand",
                        "friendly_name": "Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.consumer_product . \nVALUES ?x1 { :m.0j4tfty } \n?x0 :business.consumer_product.brand ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.consumer_product (JOIN business.consumer_product.brand m.0j4tfty))"
        }
    },
    "796": {
        "generations": "what is the largest size of the manufactured drug form of requip??",
        "ori_data_item": {
            "qid": 3205940014000,
            "question": "name the largest manufactured drug with the brand ofrequip?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqph5x",
                    "entity_name": "Requip 0.25 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqbrd",
                    "entity_name": "Requip 1 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqpqvy",
                    "entity_name": "Requip 3 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqqs6k",
                    "entity_name": "Requip 2 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqlrt4",
                    "entity_name": "Requip 4 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqgp0w",
                    "entity_name": "Requip 5 film coated tablet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqh14v",
                    "entity_name": "Requip 0.5 film coated tablet"
                }
            ],
            "function": "argmax",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0j4t7xw",
                        "class": "business.brand",
                        "friendly_name": "Requip",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.size",
                        "friendly_name": "Size"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "business.consumer_product.brand",
                        "friendly_name": "Brand"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?y2 { :m.0j4t7xw } \n?y0 :medicine.manufactured_drug_form.size ?y1 . \n?y0 :business.consumer_product.brand ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0j4t7xw } \n?x0 :medicine.manufactured_drug_form.size ?x1 . \n?x0 :business.consumer_product.brand ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "business",
                "medicine"
            ],
            "s_expression": "(ARGMAX (AND medicine.manufactured_drug_form (JOIN business.consumer_product.brand m.0j4t7xw)) medicine.manufactured_drug_form.size)"
        }
    },
    "797": {
        "generations": "how many amusement park rides have the theme of griffon??",
        "ori_data_item": {
            "qid": 2104776002000,
            "question": "what is the number of amusement ride themes of griffon?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_theme",
                        "class": "amusement_parks.ride_theme",
                        "friendly_name": "Amusement Ride Theme",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0g9n2r",
                        "class": "amusement_parks.roller_coaster",
                        "friendly_name": "Griffon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "amusement_parks.ride.theme",
                        "friendly_name": "Theme"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_theme . \nVALUES ?x1 { :m.0g9n2r } \n?x1 :amusement_parks.ride.theme ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(COUNT (AND amusement_parks.ride_theme (JOIN (R amusement_parks.ride.theme) m.0g9n2r)))"
        }
    },
    "798": {
        "generations": "which drug manufacturer produces risperidone 3 film coated tablet??",
        "ori_data_item": {
            "qid": 2101954010000,
            "question": "risperidone 3 film coated tablet was made by which drug manufacturer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058dll",
                    "entity_name": "Barr Pharmaceuticals"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_manufacturer",
                        "class": "medicine.drug_manufacturer",
                        "friendly_name": "Drug manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqmtdb",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Risperidone 3 film coated tablet",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_manufacturer.drugs_manufactured",
                        "friendly_name": "Drugs manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_manufacturer . \nVALUES ?x1 { :m.0hqmtdb } \n?x0 :medicine.drug_manufacturer.drugs_manufactured ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_manufacturer (JOIN medicine.drug_manufacturer.drugs_manufactured m.0hqmtdb))"
        }
    },
    "799": {
        "generations": "which industry has a child industry that is part of the south wales miners' federation trade union??",
        "ori_data_item": {
            "qid": 4304063001000,
            "question": "what is the name of the industry that has the child of child industry connected to south wales miners' federation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q9vxc",
                    "entity_name": "Coal Mining"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03q9w2r",
                    "entity_name": "Support Activities for Mining"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "business.industry",
                        "class": "business.industry",
                        "friendly_name": "Industry",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.027pbrg",
                        "class": "business.trade_union",
                        "friendly_name": "South Wales Miners' Federation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.industry.child_industry",
                        "friendly_name": "Child Industry"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "business.industry.child_industry",
                        "friendly_name": "Child Industry"
                    },
                    {
                        "start": 3,
                        "end": 2,
                        "relation": "business.trade_union.industry",
                        "friendly_name": "Industry"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.industry . \n?x1 :type.object.type :business.industry . \n?x2 :type.object.type :business.industry . \nVALUES ?x3 { :m.027pbrg } \n?x0 :business.industry.child_industry ?x1 . \n?x2 :business.industry.child_industry ?x1 . \n?x3 :business.trade_union.industry ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.industry (JOIN business.industry.child_industry (JOIN (R business.industry.child_industry) (JOIN (R business.trade_union.industry) m.027pbrg))))"
        }
    },
    "800": {
        "generations": "what coat of arms has the heraldic variation of the field with the tincture of Or??",
        "ori_data_item": {
            "qid": 3201898003000,
            "question": "what heraldic variation of the filed has the coat of arms which has the tincture of or?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05d1hzx",
                    "entity_name": "Party per fess"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "symbols.heraldic_variation_of_the_field",
                        "class": "symbols.heraldic_variation_of_the_field",
                        "friendly_name": "Heraldic Variation of the Field",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "symbols.heraldic_variation_of_the_field_color",
                        "class": "symbols.heraldic_variation_of_the_field_color",
                        "friendly_name": "Heraldic Variation of the Field Tincture",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.045l59",
                        "class": "symbols.heraldic_tincture",
                        "friendly_name": "Or",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "symbols.heraldic_variation_of_the_field.coat_of_arms",
                        "friendly_name": "Coat of Arms"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "symbols.heraldic_variation_of_the_field_color.tincture",
                        "friendly_name": "Tincture"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :symbols.heraldic_variation_of_the_field . \n?x1 :type.object.type :symbols.heraldic_variation_of_the_field_color . \nVALUES ?x2 { :m.045l59 } \n?x0 :symbols.heraldic_variation_of_the_field.coat_of_arms ?x1 . \n?x1 :symbols.heraldic_variation_of_the_field_color.tincture ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "symbols"
            ],
            "s_expression": "(AND symbols.heraldic_variation_of_the_field (JOIN symbols.heraldic_variation_of_the_field.coat_of_arms (JOIN symbols.heraldic_variation_of_the_field_color.tincture m.045l59)))"
        }
    },
    "801": {
        "generations": "what is the tropical cyclone category of tropical storm grace??",
        "ori_data_item": {
            "qid": 2101744015000,
            "question": "tropical storm grace is a tropical cyclone under what category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07r2x",
                    "entity_name": "Tropical cyclone"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.080nh43",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Tropical Storm Grace",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_category.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x1 { :m.080nh43 } \n?x0 :meteorology.tropical_cyclone_category.tropical_cyclones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_category (JOIN meteorology.tropical_cyclone_category.tropical_cyclones m.080nh43))"
        }
    },
    "802": {
        "generations": "what is the circulation area of the newspaper wexford people??",
        "ori_data_item": {
            "qid": 2102160008000,
            "question": "wexford people is distributed by which newspaper circulation area?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01fj9_",
                    "entity_name": "County Wexford"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "periodicals.newspaper_circulation_area",
                        "class": "periodicals.newspaper_circulation_area",
                        "friendly_name": "Newspaper circulation area",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0462zgv",
                        "class": "book.newspaper",
                        "friendly_name": "Wexford People",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "periodicals.newspaper_circulation_area.newspapers",
                        "friendly_name": "Newspapers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :periodicals.newspaper_circulation_area . \nVALUES ?x1 { :m.0462zgv } \n?x0 :periodicals.newspaper_circulation_area.newspapers ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "periodicals"
            ],
            "s_expression": "(AND periodicals.newspaper_circulation_area (JOIN periodicals.newspaper_circulation_area.newspapers m.0462zgv))"
        }
    },
    "803": {
        "generations": "which roller coasters designed by werner stengel are made of what material??",
        "ori_data_item": {
            "qid": 3205312017000,
            "question": "what roller coaster material does werner stengel use to design their roller coasters?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yjlh",
                    "entity_name": "Steel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02v_7z",
                    "entity_name": "Wooden"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster_material",
                        "class": "amusement_parks.roller_coaster_material",
                        "friendly_name": "Roller Coaster Material",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster",
                        "class": "amusement_parks.roller_coaster",
                        "friendly_name": "Roller Coaster",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06vnh2",
                        "class": "amusement_parks.ride_designer",
                        "friendly_name": "Werner Stengel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.roller_coaster_material.roller_coasters",
                        "friendly_name": "Roller Coasters"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "amusement_parks.ride.designer",
                        "friendly_name": "Designer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.roller_coaster_material . \n?x1 :type.object.type :amusement_parks.roller_coaster . \nVALUES ?x2 { :m.06vnh2 } \n?x0 :amusement_parks.roller_coaster_material.roller_coasters ?x1 . \n?x1 :amusement_parks.ride.designer ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.roller_coaster_material (JOIN amusement_parks.roller_coaster_material.roller_coasters (JOIN amusement_parks.ride.designer m.06vnh2)))"
        }
    },
    "804": {
        "generations": "is Moyobamba within the city limits of user jonathanwlowe's location??",
        "ori_data_item": {
            "qid": 2101593001000,
            "question": "what is the city limit for moyobamba",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.016wzw",
                    "entity_name": "Peru"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "user.jonathanwlowe.location.city_limits",
                        "class": "user.jonathanwlowe.location.city_limits",
                        "friendly_name": "City Limits",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02d6vw",
                        "class": "location.citytown",
                        "friendly_name": "Moyobamba",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "user.jonathanwlowe.location.city_limits.bounds_city",
                        "friendly_name": "Bounds City"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.jonathanwlowe.location.city_limits . \nVALUES ?x1 { :m.02d6vw } \n?x0 :user.jonathanwlowe.location.city_limits.bounds_city ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "user.jonathanwlowe.location"
            ],
            "s_expression": "(AND user.jonathanwlowe.location.city_limits (JOIN user.jonathanwlowe.location.city_limits.bounds_city m.02d6vw))"
        }
    },
    "805": {
        "generations": "which TV network had channels that started broadcasting before December 12, 2003??",
        "ori_data_item": {
            "qid": 3203028001000,
            "question": "what network is the channel which started before dec. the 12nd, 2003 on?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cfvm",
                    "entity_name": "NRK"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gl9g",
                    "entity_name": "CNBC"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01h_yt",
                    "entity_name": "City"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026rvy7",
                    "entity_name": "TV Today Network"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0297d2",
                    "entity_name": "Televisi\u00f3n Espa\u00f1ola"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p10m",
                    "entity_name": "Univision"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0567xw",
                    "entity_name": "DR"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07tmtd",
                    "entity_name": "Sociedade Independente de Comunica\u00e7\u00e3o"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kc9f",
                    "entity_name": "Disney Channel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kcbd",
                    "entity_name": "Fox Sports Networks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ljc_",
                    "entity_name": "Cartoon Network"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pmw1",
                    "entity_name": "TVN"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02khm_",
                    "entity_name": "Viacom Media Networks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wlv6g",
                    "entity_name": "YLE"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kc8y",
                    "entity_name": "Discovery Channel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ncl8zk",
                    "entity_name": "British Broadcasting Corporation"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d090l",
                    "entity_name": "TV4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.052307",
                    "entity_name": "Comcast SportsNet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rfhc95",
                    "entity_name": "Fusion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03qc7_x",
                    "entity_name": "Rediffusion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02bv5k",
                    "entity_name": "CTV Two"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r7ts",
                    "entity_name": "Omni Television"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hmxn",
                    "entity_name": "Global Television Network"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bgd7",
                    "entity_name": "Sky Italia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_1lzv",
                    "entity_name": "Telecom Italia Media"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11bc1fk40_",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02p7v2n",
                    "entity_name": "SBS Television"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gwq9",
                    "entity_name": "TVBS"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cf611",
                    "entity_name": "Pay TV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0rphrng",
                    "entity_name": "StarLightMedia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11bv64hw37",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z2v5z",
                    "entity_name": "Universal Networks International"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlh58",
                    "entity_name": "MTV Italy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08zwk2",
                    "entity_name": "Vietnam Television"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2q59",
                    "entity_name": "Nickelodeon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q8kf9",
                    "entity_name": "National Television Company of Ukraine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gff8nr",
                    "entity_name": "Root Sports"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dns2r",
                    "entity_name": "Corporaci\u00f3 Catalana de Mitjans Audiovisuals"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rtpjp",
                    "entity_name": "Disney Channel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w38pjd",
                    "entity_name": "Space Shower Networks Inc."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047llqf",
                    "entity_name": "AB Groupe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0286q5s",
                    "entity_name": "All-Russia State Television and Radio Broadcasting Company"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03pngf",
                    "entity_name": "Hot Bird"
                }
            ],
            "function": "<",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_network",
                        "class": "tv.tv_network",
                        "friendly_name": "TV Network",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "broadcast.tv_channel",
                        "class": "broadcast.tv_channel",
                        "friendly_name": "TV Channel",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "2003-12-12^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "Dec. the 12nd, 2003",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_network.channels",
                        "friendly_name": "Channels"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "broadcast.tv_channel.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_network . \n?x1 :type.object.type :broadcast.tv_channel . \nFILTER (?x2 < \"2003-12-12-08:00\"^^<http://www.w3.org/2001/XMLSchema#date>)\n?x0 :tv.tv_network.channels ?x1 . \n?x1 :broadcast.tv_channel.from ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "broadcast",
                "tv"
            ],
            "s_expression": "(AND tv.tv_network (JOIN tv.tv_network.channels (lt broadcast.tv_channel.from 2003-12-12^^http://www.w3.org/2001/XMLSchema#date)))"
        }
    },
    "806": {
        "generations": "which zoo exhibit features passenger pigeons??",
        "ori_data_item": {
            "qid": 2100840002000,
            "question": "which exhibit in the zoo has passenger pigeons?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h_ffkt",
                    "entity_name": "Passenger Pigeon Memorial"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "zoos.zoo_exhibit",
                        "class": "zoos.zoo_exhibit",
                        "friendly_name": "Zoo Exhibit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05zlw",
                        "class": "biology.organism_classification",
                        "friendly_name": "passenger pigeons",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "zoos.zoo_exhibit.species",
                        "friendly_name": "Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :zoos.zoo_exhibit . \nVALUES ?x1 { :m.05zlw } \n?x0 :zoos.zoo_exhibit.species ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "zoos"
            ],
            "s_expression": "(AND zoos.zoo_exhibit (JOIN zoos.zoo_exhibit.species m.05zlw))"
        }
    },
    "807": {
        "generations": "which soccer/football league is part of the scottish junior football association, north region??",
        "ori_data_item": {
            "qid": 3202417011000,
            "question": "what football leagues are in the same football league system with scottish junior football association, north region?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026hn0",
                    "entity_name": "North Caledonian Football League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01h0cn",
                    "entity_name": "Scottish Premier League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026vxr",
                    "entity_name": "East of Scotland Football League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027wn6",
                    "entity_name": "Scottish Junior Football Association, East Region"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028mnb",
                    "entity_name": "Scottish Junior Football Association, West Region"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01kzgz",
                    "entity_name": "Highland Football League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q338",
                    "entity_name": "Scottish Football League First Division"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q340",
                    "entity_name": "Scottish Football League Third Division"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08hwtn",
                    "entity_name": "South of Scotland Football League"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q218",
                    "entity_name": "Scottish Football League Second Division"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_league",
                        "class": "soccer.football_league",
                        "friendly_name": "Football League",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "soccer.football_league_system",
                        "class": "soccer.football_league_system",
                        "friendly_name": "Football League System",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0b8tmd",
                        "class": "soccer.football_league",
                        "friendly_name": "Scottish Junior Football Association, North Region",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "soccer.football_league_system.leagues",
                        "friendly_name": "Leagues"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "soccer.football_league_system.leagues",
                        "friendly_name": "Leagues"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_league . \n?x1 :type.object.type :soccer.football_league_system . \nVALUES ?x2 { :m.0b8tmd } \n?x1 :soccer.football_league_system.leagues ?x0 . \n?x1 :soccer.football_league_system.leagues ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_league (JOIN (R soccer.football_league_system.leagues) (JOIN soccer.football_league_system.leagues m.0b8tmd)))"
        }
    },
    "808": {
        "generations": "what literary genre does fever in the blood belong to??",
        "ori_data_item": {
            "qid": 2100535011000,
            "question": "to what literary genre does fever in the blood belong to?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.014dfn",
                    "entity_name": "Speculative fiction"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.literary_genre",
                        "class": "media_common.literary_genre",
                        "friendly_name": "Literary Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05qff1h",
                        "class": "book.book",
                        "friendly_name": "Fever in the Blood",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.literary_genre.books_in_this_genre",
                        "friendly_name": "Books In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.literary_genre . \nVALUES ?x1 { :m.05qff1h } \n?x0 :media_common.literary_genre.books_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.literary_genre (JOIN media_common.literary_genre.books_in_this_genre m.05qff1h))"
        }
    },
    "809": {
        "generations": "what defunct company ceased operations due to financial distress??",
        "ori_data_item": {
            "qid": 2101796010000,
            "question": "what would cause a cease of a financial distress?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06w4t5z",
                    "entity_name": "Charlotte Hall Military Academy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.defunct_company",
                        "class": "business.defunct_company",
                        "friendly_name": "Defunct Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07jfpv",
                        "class": "business.company_termination_type",
                        "friendly_name": "Financial distress",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.defunct_company.reason_for_ceasing_operations",
                        "friendly_name": "Reason for ceasing operations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.defunct_company . \nVALUES ?x1 { :m.07jfpv } \n?x0 :business.defunct_company.reason_for_ceasing_operations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.defunct_company (JOIN business.defunct_company.reason_for_ceasing_operations m.07jfpv))"
        }
    },
    "810": {
        "generations": "who is the comic book editor that edited the issues leading up to The X-Men #2??",
        "ori_data_item": {
            "qid": 3200059001000,
            "question": "who was the editor of the issue preceding the x-men #2?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079vf",
                    "entity_name": "Stan Lee"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_editor",
                        "class": "comic_books.comic_book_editor",
                        "friendly_name": "Comic Book Editor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "comic_books.comic_book_issue",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Comic Book Issue",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gvdmyg",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "The X-Men #2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_editor.issues_edited",
                        "friendly_name": "Issues Edited"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "comic_books.comic_book_issue.next_issue",
                        "friendly_name": "Next issue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_editor . \n?x1 :type.object.type :comic_books.comic_book_issue . \nVALUES ?x2 { :m.0gvdmyg } \n?x0 :comic_books.comic_book_editor.issues_edited ?x1 . \n?x1 :comic_books.comic_book_issue.next_issue ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_editor (JOIN comic_books.comic_book_editor.issues_edited (JOIN comic_books.comic_book_issue.next_issue m.0gvdmyg)))"
        }
    },
    "811": {
        "generations": "what is the price range of the viceroy riviera maya accommodation??",
        "ori_data_item": {
            "qid": 2102787009000,
            "question": "viceroy riviera maya is an accommodation that falls into which price range?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c4qq",
                    "entity_name": "High end"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.accommodation_price_range",
                        "class": "travel.accommodation_price_range",
                        "friendly_name": "Accommodation price range",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.011vghlw",
                        "class": "travel.accommodation",
                        "friendly_name": "Viceroy Riviera Maya",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "travel.accommodation_price_range.accommodation_in_this_range",
                        "friendly_name": "Accommodation in this range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.accommodation_price_range . \nVALUES ?x1 { :m.011vghlw } \n?x0 :travel.accommodation_price_range.accommodation_in_this_range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(AND travel.accommodation_price_range (JOIN travel.accommodation_price_range.accommodation_in_this_range m.011vghlw))"
        }
    },
    "812": {
        "generations": "which basketball team is part of the southwest division??",
        "ori_data_item": {
            "qid": 2102640007000,
            "question": "what basketball teams are members of the southwest division?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jmfb",
                    "entity_name": "Houston Rockets"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jmh7",
                    "entity_name": "San Antonio Spurs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jmcv",
                    "entity_name": "Dallas Mavericks"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jm6n",
                    "entity_name": "New Orleans Pelicans"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jmfv",
                    "entity_name": "Memphis Grizzlies"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_team",
                        "class": "basketball.basketball_team",
                        "friendly_name": "Basketball Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c8cl7",
                        "class": "basketball.basketball_division",
                        "friendly_name": "Southwest Division",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_team.division",
                        "friendly_name": "Division"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_team . \nVALUES ?x1 { :m.0c8cl7 } \n?x0 :basketball.basketball_team.division ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_team (JOIN basketball.basketball_team.division m.0c8cl7))"
        }
    },
    "813": {
        "generations": "which educational institution offers education in adobe illustrator??",
        "ori_data_item": {
            "qid": 2100954010000,
            "question": "adobe illustrator is the type of which institutions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012v_zpb",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012zbn8p",
                    "entity_name": "Accademia Anja"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.educational_institution",
                        "class": "education.educational_institution",
                        "friendly_name": "Educational Institution",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0142qs",
                        "class": "education.school_category",
                        "friendly_name": "Adobe Illustrator",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.educational_institution.school_type",
                        "friendly_name": "School type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.educational_institution . \nVALUES ?x1 { :m.0142qs } \n?x0 :education.educational_institution.school_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.educational_institution (JOIN education.educational_institution.school_type m.0142qs))"
        }
    },
    "814": {
        "generations": "which company manufactures rockets named falcon v in spaceflight??",
        "ori_data_item": {
            "qid": 2101204003000,
            "question": "the falcon v was made by which rocket manufacturer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03fkyw",
                    "entity_name": "SpaceX"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_manufacturer",
                        "class": "spaceflight.rocket_manufacturer",
                        "friendly_name": "Rocket Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03fvlk",
                        "class": "spaceflight.rocket",
                        "friendly_name": "falcon v",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_manufacturer.rockets_manufactured",
                        "friendly_name": "Rockets Manufactured"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_manufacturer . \nVALUES ?x1 { :m.03fvlk } \n?x0 :spaceflight.rocket_manufacturer.rockets_manufactured ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_manufacturer (JOIN spaceflight.rocket_manufacturer.rockets_manufactured m.03fvlk))"
        }
    },
    "815": {
        "generations": "who is the ride designer credited with the highest maximum speed for a ride themed after batman/bruce wayne??",
        "ori_data_item": {
            "qid": 4304016007000,
            "question": "who is the designer responsible for designing the fastest amusement park ride as well as the batman/bruce wayne ride?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04nb8q",
                    "entity_name": "Intamin"
                }
            ],
            "function": "argmax",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride_designer",
                        "class": "amusement_parks.ride_designer",
                        "friendly_name": "Amusement Ride Designer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01d5g",
                        "class": "amusement_parks.ride_theme",
                        "friendly_name": "batman/bruce wayne",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "amusement_parks.ride.designer",
                        "friendly_name": "Designer"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "amusement_parks.ride_theme.rides",
                        "friendly_name": "Rides"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "amusement_parks.ride.max_speed",
                        "friendly_name": "Max Speed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride_designer . \n?x1 :type.object.type :amusement_parks.ride . \nVALUES ?x2 { :m.01d5g } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :amusement_parks.ride_designer . \n?y1 :type.object.type :amusement_parks.ride . \nVALUES ?y2 { :m.01d5g } \n?y1 :amusement_parks.ride.designer ?y0 . \n?y2 :amusement_parks.ride_theme.rides ?y1 . \n?y1 :amusement_parks.ride.max_speed ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :amusement_parks.ride.designer ?x0 . \n?x2 :amusement_parks.ride_theme.rides ?x1 . \n?x1 :amusement_parks.ride.max_speed ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(ARGMAX (AND amusement_parks.ride_designer (JOIN (R amusement_parks.ride.designer) (JOIN (R amusement_parks.ride_theme.rides) m.01d5g))) (JOIN (R amusement_parks.ride.designer) amusement_parks.ride.max_speed))"
        }
    },
    "816": {
        "generations": "which wines are from the M\u00e9doc wine sub-region??",
        "ori_data_item": {
            "qid": 2100790002000,
            "question": "m\u00e9doc is the county with which wine?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02wsg9z",
                    "entity_name": "1966 Chateau Latour Grand Vin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.wine",
                        "class": "wine.wine",
                        "friendly_name": "Wine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03ndd5",
                        "class": "wine.wine_sub_region",
                        "friendly_name": "M\u00e9doc",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.wine.wine_sub_region",
                        "friendly_name": "Wine Sub-region"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.03ndd5 } \n?x0 :wine.wine.wine_sub_region ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "wine"
            ],
            "s_expression": "(AND wine.wine (JOIN wine.wine.wine_sub_region m.03ndd5))"
        }
    },
    "817": {
        "generations": "what international patent category does the patent for microorganisms having multiple compatible degradative energy-generating plasmids and preparation thereof belong to??",
        "ori_data_item": {
            "qid": 2101426006000,
            "question": "microorganisms having multiple compatible degradative energy-generating plasmids and preparation thereof go into what category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k7zt0",
                    "entity_name": "C12N 1500"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.international_patent_category",
                        "class": "law.international_patent_category",
                        "friendly_name": "International Patent Category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.022qzwl",
                        "class": "law.us_patent",
                        "friendly_name": "Microorganisms having multiple compatible degradative energy-generating plasmids and preparation thereof",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.international_patent_category.patents",
                        "friendly_name": "Patents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.international_patent_category . \nVALUES ?x1 { :m.022qzwl } \n?x0 :law.international_patent_category.patents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.international_patent_category (JOIN law.international_patent_category.patents m.022qzwl))"
        }
    },
    "818": {
        "generations": "which visual art medium has artworks created by patrick brown??",
        "ori_data_item": {
            "qid": 3200139010000,
            "question": "what visual art medium is used by patrick brown artists to produce artwork?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.068jd",
                    "entity_name": "Photograph"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.visual_art_medium",
                        "class": "visual_art.visual_art_medium",
                        "friendly_name": "Visual Art Medium",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0_qrk0w",
                        "class": "visual_art.visual_artist",
                        "friendly_name": "Patrick Brown",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.visual_art_medium.artworks",
                        "friendly_name": "Artworks"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "visual_art.artwork.artist",
                        "friendly_name": "Artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.visual_art_medium . \n?x1 :type.object.type :visual_art.artwork . \nVALUES ?x2 { :m.0_qrk0w } \n?x0 :visual_art.visual_art_medium.artworks ?x1 . \n?x1 :visual_art.artwork.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.visual_art_medium (JOIN visual_art.visual_art_medium.artworks (JOIN visual_art.artwork.artist m.0_qrk0w)))"
        }
    },
    "819": {
        "generations": "what region is known for the cuisine of chef cheong wah soon??",
        "ori_data_item": {
            "qid": 3202104004000,
            "question": "cheong wah soon is a chef of a cuisine from which region of origin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06f32",
                    "entity_name": "Taiwan"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "location.region",
                        "class": "location.region",
                        "friendly_name": "Region",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "dining.cuisine",
                        "class": "dining.cuisine",
                        "friendly_name": "Cuisine",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04p7073",
                        "class": "dining.chef",
                        "friendly_name": "Cheong Wah Soon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "dining.cuisine.region_of_origin",
                        "friendly_name": "Region of origin"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "dining.cuisine.chefs",
                        "friendly_name": "Chefs"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :location.region . \n?x1 :type.object.type :dining.cuisine . \nVALUES ?x2 { :m.04p7073 } \n?x1 :dining.cuisine.region_of_origin ?x0 . \n?x1 :dining.cuisine.chefs ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "dining"
            ],
            "s_expression": "(AND location.region (JOIN (R dining.cuisine.region_of_origin) (JOIN dining.cuisine.chefs m.04p7073)))"
        }
    },
    "820": {
        "generations": "which theater production was performed at the municipal auditorium music hall??",
        "ori_data_item": {
            "qid": 2101949011000,
            "question": "municipal auditorium music hall has what theater productions being performed here?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zbfphz",
                    "entity_name": "Monty Python's Spamalot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zb2r_n",
                    "entity_name": "Spring Awakening"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zb4kyh",
                    "entity_name": "Avenue Q, The Broadway Musical"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_production",
                        "class": "theater.theater_production",
                        "friendly_name": "Theater Production",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0_l_1fc",
                        "class": "theater.theater",
                        "friendly_name": "Municipal Auditorium Music Hall",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "theater.theater_production.performed_at",
                        "friendly_name": "Performed At"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_production . \nVALUES ?x1 { :m.0_l_1fc } \n?x0 :theater.theater_production.performed_at ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "theater"
            ],
            "s_expression": "(AND theater.theater_production (JOIN theater.theater_production.performed_at m.0_l_1fc))"
        }
    },
    "821": {
        "generations": "who is the landscape architect for the embassy of the united kingdom in washington, d.c.??",
        "ori_data_item": {
            "qid": 2101249014000,
            "question": "embassy of the united kingdom, washington, d.c. was a landscape project undertaken by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0102frhy",
                    "entity_name": "Elizabeth Sherman Lindsay"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.landscape_architect",
                        "class": "architecture.landscape_architect",
                        "friendly_name": "Landscape architect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05phmr",
                        "class": "architecture.landscape_project",
                        "friendly_name": "Embassy of the United Kingdom, Washington, D.C.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.landscape_architect.landscape_project",
                        "friendly_name": "Landscape Projects"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.landscape_architect . \nVALUES ?x1 { :m.05phmr } \n?x0 :architecture.landscape_architect.landscape_project ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.landscape_architect (JOIN architecture.landscape_architect.landscape_project m.05phmr))"
        }
    },
    "822": {
        "generations": "which concerts were held at madison square gardens??",
        "ori_data_item": {
            "qid": 2100816016000,
            "question": "which concert was held at madison square gardens?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n_5rg6",
                    "entity_name": "12.12.12: The Concert for Sandy Relief"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h4xpm_",
                    "entity_name": "Cordell Francis Tour 2011"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.concert",
                        "class": "music.concert",
                        "friendly_name": "Concert",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j_66",
                        "class": "music.performance_venue",
                        "friendly_name": "madison square gardens",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.concert.venue",
                        "friendly_name": "Venue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.concert . \nVALUES ?x1 { :m.0j_66 } \n?x0 :music.concert.venue ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.concert (JOIN music.concert.venue m.0j_66))"
        }
    },
    "823": {
        "generations": "which TV program has regular cast members from Portlandia - Season 2??",
        "ori_data_item": {
            "qid": 3205583011000,
            "question": "which tv program shares a common cast with portlandia - season 2?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dd8vm_",
                    "entity_name": "Portlandia"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.regular_tv_appearance",
                        "class": "tv.regular_tv_appearance",
                        "friendly_name": "TV Regular Performance",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0kf517w",
                        "class": "tv.tv_series_season",
                        "friendly_name": "Portlandia - Season 2",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.regular_cast",
                        "friendly_name": "Regular acting performances"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "tv.tv_series_season.regular_cast",
                        "friendly_name": "Regular cast"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \n?x1 :type.object.type :tv.regular_tv_appearance . \nVALUES ?x2 { :m.0kf517w } \n?x0 :tv.tv_program.regular_cast ?x1 . \n?x2 :tv.tv_series_season.regular_cast ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.regular_cast (JOIN (R tv.tv_series_season.regular_cast) m.0kf517w)))"
        }
    },
    "824": {
        "generations": "what legal case is related to employment division v. smith as its subject??",
        "ori_data_item": {
            "qid": 3200297006000,
            "question": "what other cases address the same subject as employment division v. smith?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlwpv",
                    "entity_name": "Sherbert v. Verner"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.legal_case",
                        "class": "law.legal_case",
                        "friendly_name": "Legal case",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "law.legal_subject",
                        "class": "law.legal_subject",
                        "friendly_name": "Legal subject",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06fwzr",
                        "class": "law.legal_case",
                        "friendly_name": "Employment Division v. Smith",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "law.legal_subject.legal_cases",
                        "friendly_name": "Legal cases"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "law.legal_case.subject",
                        "friendly_name": "Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.legal_case . \n?x1 :type.object.type :law.legal_subject . \nVALUES ?x2 { :m.06fwzr } \n?x1 :law.legal_subject.legal_cases ?x0 . \n?x2 :law.legal_case.subject ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.legal_case (JOIN (R law.legal_subject.legal_cases) (JOIN (R law.legal_case.subject) m.06fwzr)))"
        }
    },
    "825": {
        "generations": "what comic book series ended with madman #3??",
        "ori_data_item": {
            "qid": 2102833012000,
            "question": "what series of comic books' final issue was madman #3?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051sw5q",
                    "entity_name": "Madman"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_series",
                        "class": "comic_books.comic_book_series",
                        "friendly_name": "Comic Book Series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.059ccrd",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Madman #3",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_series.final_issue",
                        "friendly_name": "Final Issue"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_series . \nVALUES ?x1 { :m.059ccrd } \n?x0 :comic_books.comic_book_series.final_issue ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_series (JOIN comic_books.comic_book_series.final_issue m.059ccrd))"
        }
    },
    "826": {
        "generations": "what artwork features Dublin Pond as its subject??",
        "ori_data_item": {
            "qid": 2100786008000,
            "question": "dublin pond is the subject of which artwork?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05l_dq8",
                    "entity_name": "Dublin Pond, New Hampshire"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.artwork",
                        "class": "visual_art.artwork",
                        "friendly_name": "Artwork",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0277_wq",
                        "class": "visual_art.art_subject",
                        "friendly_name": "Dublin Pond",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "visual_art.artwork.art_subject",
                        "friendly_name": "Art Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.artwork . \nVALUES ?x1 { :m.0277_wq } \n?x0 :visual_art.artwork.art_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "visual_art"
            ],
            "s_expression": "(AND visual_art.artwork (JOIN visual_art.artwork.art_subject m.0277_wq))"
        }
    },
    "827": {
        "generations": "which amusement park ride has more than 5 inversions??",
        "ori_data_item": {
            "qid": 2105485002000,
            "question": "which amusement ride has an amount greater than 5 inversions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026yfhh",
                    "entity_name": "Silver Bullet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6_b9",
                    "entity_name": "Colossus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08jksg",
                    "entity_name": "Superman: Krypton Coaster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyx282",
                    "entity_name": "The Monster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08lcf8",
                    "entity_name": "Raptor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kvkpc5",
                    "entity_name": "GateKeeper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c2d39",
                    "entity_name": "Goudurix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06hdz4",
                    "entity_name": "Great American Scream Machine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bm142",
                    "entity_name": "Bizarro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011q3d6s",
                    "entity_name": "Batman: The Ride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027tgt8",
                    "entity_name": "Medusa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c6rrh",
                    "entity_name": "Fahrenheit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cnk1n",
                    "entity_name": "Time Machine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03crxbd",
                    "entity_name": "Phaethon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ct9cw",
                    "entity_name": "Pyrenees"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06gwb8",
                    "entity_name": "Dragon Khan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06z1y5",
                    "entity_name": "Alpengeist"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.073khg",
                    "entity_name": "The Riddler's Revenge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07gwqw",
                    "entity_name": "Kumba"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09fw5f",
                    "entity_name": "Afterburn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b06rt",
                    "entity_name": "Montu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c28g9",
                    "entity_name": "Kraken"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cscgg",
                    "entity_name": "Scream"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0csckk",
                    "entity_name": "Viper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f4h52",
                    "entity_name": "Katun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f4shg",
                    "entity_name": "Hydra the Revenge"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f8zw8",
                    "entity_name": "Shockwave"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffsmk",
                    "entity_name": "Vortex"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wr3scb",
                    "entity_name": "Banshee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j7nch9",
                    "entity_name": "The Smiler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zwml11",
                    "entity_name": "Helix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d_rcp",
                    "entity_name": "Boomerang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gywl43",
                    "entity_name": "Takabisha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ct9ld",
                    "entity_name": "Superman: La Atracci\u00f3n de Acero"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1gyd",
                    "entity_name": "10 Inversion Roller Coaster"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026ktj2",
                    "entity_name": "Monte Makaya"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0942hx",
                    "entity_name": "The Incredible Hulk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07r_52",
                    "entity_name": "Boomerang"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f3ym9",
                    "entity_name": "Aftershock"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010rd01b",
                    "entity_name": "Skyscraper"
                }
            ],
            "function": ">",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "5^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "5",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.inversions",
                        "friendly_name": "Inversions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \nFILTER (?x1 > \"5\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :amusement_parks.ride.inversions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (gt amusement_parks.ride.inversions 5^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "828": {
        "generations": "who is the director of the yale center for british art museum in architecture??",
        "ori_data_item": {
            "qid": 2100388015000,
            "question": "who is the director of the yale center for british art?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j19y68",
                    "entity_name": "Amy Meyers"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.museum_director",
                        "class": "architecture.museum_director",
                        "friendly_name": "Museum director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06x2z0",
                        "class": "architecture.museum",
                        "friendly_name": "Yale Center for British Art",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.museum_director.museum",
                        "friendly_name": "Museum"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.museum_director . \nVALUES ?x1 { :m.06x2z0 } \n?x0 :architecture.museum_director.museum ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.museum_director (JOIN architecture.museum_director.museum m.06x2z0))"
        }
    },
    "829": {
        "generations": "which operating system developer has the earliest release date for an operating system that includes redhat enterprise linux??",
        "ori_data_item": {
            "qid": 4302854015000,
            "question": "who was the developer of the earliest released operation system that includes redhat enterprise linux?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gnf",
                    "entity_name": "Linus Torvalds"
                }
            ],
            "function": "argmin",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.operating_system_developer",
                        "class": "computer.operating_system_developer",
                        "friendly_name": "Operating System Developer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.operating_system",
                        "class": "computer.operating_system",
                        "friendly_name": "Operating System",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02prjf",
                        "class": "computer.operating_system",
                        "friendly_name": "redhat enterprise linux",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.operating_system.developer",
                        "friendly_name": "Developer"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "computer.operating_system.includes_os_versions",
                        "friendly_name": "Includes OS Versions"
                    },
                    {
                        "start": 1,
                        "end": 3,
                        "relation": "computer.operating_system.release_date",
                        "friendly_name": "Release Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.operating_system_developer . \n?x1 :type.object.type :computer.operating_system . \nVALUES ?x2 { :m.02prjf } \n{\nSELECT (MIN(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.operating_system_developer . \n?y1 :type.object.type :computer.operating_system . \nVALUES ?y2 { :m.02prjf } \n?y1 :computer.operating_system.developer ?y0 . \n?y1 :computer.operating_system.includes_os_versions ?y2 . \n?y1 :computer.operating_system.release_date ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.operating_system.developer ?x0 . \n?x1 :computer.operating_system.includes_os_versions ?x2 . \n?x1 :computer.operating_system.release_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(ARGMIN (AND computer.operating_system_developer (JOIN (R computer.operating_system.developer) (JOIN computer.operating_system.includes_os_versions m.02prjf))) (JOIN (R computer.operating_system.developer) computer.operating_system.release_date))"
        }
    },
    "830": {
        "generations": "which special TV performance type has a segment performance featuring Gabriel Byrne as an actor??",
        "ori_data_item": {
            "qid": 3202480013000,
            "question": "the tv segment performance by actor gabriel byrne is what special tv performance type?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0147fv",
                    "entity_name": "Narrator"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.special_tv_performance_type",
                        "class": "tv.special_tv_performance_type",
                        "friendly_name": "Special TV performance type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_segment_performance",
                        "class": "tv.tv_segment_performance",
                        "friendly_name": "TV segment performance",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01j5sd",
                        "class": "tv.tv_actor",
                        "friendly_name": "Gabriel Byrne",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.special_tv_performance_type.segment_performances",
                        "friendly_name": "Segment performances"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "tv.tv_segment_performance.actor",
                        "friendly_name": "Actor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.special_tv_performance_type . \n?x1 :type.object.type :tv.tv_segment_performance . \nVALUES ?x2 { :m.01j5sd } \n?x0 :tv.special_tv_performance_type.segment_performances ?x1 . \n?x1 :tv.tv_segment_performance.actor ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.special_tv_performance_type (JOIN tv.special_tv_performance_type.segment_performances (JOIN tv.tv_segment_performance.actor m.01j5sd)))"
        }
    },
    "831": {
        "generations": "which TV director has quotations about politicians and politics??",
        "ori_data_item": {
            "qid": 3203289012000,
            "question": "what tv director is associated with a quotation with a subject of politicians and politics?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05kh_",
                    "entity_name": "Orson Welles"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_director",
                        "class": "tv.tv_director",
                        "friendly_name": "TV Director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.048knps",
                        "class": "media_common.quotation_subject",
                        "friendly_name": "Politicians and Politics",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.quotations",
                        "friendly_name": "Quotations"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "media_common.quotation_subject.quotations_about_this_subject",
                        "friendly_name": "Quotations About This Subject"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_director . \n?x1 :type.object.type :media_common.quotation . \nVALUES ?x2 { :m.048knps } \n?x0 :people.person.quotations ?x1 . \n?x2 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common",
                "people"
            ],
            "s_expression": "(AND tv.tv_director (JOIN people.person.quotations (JOIN (R media_common.quotation_subject.quotations_about_this_subject) m.048knps)))"
        }
    },
    "832": {
        "generations": "what comic strip genre is part of the parent genre of plays in the children of the sun theater genre??",
        "ori_data_item": {
            "qid": 3200030000000,
            "question": "the parent genre that incorpates the play children of the sun is related to which comic strip genre?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p553",
                    "entity_name": "Comedy"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_strips.comic_strip_genre",
                        "class": "comic_strips.comic_strip_genre",
                        "friendly_name": "Comic Strip Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "theater.theater_genre",
                        "class": "theater.theater_genre",
                        "friendly_name": "Theater Genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.059fz_",
                        "class": "theater.play",
                        "friendly_name": "Children of the Sun",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "media_common.media_genre.parent_genre",
                        "friendly_name": "Parent genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "theater.theater_genre.plays_in_this_genre",
                        "friendly_name": "Plays In This Genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_strips.comic_strip_genre . \n?x1 :type.object.type :theater.theater_genre . \nVALUES ?x2 { :m.059fz_ } \n?x1 :media_common.media_genre.parent_genre ?x0 . \n?x1 :theater.theater_genre.plays_in_this_genre ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "theater",
                "media_common"
            ],
            "s_expression": "(AND comic_strips.comic_strip_genre (JOIN (R media_common.media_genre.parent_genre) (JOIN theater.theater_genre.plays_in_this_genre m.059fz_)))"
        }
    },
    "833": {
        "generations": "which building is served by an airport located in a time zone with an offset greater than or equal to 0.0 from UTC??",
        "ori_data_item": {
            "qid": 4303494000000,
            "question": "compile a list of all buildings serving airports located in time zones with offset of utc more than 0.0.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0pbddkr",
                    "entity_name": "20 Northmoor Road"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bd3x0p",
                    "entity_name": "Yotel London Gatwick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121nj21",
                    "entity_name": "The Olsen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121nhb0",
                    "entity_name": "The Cullen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0130q_wd",
                    "entity_name": "Hotel Gut Raunerhof"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01291cy1",
                    "entity_name": "Hilton London Syon Park"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zn0ch3",
                    "entity_name": "Conrad London St. James"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121nj8f",
                    "entity_name": "The Larwill"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0130r1z4",
                    "entity_name": "Hotel Sonnschupfer *** Superior"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121jxbq",
                    "entity_name": "The Blackman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bd3x08",
                    "entity_name": "Yotel London Heathrow"
                }
            ],
            "function": ">=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.building",
                        "class": "architecture.building",
                        "friendly_name": "Building",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.airport",
                        "class": "aviation.airport",
                        "friendly_name": "Airport",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "time.time_zone",
                        "class": "time.time_zone",
                        "friendly_name": "Time Zone",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "0.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "aviation.airport.serves",
                        "friendly_name": "Serves"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "time.time_zone.locations_in_this_time_zone",
                        "friendly_name": "Locations in this time zone"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "time.time_zone.offset_from_uct",
                        "friendly_name": "Offset from UTC"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.building . \n?x1 :type.object.type :aviation.airport . \n?x2 :type.object.type :time.time_zone . \nFILTER (?x3 >= \"0.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x1 :aviation.airport.serves ?x0 . \n?x2 :time.time_zone.locations_in_this_time_zone ?x1 . \n?x2 :time.time_zone.offset_from_uct ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "aviation",
                "time"
            ],
            "s_expression": "(AND architecture.building (JOIN (R aviation.airport.serves) (JOIN (R time.time_zone.locations_in_this_time_zone) (ge time.time_zone.offset_from_uct 0.0^^http://www.w3.org/2001/XMLSchema#float))))"
        }
    },
    "834": {
        "generations": "which TV actor has guest roles in episodes featuring Ellie Beckett??",
        "ori_data_item": {
            "qid": 3202434003000,
            "question": "ellie beckett was performed by whom in the tv episode?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09jvww",
                    "entity_name": "Roberta Shore"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_actor",
                        "class": "tv.tv_actor",
                        "friendly_name": "TV Actor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "tv.tv_guest_role",
                        "class": "tv.tv_guest_role",
                        "friendly_name": "TV episode performance",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.09nd46_",
                        "class": "tv.tv_character",
                        "friendly_name": "Ellie Beckett",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_actor.guest_roles",
                        "friendly_name": "TV episode performances"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "tv.tv_character.appeared_in_tv_episodes",
                        "friendly_name": "Appeared In TV Episodes"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_actor . \n?x1 :type.object.type :tv.tv_guest_role . \nVALUES ?x2 { :m.09nd46_ } \n?x0 :tv.tv_actor.guest_roles ?x1 . \n?x2 :tv.tv_character.appeared_in_tv_episodes ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_actor (JOIN tv.tv_actor.guest_roles (JOIN (R tv.tv_character.appeared_in_tv_episodes) m.09nd46_)))"
        }
    },
    "835": {
        "generations": "what defunct sports team played ice hockey??",
        "ori_data_item": {
            "qid": 2101097001000,
            "question": "icehockey is played by which defunct sports team?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.069c4h",
                    "entity_name": "Edmonton Oil Kings"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g1bnc",
                    "entity_name": "Buffalo Bisons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065l2k",
                    "entity_name": "Toledo Blades"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p4kg",
                    "entity_name": "St. Louis Eagles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026t177",
                    "entity_name": "St. Louis Flyers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04l5g4",
                    "entity_name": "St. John's Maple Leafs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wzt6gt",
                    "entity_name": "Baltimore Orioles"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.defunct_sports_team",
                        "class": "sports.defunct_sports_team",
                        "friendly_name": "Defunct Sports Team",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03tmr",
                        "class": "sports.sport",
                        "friendly_name": "icehockey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.defunct_sports_team.sport",
                        "friendly_name": "Sport"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.defunct_sports_team . \nVALUES ?x1 { :m.03tmr } \n?x0 :sports.defunct_sports_team.sport ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.defunct_sports_team (JOIN sports.defunct_sports_team.sport m.03tmr))"
        }
    },
    "836": {
        "generations": "which animal is owned by george v according to biology records??",
        "ori_data_item": {
            "qid": 3201640005000,
            "question": "what pet does george v have?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081z9r",
                    "entity_name": "Anmer"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.owned_animal",
                        "class": "biology.owned_animal",
                        "friendly_name": "Owned animal",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "biology.animal_ownership",
                        "class": "biology.animal_ownership",
                        "friendly_name": "Animal ownership",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cmpn",
                        "class": "biology.animal_owner",
                        "friendly_name": "George V",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "biology.animal_ownership.animal",
                        "friendly_name": "Animal"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "biology.animal_ownership.owners",
                        "friendly_name": "Owners"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.owned_animal . \n?x1 :type.object.type :biology.animal_ownership . \nVALUES ?x2 { :m.0cmpn } \n?x1 :biology.animal_ownership.animal ?x0 . \n?x1 :biology.animal_ownership.owners ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.owned_animal (JOIN (R biology.animal_ownership.animal) (JOIN biology.animal_ownership.owners m.0cmpn)))"
        }
    },
    "837": {
        "generations": "which university has the fraternity/sorority alpha delta gamma??",
        "ori_data_item": {
            "qid": 2102329015000,
            "question": "alpha delta gamma has what college or university associated with it's fraternities and soroties?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f1nl",
                    "entity_name": "Georgia Institute of Technology"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "education.university",
                        "class": "education.university",
                        "friendly_name": "College/University",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.075rfd",
                        "class": "education.fraternity_sorority",
                        "friendly_name": "Alpha Delta Gamma",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "education.university.fraternities_and_sororities",
                        "friendly_name": "Fraternities and sororities"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :education.university . \nVALUES ?x1 { :m.075rfd } \n?x0 :education.university.fraternities_and_sororities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND education.university (JOIN education.university.fraternities_and_sororities m.075rfd))"
        }
    },
    "838": {
        "generations": "which quotation is incorrectly attributed to benjamin franklin??",
        "ori_data_item": {
            "qid": 2100983010000,
            "question": "what quotation is incorrectly attributed to benjamin franklin?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02j6hm7",
                    "entity_name": "Insanity is doing the same thing, over and over again, but expecting different results."
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.019fz",
                        "class": "people.person",
                        "friendly_name": "Benjamin Franklin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.quotation.incorrectly_attributed_to",
                        "friendly_name": "Incorrectly attributed to"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \nVALUES ?x1 { :m.019fz } \n?x0 :media_common.quotation.incorrectly_attributed_to ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.quotation (JOIN media_common.quotation.incorrectly_attributed_to m.019fz))"
        }
    },
    "839": {
        "generations": "what rides are in jungle jack's landing amusement park??",
        "ori_data_item": {
            "qid": 2100302002000,
            "question": "the amusement ride is where in jungle jack's landing?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0479ykz",
                    "entity_name": "Sea Dragon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8gkg6",
                    "entity_name": "Jungle River Falls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8gkgm",
                    "entity_name": "Whirligigs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8gkf_",
                    "entity_name": "Condor Craze"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8gkgf",
                    "entity_name": "Dust Devil"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.ride",
                        "class": "amusement_parks.ride",
                        "friendly_name": "Amusement Ride",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.047d4pz",
                        "class": "amusement_parks.park",
                        "friendly_name": "Jungle Jack's Landing",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.ride.park",
                        "friendly_name": "Park"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \nVALUES ?x1 { :m.047d4pz } \n?x0 :amusement_parks.ride.park ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.ride (JOIN amusement_parks.ride.park m.047d4pz))"
        }
    },
    "840": {
        "generations": "how many exhibits are part of the renoir returns: a celebration of masterworks at the phillips collection exhibition??",
        "ori_data_item": {
            "qid": 2103408005000,
            "question": "the renoir returns: a celebration of masterworks at the phillips collection contains how many exhibits?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibit",
                        "class": "exhibitions.exhibit",
                        "friendly_name": "Exhibit",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05b9gbr",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "The Renoir Returns: A Celebration of Masterworks at The Phillips Collection",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "exhibitions.exhibition.exhibits",
                        "friendly_name": "Exhibits"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibit . \nVALUES ?x1 { :m.05b9gbr } \n?x1 :exhibitions.exhibition.exhibits ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(COUNT (AND exhibitions.exhibit (JOIN (R exhibitions.exhibition.exhibits) m.05b9gbr)))"
        }
    },
    "841": {
        "generations": "which game voice actor weighs less than 54.0 kg??",
        "ori_data_item": {
            "qid": 2104862015000,
            "question": "which video game actor has a weight that is less than 54.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0127s7",
                    "entity_name": "Christina Aguilera"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018fyy",
                    "entity_name": "Traci Lords"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.023v4_",
                    "entity_name": "Mila Kunis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.040s7h",
                    "entity_name": "Vida Guerra"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063rjh",
                    "entity_name": "Danica Patrick"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0jwtj",
                    "entity_name": "Jenna Jameson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.028c9fl",
                    "entity_name": "Leah Dizon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bdg9",
                    "entity_name": "Michie Tomizawa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09yhzs",
                    "entity_name": "Emma Stone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015dx",
                    "entity_name": "Brooke Burke-Charvet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f62k",
                    "entity_name": "Jun Fukuyama"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b7bjh",
                    "entity_name": "Evanna Lynch"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03jmmn",
                    "entity_name": "Ikue \u014ctani"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ckz6l",
                    "entity_name": "Konami Yoshida"
                }
            ],
            "function": "<",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cvg.game_voice_actor",
                        "class": "cvg.game_voice_actor",
                        "friendly_name": "Video Game Actor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "54.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "54.0",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_voice_actor . \nFILTER (?x1 < \"54.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND cvg.game_voice_actor (lt people.person.weight_kg 54.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "842": {
        "generations": "what type of permit is required for fishing according to government issued permits??",
        "ori_data_item": {
            "qid": 2102229004000,
            "question": "the permit type of fishing license belongs to which government issued permit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nbwf",
                    "entity_name": "Long Beach"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011ky7hg",
                    "entity_name": "Massachusetts Fishing License"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_issued_permit",
                        "class": "government.government_issued_permit",
                        "friendly_name": "Government Issued Permit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0_lfh42",
                        "class": "government.government_permit_type",
                        "friendly_name": "Fishing license",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_issued_permit.permit_type",
                        "friendly_name": "Permit type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_issued_permit . \nVALUES ?x1 { :m.0_lfh42 } \n?x0 :government.government_issued_permit.permit_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_issued_permit (JOIN government.government_issued_permit.permit_type m.0_lfh42))"
        }
    },
    "843": {
        "generations": "how many music group members are of armenian ethnicity in georgia??",
        "ori_data_item": {
            "qid": 2104300015000,
            "question": "how many musicians are armenians in georgia in the world?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.group_member",
                        "class": "music.group_member",
                        "friendly_name": "Musician",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02qvrpw",
                        "class": "people.ethnicity",
                        "friendly_name": "Armenians in Georgia",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.ethnicity.people",
                        "friendly_name": "People of this ethnicity"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.group_member . \nVALUES ?x1 { :m.02qvrpw } \n?x1 :people.ethnicity.people ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(COUNT (AND music.group_member (JOIN (R people.ethnicity.people) m.02qvrpw)))"
        }
    },
    "844": {
        "generations": "which military unit has a unit size of battalion??",
        "ori_data_item": {
            "qid": 2102002005000,
            "question": "what military unit is designated by a size of battalion.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qcg_h",
                    "entity_name": "65th Reserve Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g84g9",
                    "entity_name": "1st Battalion Ohio Sharpshooters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1myv7",
                    "entity_name": "Sacred Band of Thebes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yfm2g",
                    "entity_name": "60th Battalion (Victoria Rifles of Canada), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yfm3t",
                    "entity_name": "62nd Battalion (British Columbia), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yfmbj",
                    "entity_name": "66th Battalion (Edmonton Guards), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yn5n7",
                    "entity_name": "65th Battalion (Saskatchewan), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0kzcd",
                    "entity_name": "Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011ljw5d",
                    "entity_name": "1st California Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0260y2c",
                    "entity_name": "1st Georgia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rm91p",
                    "entity_name": "41st Battalion Iowa Volunteer Infantry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rmmvp",
                    "entity_name": "48th Battalion Iowa Volunteer Infantry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_0d7_",
                    "entity_name": "1st Dakota Cavalry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.064q1qx",
                    "entity_name": "Munday's 1st Battalion Kentucky Volunteer Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080ch9f",
                    "entity_name": "1st Battalion of Native Cavalry, California Volunteers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gmfmg",
                    "entity_name": "1st Battalion California Volunteer Mountaineers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dljf01",
                    "entity_name": "1st Battalion Maine Sharpshooters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dlmf7j",
                    "entity_name": "1st Maine Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f2jbb",
                    "entity_name": "1st Battalion, Georgia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9z566",
                    "entity_name": "Williamson's Arkansas Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnxn1",
                    "entity_name": "2nd District of Columbia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnxn4",
                    "entity_name": "3rd District of Columbia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnxn7",
                    "entity_name": "5th District of Columbia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnxnb",
                    "entity_name": "8th District of Columbia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnyy1",
                    "entity_name": "2nd Battalion Florida Infantry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnyy7",
                    "entity_name": "5th Battalion Florida Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnyyb",
                    "entity_name": "1st Battalion Florida Special Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtnyyf",
                    "entity_name": "3rd Battalion Florida Cavalry (Meyer's)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0kxn9",
                    "entity_name": "Sacred Band of Thebes commanded by Gorgidas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bg94cf",
                    "entity_name": "3rd (Militia) Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1wxlp",
                    "entity_name": "Sacred Band"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cn_9rl",
                    "entity_name": "10th Transportation Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0556ndk",
                    "entity_name": "1st Battalion Massachusetts Volunteer Heavy Artillery"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0260vt3",
                    "entity_name": "Hatch's Battalion, Minnesota Volunteer Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cm886n",
                    "entity_name": "6th Transportation Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v3kc",
                    "entity_name": "3rd Ranger Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v27pt",
                    "entity_name": "1st Virginia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0260vml",
                    "entity_name": "Brackett's Battalion, Minnesota Volunteer Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026442f",
                    "entity_name": "Independent Battalion West Virginia Infantry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026lkdt",
                    "entity_name": "New York Rocket Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05b1vyx",
                    "entity_name": "1st Battalion Nevada Volunteer Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09g783f",
                    "entity_name": "1st Ohio Independent Cavalry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gm83_8",
                    "entity_name": "1st Battalion Nevada Volunteer Infantry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qy9fw",
                    "entity_name": "62 Reserve Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gcmq4",
                    "entity_name": "57th Transportation Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gtwctc",
                    "entity_name": "1st Alpini Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07zjg8",
                    "entity_name": "6th Ranger Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_1dqjn",
                    "entity_name": "2/2nd Pioneer Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cmchdj",
                    "entity_name": "7th Transportation Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qdy47",
                    "entity_name": "Dnipro Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwjhlm",
                    "entity_name": "Middle East Commando"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5q2r9",
                    "entity_name": "510th Heavy Panzer Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yklv0",
                    "entity_name": "61st Battalion (Winnipeg), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwg0jd",
                    "entity_name": "No. 2 Commando"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9t7tt",
                    "entity_name": "2/43rd Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06wryv",
                    "entity_name": "503rd Heavy Panzer Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h3mr3c",
                    "entity_name": "2/1st Pioneer Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_ykddq",
                    "entity_name": "59th Battalion (Ontario), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwhf4s",
                    "entity_name": "46th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0by0ww",
                    "entity_name": "1st Battalion 5th Marines"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwfnhd",
                    "entity_name": "37th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwmkhv",
                    "entity_name": "36th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zhyrd",
                    "entity_name": "31st/42nd Battalion, Royal Queensland Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwld02",
                    "entity_name": "No. 50 Commando"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01113gpf",
                    "entity_name": "Reserve Police Battalion 101"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cnz5z1",
                    "entity_name": "11th Transportation Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05vy5z",
                    "entity_name": "741st Tank Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v4t0y",
                    "entity_name": "22nd Virginia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01111j9b",
                    "entity_name": "Aidar Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6hx2b",
                    "entity_name": "3rd Battalion, 153rd Infantry Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yfg4f",
                    "entity_name": "67th Battalion (Western Scots), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r2dm2",
                    "entity_name": "11th Alpini Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0283s_n",
                    "entity_name": "1st Battalion 21st Field Artillery Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbys2r",
                    "entity_name": "23rd/21st Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwhsl9",
                    "entity_name": "34th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010vvkhh",
                    "entity_name": "Donbas Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qs_r4",
                    "entity_name": "43rd Battalion, Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwgqp0",
                    "entity_name": "47th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011c9rg9",
                    "entity_name": "17th Armored Engineer Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s3hny",
                    "entity_name": "51st Expeditionary Signal Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v4t19",
                    "entity_name": "5th Virginia Infantry Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwhcv5",
                    "entity_name": "No. 52 Commando"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d0t81",
                    "entity_name": "35th Battalion Virginia Cavalry"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwl0_z",
                    "entity_name": "27th Battalion Virginia Partisan Rangers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_yhrf0",
                    "entity_name": "57th Battalion (Canadien-Fran\u00e7ais), CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06tmkh",
                    "entity_name": "1st Ranger Battalion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qvnk4",
                    "entity_name": "5th Battalion, Canadian Mounted Rifles, CEF"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ndjv7v",
                    "entity_name": "167th Infantry Regiment"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwld8k",
                    "entity_name": "42nd Battalion Virginia Cavalry"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "military.military_unit",
                        "class": "military.military_unit",
                        "friendly_name": "Military unit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012gvv",
                        "class": "military.military_unit_size",
                        "friendly_name": "Battalion",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "military.military_unit.unit_size",
                        "friendly_name": "Unit size designation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_unit . \nVALUES ?x1 { :m.012gvv } \n?x0 :military.military_unit.unit_size ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "military"
            ],
            "s_expression": "(AND military.military_unit (JOIN military.military_unit.unit_size m.012gvv))"
        }
    },
    "845": {
        "generations": "how many us presidential campaigns were nominated by the green party in the 2008 nominating convention??",
        "ori_data_item": {
            "qid": 2105318002000,
            "question": "how many us presidential campaigns are associated with the green party nominating convention, 2008?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.us_presidential_campaign",
                        "class": "government.us_presidential_campaign",
                        "friendly_name": "US Presidential campaign",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.044htvw",
                        "class": "government.election",
                        "friendly_name": "Green Party nominating convention, 2008",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.election_campaign.election",
                        "friendly_name": "Election"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_presidential_campaign . \nVALUES ?x1 { :m.044htvw } \n?x0 :government.election_campaign.election ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(COUNT (AND government.us_presidential_campaign (JOIN government.election_campaign.election m.044htvw)))"
        }
    },
    "846": {
        "generations": "which music artist is signed to 16th avenue records??",
        "ori_data_item": {
            "qid": 2102951003000,
            "question": "what musical artist is on the 16th avenue records label?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nq1qf",
                    "entity_name": "John Conlee"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h3k_",
                    "entity_name": "Charley Pride"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01l3h7d",
                    "entity_name": "Neal McCoy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03yks5w",
                    "entity_name": "John Wesley Ryles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zm3k9",
                    "entity_name": "Canyon"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.artist",
                        "class": "music.artist",
                        "friendly_name": "Musical Artist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bhb66m",
                        "class": "music.record_label",
                        "friendly_name": "16th Avenue Records",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.artist.label",
                        "friendly_name": "Record Labels"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.artist . \nVALUES ?x1 { :m.0bhb66m } \n?x0 :music.artist.label ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.artist (JOIN music.artist.label m.0bhb66m))"
        }
    },
    "847": {
        "generations": "which TV program has a season called The Emmy Awards - Season 50??",
        "ori_data_item": {
            "qid": 2102282011000,
            "question": "the emmy awards - season 50 is the place in which tv program originated from?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07ch6b3",
                    "entity_name": "The Emmy Awards"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program",
                        "class": "tv.tv_program",
                        "friendly_name": "TV Program",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07mghkm",
                        "class": "tv.tv_series_season",
                        "friendly_name": "The Emmy Awards - Season 50",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program.seasons",
                        "friendly_name": "Seasons"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \nVALUES ?x1 { :m.07mghkm } \n?x0 :tv.tv_program.seasons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.seasons m.07mghkm))"
        }
    },
    "848": {
        "generations": "which manufacturer produces the manufactured drug form??",
        "ori_data_item": {
            "qid": 2100931015000,
            "question": "what drug form is manufactured by abbe laboratories?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqnt6s",
                    "entity_name": "End-zit 0.05 augmented lotion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqq8c0",
                    "entity_name": "End-zit 0.05 augmented lotion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqkkq6",
                    "entity_name": "End-zit 0.05 augmented lotion"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqk09g",
                    "entity_name": "End-zit 0.05 augmented lotion"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.manufactured_drug_form",
                        "class": "medicine.manufactured_drug_form",
                        "friendly_name": "Manufactured drug form",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqx9f6",
                        "class": "medicine.drug_manufacturer",
                        "friendly_name": "ABBE Laboratories",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.manufactured_drug_form.manufacturer",
                        "friendly_name": "Manufacturer"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.0hqx9f6 } \n?x0 :medicine.manufactured_drug_form.manufacturer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.manufacturer m.0hqx9f6))"
        }
    },
    "849": {
        "generations": "what is the model year that comes after the 2014 chevy spark??",
        "ori_data_item": {
            "qid": 2102661001000,
            "question": "2014 chevy spark is the previous model year of which automobile model year?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012br30_",
                    "entity_name": "2015 Chevy Spark"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model_year",
                        "class": "automotive.model_year",
                        "friendly_name": "Automobile Model Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012br3w2",
                        "class": "automotive.model_year",
                        "friendly_name": "2014 Chevy Spark",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model_year.previous_model_year",
                        "friendly_name": "Previous Model Year"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model_year . \nVALUES ?x1 { :m.012br3w2 } \n?x0 :automotive.model_year.previous_model_year ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model_year (JOIN automotive.model_year.previous_model_year m.012br3w2))"
        }
    },
    "850": {
        "generations": "which architect is known for the Cross-Over Architecture style??",
        "ori_data_item": {
            "qid": 2100452010000,
            "question": "who is an architect known for cross-over architecture?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r9zk_",
                    "entity_name": "Marco Casagrande"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02q_g2p",
                    "entity_name": "Vilen K\u00fcnnapu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ngtkxb",
                    "entity_name": "Tadashi Kawamata"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.architect",
                        "class": "architecture.architect",
                        "friendly_name": "Architect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05gh8bf",
                        "class": "architecture.architectural_style",
                        "friendly_name": "Cross-Over Architecture",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.architect.architectural_style",
                        "friendly_name": "Architectural Style"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.architect . \nVALUES ?x1 { :m.05gh8bf } \n?x0 :architecture.architect.architectural_style ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.architect (JOIN architecture.architect.architectural_style m.05gh8bf))"
        }
    },
    "851": {
        "generations": "which lighthouse has a focal height of light at most 30.0??",
        "ori_data_item": {
            "qid": 2103536010000,
            "question": "what is the lighthouse called that has a height of light no larger than 30.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025x9wb",
                    "entity_name": "Bathurst Lighthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z111d",
                    "entity_name": "Pencarrow Head Lighthouse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gslr0",
                    "entity_name": "The Graves Light"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dkfmjm",
                    "entity_name": "Frailes del Sur"
                }
            ],
            "function": "<=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.lighthouse",
                        "class": "architecture.lighthouse",
                        "friendly_name": "Lighthouse",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "30.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "30.0",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "architecture.lighthouse.focal_height_of_light",
                        "friendly_name": "Focal height of light"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.lighthouse . \nFILTER (?x1 <= \"30.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :architecture.lighthouse.focal_height_of_light ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND architecture.lighthouse (le architecture.lighthouse.focal_height_of_light 30.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "852": {
        "generations": "which family does the person named musharraf belong to as a family member??",
        "ori_data_item": {
            "qid": 2101526000000,
            "question": "in the musharraf family, who is a family member?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.061s_",
                    "entity_name": "Pervez Musharraf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06y36_",
                    "entity_name": "Sehba Musharraf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g7gsz",
                    "entity_name": "Bilal Musharraf"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.family_member",
                        "class": "people.family_member",
                        "friendly_name": "Family member",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cmmc12",
                        "class": "people.family",
                        "friendly_name": "Musharraf family",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.family_member.family",
                        "friendly_name": "Family"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.family_member . \nVALUES ?x1 { :m.0cmmc12 } \n?x0 :people.family_member.family ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND people.family_member (JOIN people.family_member.family m.0cmmc12))"
        }
    },
    "853": {
        "generations": "what defunct company ceased operations due to nationalization??",
        "ori_data_item": {
            "qid": 2101796014000,
            "question": "what is nationalization's reason for ceasing operation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0x0jmp9",
                    "entity_name": "Dutch Rhenish Railway"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.defunct_company",
                        "class": "business.defunct_company",
                        "friendly_name": "Defunct Organization",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.042px7",
                        "class": "business.company_termination_type",
                        "friendly_name": "Nationalization",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.defunct_company.reason_for_ceasing_operations",
                        "friendly_name": "Reason for ceasing operations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.defunct_company . \nVALUES ?x1 { :m.042px7 } \n?x0 :business.defunct_company.reason_for_ceasing_operations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.defunct_company (JOIN business.defunct_company.reason_for_ceasing_operations m.042px7))"
        }
    },
    "854": {
        "generations": "which aircraft model has the largest wingspan??",
        "ori_data_item": {
            "qid": 2105069004000,
            "question": "what type of aircraft has the longest wingspan?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cxw_f",
                    "entity_name": "Beriev Be-2500"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_model",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Aircraft model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_model.wingspan",
                        "friendly_name": "Wingspan"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :aviation.aircraft_model . \n?y0 :aviation.aircraft_model.wingspan ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :aviation.aircraft_model.wingspan ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(ARGMAX aviation.aircraft_model aviation.aircraft_model.wingspan)"
        }
    },
    "855": {
        "generations": "which quotations are addressed to both askelon of meridian and zimri-lim??",
        "ori_data_item": {
            "qid": 3204132007000,
            "question": "addressee askelon of meridian and zimri-lim are part of what quote?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hp6f7b",
                    "entity_name": "\"Humans create their futures every day of every year; only you can alter your worlds.\""
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hp6f44",
                    "entity_name": "\"One lot apiece, one chance to undo an error or secure a fate.\""
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "media_common.quotation",
                        "class": "media_common.quotation",
                        "friendly_name": "Quotation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bxtt5p",
                        "class": "media_common.quotation_addressee",
                        "friendly_name": "Askelon of Meridian",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0c09_mj",
                        "class": "media_common.quotation_addressee",
                        "friendly_name": "Zimri-Lim",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "media_common.quotation.addressee",
                        "friendly_name": "Addressee"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "media_common.quotation.addressee",
                        "friendly_name": "Addressee"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \nVALUES ?x1 { :m.0bxtt5p } \nVALUES ?x2 { :m.0c09_mj } \n?x0 :media_common.quotation.addressee ?x1 . \n?x0 :media_common.quotation.addressee ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "media_common"
            ],
            "s_expression": "(AND media_common.quotation (AND (JOIN media_common.quotation.addressee m.0bxtt5p) (JOIN media_common.quotation.addressee m.0c09_mj)))"
        }
    },
    "856": {
        "generations": "what meteor shower is sourced from 7P/Pons-Winnecke??",
        "ori_data_item": {
            "qid": 2102497003000,
            "question": "what meteor shower is caused by 7p/pons\u2013winnecke?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06mhg0",
                    "entity_name": "June Bootids"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.meteor_shower",
                        "class": "astronomy.meteor_shower",
                        "friendly_name": "Meteor Shower",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0dmyq_",
                        "class": "astronomy.comet",
                        "friendly_name": "7P/Pons\u2013Winnecke",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.meteor_shower.source_of_meteor_shower",
                        "friendly_name": "Source of meteor shower"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.meteor_shower . \nVALUES ?x1 { :m.0dmyq_ } \n?x0 :astronomy.meteor_shower.source_of_meteor_shower ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.meteor_shower (JOIN astronomy.meteor_shower.source_of_meteor_shower m.0dmyq_))"
        }
    },
    "857": {
        "generations": "what order of chivalry was founded on april 22, 1994??",
        "ori_data_item": {
            "qid": 2100558014000,
            "question": "1994-04-22 was the date that what order of chivalry was founded?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122rd98n",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.order_of_chivalry",
                        "class": "royalty.order_of_chivalry",
                        "friendly_name": "Order of Chivalry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1994-04-22^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "1994-04-22",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "royalty.order_of_chivalry.date_founded",
                        "friendly_name": "Date Founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.order_of_chivalry . \nVALUES ?x1 { \"1994-04-22-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :royalty.order_of_chivalry.date_founded ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.order_of_chivalry (JOIN royalty.order_of_chivalry.date_founded 1994-04-22^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "858": {
        "generations": "where did the cricket match take place at the rose bowl??",
        "ori_data_item": {
            "qid": 2100328015000,
            "question": "rose bowl hosted which cricket match?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.011crqnt",
                    "entity_name": "England vs India Cricket Match"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_match",
                        "class": "cricket.cricket_match",
                        "friendly_name": "Cricket Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03wwlh",
                        "class": "cricket.cricket_stadium",
                        "friendly_name": "Rose Bowl",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_match.location",
                        "friendly_name": "Location"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match . \nVALUES ?x1 { :m.03wwlh } \n?x0 :cricket.cricket_match.location ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_match (JOIN cricket.cricket_match.location m.03wwlh))"
        }
    },
    "859": {
        "generations": "what court has allahabad hc as its inferior court??",
        "ori_data_item": {
            "qid": 2100699008000,
            "question": "what is the name of subordinate court of allahabad hc?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0238x4",
                    "entity_name": "Supreme Court of India"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.court",
                        "class": "law.court",
                        "friendly_name": "Court",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07r2gn",
                        "class": "law.court",
                        "friendly_name": "allahabad hc",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.court.inferior_courts",
                        "friendly_name": "Inferior courts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.court . \nVALUES ?x1 { :m.07r2gn } \n?x0 :law.court.inferior_courts ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.court (JOIN law.court.inferior_courts m.07r2gn))"
        }
    },
    "860": {
        "generations": "what type of content belongs to the laws genre??",
        "ori_data_item": {
            "qid": 2102039007000,
            "question": "laws is the genre of what broadcast content?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0431tmy",
                    "entity_name": "CNN: Nancy Grace Cross Exam (Video)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.content",
                        "class": "broadcast.content",
                        "friendly_name": "Broadcast Content",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04gb7",
                        "class": "broadcast.genre",
                        "friendly_name": "laws",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.content.genre",
                        "friendly_name": "Genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.content . \nVALUES ?x1 { :m.04gb7 } \n?x0 :broadcast.content.genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.content (JOIN broadcast.content.genre m.04gb7))"
        }
    },
    "861": {
        "generations": "in what cricket match did kumar dharmasena serve as a field umpire??",
        "ori_data_item": {
            "qid": 2100675005000,
            "question": "which cricket match has field umpire kumar dharmasena?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0115d_2f",
                    "entity_name": "England vs India Cricket Match"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_match",
                        "class": "cricket.cricket_match",
                        "friendly_name": "Cricket Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.08rsvw",
                        "class": "cricket.cricket_umpire",
                        "friendly_name": "Kumar Dharmasena",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_match.field_umpires",
                        "friendly_name": "Field Umpires"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_match . \nVALUES ?x1 { :m.08rsvw } \n?x0 :cricket.cricket_match.field_umpires ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_match (JOIN cricket.cricket_match.field_umpires m.08rsvw))"
        }
    },
    "862": {
        "generations": "how many fictional characters belong to the species of river zora??",
        "ori_data_item": {
            "qid": 2103999004000,
            "question": "the river zora consist of how many species?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_species",
                        "class": "fictional_universe.character_species",
                        "friendly_name": "Character Species",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0nb7jr1",
                        "class": "fictional_universe.fictional_creature",
                        "friendly_name": "River Zora",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_creature.fictional_creature_species",
                        "friendly_name": "Fictional Creature Species"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.0nb7jr1 } \n?x1 :fictional_universe.fictional_creature.fictional_creature_species ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(COUNT (AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_creature.fictional_creature_species) m.0nb7jr1)))"
        }
    },
    "863": {
        "generations": "what election poll was released on october 26, 2012??",
        "ori_data_item": {
            "qid": 2102780011000,
            "question": "on the date 2012-10-26, what election poll was announced?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9ftvj",
                    "entity_name": "PPP (D), 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9g3rz",
                    "entity_name": "Gallup, 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9g3qm",
                    "entity_name": "IBD/TIPP, 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9f_y8",
                    "entity_name": "ABC/WaPo, 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9fx6c",
                    "entity_name": "RAND, 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9g3qs",
                    "entity_name": "Reuters/Ipsos, 2012 presidential election, 2012-10-26"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n9fx60",
                    "entity_name": "Rasmussen, 2012 presidential election, 2012-10-26"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.election_poll",
                        "class": "government.election_poll",
                        "friendly_name": "Election poll",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2012-10-26^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "2012-10-26",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.election_poll.release_date",
                        "friendly_name": "Release date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.election_poll . \nVALUES ?x1 { \"2012-10-26-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :government.election_poll.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.election_poll (JOIN government.election_poll.release_date 2012-10-26^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "864": {
        "generations": "which multi-event tournament did san marino republic participate in??",
        "ori_data_item": {
            "qid": 2100586001000,
            "question": "what multi-event tournaments did san marino republic participate in?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0p0f42t",
                    "entity_name": "2012 World Mountain Running Championships"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.multi_event_tournament",
                        "class": "sports.multi_event_tournament",
                        "friendly_name": "Multi-event tournament",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06sff",
                        "class": "sports.sport_country",
                        "friendly_name": "san marino republic",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.multi_event_tournament.participating_countries",
                        "friendly_name": "Participating countries"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.multi_event_tournament . \nVALUES ?x1 { :m.06sff } \n?x0 :sports.multi_event_tournament.participating_countries ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.multi_event_tournament (JOIN sports.multi_event_tournament.participating_countries m.06sff))"
        }
    },
    "865": {
        "generations": "who is the creator of the tv program gavin and stacey??",
        "ori_data_item": {
            "qid": 2100537005000,
            "question": "gavin and stacey is a tv program created by whom?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026kb23",
                    "entity_name": "James Corden"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09t2vr",
                    "entity_name": "Ruth Jones"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_program_creator",
                        "class": "tv.tv_program_creator",
                        "friendly_name": "TV Program Creator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02r4c7n",
                        "class": "tv.tv_program",
                        "friendly_name": "gavin and stacey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_program_creator.programs_created",
                        "friendly_name": "TV programs Created"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program_creator . \nVALUES ?x1 { :m.02r4c7n } \n?x0 :tv.tv_program_creator.programs_created ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_program_creator (JOIN tv.tv_program_creator.programs_created m.02r4c7n))"
        }
    },
    "866": {
        "generations": "what fictional organization has the sub-organization in fiction called mercenaries' guild??",
        "ori_data_item": {
            "qid": 2100793015000,
            "question": "which organization in fiction has the sub-organization of mercenaries' guild?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0b0sy",
                    "entity_name": "multi-national"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_organization",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Organization in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c0b0ms",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Mercenaries' Guild",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_organization.sub_organization_in_fiction",
                        "friendly_name": "Sub-organization in fiction"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x1 { :m.0c0b0ms } \n?x0 :fictional_universe.fictional_organization.sub_organization_in_fiction ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_organization (JOIN fictional_universe.fictional_organization.sub_organization_in_fiction m.0c0b0ms))"
        }
    },
    "867": {
        "generations": "what is the principle type of telescope used in optical telescopes??",
        "ori_data_item": {
            "qid": 2102820004000,
            "question": "an optical telescopes is what type of telescope?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nhc9",
                    "entity_name": "Reflecting telescope"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.telescope_principle_type",
                        "class": "astronomy.telescope_principle_type",
                        "friendly_name": "Telescope principle type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01ngsz",
                        "class": "astronomy.telescope_type",
                        "friendly_name": "optical telescopes",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.telescope_principle_type.telescopic_classifications_of_this_technique",
                        "friendly_name": "Telescopic classifications of this technique"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.telescope_principle_type . \nVALUES ?x1 { :m.01ngsz } \n?x0 :astronomy.telescope_principle_type.telescopic_classifications_of_this_technique ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.telescope_principle_type (JOIN astronomy.telescope_principle_type.telescopic_classifications_of_this_technique m.01ngsz))"
        }
    },
    "868": {
        "generations": "what type of mountain is kilimanjaro??",
        "ori_data_item": {
            "qid": 2101173014000,
            "question": "the extinct ice-clad stratovolcano kilimanjaro in what classification is founded?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015kp7",
                    "entity_name": "Stratovolcano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07_9_",
                    "entity_name": "Volcano"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain_type",
                        "class": "geography.mountain_type",
                        "friendly_name": "Mountain type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01513b",
                        "class": "geography.mountain",
                        "friendly_name": "kilimanjaro",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain_type.mountains_of_this_type",
                        "friendly_name": "Mountains of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain_type . \nVALUES ?x1 { :m.01513b } \n?x0 :geography.mountain_type.mountains_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain_type (JOIN geography.mountain_type.mountains_of_this_type m.01513b))"
        }
    },
    "869": {
        "generations": "what fictional universe includes the organization sacred band of thebes??",
        "ori_data_item": {
            "qid": 2102220012000,
            "question": "the sacred band of thebes organization belongs to which fictional universe?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_wsry",
                    "entity_name": "Sacred Band of Stepsons"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b_tw43",
                    "entity_name": "Thieves' World fictional shared universe"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0ck96kz",
                        "class": "fictional_universe.fictional_organization",
                        "friendly_name": "Sacred Band of Thebes",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.organizations",
                        "friendly_name": "Organizations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_universe . \nVALUES ?x1 { :m.0ck96kz } \n?x0 :fictional_universe.fictional_universe.organizations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_universe (JOIN fictional_universe.fictional_universe.organizations m.0ck96kz))"
        }
    },
    "870": {
        "generations": "what internet protocol is used by secureslice software??",
        "ori_data_item": {
            "qid": 2101155014000,
            "question": "what internet protocols used secureslice as a software?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01bkk6",
                    "entity_name": "Public key infrastructure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.019pps",
                    "entity_name": "Transport Layer Security"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01glxx",
                    "entity_name": "Public key certificate"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.internet_protocol",
                        "class": "computer.internet_protocol",
                        "friendly_name": "Internet Protocol",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.012scwjs",
                        "class": "computer.software",
                        "friendly_name": "SecureSlice",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.internet_protocol.software_used_by",
                        "friendly_name": "Software used by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.internet_protocol . \nVALUES ?x1 { :m.012scwjs } \n?x0 :computer.internet_protocol.software_used_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.internet_protocol (JOIN computer.internet_protocol.software_used_by m.012scwjs))"
        }
    },
    "871": {
        "generations": "how many military persons have the religion of quaker??",
        "ori_data_item": {
            "qid": 2105268015000,
            "question": "how many people in the military follow the quaker religion?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "3"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "military.military_person",
                        "class": "military.military_person",
                        "friendly_name": "Military Person",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.025t7ly",
                        "class": "religion.religion",
                        "friendly_name": "quaker",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.religion",
                        "friendly_name": "Religion"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :military.military_person . \nVALUES ?x1 { :m.025t7ly } \n?x0 :people.person.religion ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(COUNT (AND military.military_person (JOIN people.person.religion m.025t7ly)))"
        }
    },
    "872": {
        "generations": "what is the tropical cyclone category of hurricane julio 2014??",
        "ori_data_item": {
            "qid": 2101744018000,
            "question": "hurricane julio 2014 has which category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xsxhn",
                    "entity_name": "Category 2 Hurricane (SSHS)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.011jsp1n",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "Hurricane Julio 2014",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.tropical_cyclone_category.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x1 { :m.011jsp1n } \n?x0 :meteorology.tropical_cyclone_category.tropical_cyclones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.tropical_cyclone_category (JOIN meteorology.tropical_cyclone_category.tropical_cyclones m.011jsp1n))"
        }
    },
    "873": {
        "generations": "what type of aircraft is the douglas c-47b??",
        "ori_data_item": {
            "qid": 2101496010000,
            "question": "which type of aircraft is douglas c-47b?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hfwtf",
                    "entity_name": "Military transport aircraft"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.aircraft_type",
                        "class": "aviation.aircraft_type",
                        "friendly_name": "Aircraft type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0j5ckz6",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Douglas C-47B",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.aircraft_type.aircraft_of_this_type",
                        "friendly_name": "Aircraft of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_type . \nVALUES ?x1 { :m.0j5ckz6 } \n?x0 :aviation.aircraft_type.aircraft_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.aircraft_type (JOIN aviation.aircraft_type.aircraft_of_this_type m.0j5ckz6))"
        }
    },
    "874": {
        "generations": "what ice hockey conference do the wilkes-barre/scranton penguins belong to??",
        "ori_data_item": {
            "qid": 2101273008000,
            "question": "name the ice hockey conference that has the team named wilkes-barre / scranton penguins",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cnsm9z",
                    "entity_name": "Eastern Conference"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_conference",
                        "class": "ice_hockey.hockey_conference",
                        "friendly_name": "Ice hockey conference",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03nfrr",
                        "class": "ice_hockey.hockey_team",
                        "friendly_name": "wilkes-barre / scranton penguins",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "ice_hockey.hockey_conference.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :ice_hockey.hockey_conference . \nVALUES ?x1 { :m.03nfrr } \n?x0 :ice_hockey.hockey_conference.teams ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "ice_hockey"
            ],
            "s_expression": "(AND ice_hockey.hockey_conference (JOIN ice_hockey.hockey_conference.teams m.03nfrr))"
        }
    },
    "875": {
        "generations": "what basketball division does the samford bulldogs men's basketball team belong to??",
        "ori_data_item": {
            "qid": 2101031004000,
            "question": "the samford bulldogs men's basketball is in what basketball division?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031fsz",
                    "entity_name": "Division I (NCAA)"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "basketball.basketball_division",
                        "class": "basketball.basketball_division",
                        "friendly_name": "Basketball Division",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05gjccn",
                        "class": "basketball.basketball_team",
                        "friendly_name": "Samford Bulldogs men's basketball",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "basketball.basketball_division.teams",
                        "friendly_name": "Teams"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_division . \nVALUES ?x1 { :m.05gjccn } \n?x0 :basketball.basketball_division.teams ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "basketball"
            ],
            "s_expression": "(AND basketball.basketball_division (JOIN basketball.basketball_division.teams m.05gjccn))"
        }
    },
    "876": {
        "generations": "what work of fiction features the events of kama and molin falling in love??",
        "ori_data_item": {
            "qid": 2100165014000,
            "question": "which work of fiction has the events of kama and molin fall in love?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0b06d",
                    "entity_name": "Pillar of Fire"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.work_of_fiction",
                        "class": "fictional_universe.work_of_fiction",
                        "friendly_name": "Work of Fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cp4q2r",
                        "class": "fictional_universe.event_in_fiction",
                        "friendly_name": "Kama and Molin fall in love",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.work_of_fiction.events",
                        "friendly_name": "Events"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.work_of_fiction . \nVALUES ?x1 { :m.0cp4q2r } \n?x0 :fictional_universe.work_of_fiction.events ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.work_of_fiction (JOIN fictional_universe.work_of_fiction.events m.0cp4q2r))"
        }
    },
    "877": {
        "generations": "how many religious practices are shared by both sunni islam and eastern christians??",
        "ori_data_item": {
            "qid": 3204573012000,
            "question": "how many religious practices are there that practices sunni islam and eastern christians?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_practice",
                        "class": "religion.religious_practice",
                        "friendly_name": "Religious Practice",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.078tg",
                        "class": "religion.religion",
                        "friendly_name": "Sunni Islam",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0blk0",
                        "class": "religion.religion",
                        "friendly_name": "eastern christians",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_practice . \nVALUES ?x1 { :m.078tg } \nVALUES ?x2 { :m.0blk0 } \n?x1 :religion.religion.practices ?x0 . \n?x2 :religion.religion.practices ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(COUNT (AND religion.religious_practice (AND (JOIN (R religion.religion.practices) m.078tg) (JOIN (R religion.religion.practices) m.0blk0))))"
        }
    },
    "878": {
        "generations": "what US patent has an international classification of C12N 1500??",
        "ori_data_item": {
            "qid": 2100430000000,
            "question": "what is c12n 1500 classified as around the world?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022qzwl",
                    "entity_name": "Microorganisms having multiple compatible degradative energy-generating plasmids and preparation thereof"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02k7zt0",
                        "class": "law.international_patent_category",
                        "friendly_name": "C12N 1500",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.us_patent.international_classification",
                        "friendly_name": "International Classification"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.us_patent . \nVALUES ?x1 { :m.02k7zt0 } \n?x0 :law.us_patent.international_classification ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.us_patent (JOIN law.us_patent.international_classification m.02k7zt0))"
        }
    },
    "879": {
        "generations": "which lake has a width of less than 0.09??",
        "ori_data_item": {
            "qid": 2101332001000,
            "question": "name the lake that has a maximum width of 0.09.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012hfpl0",
                    "entity_name": "Gibson Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04y86n0",
                    "entity_name": "Jazhinc\u00eb Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r3sfs5",
                    "entity_name": "Cofton reservoir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zl1zl",
                    "entity_name": "Palitsi Reservoir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j9m4mp",
                    "entity_name": "Lake Laka"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.lake",
                        "class": "geography.lake",
                        "friendly_name": "Lake",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0.09^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.09",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.lake.width",
                        "friendly_name": "Max. width"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \nVALUES ?x1 { \"0.09\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :geography.lake.width ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.lake (JOIN geography.lake.width 0.09^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "880": {
        "generations": "what planetary system is associated with the star system 12387 Tomokofujiwara??",
        "ori_data_item": {
            "qid": 2103009013000,
            "question": "what system is 12387 tomokofujiwara?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06p5g",
                    "entity_name": "Solar System"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star_system",
                        "class": "astronomy.star_system",
                        "friendly_name": "Star System",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c416xs",
                        "class": "astronomy.star_system_body",
                        "friendly_name": "12387 Tomokofujiwara",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star_system.planetary_system",
                        "friendly_name": "Planetary system"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star_system . \nVALUES ?x1 { :m.0c416xs } \n?x0 :astronomy.star_system.planetary_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star_system (JOIN astronomy.star_system.planetary_system m.0c416xs))"
        }
    },
    "881": {
        "generations": "who is the coach of an ice hockey team??",
        "ori_data_item": {
            "qid": 2101227023000,
            "question": "who were some coaches who specialized in icehockey?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02_qmx",
                    "entity_name": "Gerard Gallant"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06frpk",
                    "entity_name": "Dan Bylsma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_gy5hn",
                    "entity_name": "Ken Tyler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w1ft28",
                    "entity_name": "George Hardy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wzr75y",
                    "entity_name": "Andrew Allen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yns1x2",
                    "entity_name": "Dave Smith"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yql01g",
                    "entity_name": "Terry Ewasiuk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010qs4qv",
                    "entity_name": "Craig Bonner"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010lyhcv",
                    "entity_name": "Tom Pokel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0114n423",
                    "entity_name": "Mike Gilligan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0wxvt_b",
                    "entity_name": "Greg Walters"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_x8zc9",
                    "entity_name": "Andr\u00e9 Tourigny"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08cq_l",
                    "entity_name": "Jim Paek"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010wltmv",
                    "entity_name": "Mike Sertich"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_v2snk",
                    "entity_name": "Lee Davidson"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7p_m4",
                    "entity_name": "Mike Corbett"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ynzr7y",
                    "entity_name": "Scott Carter"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0yymsvz",
                    "entity_name": "Peter Horachek"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yjf8",
                    "entity_name": "Ted Nolan"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_team_coach",
                        "class": "sports.sports_team_coach",
                        "friendly_name": "Sports team coach",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03tmr",
                        "class": "sports.sport",
                        "friendly_name": "icehockey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_team_coach.sports_coached",
                        "friendly_name": "Sports coached"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_team_coach . \nVALUES ?x1 { :m.03tmr } \n?x0 :sports.sports_team_coach.sports_coached ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_team_coach (JOIN sports.sports_team_coach.sports_coached m.03tmr))"
        }
    },
    "882": {
        "generations": "what star system includes the star \u03b1 Herculis Bb??",
        "ori_data_item": {
            "qid": 2100567009000,
            "question": "what is \u03b1 herculis bb's star system?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n7vy",
                    "entity_name": "Alpha Herculis"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star_system",
                        "class": "astronomy.star_system",
                        "friendly_name": "Star System",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0x0n80f",
                        "class": "astronomy.star",
                        "friendly_name": "\u03b1 Herculis Bb",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.star_system.stars",
                        "friendly_name": "Stars"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star_system . \nVALUES ?x1 { :m.0x0n80f } \n?x0 :astronomy.star_system.stars ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(AND astronomy.star_system (JOIN astronomy.star_system.stars m.0x0n80f))"
        }
    },
    "883": {
        "generations": "How many travel accommodations have the feature of wifi hotspot??",
        "ori_data_item": {
            "qid": 3202334005000,
            "question": "how many hotels feature the accommodation of wifi hotspot?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "3"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "travel.accommodation_feature",
                        "class": "travel.accommodation_feature",
                        "friendly_name": "Accommodation feature",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.hotel",
                        "class": "travel.hotel",
                        "friendly_name": "Hotel",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.042jwv",
                        "class": "travel.accommodation_feature",
                        "friendly_name": "wifi hotspot",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.accommodation.features",
                        "friendly_name": "Features"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "travel.accommodation.features",
                        "friendly_name": "Features"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :travel.accommodation_feature . \n?x1 :type.object.type :travel.hotel . \nVALUES ?x2 { :m.042jwv } \n?x1 :travel.accommodation.features ?x0 . \n?x1 :travel.accommodation.features ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel"
            ],
            "s_expression": "(COUNT (AND travel.accommodation_feature (JOIN (R travel.accommodation.features) (JOIN travel.accommodation.features m.042jwv))))"
        }
    },
    "884": {
        "generations": "what TV subject is featured in Rescued Nation TV??",
        "ori_data_item": {
            "qid": 2102812007000,
            "question": "what topics does the tv show rescued nation tv cover?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fwx6k",
                    "entity_name": "Youth ministry"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tv.tv_subject",
                        "class": "tv.tv_subject",
                        "friendly_name": "TV subject",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gj5q1r",
                        "class": "tv.tv_program",
                        "friendly_name": "Rescued Nation TV",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tv.tv_subject.tv_programs",
                        "friendly_name": "TV programs"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_subject . \nVALUES ?x1 { :m.0gj5q1r } \n?x0 :tv.tv_subject.tv_programs ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tv"
            ],
            "s_expression": "(AND tv.tv_subject (JOIN tv.tv_subject.tv_programs m.0gj5q1r))"
        }
    },
    "885": {
        "generations": "what is the integer value of the odi stumps for cricket player devon thomas??",
        "ori_data_item": {
            "qid": 2103295004000,
            "question": "what are the odi stumps for devon thomas?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "6",
                    "entity_name": "null"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "type.int",
                        "class": "type.int",
                        "friendly_name": "Integer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07s3h5y",
                        "class": "cricket.cricket_player",
                        "friendly_name": "Devon Thomas",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "cricket.cricket_player.odi_stumps",
                        "friendly_name": "ODI Stumps"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \nVALUES ?x1 { :m.07s3h5y } \n?x1 :cricket.cricket_player.odi_stumps ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND type.int (JOIN (R cricket.cricket_player.odi_stumps) m.07s3h5y))"
        }
    },
    "886": {
        "generations": "what is the status of the website http://www.mjesales.com??",
        "ori_data_item": {
            "qid": 2101024007000,
            "question": "http://www.mjesales.com site has what status?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02hsn4g",
                    "entity_name": "Active"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.website_status",
                        "class": "internet.website_status",
                        "friendly_name": "Website Status",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03bn3db",
                        "class": "internet.website",
                        "friendly_name": "Http://www.mjesales.com",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.website_status.sites",
                        "friendly_name": "Sites"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.website_status . \nVALUES ?x1 { :m.03bn3db } \n?x0 :internet.website_status.sites ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.website_status (JOIN internet.website_status.sites m.03bn3db))"
        }
    },
    "887": {
        "generations": "which film editor weighs at least 74.8 kg??",
        "ori_data_item": {
            "qid": 2104958016000,
            "question": "list all film editor that weigh over 74.8",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06t3gt",
                    "entity_name": "Lukas Ridgeston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m8_v",
                    "entity_name": "Jean-Claude Van Damme"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nwwqf",
                    "entity_name": "Jake Deckard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05l99lg",
                    "entity_name": "Owen Hawk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dpjxx",
                    "entity_name": "Ray Dragon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffgh",
                    "entity_name": "R. Kelly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j41f",
                    "entity_name": "Randy Couture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039q_4",
                    "entity_name": "James Beattie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07tq_m",
                    "entity_name": "Miguel P\u00e9rez"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h55p54",
                    "entity_name": "\u00c1lvaro Jordan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047ccs3",
                    "entity_name": "Russell White"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dj2_",
                    "entity_name": "Jeff Williams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbzqpx",
                    "entity_name": "Arsen Sargsyan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bd5ld",
                    "entity_name": "Bryan Shelton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080p9nh",
                    "entity_name": "Adam White"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwjlr2",
                    "entity_name": "David Gamble"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h68sw0",
                    "entity_name": "Christian Pena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qkvqr",
                    "entity_name": "Alex Sanders"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mdd5",
                    "entity_name": "Ra\u00fcl L\u00f3pez"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08z0yh7",
                    "entity_name": "Craig Richards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbgsj",
                    "entity_name": "Chris Kelly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q4f4",
                    "entity_name": "Kevin Willis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027nzt8",
                    "entity_name": "Irakli Chkhikvadze"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bpgwc",
                    "entity_name": "Brian Lawrence"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0332_f",
                    "entity_name": "Terry Funk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dcjd",
                    "entity_name": "Mike Shaw"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.editor",
                        "class": "film.editor",
                        "friendly_name": "Film editor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "74.8^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "74.8",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.editor . \nFILTER (?x1 >= \"74.8\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND film.editor (ge people.person.weight_kg 74.8^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "888": {
        "generations": "what is the parent method of resource reservation (scheduled) packet-mode protocols in channel access method engineering??",
        "ori_data_item": {
            "qid": 2101111001000,
            "question": "what is the parent method of resource reservation (scheduled) packet-mode protocols?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03d5x9w",
                    "entity_name": "Reservation ALOHA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y8_rk",
                    "entity_name": "Dynamic time division multiple access"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05y8_rw",
                    "entity_name": "Packet reservation multiple access"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.channel_access_method",
                        "class": "engineering.channel_access_method",
                        "friendly_name": "Channel access method",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05y8dl7",
                        "class": "engineering.channel_access_method",
                        "friendly_name": "Resource reservation (scheduled) packet-mode protocols",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.channel_access_method.parent_method",
                        "friendly_name": "Parent method"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.channel_access_method . \nVALUES ?x1 { :m.05y8dl7 } \n?x0 :engineering.channel_access_method.parent_method ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.channel_access_method (JOIN engineering.channel_access_method.parent_method m.05y8dl7))"
        }
    },
    "889": {
        "generations": "what type of distilled spirit is made from corn and aged for at most 8 years??",
        "ori_data_item": {
            "qid": 4302524012000,
            "question": "which is the type of distilled spirit uses corn and is fermented up to 8 years?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01p5b6",
                    "entity_name": "Rye whiskey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c59y",
                    "entity_name": "Bourbon whiskey"
                }
            ],
            "function": "<=",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit_type",
                        "class": "distilled_spirits.distilled_spirit_type",
                        "friendly_name": "Distilled spirit type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.053wn",
                        "class": "distilled_spirits.fermentation_base",
                        "friendly_name": "corn",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit",
                        "class": "distilled_spirits.distilled_spirit",
                        "friendly_name": "Distilled spirit",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "literal",
                        "id": "8^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "8",
                        "question_node": 0,
                        "function": "<="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.distilled_spirit_type.fermentation_base",
                        "friendly_name": "Fermentation base"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "distilled_spirits.distilled_spirit_type.spirits",
                        "friendly_name": "Spirits of this type"
                    },
                    {
                        "start": 2,
                        "end": 3,
                        "relation": "distilled_spirits.distilled_spirit.age",
                        "friendly_name": "Age statement"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit_type . \nVALUES ?x1 { :m.053wn } \n?x2 :type.object.type :distilled_spirits.distilled_spirit . \nFILTER (?x3 <= \"8\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :distilled_spirits.distilled_spirit_type.fermentation_base ?x1 . \n?x0 :distilled_spirits.distilled_spirit_type.spirits ?x2 . \n?x2 :distilled_spirits.distilled_spirit.age ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit_type (AND (JOIN distilled_spirits.distilled_spirit_type.fermentation_base m.053wn) (JOIN distilled_spirits.distilled_spirit_type.spirits (le distilled_spirits.distilled_spirit.age 8^^http://www.w3.org/2001/XMLSchema#integer))))"
        }
    },
    "890": {
        "generations": "which camera sensor manufacturer produces sensors for lumix lx5 cameras??",
        "ori_data_item": {
            "qid": 2100259017000,
            "question": "who manufactures the camera sensor for lumix lx5?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0nk5b",
                    "entity_name": "Panasonic Corporation"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "digicams.camera_sensor_manufacturer",
                        "class": "digicams.camera_sensor_manufacturer",
                        "friendly_name": "Camera Sensor Manufacturer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0fqs3jf",
                        "class": "digicams.digital_camera",
                        "friendly_name": "lumix lx5",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "digicams.camera_sensor_manufacturer.cameras",
                        "friendly_name": "Cameras"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_sensor_manufacturer . \nVALUES ?x1 { :m.0fqs3jf } \n?x0 :digicams.camera_sensor_manufacturer.cameras ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "digicams"
            ],
            "s_expression": "(AND digicams.camera_sensor_manufacturer (JOIN digicams.camera_sensor_manufacturer.cameras m.0fqs3jf))"
        }
    },
    "891": {
        "generations": "what are the subtypes of jaspillite in geology rock type??",
        "ori_data_item": {
            "qid": 2100640006000,
            "question": "what rock contains a subtype of jaspillite?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c37g",
                    "entity_name": "Sedimentary rock"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geology.rock_type",
                        "class": "geology.rock_type",
                        "friendly_name": "Rock type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09cbkg",
                        "class": "geology.rock_type",
                        "friendly_name": "Jaspillite",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geology.rock_type.sub_types",
                        "friendly_name": "Sub-types"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geology.rock_type . \nVALUES ?x1 { :m.09cbkg } \n?x0 :geology.rock_type.sub_types ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geology"
            ],
            "s_expression": "(AND geology.rock_type (JOIN geology.rock_type.sub_types m.09cbkg))"
        }
    },
    "892": {
        "generations": "which top level domain registry manages domains with the extension \"de\"??",
        "ori_data_item": {
            "qid": 2101474013000,
            "question": "which domain registry is de registered to?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051gwf",
                    "entity_name": "DENIC"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.top_level_domain_registry",
                        "class": "internet.top_level_domain_registry",
                        "friendly_name": "Top Level Domain Registry",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.035crr",
                        "class": "internet.top_level_domain",
                        "friendly_name": "de",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.top_level_domain_registry.domains",
                        "friendly_name": "Domains Registered"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.top_level_domain_registry . \nVALUES ?x1 { :m.035crr } \n?x0 :internet.top_level_domain_registry.domains ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.top_level_domain_registry (JOIN internet.top_level_domain_registry.domains m.035crr))"
        }
    },
    "893": {
        "generations": "what drug formulation can be administered through the intralymphatic route??",
        "ori_data_item": {
            "qid": 2102821015000,
            "question": "what is the drug formulation for the route of administration intralymphatic?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hqs7fl",
                    "entity_name": "Ethiodized oil 475 injection"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.drug_formulation",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Drug formulation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hqy785",
                        "class": "medicine.drug_administration_route",
                        "friendly_name": "Intralymphatic",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.drug_formulation.routes",
                        "friendly_name": "Routes of administration"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.drug_formulation . \nVALUES ?x1 { :m.0hqy785 } \n?x0 :medicine.drug_formulation.routes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.drug_formulation (JOIN medicine.drug_formulation.routes m.0hqy785))"
        }
    },
    "894": {
        "generations": "which film editor weighs at least 79.0 kg??",
        "ori_data_item": {
            "qid": 2104958006000,
            "question": "name all the film editors who weigh more than 79.0",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06t3gt",
                    "entity_name": "Lukas Ridgeston"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0m8_v",
                    "entity_name": "Jean-Claude Van Damme"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03nwwqf",
                    "entity_name": "Jake Deckard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0dpjxx",
                    "entity_name": "Ray Dragon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ffgh",
                    "entity_name": "R. Kelly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04j41f",
                    "entity_name": "Randy Couture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039q_4",
                    "entity_name": "James Beattie"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07tq_m",
                    "entity_name": "Miguel P\u00e9rez"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047ccs3",
                    "entity_name": "Russell White"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04dj2_",
                    "entity_name": "Jeff Williams"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bd5ld",
                    "entity_name": "Bryan Shelton"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080p9nh",
                    "entity_name": "Adam White"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bwjlr2",
                    "entity_name": "David Gamble"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qkvqr",
                    "entity_name": "Alex Sanders"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04mdd5",
                    "entity_name": "Ra\u00fcl L\u00f3pez"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08z0yh7",
                    "entity_name": "Craig Richards"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bbgsj",
                    "entity_name": "Chris Kelly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q4f4",
                    "entity_name": "Kevin Willis"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027nzt8",
                    "entity_name": "Irakli Chkhikvadze"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bpgwc",
                    "entity_name": "Brian Lawrence"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0332_f",
                    "entity_name": "Terry Funk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07dcjd",
                    "entity_name": "Mike Shaw"
                }
            ],
            "function": ">=",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.editor",
                        "class": "film.editor",
                        "friendly_name": "Film editor",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "79.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "79.0",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.weight_kg",
                        "friendly_name": "Weight"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.editor . \nFILTER (?x1 >= \"79.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND film.editor (ge people.person.weight_kg 79.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "895": {
        "generations": "what coaching position did the coach of the arkansas-pine bluff golden lions football team hold??",
        "ori_data_item": {
            "qid": 3200464000000,
            "question": "what are the coaching positions of the arkansas\u2013pine bluff golden lions football?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02md_2",
                    "entity_name": "Head coach"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.coaching_position",
                        "class": "sports.coaching_position",
                        "friendly_name": "Coaching position",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.sports_team_coach_tenure",
                        "class": "sports.sports_team_coach_tenure",
                        "friendly_name": "Sports team coach tenure",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0gjd0vp",
                        "class": "american_football.football_team",
                        "friendly_name": "Arkansas\u2013Pine Bluff Golden Lions football",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "sports.sports_team_coach_tenure.position",
                        "friendly_name": "Position"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "sports.sports_team_coach_tenure.team",
                        "friendly_name": "Team"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.coaching_position . \n?x1 :type.object.type :sports.sports_team_coach_tenure . \nVALUES ?x2 { :m.0gjd0vp } \n?x1 :sports.sports_team_coach_tenure.position ?x0 . \n?x1 :sports.sports_team_coach_tenure.team ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.coaching_position (JOIN (R sports.sports_team_coach_tenure.position) (JOIN sports.sports_team_coach_tenure.team m.0gjd0vp)))"
        }
    },
    "896": {
        "generations": "who was the engineer for the musical release \"Very Together\"??",
        "ori_data_item": {
            "qid": 2100193015000,
            "question": "what is the name of the recording engineer that released very together?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03hs8sh",
                    "entity_name": "Jeffrey Kawalek"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.engineer",
                        "class": "music.engineer",
                        "friendly_name": "Recording Engineer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03999ct",
                        "class": "music.release",
                        "friendly_name": "Very Together",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.engineer.releases_engineered",
                        "friendly_name": "Releases engineered"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.engineer . \nVALUES ?x1 { :m.03999ct } \n?x0 :music.engineer.releases_engineered ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.engineer (JOIN music.engineer.releases_engineered m.03999ct))"
        }
    },
    "897": {
        "generations": "what rocket fuel is used in rockets with at least 3 stages??",
        "ori_data_item": {
            "qid": 3206388000000,
            "question": "for the rocket which has no less than 3 stages, what is the fuel that it uses?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01tm_5",
                    "entity_name": "Liquid oxygen"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g0nz",
                    "entity_name": "Liquid hydrogen"
                }
            ],
            "function": ">=",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket_fuel",
                        "class": "spaceflight.rocket_fuel",
                        "friendly_name": "Rocket Fuel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "spaceflight.rocket_stage",
                        "class": "spaceflight.rocket_stage",
                        "friendly_name": "Rocket Stage",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "3^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "3",
                        "question_node": 0,
                        "function": ">="
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket_fuel.rocket_stages",
                        "friendly_name": "Rockets"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "spaceflight.rocket_stage.stage_number",
                        "friendly_name": "Stage Number"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_fuel . \n?x1 :type.object.type :spaceflight.rocket_stage . \nFILTER (?x2 >= \"3\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :spaceflight.rocket_fuel.rocket_stages ?x1 . \n?x1 :spaceflight.rocket_stage.stage_number ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket_fuel (JOIN spaceflight.rocket_fuel.rocket_stages (ge spaceflight.rocket_stage.stage_number 3^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "898": {
        "generations": "what recurring award ceremony has the most recent date of final occurrence??",
        "ori_data_item": {
            "qid": 2103588001000,
            "question": "the latest final occurrence was on which recurring award ceremony?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0znmc9_",
                    "entity_name": "The Golden Globe Awards Ceremony"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "award.recurring_award_ceremony",
                        "class": "award.recurring_award_ceremony",
                        "friendly_name": "Recurring award ceremony",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.recurring_event.date_of_final_occurance",
                        "friendly_name": "Date of final occurrence"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :award.recurring_award_ceremony . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :award.recurring_award_ceremony . \n?y0 :time.recurring_event.date_of_final_occurance ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.recurring_event.date_of_final_occurance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMAX award.recurring_award_ceremony time.recurring_event.date_of_final_occurance)"
        }
    },
    "899": {
        "generations": "which musical genre has artists that include DJ Ras Cue as a supporting artist??",
        "ori_data_item": {
            "qid": 3205244013000,
            "question": "what genre of music does the artist and supporting artist dj ras cue play?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glt670",
                    "entity_name": "Hip hop music"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.genre",
                        "class": "music.genre",
                        "friendly_name": "Musical genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.artist",
                        "class": "music.artist",
                        "friendly_name": "Musical Artist",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0g9nbxz",
                        "class": "music.group_member",
                        "friendly_name": "DJ Ras Cue",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.genre.artists",
                        "friendly_name": "Artists"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.artist.supporting_artists",
                        "friendly_name": "Supporting artists"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.genre . \n?x1 :type.object.type :music.artist . \nVALUES ?x2 { :m.0g9nbxz } \n?x0 :music.genre.artists ?x1 . \n?x1 :music.artist.supporting_artists ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.genre (JOIN music.genre.artists (JOIN music.artist.supporting_artists m.0g9nbxz)))"
        }
    },
    "900": {
        "generations": "which music release credits mad professor as a producer??",
        "ori_data_item": {
            "qid": 2100614007000,
            "question": "mad professor was the producer of which musical production release?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0329yng",
                    "entity_name": "Buppie Culture"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037jt05",
                    "entity_name": "Black Liberation Dub, Chapter 4: Under the Spell of Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.037yw8d",
                    "entity_name": "Dub Me Crazy, Part 9: Science and the Wichdoctor"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.038y9wf",
                    "entity_name": "Dub Me Crazy, Part 7: Adventures of a Dub Sampler"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034l1qf",
                    "entity_name": "Black Liberation Dub, Chapter 2: Anti-Racist Dub Broadcast"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.032fy6n",
                    "entity_name": "Dub Me Crazy, Part 8: Experiments of the Aural Kind"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036x08d",
                    "entity_name": "Dub Me Crazy, Part 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bfkpph",
                    "entity_name": "Song Yet to Be Sung"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.033ysns",
                    "entity_name": "Dub Me Crazy, Part 4: Escape to the Asylum Of Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.031zr3k",
                    "entity_name": "Dub Me Crazy, Part 12: Dub Maniacs on the Rampage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0343266",
                    "entity_name": "Dub Me Crazy, Part 5: Who Knows the Secret of the Master Tape?"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.034lyxb",
                    "entity_name": "Dub Me Crazy, Part 10: Psychedelic Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036kmxy",
                    "entity_name": "Dub Me Crazy Part 11: Hi-Jacked To Xaymaca (Jamaica)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.036g_1k",
                    "entity_name": "Dub Me Crazy, Part 6: Schizophrenic Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039y6s6",
                    "entity_name": "Dub Me Crazy, Part 3: The African Connection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.033yg38",
                    "entity_name": "Black Liberation Dub, Chapter 5: Afrocentric Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.030_sf0",
                    "entity_name": "Black Liberation Dub, Chapter 1"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.039h_z4",
                    "entity_name": "Dub Me Crazy, Part 2: Beyond The Realm Of Dub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0367gbg",
                    "entity_name": "Black Liberation Dub, Chapter 3: Evolution of Dub"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.release",
                        "class": "music.release",
                        "friendly_name": "Musical Release",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05qn7l",
                        "class": "music.producer",
                        "friendly_name": "Mad Professor",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.release.producers",
                        "friendly_name": "Producers"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \nVALUES ?x1 { :m.05qn7l } \n?x0 :music.release.producers ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.release (JOIN music.release.producers m.05qn7l))"
        }
    },
    "901": {
        "generations": "which cricket roster has john buchanan as the coach??",
        "ori_data_item": {
            "qid": 2102666005000,
            "question": "john buchanan is the coach for which cricket roster?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02k88b0",
                    "entity_name": "Ashes 2005, First Test, First Inning, Australia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cricket.cricket_roster",
                        "class": "cricket.cricket_roster",
                        "friendly_name": "Cricket Roster",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07c7cb",
                        "class": "cricket.cricket_coach",
                        "friendly_name": "John Buchanan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "cricket.cricket_roster.coach",
                        "friendly_name": "Coach"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cricket.cricket_roster . \nVALUES ?x1 { :m.07c7cb } \n?x0 :cricket.cricket_roster.coach ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "cricket"
            ],
            "s_expression": "(AND cricket.cricket_roster (JOIN cricket.cricket_roster.coach m.07c7cb))"
        }
    },
    "902": {
        "generations": "what aviation airliner accident was caused by an aircraft upset??",
        "ori_data_item": {
            "qid": 2101312000000,
            "question": "aircraft upset is a type of what aviation incident?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b6d0zb",
                    "entity_name": "Northwest Airlines Flight 705"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zc06ps",
                    "entity_name": "United Airlines Flight 2885"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cb79t",
                        "class": "aviation.accident_type",
                        "friendly_name": "Aircraft upset",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.accident_type",
                        "friendly_name": "Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \nVALUES ?x1 { :m.0cb79t } \n?x0 :aviation.airliner_accident.accident_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (JOIN aviation.airliner_accident.accident_type m.0cb79t))"
        }
    },
    "903": {
        "generations": "which comic book inker worked on chapter four: who benefits??",
        "ori_data_item": {
            "qid": 2102948011000,
            "question": "chapter four: who benefits was inked by what comic book inker?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fr898",
                    "entity_name": "Michael Bair"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_inker",
                        "class": "comic_books.comic_book_inker",
                        "friendly_name": "Comic Book Inker",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.04cq2b8",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Chapter Four: Who Benefits",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_inker.comic_books_inked",
                        "friendly_name": "Comic Stories Inked"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_inker . \nVALUES ?x1 { :m.04cq2b8 } \n?x0 :comic_books.comic_book_inker.comic_books_inked ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_inker (JOIN comic_books.comic_book_inker.comic_books_inked m.04cq2b8))"
        }
    },
    "904": {
        "generations": "which magazine issue features artwork by don maitz on the cover??",
        "ori_data_item": {
            "qid": 2102689016000,
            "question": "in what magazine did cover artist, don maitz appear?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hnw7jk",
                    "entity_name": "Realms of Fantasy, April 1997"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hj0rgs",
                    "entity_name": "The Magazine of Fantasy & Science Fiction, January 1983"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hnw7fh",
                    "entity_name": "Realms of Fantasy, August 1995"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j1tr2q",
                    "entity_name": "Science Fiction Review, February 1992"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j1tr2t",
                    "entity_name": "Science Fiction Review, March 1992"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.magazine_issue",
                        "class": "book.magazine_issue",
                        "friendly_name": "Magazine Issue",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0g04q9",
                        "class": "book.illustrator",
                        "friendly_name": "Don Maitz",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.magazine_issue.cover_artist",
                        "friendly_name": "Cover artist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_issue . \nVALUES ?x1 { :m.0g04q9 } \n?x0 :book.magazine_issue.cover_artist ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.magazine_issue (JOIN book.magazine_issue.cover_artist m.0g04q9))"
        }
    },
    "905": {
        "generations": "which mountain has a prominence of 533.0 or more??",
        "ori_data_item": {
            "qid": 2101210012000,
            "question": "what mountain's prominence is 533.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0275ftp",
                    "entity_name": "Kearsarge North"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03lxpw",
                    "entity_name": "High Willhays"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05c2p3p",
                    "entity_name": "Mont Raimeux"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01sz1z",
                    "entity_name": "Buachaille Etive M\u00f2r"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ct8wb",
                    "entity_name": "K\u00e4rpf"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cxqp_",
                    "entity_name": "Mount Heber"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "533.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "533.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.prominence",
                        "friendly_name": "Prominence"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { \"533.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :geography.mountain.prominence ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.prominence 533.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "906": {
        "generations": "which distilled spirit is produced by the balvenie distillery??",
        "ori_data_item": {
            "qid": 2101561003000,
            "question": "balvenie distillery is which distilled spirit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046d63w",
                    "entity_name": "Balvenie Single Barrel"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.046d644",
                    "entity_name": "Balvenie Founder\u2019s Reserve"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05g8_2n",
                    "entity_name": "Balvenie DoubleWood"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "distilled_spirits.distilled_spirit",
                        "class": "distilled_spirits.distilled_spirit",
                        "friendly_name": "Distilled spirit",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.041dq7",
                        "class": "distilled_spirits.distillery",
                        "friendly_name": "Balvenie distillery",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "distilled_spirits.distilled_spirit.distillery",
                        "friendly_name": "Distillery"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :distilled_spirits.distilled_spirit . \nVALUES ?x1 { :m.041dq7 } \n?x0 :distilled_spirits.distilled_spirit.distillery ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "distilled_spirits"
            ],
            "s_expression": "(AND distilled_spirits.distilled_spirit (JOIN distilled_spirits.distilled_spirit.distillery m.041dq7))"
        }
    },
    "907": {
        "generations": "which museum was founded by St. George's School, Cologne and is a tourist attraction??",
        "ori_data_item": {
            "qid": 3205477007000,
            "question": "which are the tourist attractions in the travel destination at which st. george's school, cologne is founded?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g5pqtt",
                    "entity_name": "K\u00e4the Kollwitz Museum"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "architecture.museum",
                        "class": "architecture.museum",
                        "friendly_name": "Museum",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "travel.travel_destination",
                        "class": "travel.travel_destination",
                        "friendly_name": "Travel destination",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03cb98r",
                        "class": "education.school",
                        "friendly_name": "St. George's School, Cologne",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "travel.travel_destination.tourist_attractions",
                        "friendly_name": "Tourist attractions"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "organization.organization.place_founded",
                        "friendly_name": "Place founded"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.museum . \n?x1 :type.object.type :travel.travel_destination . \nVALUES ?x2 { :m.03cb98r } \n?x1 :travel.travel_destination.tourist_attractions ?x0 . \n?x2 :organization.organization.place_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "travel",
                "organization"
            ],
            "s_expression": "(AND architecture.museum (JOIN (R travel.travel_destination.tourist_attractions) (JOIN (R organization.organization.place_founded) m.03cb98r)))"
        }
    },
    "908": {
        "generations": "what is the collective term for adherents of a religion that is part of hanbali??",
        "ori_data_item": {
            "qid": 3201680019000,
            "question": "a religion that is part of hanbali has what adherents?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t80c7",
                    "entity_name": "Sunnis"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.adherents",
                        "class": "religion.adherents",
                        "friendly_name": "Adherents",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01g1p2",
                        "class": "religion.religion",
                        "friendly_name": "Hanbali",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.collective_term_for_adherents",
                        "friendly_name": "Adherents"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "religion.religion.is_part_of",
                        "friendly_name": "Is Part Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.adherents . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.01g1p2 } \n?x1 :religion.religion.collective_term_for_adherents ?x0 . \n?x2 :religion.religion.is_part_of ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.adherents (JOIN (R religion.religion.collective_term_for_adherents) (JOIN (R religion.religion.is_part_of) m.01g1p2)))"
        }
    },
    "909": {
        "generations": "what ingredients are more general than macadamias??",
        "ori_data_item": {
            "qid": 2101891010000,
            "question": "macadamias is made up of what ingredient?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012h8tld",
                    "entity_name": "Macadamia Nuts Raw"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.ingredient",
                        "class": "food.ingredient",
                        "friendly_name": "Ingredient",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01szt7",
                        "class": "food.ingredient",
                        "friendly_name": "macadamias",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.ingredient.more_general_ingredient",
                        "friendly_name": "More general ingredient"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.ingredient . \nVALUES ?x1 { :m.01szt7 } \n?x0 :food.ingredient.more_general_ingredient ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.ingredient (JOIN food.ingredient.more_general_ingredient m.01szt7))"
        }
    },
    "910": {
        "generations": "what occupation is shared by both fenton crackshell and bruce irvin in fictional universe??",
        "ori_data_item": {
            "qid": 3205047006000,
            "question": "fenton crackshell and bruce irvin have what character occupation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012q9c",
                    "entity_name": "Bodyguard"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_occupation",
                        "class": "fictional_universe.character_occupation",
                        "friendly_name": "Character Occupation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0wz49wj",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fenton Crackshell",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "g.1236mts4",
                        "class": "cvg.game_character",
                        "friendly_name": "Bruce Irvin",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "fictional_universe.fictional_character.occupation",
                        "friendly_name": "Occupation"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x1 { :m.0wz49wj } \nVALUES ?x2 { :g.1236mts4 } \n?x1 :fictional_universe.fictional_character.occupation ?x0 . \n?x2 :fictional_universe.fictional_character.occupation ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_occupation (AND (JOIN (R fictional_universe.fictional_character.occupation) m.0wz49wj) (JOIN (R fictional_universe.fictional_character.occupation) g.1236mts4)))"
        }
    },
    "911": {
        "generations": "which soccer/football match had Mike Pickel as an assistant referee??",
        "ori_data_item": {
            "qid": 2103014007000,
            "question": "for what football matches has mike pickel been the assistant referee?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c0lsl8",
                    "entity_name": "2010 FIFA World Cup Group B - ARG ./. NGA"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1smtg",
                    "entity_name": "2010 FIFA World Cup Round of 16 - URU ./. KOR"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c44msp",
                    "entity_name": "2010 FIFA World Cup Group  C - SLO ./. ENG"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "soccer.football_match",
                        "class": "soccer.football_match",
                        "friendly_name": "Football Match",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c0lstr",
                        "class": "soccer.football_referee",
                        "friendly_name": "Mike Pickel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "soccer.football_match.assistant_referees",
                        "friendly_name": "Assistant Referees"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :soccer.football_match . \nVALUES ?x1 { :m.0c0lstr } \n?x0 :soccer.football_match.assistant_referees ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "soccer"
            ],
            "s_expression": "(AND soccer.football_match (JOIN soccer.football_match.assistant_referees m.0c0lstr))"
        }
    },
    "912": {
        "generations": "which TV channels were broadcasting in August 2009??",
        "ori_data_item": {
            "qid": 2102470013000,
            "question": "which tv channel began on 2009-08?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bs99cb",
                    "entity_name": "Kix"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zlm54",
                    "entity_name": "Ahlebait TV"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06zqgp6",
                    "entity_name": "Fox Retro"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.076_0rh",
                    "entity_name": "FARSI1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "broadcast.tv_channel",
                        "class": "broadcast.tv_channel",
                        "friendly_name": "TV Channel",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2009-08^^http://www.w3.org/2001/XMLSchema#gYearMonth",
                        "class": "type.datetime",
                        "friendly_name": "2009-08",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "broadcast.tv_channel.from",
                        "friendly_name": "From"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :broadcast.tv_channel . \nVALUES ?x1 { \"2009-08-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYearMonth> } \n?x0 :broadcast.tv_channel.from ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "broadcast"
            ],
            "s_expression": "(AND broadcast.tv_channel (JOIN broadcast.tv_channel.from 2009-08^^http://www.w3.org/2001/XMLSchema#gYearMonth))"
        }
    },
    "913": {
        "generations": "what programming language that was influenced by microsoft corporation and introduced the latest??",
        "ori_data_item": {
            "qid": 4303199005000,
            "question": "what was the programming language first introduced by microsoft corporation which was influenced by another language?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sbkfb",
                    "entity_name": "Java"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.060kv",
                    "entity_name": "PHP"
                }
            ],
            "function": "argmin",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "computer.programming_language",
                        "class": "computer.programming_language",
                        "friendly_name": "Programming Language",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.04sv4",
                        "class": "computer.programming_language_developer",
                        "friendly_name": "Microsoft Corporation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "computer.programming_language.influenced",
                        "friendly_name": "Influenced"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "computer.programming_language.introduced",
                        "friendly_name": "Introduced"
                    },
                    {
                        "start": 3,
                        "end": 1,
                        "relation": "computer.programming_language_developer.programming_languages_developed",
                        "friendly_name": "Programming Languages Developed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language . \n?x1 :type.object.type :computer.programming_language . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :computer.programming_language . \n?y1 :type.object.type :computer.programming_language . \nVALUES ?y3 { :m.04sv4 } \n?y1 :computer.programming_language.influenced ?y0 . \n?y0 :computer.programming_language.introduced ?y2 . \n?y3 :computer.programming_language_developer.programming_languages_developed ?y1 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\nVALUES ?x3 { :m.04sv4 } \n?x1 :computer.programming_language.influenced ?x0 . \n?x0 :computer.programming_language.introduced ?x2 . \n?x3 :computer.programming_language_developer.programming_languages_developed ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(ARGMIN (AND computer.programming_language (JOIN (R computer.programming_language.influenced) (JOIN (R computer.programming_language_developer.programming_languages_developed) m.04sv4))) computer.programming_language.introduced)"
        }
    },
    "914": {
        "generations": "which airliner accident involved a Lockheed L-188 Electra aircraft with more than 80 passengers onboard??",
        "ori_data_item": {
            "qid": 4302942004000,
            "question": "which aviation accidents of aircraft lockheed l-188 electra has involved more than 80 passengers?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06pfyy",
                    "entity_name": "1995 Trans Service Airlift Electra crash"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fckrb",
                    "entity_name": "LANSA Flight 508"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0f7ysv",
                    "entity_name": "LANSA Flight 502"
                }
            ],
            "function": ">",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airliner_accident",
                        "class": "aviation.airliner_accident",
                        "friendly_name": "Aviation incident",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "aviation.aviation_incident_aircraft_relationship",
                        "class": "aviation.aviation_incident_aircraft_relationship",
                        "friendly_name": "Aviation incident/aircraft relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "80^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "80",
                        "question_node": 0,
                        "function": ">"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.02gkct",
                        "class": "aviation.aircraft_model",
                        "friendly_name": "Lockheed L-188 Electra",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airliner_accident.aircraft",
                        "friendly_name": "Aircraft"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "aviation.aviation_incident_aircraft_relationship.passengers",
                        "friendly_name": "Passengers"
                    },
                    {
                        "start": 3,
                        "end": 0,
                        "relation": "aviation.aircraft_model.accidents",
                        "friendly_name": "Accidents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airliner_accident . \n?x1 :type.object.type :aviation.aviation_incident_aircraft_relationship . \nFILTER (?x2 > \"80\"^^<http://www.w3.org/2001/XMLSchema#integer>)\nVALUES ?x3 { :m.02gkct } \n?x0 :aviation.airliner_accident.aircraft ?x1 . \n?x1 :aviation.aviation_incident_aircraft_relationship.passengers ?x2 . \n?x3 :aviation.aircraft_model.accidents ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airliner_accident (AND (JOIN aviation.airliner_accident.aircraft (gt aviation.aviation_incident_aircraft_relationship.passengers 80^^http://www.w3.org/2001/XMLSchema#integer)) (JOIN (R aviation.aircraft_model.accidents) m.02gkct)))"
        }
    },
    "915": {
        "generations": "what invention is credited to the inventor of motion corrected magnetic resonance imaging according to US patents??",
        "ori_data_item": {
            "qid": 3205212008000,
            "question": "which invention is of an inventor with patents motion corrected magnetic resonance imaging?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2j5fp",
                    "entity_name": "MRI - Motion Corrected Diffusion Tensor MRI"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2j5c0",
                    "entity_name": "MRI - An Apparatus To Perform Motion Corrected Magnetic Resonance Imaging"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2jc78",
                    "entity_name": "An Apparatus for Real-Time Phase Correction for Diffusion-Weighted Magnetic Resonance Imaging Using Adaptive RF Pulses"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2j5js",
                    "entity_name": "MRI - Method for Optical Pose Detection"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j8t28v",
                    "entity_name": "MRI - MRI: Generalized Image Reconstruction"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.invention",
                        "class": "law.invention",
                        "friendly_name": "Invention",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "law.inventor",
                        "class": "law.inventor",
                        "friendly_name": "Inventor",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0j37rdh",
                        "class": "law.us_patent",
                        "friendly_name": "Motion corrected magnetic resonance imaging",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "law.inventor.inventions",
                        "friendly_name": "Inventions"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "law.inventor.us_patents",
                        "friendly_name": "Patents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.invention . \n?x1 :type.object.type :law.inventor . \nVALUES ?x2 { :m.0j37rdh } \n?x1 :law.inventor.inventions ?x0 . \n?x1 :law.inventor.us_patents ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.invention (JOIN (R law.inventor.inventions) (JOIN law.inventor.us_patents m.0j37rdh)))"
        }
    },
    "916": {
        "generations": "which operas in the opera genre have lyrics written by sondheim??",
        "ori_data_item": {
            "qid": 3202394002000,
            "question": "what is the name of the genre of opera that sondheim writes for?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jfsb",
                    "entity_name": "Thriller"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09swn",
                    "entity_name": "Operetta"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.opera_genre",
                        "class": "opera.opera_genre",
                        "friendly_name": "Opera Genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "opera.opera",
                        "class": "opera.opera",
                        "friendly_name": "Opera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.077rj",
                        "class": "music.songwriter",
                        "friendly_name": "sondheim",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.opera_genre.operas_in_this_genre",
                        "friendly_name": "Operas In This Genre"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.composition.lyricist",
                        "friendly_name": "Lyricist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.opera_genre . \n?x1 :type.object.type :opera.opera . \nVALUES ?x2 { :m.077rj } \n?x0 :opera.opera_genre.operas_in_this_genre ?x1 . \n?x1 :music.composition.lyricist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "opera",
                "music"
            ],
            "s_expression": "(AND opera.opera_genre (JOIN opera.opera_genre.operas_in_this_genre (JOIN music.composition.lyricist m.077rj)))"
        }
    },
    "917": {
        "generations": "who is the noble person that is a sibling of george bertie, 10th earl of lindsey??",
        "ori_data_item": {
            "qid": 3203812009000,
            "question": "which noble person is also the sibling of george bertie, 10th earl of lindsey?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c2czv",
                    "entity_name": "Montague Bertie, 11th Earl of Lindsey"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.noble_person",
                        "class": "royalty.noble_person",
                        "friendly_name": "Noble person",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.sibling_relationship",
                        "class": "people.sibling_relationship",
                        "friendly_name": "Sibling Relationship",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03b_9ml",
                        "class": "royalty.noble_person",
                        "friendly_name": "George Bertie, 10th Earl of Lindsey",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.sibling_relationship.sibling",
                        "friendly_name": "Sibling"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "people.person.sibling_s",
                        "friendly_name": "Siblings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.noble_person . \n?x1 :type.object.type :people.sibling_relationship . \nVALUES ?x2 { :m.03b_9ml } \n?x1 :people.sibling_relationship.sibling ?x0 . \n?x2 :people.person.sibling_s ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND royalty.noble_person (JOIN (R people.sibling_relationship.sibling) (JOIN (R people.person.sibling_s) m.03b_9ml)))"
        }
    },
    "918": {
        "generations": "which governmental body has members of the scottish parliament as their offices positions??",
        "ori_data_item": {
            "qid": 2100561004000,
            "question": "members of the scottish parliament is a title or government office for what governmental body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0glvp",
                    "entity_name": "Scottish Parliament"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01n30b",
                        "class": "government.government_office_or_title",
                        "friendly_name": "members of the scottish parliament",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.offices_positions",
                        "friendly_name": "Offices/Positions Within the Body"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \nVALUES ?x1 { :m.01n30b } \n?x0 :government.governmental_body.offices_positions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.offices_positions m.01n30b))"
        }
    },
    "919": {
        "generations": "which meteorological service is responsible for tracking tropical cyclone tracy and its category??",
        "ori_data_item": {
            "qid": 3202665015000,
            "question": "which meteorological service of the national hurricane center categorized tropical cyclone tracy?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05yb3f",
                    "entity_name": "Australian Bureau of Meteorology"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01lvb3",
                    "entity_name": "National Hurricane Center"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03b7m0",
                    "entity_name": "Central Pacific Hurricane Center"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.meteorological_service",
                        "class": "meteorology.meteorological_service",
                        "friendly_name": "Meteorological service",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "meteorology.tropical_cyclone_category",
                        "class": "meteorology.tropical_cyclone_category",
                        "friendly_name": "Tropical cyclone category",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.021159",
                        "class": "meteorology.tropical_cyclone",
                        "friendly_name": "tropical cyclone tracy",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "meteorology.tropical_cyclone_category.meteorological_service",
                        "friendly_name": "Meteorological service"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "meteorology.tropical_cyclone_category.tropical_cyclones",
                        "friendly_name": "Tropical cyclones"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.meteorological_service . \n?x1 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x2 { :m.021159 } \n?x1 :meteorology.tropical_cyclone_category.meteorological_service ?x0 . \n?x1 :meteorology.tropical_cyclone_category.tropical_cyclones ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.meteorological_service (JOIN (R meteorology.tropical_cyclone_category.meteorological_service) (JOIN meteorology.tropical_cyclone_category.tropical_cyclones m.021159)))"
        }
    },
    "920": {
        "generations": "what warship has the latest launch date according to user patrick's default domain?",
        "ori_data_item": {
            "qid": 2105141002000,
            "question": "which warship v1.1 was launched most recently?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08j2c1",
                    "entity_name": "HMS Vengeance"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "user.patrick.default_domain.warship_v1_1",
                        "class": "user.patrick.default_domain.warship_v1_1",
                        "friendly_name": "Warship v1.1",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.ship.launched",
                        "friendly_name": "Launched"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.patrick.default_domain.warship_v1_1 . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :user.patrick.default_domain.warship_v1_1 . \n?y0 :boats.ship.launched ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.ship.launched ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(ARGMAX user.patrick.default_domain.warship_v1_1 boats.ship.launched)"
        }
    },
    "921": {
        "generations": "what is the name of the piston configuration that has 10 pistons??",
        "ori_data_item": {
            "qid": 2101904001000,
            "question": "find all machines with 10 pistons",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01cdc5",
                    "entity_name": "V10 engine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.piston_configuration",
                        "class": "engineering.piston_configuration",
                        "friendly_name": "Piston configuration",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "10^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "10",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.piston_configuration.number_of_pistons",
                        "friendly_name": "Number of pistons"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.piston_configuration . \nVALUES ?x1 { \"10\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :engineering.piston_configuration.number_of_pistons ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.piston_configuration (JOIN engineering.piston_configuration.number_of_pistons 10^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "922": {
        "generations": "what product line succeeded the predecessor product line of GeForce 700 series in business??",
        "ori_data_item": {
            "qid": 2101943000000,
            "question": "the geforce 700 series is produced by what product line?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0r8m9sc",
                    "entity_name": "GeForce 800M series"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "business.product_line",
                        "class": "business.product_line",
                        "friendly_name": "Product line",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0qfvdh_",
                        "class": "business.product_line",
                        "friendly_name": "GeForce 700 series",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "business.product_line.predecessor_product_line",
                        "friendly_name": "Predecessor product line"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :business.product_line . \nVALUES ?x1 { :m.0qfvdh_ } \n?x0 :business.product_line.predecessor_product_line ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "business"
            ],
            "s_expression": "(AND business.product_line (JOIN business.product_line.predecessor_product_line m.0qfvdh_))"
        }
    },
    "923": {
        "generations": "what is the first day of the year (in terms of day of the year)?",
        "ori_data_item": {
            "qid": 3205898007000,
            "question": "the smallest day in jan is which day of year?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.043hx",
                    "entity_name": "January 12"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.day_of_year",
                        "class": "time.day_of_year",
                        "friendly_name": "Day Of Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03_ly",
                        "class": "time.month",
                        "friendly_name": "jan",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.day_of_year.day",
                        "friendly_name": "Day"
                    },
                    {
                        "start": 0,
                        "end": 2,
                        "relation": "time.day_of_year.month",
                        "friendly_name": "Month"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.day_of_year . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :time.day_of_year . \nVALUES ?y2 { :m.03_ly } \n?y0 :time.day_of_year.day ?y1 . \n?y0 :time.day_of_year.month ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.03_ly } \n?x0 :time.day_of_year.day ?x1 . \n?x0 :time.day_of_year.month ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMIN (AND time.day_of_year (JOIN time.day_of_year.month m.03_ly)) time.day_of_year.day)"
        }
    },
    "924": {
        "generations": "what fictional language is spoken in the battleplain of chaeronea??",
        "ori_data_item": {
            "qid": 2101724003000,
            "question": "what is the language spoken in fiction battleplain of chaeronea?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01307m",
                    "entity_name": "Ancient Greek"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c1fx5f",
                    "entity_name": "Mercenary argot"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_language",
                        "class": "fictional_universe.fictional_language",
                        "friendly_name": "Language in fiction",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0c7th80",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Battleplain of Chaeronea",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_language.where_spoken",
                        "friendly_name": "Spoken in fictional settings"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_language . \nVALUES ?x1 { :m.0c7th80 } \n?x0 :fictional_universe.fictional_language.where_spoken ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_language (JOIN fictional_universe.fictional_language.where_spoken m.0c7th80))"
        }
    },
    "925": {
        "generations": "which boxing stance is used by henry maske??",
        "ori_data_item": {
            "qid": 2100636007000,
            "question": "henry maske boxes using which fighting stance?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w_xk3",
                    "entity_name": "Southpaw stance"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.boxing_stance",
                        "class": "sports.boxing_stance",
                        "friendly_name": "Boxing Stance",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03tvxw",
                        "class": "sports.boxer",
                        "friendly_name": "Henry Maske",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.boxing_stance.boxers_with_this_stance",
                        "friendly_name": "Boxers with this stance"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxing_stance . \nVALUES ?x1 { :m.03tvxw } \n?x0 :sports.boxing_stance.boxers_with_this_stance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.boxing_stance (JOIN sports.boxing_stance.boxers_with_this_stance m.03tvxw))"
        }
    },
    "926": {
        "generations": "what is the site listing category of tangible cultural property??",
        "ori_data_item": {
            "qid": 2100061002000,
            "question": "tangible cultural property has what site listing category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.049h51",
                    "entity_name": "National Treasure"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09v32__",
                    "entity_name": "Important Cultural Property"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "protected_sites.site_listing_category",
                        "class": "protected_sites.site_listing_category",
                        "friendly_name": "Site Listing Category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.09v2p_5",
                        "class": "protected_sites.natural_or_cultural_site_designation",
                        "friendly_name": "Tangible Cultural Property",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "protected_sites.site_listing_category.category_of",
                        "friendly_name": "Category Of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :protected_sites.site_listing_category . \nVALUES ?x1 { :m.09v2p_5 } \n?x0 :protected_sites.site_listing_category.category_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "protected_sites"
            ],
            "s_expression": "(AND protected_sites.site_listing_category (JOIN protected_sites.site_listing_category.category_of m.09v2p_5))"
        }
    },
    "927": {
        "generations": "which fictional character is based on dustin lee hoffman??",
        "ori_data_item": {
            "qid": 2100532011000,
            "question": "name the fictional character which was based on dustin lee hoffman.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hgz0rp",
                    "entity_name": "Dustin Hoffman"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_character",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Fictional Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bl2g",
                        "class": "fictional_universe.person_in_fiction",
                        "friendly_name": "dustin lee hoffman",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.based_on",
                        "friendly_name": "Based On"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_character . \nVALUES ?x1 { :m.0bl2g } \n?x0 :fictional_universe.fictional_character.based_on ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_character (JOIN fictional_universe.fictional_character.based_on m.0bl2g))"
        }
    },
    "928": {
        "generations": "which fictional setting has had savannah swanson as a character who lived there??",
        "ori_data_item": {
            "qid": 2100457011000,
            "question": "savannah swanson lives in which fictional setting?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sc9x",
                    "entity_name": "Granite City"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_setting",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Fictional Setting",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0110y9kv",
                        "class": "fictional_universe.fictional_character",
                        "friendly_name": "Savannah Swanson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_setting.characters_that_have_lived_here",
                        "friendly_name": "Characters that have lived here"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_setting . \nVALUES ?x1 { :m.0110y9kv } \n?x0 :fictional_universe.fictional_setting.characters_that_have_lived_here ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.fictional_setting (JOIN fictional_universe.fictional_setting.characters_that_have_lived_here m.0110y9kv))"
        }
    },
    "929": {
        "generations": "which gender of fictional characters has possessed the jeweled scepter??",
        "ori_data_item": {
            "qid": 3203810018000,
            "question": "what gender is the video game character whom possessed jeweled scepter?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02zsn",
                    "entity_name": "Female"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zppz",
                    "entity_name": "Male"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_gender",
                        "class": "fictional_universe.character_gender",
                        "friendly_name": "Character Gender",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "cvg.game_character",
                        "class": "cvg.game_character",
                        "friendly_name": "Video Game Character",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0dcnkns",
                        "class": "fictional_universe.fictional_object",
                        "friendly_name": "Jeweled Scepter",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.character_gender.characters_of_this_gender",
                        "friendly_name": "Characters of this Gender"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "fictional_universe.fictional_character.has_possessed",
                        "friendly_name": "Has possessed (fictional object)"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_gender . \n?x1 :type.object.type :cvg.game_character . \nVALUES ?x2 { :m.0dcnkns } \n?x0 :fictional_universe.character_gender.characters_of_this_gender ?x1 . \n?x1 :fictional_universe.fictional_character.has_possessed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND fictional_universe.character_gender (JOIN fictional_universe.character_gender.characters_of_this_gender (JOIN fictional_universe.fictional_character.has_possessed m.0dcnkns)))"
        }
    },
    "930": {
        "generations": "which rocket has a mass of 41000.0??",
        "ori_data_item": {
            "qid": 2101475002000,
            "question": "what is the name of a rocket with mass 41000.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b2xyw",
                    "entity_name": "Augmented Satellite Launch Vehicle"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.rocket",
                        "class": "spaceflight.rocket",
                        "friendly_name": "Rocket",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "41000.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "41000.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.rocket.mass",
                        "friendly_name": "Mass"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket . \nVALUES ?x1 { \"41000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket.mass ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.rocket (JOIN spaceflight.rocket.mass 41000.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "931": {
        "generations": "what legal subject is involved in the case savana redding v. safford unified school district #1??",
        "ori_data_item": {
            "qid": 2100796008000,
            "question": "who were the legal subjects involved in savana redding v. safford unified school district #1?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06804",
                    "entity_name": "Privacy"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.legal_subject",
                        "class": "law.legal_subject",
                        "friendly_name": "Legal subject",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05svbhn",
                        "class": "law.legal_case",
                        "friendly_name": "Savana Redding v. Safford Unified School District #1",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.legal_subject.legal_cases",
                        "friendly_name": "Legal cases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.legal_subject . \nVALUES ?x1 { :m.05svbhn } \n?x0 :law.legal_subject.legal_cases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.legal_subject (JOIN law.legal_subject.legal_cases m.05svbhn))"
        }
    },
    "932": {
        "generations": "what day of the year is republic day celebrated in portugal??",
        "ori_data_item": {
            "qid": 2103017002000,
            "question": "republic day in portugal is on what day?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05n2l",
                    "entity_name": "October 5"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "time.day_of_year",
                        "class": "time.day_of_year",
                        "friendly_name": "Day Of Year",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0y4b7hc",
                        "class": "time.holiday",
                        "friendly_name": "Republic Day in Portugal",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.day_of_year.holidays",
                        "friendly_name": "Holiday"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.day_of_year . \nVALUES ?x1 { :m.0y4b7hc } \n?x0 :time.day_of_year.holidays ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(AND time.day_of_year (JOIN time.day_of_year.holidays m.0y4b7hc))"
        }
    },
    "933": {
        "generations": "which grape varieties are used in wine styles that include pinot according to the wine database??",
        "ori_data_item": {
            "qid": 3200914001000,
            "question": "what type of grape shares a wine style with pinot grapes?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09cgp",
                    "entity_name": "Chardonnay"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "wine.grape_variety",
                        "class": "wine.grape_variety",
                        "friendly_name": "Grape Variety",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "food.wine_style",
                        "class": "food.wine_style",
                        "friendly_name": "Wine style",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01c2z6",
                        "class": "wine.grape_variety",
                        "friendly_name": "pinot",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "wine.grape_variety.wine_styles",
                        "friendly_name": "Wine styles"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "food.wine_style.grape_varieties",
                        "friendly_name": "Grape varieties"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.grape_variety . \n?x1 :type.object.type :food.wine_style . \nVALUES ?x2 { :m.01c2z6 } \n?x0 :wine.grape_variety.wine_styles ?x1 . \n?x1 :food.wine_style.grape_varieties ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "food",
                "wine"
            ],
            "s_expression": "(AND wine.grape_variety (JOIN wine.grape_variety.wine_styles (JOIN food.wine_style.grape_varieties m.01c2z6)))"
        }
    },
    "934": {
        "generations": "what musical soundtrack is a studio album and falls under the genre of pop music??",
        "ori_data_item": {
            "qid": 3202651000000,
            "question": "which musical soundtrack has the album content type of studio albums and is a pop music album?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01hfbcq",
                    "entity_name": "Elton John and Tim Rice's Aida"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.musical_soundtrack",
                        "class": "theater.musical_soundtrack",
                        "friendly_name": "Musical Soundtrack",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06vw6v",
                        "class": "music.album_content_type",
                        "friendly_name": "studio albums",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.064t9",
                        "class": "music.genre",
                        "friendly_name": "Pop music",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.album.album_content_type",
                        "friendly_name": "Album content type"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "music.genre.albums",
                        "friendly_name": "Albums"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \nVALUES ?x1 { :m.06vw6v } \nVALUES ?x2 { :m.064t9 } \n?x0 :music.album.album_content_type ?x1 . \n?x2 :music.genre.albums ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND theater.musical_soundtrack (AND (JOIN music.album.album_content_type m.06vw6v) (JOIN (R music.genre.albums) m.064t9)))"
        }
    },
    "935": {
        "generations": "who was the first ascender of the mountain that samuel t. coleridge climbed??",
        "ori_data_item": {
            "qid": 2101241012000,
            "question": "samuel t. coleridge was the ascender at what mountain.",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.018h_c",
                    "entity_name": "Scafell Pike"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.mountain",
                        "class": "geography.mountain",
                        "friendly_name": "Mountain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.078w2",
                        "class": "geography.mountaineer",
                        "friendly_name": "samuel t. coleridge",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.mountain.first_ascenders",
                        "friendly_name": "First ascenders"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.mountain . \nVALUES ?x1 { :m.078w2 } \n?x0 :geography.mountain.first_ascenders ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.mountain (JOIN geography.mountain.first_ascenders m.078w2))"
        }
    },
    "936": {
        "generations": "what type of lake is crater lake??",
        "ori_data_item": {
            "qid": 2101860009000,
            "question": "what lake is of the lake type of crater lake ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g70rk",
                    "entity_name": "Billy Mitchell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026zfvb",
                    "entity_name": "Lagoa das Sete Cidades"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027xq32",
                    "entity_name": "Quilotoa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g8p58",
                    "entity_name": "Kurile Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9bq_",
                    "entity_name": "Akademia Nauk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04sqxh",
                    "entity_name": "Lake Sf\u00e2nta Ana"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ctd_r",
                    "entity_name": "Lake Euramoo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.067b64",
                    "entity_name": "Lake Chagan"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01jjfd",
                    "entity_name": "Lake Nyos"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cmtcc",
                    "entity_name": "Blue Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rsp4s",
                    "entity_name": "Lake Bullen Merri"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.081vp6",
                    "entity_name": "Lake Monoun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p0ws3",
                    "entity_name": "Lake Calibato"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p17t4",
                    "entity_name": "Lake Muhikap"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p388r",
                    "entity_name": "Lake Palakpakin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p3bhk",
                    "entity_name": "Lake Sampaloc"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p3cbc",
                    "entity_name": "Lake Bunot"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p6bw5",
                    "entity_name": "Lakes Pandin and Yambo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0qm1q",
                    "entity_name": "Crater Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.063zgw7",
                    "entity_name": "Tetroe"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.032yn8",
                    "entity_name": "\u00d6skjuvatn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0tkgpy8",
                    "entity_name": "Crater Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p30k5",
                    "entity_name": "Lake Leonard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p4yjg",
                    "entity_name": "Licancabur Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bz7yx",
                    "entity_name": "Zuni Salt Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05qnlp",
                    "entity_name": "Lake Albano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01kz7b",
                    "entity_name": "Laguna de Bay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rcfvw",
                    "entity_name": "Lake Letas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.058m0d",
                    "entity_name": "Lake Bolsena"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01yv2_",
                    "entity_name": "Lake Bracciano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.048fcb",
                    "entity_name": "Lake Tikitapu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03btkd",
                    "entity_name": "Mien"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04tyq5",
                    "entity_name": "Blue Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cpnq",
                    "entity_name": "Lake Rotorua"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03h4v4c",
                    "entity_name": "Zengena Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03y51_w",
                    "entity_name": "Lake Haruna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jj2c",
                    "entity_name": "Lake Avernus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w_y45b",
                    "entity_name": "Medicine Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c60v8",
                    "entity_name": "Cuicocha"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065n3_",
                    "entity_name": "Lake Eacham"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cp7q",
                    "entity_name": "Lake Rotomahana"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gsfwp",
                    "entity_name": "Crater Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cprr",
                    "entity_name": "Lake Rotoma"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmggdb",
                    "entity_name": "Green Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cpd2",
                    "entity_name": "Lake Tarawera"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l9gh",
                    "entity_name": "Lake Maninjau"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0cqdy9",
                    "entity_name": "Lake Ashi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012swr",
                    "entity_name": "Lake Nemi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04ct2q8",
                    "entity_name": "Lake Ikeda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gffj19",
                    "entity_name": "Lake Oku"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t_gc",
                    "entity_name": "Elgygytgyn Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gpndt",
                    "entity_name": "Lake Nemrut"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01z_8h",
                    "entity_name": "Yellowstone Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04jdl6h",
                    "entity_name": "Lonar crater lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03bvly",
                    "entity_name": "Suavj\u00e4rvi crater"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05kmmz",
                    "entity_name": "Lake Ram"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z_yd",
                    "entity_name": "Lake Taupo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0g9v_sz",
                    "entity_name": "Lake Tikub"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02r6gmn",
                    "entity_name": "Lake Rotoiti"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p7nbt",
                    "entity_name": "Lake Danao"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04d_dg2",
                    "entity_name": "Paulina Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lpsl",
                    "entity_name": "Manicouagan Reservoir"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0989gw",
                    "entity_name": "Lake Amatitl\u00e1n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03c2cmt",
                    "entity_name": "Chicabal Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025xwvt",
                    "entity_name": "Lake Vico"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gmcmts",
                    "entity_name": "Lake Bermin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0crdcg7",
                    "entity_name": "Boyuk Alagol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f19mf",
                    "entity_name": "Lake G\u00fcija"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ch7bl",
                    "entity_name": "Lake Ngozi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q26p4",
                    "entity_name": "Lake Apo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_1krw8",
                    "entity_name": "Alligator Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cpq_",
                    "entity_name": "Lake Rotoehu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p31td",
                    "entity_name": "Lake Balinsasayao"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b9ns6",
                    "entity_name": "Laacher See"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z4n5b",
                    "entity_name": "Lac Pavin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qyx3k",
                    "entity_name": "Lake Yeak Laom"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cnyw",
                    "entity_name": "Lake Rotokakahi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cn_z",
                    "entity_name": "Lake Okataina"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03btxv",
                    "entity_name": "Paasselk\u00e4"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rny1z",
                    "entity_name": "Lake Tritriva"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.11x7vrjgz",
                    "entity_name": "null"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02qt_q5",
                    "entity_name": "Cuicocha Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04q1ml2",
                    "entity_name": "Lake Kussharo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04n4f",
                    "entity_name": "Lake Toba"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05bx56",
                    "entity_name": "Lake Mezzano"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07kxhd",
                    "entity_name": "Lake Tazawa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gx0ml",
                    "entity_name": "Lake Ilopango"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04df1w",
                    "entity_name": "Lake Pupuke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k22f76",
                    "entity_name": "Lake Coatepeque"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cn_7",
                    "entity_name": "Lake Okareka"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09gc6mb",
                    "entity_name": "Karymsky Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02rmgvl",
                    "entity_name": "Tama Lakes"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cbd47",
                    "entity_name": "Lake Rotopounamu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.045w1v",
                    "entity_name": "Lake Towada"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07s572k",
                    "entity_name": "Lake Ipala"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02z25d0",
                    "entity_name": "Lake Segara Anak"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w5zr",
                    "entity_name": "Lake Atitl\u00e1n"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03cwsr",
                    "entity_name": "Lake Bosumtwi"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.047syr4",
                    "entity_name": "Lake Kuttara"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04662j0",
                    "entity_name": "Stoneman Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f3ljn",
                    "entity_name": "Laguna de Ayarza"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080f4lr",
                    "entity_name": "Lake Barombi Mbo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0c26dr",
                    "entity_name": "Lac du Bouchet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gy0vxz",
                    "entity_name": "Kawah Putih"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04gqbqs",
                    "entity_name": "Lake Salda"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03btzp",
                    "entity_name": "Pilot crater"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025t3h",
                    "entity_name": "Heaven Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cp1p",
                    "entity_name": "Green Lake, New Zealand"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.026zgwb",
                    "entity_name": "Lake Gunung Tujuh"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j287c4",
                    "entity_name": "Lake Dissoni"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027mphw",
                    "entity_name": "Karag\u00f6l, Giresun"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08myt1",
                    "entity_name": "Lagoa do Fogo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.065n53",
                    "entity_name": "Lake Barrine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07jt5j",
                    "entity_name": "Lake T\u014dya"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p4skp",
                    "entity_name": "Lake Pinatubo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.080q3yl",
                    "entity_name": "Laguna de Calderas"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08f156",
                    "entity_name": "Lake Purrumbete"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02pq_pt",
                    "entity_name": "Lake Shikotsu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j2466w",
                    "entity_name": "Lake Barombi Koto"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04cp3v",
                    "entity_name": "Lake Rerewhakaaitu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07sl1t",
                    "entity_name": "Lake Assal"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mxtw",
                    "entity_name": "Taal Lake"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02bgn3",
                    "entity_name": "Lake Mash\u016b"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.lake",
                        "class": "geography.lake",
                        "friendly_name": "Lake",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02519_",
                        "class": "geography.lake_type",
                        "friendly_name": "Crater lake",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.lake.lake_type",
                        "friendly_name": "Lake Type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \nVALUES ?x1 { :m.02519_ } \n?x0 :geography.lake.lake_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.lake (JOIN geography.lake.lake_type m.02519_))"
        }
    },
    "937": {
        "generations": "what engine has a variant called rolls-royce merlin i??",
        "ori_data_item": {
            "qid": 2101476005000,
            "question": "what are the types of rolls-royce merlin i?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09qx4",
                    "entity_name": "Rolls-Royce Merlin"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.engine",
                        "class": "engineering.engine",
                        "friendly_name": "Engine",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07_29vt",
                        "class": "engineering.engine",
                        "friendly_name": "Rolls-Royce Merlin I",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "engineering.engine.variants",
                        "friendly_name": "Variants"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.engine . \nVALUES ?x1 { :m.07_29vt } \n?x0 :engineering.engine.variants ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.engine (JOIN engineering.engine.variants m.07_29vt))"
        }
    },
    "938": {
        "generations": "how many genes are located on chromosome X (human)??",
        "ori_data_item": {
            "qid": 2104226005000,
            "question": "how many genes are found on chromosome x (human)?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "741"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.gene",
                        "class": "biology.gene",
                        "friendly_name": "Gene",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02kwgmx",
                        "class": "biology.chromosome",
                        "friendly_name": "Chromosome X (human)",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.gene.chromosome",
                        "friendly_name": "Chromosome"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.gene . \nVALUES ?x1 { :m.02kwgmx } \n?x0 :biology.gene.chromosome ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(COUNT (AND biology.gene (JOIN biology.gene.chromosome m.02kwgmx)))"
        }
    },
    "939": {
        "generations": "which tennis player has won more than 77 tennis titles??",
        "ori_data_item": {
            "qid": 2103015003000,
            "question": "who is the tennis player that became pro on 77?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gpr",
                    "entity_name": "Bj\u00f6rn Borg"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "tennis.tennis_player",
                        "class": "tennis.tennis_player",
                        "friendly_name": "Tennis Player",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "77^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "77",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "tennis.tennis_player.number_of_tennis_titles",
                        "friendly_name": "Number Of Tennis Titles"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_player . \nVALUES ?x1 { \"77\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tennis.tennis_player.number_of_tennis_titles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "tennis"
            ],
            "s_expression": "(AND tennis.tennis_player (JOIN tennis.tennis_player.number_of_tennis_titles 77^^http://www.w3.org/2001/XMLSchema#integer))"
        }
    },
    "940": {
        "generations": "which music composition has vainglorious as a subject and was written by carly simon??",
        "ori_data_item": {
            "qid": 3203711008000,
            "question": "what composition with the subject vainglorious was written by carly simon?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w61d",
                    "entity_name": "You're So Vain"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.composition",
                        "class": "music.composition",
                        "friendly_name": "Composition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01hjyl",
                        "class": "book.book_subject",
                        "friendly_name": "vainglorious",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01817f",
                        "class": "music.songwriter",
                        "friendly_name": "Carly Simon",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.composition.subjects",
                        "friendly_name": "Subjects"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "music.lyricist.lyrics_written",
                        "friendly_name": "Lyrics Written"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.composition . \nVALUES ?x1 { :m.01hjyl } \nVALUES ?x2 { :m.01817f } \n?x0 :music.composition.subjects ?x1 . \n?x2 :music.lyricist.lyrics_written ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.composition (AND (JOIN music.composition.subjects m.01hjyl) (JOIN (R music.lyricist.lyrics_written) m.01817f)))"
        }
    },
    "941": {
        "generations": "who produced the album The Diary of Alicia Keys??",
        "ori_data_item": {
            "qid": 3202148016000,
            "question": "who released a musical component with package the diary of alicia keys that is a record producer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05p0h6",
                    "entity_name": "Kerry Brothers, Jr."
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02l840",
                    "entity_name": "Kanye West"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03f5spx",
                    "entity_name": "Timbaland"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03j1r41",
                    "entity_name": "Osten Harvey, Jr."
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.producer",
                        "class": "music.producer",
                        "friendly_name": "Record Producer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.release_component",
                        "class": "music.release_component",
                        "friendly_name": "Musical Release Component",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0402l21",
                        "class": "music.multipart_release",
                        "friendly_name": "The Diary of Alicia Keys",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.producer.releases_produced",
                        "friendly_name": "Releases produced"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.release_component.package",
                        "friendly_name": "Package"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.producer . \n?x1 :type.object.type :music.release_component . \nVALUES ?x2 { :m.0402l21 } \n?x0 :music.producer.releases_produced ?x1 . \n?x1 :music.release_component.package ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.producer (JOIN music.producer.releases_produced (JOIN music.release_component.package m.0402l21)))"
        }
    },
    "942": {
        "generations": "how many fictional character species are present in the fictional universe of new york, ny??",
        "ori_data_item": {
            "qid": 3203342011000,
            "question": "the fictional world of new york, ny contains how many different species?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "47"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "fictional_universe.character_species",
                        "class": "fictional_universe.character_species",
                        "friendly_name": "Character Species",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_universe",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Fictional Universe",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02_286",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "new york, ny",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "fictional_universe.fictional_universe.species",
                        "friendly_name": "Species"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_setting.universe",
                        "friendly_name": "Universe"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \n?x1 :type.object.type :fictional_universe.fictional_universe . \nVALUES ?x2 { :m.02_286 } \n?x1 :fictional_universe.fictional_universe.species ?x0 . \n?x2 :fictional_universe.fictional_setting.universe ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(COUNT (AND fictional_universe.character_species (JOIN (R fictional_universe.fictional_universe.species) (JOIN (R fictional_universe.fictional_setting.universe) m.02_286))))"
        }
    },
    "943": {
        "generations": "which book edition was authored or edited by lucilla andrews??",
        "ori_data_item": {
            "qid": 2101937013000,
            "question": "which book edition listed lucilla andrews as editor?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xttpd",
                    "entity_name": "Sinister Side"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xttpp",
                    "entity_name": "The Sinister Side (Ulverscroft Large Print Series)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xtt9y",
                    "entity_name": "A Weekend in the Garden"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xttpy",
                    "entity_name": "The Sinister Side"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04xttn9",
                    "entity_name": "The Sinister Side"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02639gt",
                        "class": "book.author",
                        "friendly_name": "Lucilla Andrews",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition.author_editor",
                        "friendly_name": "Author/editor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition . \nVALUES ?x1 { :m.02639gt } \n?x0 :book.book_edition.author_editor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition (JOIN book.book_edition.author_editor m.02639gt))"
        }
    },
    "944": {
        "generations": "what is the beaufort wind force when the mean wind speed is 0.0 km/h??",
        "ori_data_item": {
            "qid": 2101642005000,
            "question": "0.0 is the mean wind speed of what beaufort wind force?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01xskc6",
                    "entity_name": "Beaufort force 0"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "meteorology.beaufort_wind_force",
                        "class": "meteorology.beaufort_wind_force",
                        "friendly_name": "Beaufort Wind Force",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "0.0",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "meteorology.beaufort_wind_force.mean_wind_speed_km_h",
                        "friendly_name": "Mean Wind Speed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.beaufort_wind_force . \nVALUES ?x1 { \"0.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :meteorology.beaufort_wind_force.mean_wind_speed_km_h ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "meteorology"
            ],
            "s_expression": "(AND meteorology.beaufort_wind_force (JOIN meteorology.beaufort_wind_force.mean_wind_speed_km_h 0.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "945": {
        "generations": "what was the name of the mascot for the 1972 summer olympic games??",
        "ori_data_item": {
            "qid": 2102535000000,
            "question": "what was the mascot for the 1972 summer olympic games?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025z6y0",
                    "entity_name": "Waldi"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_mascot",
                        "class": "olympics.olympic_mascot",
                        "friendly_name": "Olympic mascot",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0l98s",
                        "class": "olympics.olympic_games",
                        "friendly_name": "1972 summer olympic games",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_mascot.olympic_games",
                        "friendly_name": "Olympic games"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_mascot . \nVALUES ?x1 { :m.0l98s } \n?x0 :olympics.olympic_mascot.olympic_games ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_mascot (JOIN olympics.olympic_mascot.olympic_games m.0l98s))"
        }
    },
    "946": {
        "generations": "what is the ship with the highest IMO/LR identification number??",
        "ori_data_item": {
            "qid": 2105444004000,
            "question": "what ship has the highest imo / lr identification number?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "g.122blphy",
                    "entity_name": "null"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "boats.ship",
                        "class": "boats.ship",
                        "friendly_name": "Ship",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.int",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "boats.ship.imo_lr_identification_number",
                        "friendly_name": "IMO / LR identification number"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :boats.ship . \n?y0 :boats.ship.imo_lr_identification_number ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :boats.ship.imo_lr_identification_number ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "boats"
            ],
            "s_expression": "(ARGMAX boats.ship boats.ship.imo_lr_identification_number)"
        }
    },
    "947": {
        "generations": "what type of drinking establishment is The Homestead??",
        "ori_data_item": {
            "qid": 2101769002000,
            "question": "what is the type of the drinking establishment the homestead?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01nz0z",
                    "entity_name": "Bar"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.drinking_establishment_type",
                        "class": "food.drinking_establishment_type",
                        "friendly_name": "Drinking establishment type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05cxvn4",
                        "class": "food.drinking_establishment",
                        "friendly_name": "The Homestead",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.drinking_establishment_type.establishments_of_this_type",
                        "friendly_name": "Establishments of this type"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.drinking_establishment_type . \nVALUES ?x1 { :m.05cxvn4 } \n?x0 :food.drinking_establishment_type.establishments_of_this_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.drinking_establishment_type (JOIN food.drinking_establishment_type.establishments_of_this_type m.05cxvn4))"
        }
    },
    "948": {
        "generations": "what infectious disease is transmitted through perinatal transmission and caused by pathogenic bacteria??",
        "ori_data_item": {
            "qid": 3204730006000,
            "question": "which pathogenic bacteria or viruses are transmitted specifically due to perinatal transmission contact?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.074m2",
                    "entity_name": "Syphilis"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.infectious_disease",
                        "class": "medicine.infectious_disease",
                        "friendly_name": "Infectious Disease",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06z10b",
                        "class": "medicine.transmission_route",
                        "friendly_name": "perinatal transmission",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03qch2w",
                        "class": "medicine.type_of_infectious_agent",
                        "friendly_name": "Pathogenic bacteria",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.infectious_disease.transmission",
                        "friendly_name": "Transmission route"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "medicine.type_of_infectious_agent.diseases",
                        "friendly_name": "Diseases with this type of agent"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.infectious_disease . \nVALUES ?x1 { :m.06z10b } \nVALUES ?x2 { :m.03qch2w } \n?x0 :medicine.infectious_disease.transmission ?x1 . \n?x2 :medicine.type_of_infectious_agent.diseases ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.infectious_disease (AND (JOIN medicine.infectious_disease.transmission m.06z10b) (JOIN (R medicine.type_of_infectious_agent.diseases) m.03qch2w)))"
        }
    },
    "949": {
        "generations": "how many religious practices are shared by both christian religion and anglicans??",
        "ori_data_item": {
            "qid": 3204573005000,
            "question": "christian religion and anglicans are practiced by how many religious practices?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_practice",
                        "class": "religion.religious_practice",
                        "friendly_name": "Religious Practice",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01lp8",
                        "class": "religion.religion",
                        "friendly_name": "christian religion",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0n2g",
                        "class": "religion.religion",
                        "friendly_name": "anglicans",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    },
                    {
                        "start": 2,
                        "end": 0,
                        "relation": "religion.religion.practices",
                        "friendly_name": "Practices"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_practice . \nVALUES ?x1 { :m.01lp8 } \nVALUES ?x2 { :m.0n2g } \n?x1 :religion.religion.practices ?x0 . \n?x2 :religion.religion.practices ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(COUNT (AND religion.religious_practice (AND (JOIN (R religion.religion.practices) m.01lp8) (JOIN (R religion.religion.practices) m.0n2g))))"
        }
    },
    "950": {
        "generations": "what magazine genre does dig bmx belong to??",
        "ori_data_item": {
            "qid": 2101184006000,
            "question": "dig bmx belongs to what genre of magazines?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07n6dmm",
                    "entity_name": "Sports magazine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.magazine_genre",
                        "class": "book.magazine_genre",
                        "friendly_name": "Magazine genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02z2lkx",
                        "class": "book.magazine",
                        "friendly_name": "Dig BMX",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.magazine_genre.magazines_in_this_genre",
                        "friendly_name": "Magazines in this genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.magazine_genre . \nVALUES ?x1 { :m.02z2lkx } \n?x0 :book.magazine_genre.magazines_in_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.magazine_genre (JOIN book.magazine_genre.magazines_in_this_genre m.02z2lkx))"
        }
    },
    "951": {
        "generations": "how many families are from the dual monarchy of england and france??",
        "ori_data_item": {
            "qid": 2103984007000,
            "question": "how many families are there in dual monarchy of england and france?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "2"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "people.family",
                        "class": "people.family",
                        "friendly_name": "Family",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05zth5b",
                        "class": "location.country",
                        "friendly_name": "Dual monarchy of England and France",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.family.country",
                        "friendly_name": "Country"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.family . \nVALUES ?x1 { :m.05zth5b } \n?x0 :people.family.country ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(COUNT (AND people.family (JOIN people.family.country m.05zth5b)))"
        }
    },
    "952": {
        "generations": "who is the colorist for the comic book story being referred to??",
        "ori_data_item": {
            "qid": 2100105006000,
            "question": "bonnie wilford has colored which comic book story?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gyl8f_",
                    "entity_name": "Like a Phoenix, From the Ashes"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_story",
                        "class": "comic_books.comic_book_story",
                        "friendly_name": "Comic Book Story",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0gyl8hk",
                        "class": "comic_books.comic_book_colorist",
                        "friendly_name": "Bonnie Wilford",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_story.colors",
                        "friendly_name": "Colors"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_story . \nVALUES ?x1 { :m.0gyl8hk } \n?x0 :comic_books.comic_book_story.colors ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_story (JOIN comic_books.comic_book_story.colors m.0gyl8hk))"
        }
    },
    "953": {
        "generations": "what is the ICAO airline designator for Malm\u00f6 Aviation??",
        "ori_data_item": {
            "qid": 2101076005000,
            "question": "what is the designator of malm\u00f6 aviation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04kmp2n",
                    "entity_name": "SCW"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.icao_airline_designator",
                        "class": "aviation.icao_airline_designator",
                        "friendly_name": "ICAO airline designator",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.064jj5",
                        "class": "aviation.airline",
                        "friendly_name": "Malm\u00f6 Aviation",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.icao_airline_designator.airline",
                        "friendly_name": "Airline"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.icao_airline_designator . \nVALUES ?x1 { :m.064jj5 } \n?x0 :aviation.icao_airline_designator.airline ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.icao_airline_designator (JOIN aviation.icao_airline_designator.airline m.064jj5))"
        }
    },
    "954": {
        "generations": "what symptom is associated with nephrotic syndrome??",
        "ori_data_item": {
            "qid": 2102388012000,
            "question": "what is a symptom of nephrotic syndrome?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j80c",
                    "entity_name": "Edema"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012zf3",
                    "entity_name": "Proteinuria"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0lcdk",
                    "entity_name": "Anemia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0brgy",
                    "entity_name": "Anorexia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f45h",
                    "entity_name": "Hyperlipidemia"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012qjw",
                    "entity_name": "Vomiting"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09bl05",
                    "entity_name": "Hypoalbuminemia"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.symptom",
                        "class": "medicine.symptom",
                        "friendly_name": "Symptom",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01n597",
                        "class": "medicine.disease",
                        "friendly_name": "Nephrotic syndrome",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.symptom.symptom_of",
                        "friendly_name": "Symptom of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.symptom . \nVALUES ?x1 { :m.01n597 } \n?x0 :medicine.symptom.symptom_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.symptom (JOIN medicine.symptom.symptom_of m.01n597))"
        }
    },
    "955": {
        "generations": "which exhibition was produced by nintendo co.??",
        "ori_data_item": {
            "qid": 2101578010000,
            "question": "nintendo co. produce what exhibitions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.042qxn",
                    "entity_name": "Nintendo Space World"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "exhibitions.exhibition",
                        "class": "exhibitions.exhibition",
                        "friendly_name": "Exhibition",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.059wk",
                        "class": "exhibitions.exhibition_producer",
                        "friendly_name": "nintendo co.",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "exhibitions.exhibition.produced_by",
                        "friendly_name": "Produced by"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition . \nVALUES ?x1 { :m.059wk } \n?x0 :exhibitions.exhibition.produced_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "exhibitions"
            ],
            "s_expression": "(AND exhibitions.exhibition (JOIN exhibitions.exhibition.produced_by m.059wk))"
        }
    },
    "956": {
        "generations": "which top level domain was introduced in the year 2012??",
        "ori_data_item": {
            "qid": 2102850015000,
            "question": "what is the top level domain whose introduction was on 2012?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0121_x67",
                    "entity_name": ".club"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "internet.top_level_domain",
                        "class": "internet.top_level_domain",
                        "friendly_name": "Top Level Domain",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "2012^^http://www.w3.org/2001/XMLSchema#gYear",
                        "class": "type.datetime",
                        "friendly_name": "2012",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "internet.top_level_domain.introduced",
                        "friendly_name": "Introduced"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.top_level_domain . \nVALUES ?x1 { \"2012-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear> } \n?x0 :internet.top_level_domain.introduced ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "internet"
            ],
            "s_expression": "(AND internet.top_level_domain (JOIN internet.top_level_domain.introduced 2012^^http://www.w3.org/2001/XMLSchema#gYear))"
        }
    },
    "957": {
        "generations": "which olympic events were officially contested at the 2008 beijing olympic games held in london england??",
        "ori_data_item": {
            "qid": 4300161013000,
            "question": "which olympic events were officially contested at the 2008 beijing olympic games held in london england?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3pr",
                    "entity_name": "Women's Judo, + 78kg (heavyweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk37c",
                    "entity_name": "Men's Greco-Roman Wrestling, Lightweight 60 - 66kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk384",
                    "entity_name": "Women's Long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3lm",
                    "entity_name": "Women's Discus throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk31r",
                    "entity_name": "Men's Floor exercises"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2cv",
                    "entity_name": "Women's Athletics, 5000m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2n3",
                    "entity_name": "Women's 200m individual medley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2z8",
                    "entity_name": "Women's K-1 (kayak single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2k4",
                    "entity_name": "Women's Uneven bars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2h8",
                    "entity_name": "Women's Floor exercises"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f9mpm",
                    "entity_name": "Men's Sailboard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2vv",
                    "entity_name": "Men's Quadruple sculls without coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2h3",
                    "entity_name": "Men's 4x100m medley relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3j8",
                    "entity_name": "Women's 200m butterfly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027n9h",
                    "entity_name": "BMX racing"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk28d",
                    "entity_name": "Women's Skeet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2jj",
                    "entity_name": "Women's Trap"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2l7",
                    "entity_name": "Women's 25m pistol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk305",
                    "entity_name": "Women's 50m rifle 3 positions"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk33s",
                    "entity_name": "Men's 10m air rifle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk35h",
                    "entity_name": "Men's 50m rifle 3 positions"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk36r",
                    "entity_name": "Men's Double trap"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3c3",
                    "entity_name": "Women's 10m air rifle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3hh",
                    "entity_name": "Men's Skeet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3kj",
                    "entity_name": "Men's 10m air pistol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3mk",
                    "entity_name": "Men's Trap"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w8ggr",
                    "entity_name": "Men's 4x400 metres relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2qy",
                    "entity_name": "Women's Athletics, 800m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk31f",
                    "entity_name": "Women's Badminton, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk313",
                    "entity_name": "Women's TableTennis, Singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk32c",
                    "entity_name": "Women's Athletics, 200m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_sdlj",
                    "entity_name": "Men's Tennis, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk28k",
                    "entity_name": "Men's Triathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2f2",
                    "entity_name": "Women's 10m air pistol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3k_",
                    "entity_name": "Men's Athletics, 4x100m relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk342",
                    "entity_name": "Men's 50km walk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3cx",
                    "entity_name": "Men's \u00c9p\u00e9e individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3m7",
                    "entity_name": "Men's Boxing, 48 - 51kg (flyweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_s7qg",
                    "entity_name": "Women's Tennis, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3h0",
                    "entity_name": "Men's handball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2w9",
                    "entity_name": "Women's 400m individual medley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2nl",
                    "entity_name": "Women's Athletics, 400m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2pj",
                    "entity_name": "Women's Athletics, 100m hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2b3",
                    "entity_name": "Women's Archery, individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2_w",
                    "entity_name": "Men's Track cycling, Sprint individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2xd",
                    "entity_name": "Men's Mountain Biking, Cross-Country"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk30n",
                    "entity_name": "Men's Road cycling, individual road race"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3cl",
                    "entity_name": "Men's Shot put"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2ks",
                    "entity_name": "Men's C-1 1000m (canoe single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3f4",
                    "entity_name": "Men's Greco-Roman Wrestling, Welterweight 66 - 74kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk326",
                    "entity_name": "Men's 200m breaststroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2pv",
                    "entity_name": "Men's Javelin throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2sh",
                    "entity_name": "Women's Sychronized swimming, team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2t3",
                    "entity_name": "Men's Boxing, 60 - 64 kg (light welterweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk34w",
                    "entity_name": "Women's Athletics, 3000m steeplechase"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2hx",
                    "entity_name": "Men's 1500m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2pc",
                    "entity_name": "Men's Discus throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2dy",
                    "entity_name": "Women's Shot put"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2_1",
                    "entity_name": "Men's Freestyle Wrestling, Super Heavyweight 96-120 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079yv82",
                    "entity_name": "Finn Class"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3hb",
                    "entity_name": "Men's Freestyle Wrestling, Heavyweight 84-96kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk397",
                    "entity_name": "Men's Greco-Roman Wrestling, Bantamweight 55kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01b5r_",
                    "entity_name": "Women's association football"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2bx",
                    "entity_name": "Men's Weightlifting, Bantamweight  -56kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2j_",
                    "entity_name": "Men's football"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk368",
                    "entity_name": "Women's High jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03191j",
                    "entity_name": "Women's basketball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk30z",
                    "entity_name": "Men's Beach Volleyball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f9lcn",
                    "entity_name": "Women's 3 metre springboard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f9ld0",
                    "entity_name": "Men's 3 metre springboard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04f9ld6",
                    "entity_name": "Women's 10 metre platform"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk282",
                    "entity_name": "Men's Volleyball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk29t",
                    "entity_name": "Men's Parallel bars"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2c_",
                    "entity_name": "Men's Gymnastics, individual all-round"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2cj",
                    "entity_name": "Men's Long jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2dm",
                    "entity_name": "Women's Foil individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2f7",
                    "entity_name": "Men's 50m pistol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2gh",
                    "entity_name": "Eventing, individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2hl",
                    "entity_name": "Men's Athletics, 100m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2jp",
                    "entity_name": "Men's Athletics, 5000m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2lq",
                    "entity_name": "Men's Foil individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2mz",
                    "entity_name": "Men's Marathon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2q4",
                    "entity_name": "Men's Road Cycling, Individual Time Trial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2qm",
                    "entity_name": "Men's Athletics, 400m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2qs",
                    "entity_name": "Men's 100m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2rd",
                    "entity_name": "Men's Pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2sn",
                    "entity_name": "Women's 100m backstroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2tl",
                    "entity_name": "Men's Athletics, 400m hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2tx",
                    "entity_name": "Women's 400m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2x7",
                    "entity_name": "Men's Pommel horse"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2xq",
                    "entity_name": "Men's Sabre individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2yb",
                    "entity_name": "Jumping, individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2yh",
                    "entity_name": "Men's Athletics, 200m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2zl",
                    "entity_name": "Men's Horizontal bar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk300",
                    "entity_name": "Men's Hammer throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk30h",
                    "entity_name": "Men's Athletics, 110m hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk30t",
                    "entity_name": "Men's 400m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk32_",
                    "entity_name": "Men's Triple jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk32p",
                    "entity_name": "Men's High jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk334",
                    "entity_name": "Men's 25m rapid fire pistol"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk33m",
                    "entity_name": "Women's 200m breaststroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk35z",
                    "entity_name": "Men's Modern pentathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk39d",
                    "entity_name": "Men's Vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk39q",
                    "entity_name": "Women's 100m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk39w",
                    "entity_name": "Men's Athletics, 10000m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3b5",
                    "entity_name": "Men's Athletics, 800m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3bh",
                    "entity_name": "Men's 100m backstroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3d6",
                    "entity_name": "Men's 50m rifle prone"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3dj",
                    "entity_name": "Men's Decathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3fm",
                    "entity_name": "Men's 3000m steeplechase"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3kp",
                    "entity_name": "Men's Rings"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3l9",
                    "entity_name": "Men's Single sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3n5",
                    "entity_name": "Men's Athletics, 1500m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k1nqc0",
                    "entity_name": "Individual Dressage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3m2",
                    "entity_name": "Women's 50m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2jc",
                    "entity_name": "Men's 4x200m freestyle relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2ky",
                    "entity_name": "Women's Road cycling, individual time trial"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3jx",
                    "entity_name": "Women's K-1 500m (kayak single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3n0",
                    "entity_name": "Women's Road cycling, individual road race"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3pl",
                    "entity_name": "Women's Track cycling, sprint"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk287",
                    "entity_name": "Women's Taekwondo, Middleweight 57 - 67 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk392",
                    "entity_name": "Men's Slalom C-1 (canoe single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2rq",
                    "entity_name": "Women's 800m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk28q",
                    "entity_name": "Women's 200m backstroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk37_",
                    "entity_name": "Women's Weightlifting, 53kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2mn",
                    "entity_name": "Women's Athletics, 100m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3k6",
                    "entity_name": "Men's Greco-Roman Wrestling, Middleweight 74 - 84 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2r2",
                    "entity_name": "Men's Gymnastics,  team competition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2w4",
                    "entity_name": "Women's Mountain Biking, Cross-Country"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2nx",
                    "entity_name": "Men's 200m butterfly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3ht",
                    "entity_name": "Men's Boxing, Super Heavyweight +91kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3p3",
                    "entity_name": "Men's Judo, - 60 kg Men (extra lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2vc",
                    "entity_name": "Women's handball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2p1",
                    "entity_name": "Men's 470 - Two Person Dinghy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3jr",
                    "entity_name": "Men's C-2 (canoe double)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3pf",
                    "entity_name": "Men's 100m butterfly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2b8",
                    "entity_name": "Men's Boxing, Bantamweight 51 - 54kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2c1",
                    "entity_name": "Men's Judo, 73 - 81kg (half-middleweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2k9",
                    "entity_name": "Men's 50m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2rk",
                    "entity_name": "Women's Modern pentathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.079b5dt",
                    "entity_name": "Women's Sailboard"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3h5",
                    "entity_name": "Women's Javelin throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2bl",
                    "entity_name": "Men's Judo, 81 - 90kg (middleweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2g0",
                    "entity_name": "Women's Rhythmic gymnastics, group competition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2lk",
                    "entity_name": "Men's 200m backstroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk35t",
                    "entity_name": "Men's Boxing, - Light Flyweight -48kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk371",
                    "entity_name": "Men's 20km walk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3px",
                    "entity_name": "Men's Boxing, Lightweight 57 - 60kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3nh",
                    "entity_name": "Women's Volleyball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk339",
                    "entity_name": "Men's K-1 1000m (kayak single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2zf",
                    "entity_name": "Women's Weightlifting, 75kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3gq",
                    "entity_name": "Men's 200m individual medley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3bn",
                    "entity_name": "Men's Freestyle Wrestling, Featherweight 55 - 60 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2n8",
                    "entity_name": "Men's 400m individual medley"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2lw",
                    "entity_name": "Women's 4x100m freestyle relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgcy_k",
                    "entity_name": "Badminton - Women's doubles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2p_",
                    "entity_name": "Women's Freestyle Wrestling, Heavyweight 63 - 72kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk290",
                    "entity_name": "Women's Gymnastics,  team competition"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2z3",
                    "entity_name": "Women's Vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3nb",
                    "entity_name": "Women's Gymnastics, individual all-round"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2c6",
                    "entity_name": "Men's Boxing, Light Heavyweight 75 - 81kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2s0",
                    "entity_name": "Men's Track cycling, Team Pursuit (4000m)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2yn",
                    "entity_name": "Men's Track cycling, Keirin"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3g2",
                    "entity_name": "Men's 100m breaststroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2q9",
                    "entity_name": "Women's Sabre individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3dv",
                    "entity_name": "Men's Weightlifting, Featherweight 56-62 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2gb",
                    "entity_name": "Men's Judo, + 100kg (heavyweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2hr",
                    "entity_name": "Women's Weightlifting, 69kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2dg",
                    "entity_name": "Women's Hammer throw"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk28w",
                    "entity_name": "Women's Freestyle Wrestling, Middleweight 55 - 63 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2tf",
                    "entity_name": "Men's Taekwondo, Lightweight 58 - 68 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk38m",
                    "entity_name": "Men's Archery, individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2wy",
                    "entity_name": "Women's trampoline"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk36l",
                    "entity_name": "Women's Weightlifting, + 75kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2vj",
                    "entity_name": "Women's Athletics, 1500m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk318",
                    "entity_name": "Men's basketball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk31x",
                    "entity_name": "Women's BMX Cycling"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3fy",
                    "entity_name": "Men's Freestyle Wrestling, Lightweight 60-66 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2gt",
                    "entity_name": "Men's Table Tennis, Singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03w8gdr",
                    "entity_name": "Men's 200m Freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2mb",
                    "entity_name": "Women's K-2 500m (kayak double)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3ls",
                    "entity_name": "Women's 200m freestyle"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2vp",
                    "entity_name": "Men's 4x100m freestyle relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3l4",
                    "entity_name": "Men's Weightlifting, Middle Heavyweight 85-94 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk37v",
                    "entity_name": "Men's K-1 (kayak single)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3dp",
                    "entity_name": "Men's Four without coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk35n",
                    "entity_name": "Women's Beach Volleyball"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_s9yb",
                    "entity_name": "Women's Tennis, doubles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3gk",
                    "entity_name": "Men's Weightlifting, Heavyweight 94 - 105 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3f9",
                    "entity_name": "Women's 100m breaststroke"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2xw",
                    "entity_name": "Women's Foil team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk29z",
                    "entity_name": "Women's Rhythmic gymnastics, individual all-round"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2p6",
                    "entity_name": "Men's Weightlifting, Light Heavyweight 77-85 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2ws",
                    "entity_name": "Women's Athletics, 10000m"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3fg",
                    "entity_name": "Women's Freestyle Wrestling, Lightweight 48 - 55kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3md",
                    "entity_name": "Men's Laser - One Person Dinghy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2j6",
                    "entity_name": "Men's Boxing, Middleweight 69 - 75 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2mt",
                    "entity_name": "Men's Badminton, singles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2nf",
                    "entity_name": "Men's Boxing, Heavyweight 81 - 91kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3nz",
                    "entity_name": "Women's 100m butterfly"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgb47k",
                    "entity_name": "Badminton - Mixed doubles (Olympics)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk295",
                    "entity_name": "Women's Taekwondo, Lightweight 49 - 57 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3fs",
                    "entity_name": "Women's \u00c9p\u00e9e individual"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2sz",
                    "entity_name": "Women's Athletics, 400m hurdles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3mq",
                    "entity_name": "Women's Judo, 63-70kg (Middleweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3k1",
                    "entity_name": "Women's Judo, - 48kg (extra-lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2cp",
                    "entity_name": "Men's Freestyle Wrestling, Welterweight 66-74kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2j1",
                    "entity_name": "Men's Swimming, marathon 10km"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2pp",
                    "entity_name": "Men's C-2 1000m (canoe double)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk34d",
                    "entity_name": "Women's water polo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2_q",
                    "entity_name": "Women's Eight with coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2gn",
                    "entity_name": "Women's Quadruple sculls without coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2gz",
                    "entity_name": "Women's Lightweight double sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2l2",
                    "entity_name": "Men's Lightweight coxless four"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2s5",
                    "entity_name": "Men's Coxless pair"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2yt",
                    "entity_name": "Men's Eight with coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2zr",
                    "entity_name": "Women's Pair without coxswain"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2zx",
                    "entity_name": "Women's Double sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk39k",
                    "entity_name": "Men's Double sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3d_",
                    "entity_name": "Men's Lightweight double sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3g7",
                    "entity_name": "Women's Single Sculls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk36x",
                    "entity_name": "Women's Triple jump"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2ds",
                    "entity_name": "Men's Sabre team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk30b",
                    "entity_name": "Women's 4x200m freestyle relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2sb",
                    "entity_name": "Women's Weightlifting, 58kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3nn",
                    "entity_name": "Men's Table tennis, team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk38y",
                    "entity_name": "Men's hockey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3c8",
                    "entity_name": "Women's Freestyle Wrestling, Flyweight 48 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk38g",
                    "entity_name": "Men's Judo, 60 - 66kg (half-lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2bf",
                    "entity_name": "Men's Boxing, Welterweight 64-69 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2st",
                    "entity_name": "Men's Judo, 66 - 73kg (lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3kv",
                    "entity_name": "Men's Weightlifting, Middleweight 69-77 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2km",
                    "entity_name": "Women's Swimming, marathon 10km"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2yz",
                    "entity_name": "Men's Taekwondo, Heavyweight + 80 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk29b",
                    "entity_name": "Men's Greco-Roman Wrestling, Heavyweight 84-96 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3nt",
                    "entity_name": "Women's K-4 500m (kayak four)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2x2",
                    "entity_name": "Women's Taekwondo, Flyweight - 49 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3b0",
                    "entity_name": "Men's Weightlifting, Super Heavyweight + 105kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2m5",
                    "entity_name": "Men's Greco-Roman Wrestling, Super Heavyweight 96-120 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0j_pzdb",
                    "entity_name": "Men's Tennis, doubles"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk32v",
                    "entity_name": "Women's Weightlifting, 63kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3gw",
                    "entity_name": "Women's Laser Radial - One Person Dinghy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk34k",
                    "entity_name": "Women's Sychronized swimming, duet"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3bt",
                    "entity_name": "Women's 4x100m medley relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2fw",
                    "entity_name": "Women's Judo, 70 - 78kg (half-heavyweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2ld",
                    "entity_name": "Men's Greco-Roman Wrestling, Featherweight 55 - 60kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk321",
                    "entity_name": "Men's Freestyle Wrestling, Middleweight 74-84kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3hn",
                    "entity_name": "Women's Taekwondo, Heavyweight + 67 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0k1nx2m",
                    "entity_name": "Team Dressage"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk35b",
                    "entity_name": "Women's 470 - Two Person Dinghy"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3lg",
                    "entity_name": "Men's Star - Keelboat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3ly",
                    "entity_name": "Women's Yngling - Keelboat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2cc",
                    "entity_name": "Men's trampoline"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk33g",
                    "entity_name": "49er - Skiff"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk33y",
                    "entity_name": "Women's Athletics, Marathon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2v_",
                    "entity_name": "Women's Pole vault"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk29h",
                    "entity_name": "Women's Judo, 48 - 52kg (half-lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2fd",
                    "entity_name": "Women's Weightlifting, 48kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2fk",
                    "entity_name": "Women's Athletics, 4x100m relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2fq",
                    "entity_name": "Women's Archery, team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2g5",
                    "entity_name": "Women's Judo, 57 - 63kg (Half-Middleweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2m0",
                    "entity_name": "Women's Judo, 52 - 57kg (Lightweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2qg",
                    "entity_name": "Men's water polo"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2r7",
                    "entity_name": "Women's Individual Triathlon"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2tr",
                    "entity_name": "Women's Table tennis, team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2v6",
                    "entity_name": "Men's K-4 1000m (kayak four)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk2wm",
                    "entity_name": "Women's hockey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk34q",
                    "entity_name": "Men's K-2 1000m (kayak double)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk350",
                    "entity_name": "Women's Athletics, 20km walk"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk355",
                    "entity_name": "Men's Archery, team"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk36f",
                    "entity_name": "Men's Weightlifting, Lightweight 62-69 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk389",
                    "entity_name": "Men's Freestyle Wrestling, Bantamweight 55kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk38s",
                    "entity_name": "Men's Taekwondo, Middleweight 68 - 80 kg"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3cr",
                    "entity_name": "Women's Athletics, 4x400m relay"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04fk3kc",
                    "entity_name": "Men's Judo, 90 - 100kg (half-heavyweight)"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0kgbcs4",
                    "entity_name": "Badminton - Men's doubles"
                }
            ],
            "function": "none",
            "num_node": 4,
            "num_edge": 3,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "olympics.olympic_event",
                        "class": "olympics.olympic_event",
                        "friendly_name": "Olympic event",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "olympics.olympic_games",
                        "class": "olympics.olympic_games",
                        "friendly_name": "Olympic games",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.04jpl",
                        "class": "olympics.olympic_host_city",
                        "friendly_name": "london england",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 3,
                        "node_type": "entity",
                        "id": "m.0kbws",
                        "class": "olympics.olympic_games",
                        "friendly_name": "2008 beijing olympic games",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "olympics.olympic_event.olympic_games_contested",
                        "friendly_name": "Olympic games contested in"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "olympics.olympic_games.host_city",
                        "friendly_name": "Host City"
                    },
                    {
                        "start": 0,
                        "end": 3,
                        "relation": "olympics.olympic_event.olympic_games_contested",
                        "friendly_name": "Olympic games contested in"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :olympics.olympic_event . \n?x1 :type.object.type :olympics.olympic_games . \nVALUES ?x2 { :m.04jpl } \nVALUES ?x3 { :m.0kbws } \n?x0 :olympics.olympic_event.olympic_games_contested ?x1 . \n?x1 :olympics.olympic_games.host_city ?x2 . \n?x0 :olympics.olympic_event.olympic_games_contested ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
            "domains": [
                "olympics"
            ],
            "s_expression": "(AND olympics.olympic_event (AND (JOIN olympics.olympic_event.olympic_games_contested (JOIN olympics.olympic_games.host_city m.04jpl)) (JOIN olympics.olympic_event.olympic_games_contested m.0kbws)))"
        }
    },
    "958": {
        "generations": "what are the different dialects of the spanish language??",
        "ori_data_item": {
            "qid": 2100706008000,
            "question": "the espa\u221a\u00b1ol has which language dialect ?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057wh0",
                    "entity_name": "Mexican Spanish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.051hvy",
                    "entity_name": "Rioplatense Spanish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.057x7c",
                    "entity_name": "Puerto Rican Spanish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01plpn",
                    "entity_name": "Andalusian Spanish"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.072ssb",
                    "entity_name": "Caribbean Spanish"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "language.language_dialect",
                        "class": "language.language_dialect",
                        "friendly_name": "Language Dialect",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06nm1",
                        "class": "language.human_language",
                        "friendly_name": "espa\u221a\u00b1ol",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "language.language_dialect.language",
                        "friendly_name": "Language"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :language.language_dialect . \nVALUES ?x1 { :m.06nm1 } \n?x0 :language.language_dialect.language ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "language"
            ],
            "s_expression": "(AND language.language_dialect (JOIN language.language_dialect.language m.06nm1))"
        }
    },
    "959": {
        "generations": "which airline has Simon Mwansa Kapwepwe International Airport as one of its focus cities??",
        "ori_data_item": {
            "qid": 2101105005000,
            "question": "which airline has the focus city of simon mwansa kapwepwe international airport?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w94f1",
                    "entity_name": "Central African Airways"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "aviation.airline",
                        "class": "aviation.airline",
                        "friendly_name": "Airline",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02827vy",
                        "class": "aviation.airport",
                        "friendly_name": "Simon Mwansa Kapwepwe International Airport",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "aviation.airline.focus_cities",
                        "friendly_name": "Focus cities"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.airline . \nVALUES ?x1 { :m.02827vy } \n?x0 :aviation.airline.focus_cities ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "aviation"
            ],
            "s_expression": "(AND aviation.airline (JOIN aviation.airline.focus_cities m.02827vy))"
        }
    },
    "960": {
        "generations": "which publishing company has published books that Helmut Peitsch has contributed to??",
        "ori_data_item": {
            "qid": 3205441001000,
            "question": "who is the publisher of the book edition contributed to by helmut peitsch?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.08b22w6",
                    "entity_name": "Verlag f\u00fcr Berlin-Brandenburg"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.publishing_company",
                        "class": "book.publishing_company",
                        "friendly_name": "Publisher",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "book.book_edition",
                        "class": "book.book_edition",
                        "friendly_name": "Book Edition",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.08b2_lb",
                        "class": "book.author",
                        "friendly_name": "Helmut Peitsch",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.publishing_company.books_published",
                        "friendly_name": "Book editions published"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "book.author.contributing_author_to",
                        "friendly_name": "Contributing author to"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.publishing_company . \n?x1 :type.object.type :book.book_edition . \nVALUES ?x2 { :m.08b2_lb } \n?x0 :book.publishing_company.books_published ?x1 . \n?x2 :book.author.contributing_author_to ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.publishing_company (JOIN book.publishing_company.books_published (JOIN (R book.author.contributing_author_to) m.08b2_lb)))"
        }
    },
    "961": {
        "generations": "what noble title is equivalent to the king of spain??",
        "ori_data_item": {
            "qid": 3201184010000,
            "question": "what is the equivalent title of the king of spain for females?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05cydpf",
                    "entity_name": "Queen of Spain"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "royalty.noble_title",
                        "class": "royalty.noble_title",
                        "friendly_name": "Noble title",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "royalty.noble_title_gender_equivalency",
                        "class": "royalty.noble_title_gender_equivalency",
                        "friendly_name": "Noble title gender equivalency",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.05cydp2",
                        "class": "royalty.noble_title",
                        "friendly_name": "King of Spain",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "royalty.noble_title_gender_equivalency.equivalent_title",
                        "friendly_name": "Equivalent title"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "royalty.noble_title_gender_equivalency.equivalent_title",
                        "friendly_name": "Equivalent title"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :royalty.noble_title . \n?x1 :type.object.type :royalty.noble_title_gender_equivalency . \nVALUES ?x2 { :m.05cydp2 } \n?x1 :royalty.noble_title_gender_equivalency.equivalent_title ?x0 . \n?x1 :royalty.noble_title_gender_equivalency.equivalent_title ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "royalty"
            ],
            "s_expression": "(AND royalty.noble_title (JOIN (R royalty.noble_title_gender_equivalency.equivalent_title) (JOIN royalty.noble_title_gender_equivalency.equivalent_title m.05cydp2)))"
        }
    },
    "962": {
        "generations": "how many religious texts are associated with oriental orthodox??",
        "ori_data_item": {
            "qid": 2103219008000,
            "question": "oriental orthodox has how many religious texts?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "3"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religious_text",
                        "class": "religion.religious_text",
                        "friendly_name": "Religious Text",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05pbd",
                        "class": "religion.religion",
                        "friendly_name": "oriental orthodox",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "religion.religion.texts",
                        "friendly_name": "Texts"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.05pbd } \n?x1 :religion.religion.texts ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(COUNT (AND religion.religious_text (JOIN (R religion.religion.texts) m.05pbd)))"
        }
    },
    "963": {
        "generations": "which book edition series has donald a. carson as its series editor??",
        "ori_data_item": {
            "qid": 2102206013000,
            "question": "what bool edition series did donald a. carson edit?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0129btv_",
                    "entity_name": "Pillar New Testament Commentary"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.book_edition_series",
                        "class": "book.book_edition_series",
                        "friendly_name": "Book edition series",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.06vx3_",
                        "class": "book.series_editor",
                        "friendly_name": "donald a. carson",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.book_edition_series.series_editor",
                        "friendly_name": "Series editor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition_series . \nVALUES ?x1 { :m.06vx3_ } \n?x0 :book.book_edition_series.series_editor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.book_edition_series (JOIN book.book_edition_series.series_editor m.06vx3_))"
        }
    },
    "964": {
        "generations": "which moon has the highest inclination in its orbital relationship??",
        "ori_data_item": {
            "qid": 2105327004000,
            "question": "which moon has the maximum inclination?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02t0db",
                    "entity_name": "Ymir"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.moon",
                        "class": "astronomy.moon",
                        "friendly_name": "Moon",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.orbital_relationship.inclination",
                        "friendly_name": "Inclination"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.moon . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.moon . \n?y0 :astronomy.orbital_relationship.inclination ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.orbital_relationship.inclination ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(ARGMAX astronomy.moon astronomy.orbital_relationship.inclination)"
        }
    },
    "965": {
        "generations": "which opera librettist has written libretti for works by jacopo ferretti??",
        "ori_data_item": {
            "qid": 3202740007000,
            "question": "which librettists have worked on operas with jacopo ferretti?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_598",
                    "entity_name": "Fran\u00e7ois-Beno\u00eet Hoffman"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "opera.librettist",
                        "class": "opera.librettist",
                        "friendly_name": "Librettist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "opera.opera",
                        "class": "opera.opera",
                        "friendly_name": "Opera",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02r0wgk",
                        "class": "opera.librettist",
                        "friendly_name": "Jacopo Ferretti",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "opera.librettist.libretti",
                        "friendly_name": "Opera libretti written"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "opera.opera.librettist",
                        "friendly_name": "Librettist"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :opera.librettist . \n?x1 :type.object.type :opera.opera . \nVALUES ?x2 { :m.02r0wgk } \n?x0 :opera.librettist.libretti ?x1 . \n?x1 :opera.opera.librettist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "opera"
            ],
            "s_expression": "(AND opera.librettist (JOIN opera.librettist.libretti (JOIN opera.opera.librettist m.02r0wgk)))"
        }
    },
    "966": {
        "generations": "where in sonic team's sonic the hedgehog universe was the game character born??",
        "ori_data_item": {
            "qid": 3204985016000,
            "question": "which character in sonic team's sonic the hedgehog universe was born where the series took place?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015dxd",
                    "entity_name": "Knuckles the Echidna"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01x1wl",
                    "entity_name": "Shadow the Hedgehog"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0ck8nbm",
                    "entity_name": "Egg Pawn"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04r_sl",
                    "entity_name": "Biolizard"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "cvg.game_character",
                        "class": "cvg.game_character",
                        "friendly_name": "Video Game Character",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "fictional_universe.fictional_setting",
                        "class": "fictional_universe.fictional_setting",
                        "friendly_name": "Fictional Setting",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0cnb3nv",
                        "class": "fictional_universe.fictional_universe",
                        "friendly_name": "Sonic Team's Sonic the Hedgehog Universe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "fictional_universe.fictional_character.place_of_birth",
                        "friendly_name": "Place of Birth"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "fictional_universe.fictional_universe.locations",
                        "friendly_name": "Locations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_character . \n?x1 :type.object.type :fictional_universe.fictional_setting . \nVALUES ?x2 { :m.0cnb3nv } \n?x0 :fictional_universe.fictional_character.place_of_birth ?x1 . \n?x2 :fictional_universe.fictional_universe.locations ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "fictional_universe"
            ],
            "s_expression": "(AND cvg.game_character (JOIN fictional_universe.fictional_character.place_of_birth (JOIN (R fictional_universe.fictional_universe.locations) m.0cnb3nv)))"
        }
    },
    "967": {
        "generations": "how many ice hockey coaches are currently coaching the san jose sharks??",
        "ori_data_item": {
            "qid": 2103063015000,
            "question": "how many ice hockey coaches have the san jose sharks had?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "1"
                }
            ],
            "function": "count",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "ice_hockey.hockey_coach",
                        "class": "ice_hockey.hockey_coach",
                        "friendly_name": "Ice hockey coach",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jnrk",
                        "class": "ice_hockey.hockey_team",
                        "friendly_name": "San Jose Sharks",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "ice_hockey.hockey_coach.current_team",
                        "friendly_name": "Current Team Coached"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :ice_hockey.hockey_coach . \nVALUES ?x1 { :m.0jnrk } \n?x0 :ice_hockey.hockey_coach.current_team ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "ice_hockey"
            ],
            "s_expression": "(COUNT (AND ice_hockey.hockey_coach (JOIN ice_hockey.hockey_coach.current_team m.0jnrk)))"
        }
    },
    "968": {
        "generations": "which governmental body has French Minister of the Economy, Finance and Industry as one of its members??",
        "ori_data_item": {
            "qid": 3203127005000,
            "question": "the office holders of french minister of the economy, finance and industry belong to which governmental body?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.099gwm",
                    "entity_name": "Government of France"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01rqxn",
                    "entity_name": "National Assembly"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.governmental_body",
                        "class": "government.governmental_body",
                        "friendly_name": "Governmental Body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "government.government_position_held",
                        "class": "government.government_position_held",
                        "friendly_name": "Government Position Held",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.03kcws",
                        "class": "government.government_office_or_title",
                        "friendly_name": "French Minister of the Economy, Finance and Industry",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.governmental_body.members",
                        "friendly_name": "Members"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "government.government_office_or_title.office_holders",
                        "friendly_name": "Office Holders"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.governmental_body . \n?x1 :type.object.type :government.government_position_held . \nVALUES ?x2 { :m.03kcws } \n?x0 :government.governmental_body.members ?x1 . \n?x2 :government.government_office_or_title.office_holders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.governmental_body (JOIN government.governmental_body.members (JOIN (R government.government_office_or_title.office_holders) m.03kcws)))"
        }
    },
    "969": {
        "generations": "what color is the light at pencarrow head lighthouse??",
        "ori_data_item": {
            "qid": 3204325005000,
            "question": "what color is in the light color range that includes pencarrow head?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.06fvc",
                    "entity_name": "Red"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.083jv",
                    "entity_name": "White"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "visual_art.color",
                        "class": "visual_art.color",
                        "friendly_name": "Color",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "architecture.light_color_range",
                        "class": "architecture.light_color_range",
                        "friendly_name": "Light color range",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02z111d",
                        "class": "architecture.lighthouse",
                        "friendly_name": "pencarrow head",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "architecture.light_color_range.color",
                        "friendly_name": "Color"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "architecture.lighthouse.light_color_range",
                        "friendly_name": "Light color range"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :visual_art.color . \n?x1 :type.object.type :architecture.light_color_range . \nVALUES ?x2 { :m.02z111d } \n?x1 :architecture.light_color_range.color ?x0 . \n?x2 :architecture.lighthouse.light_color_range ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "architecture"
            ],
            "s_expression": "(AND visual_art.color (JOIN (R architecture.light_color_range.color) (JOIN (R architecture.lighthouse.light_color_range) m.02z111d)))"
        }
    },
    "970": {
        "generations": "which musical director has a major field of study in economic activity and was also a student??",
        "ori_data_item": {
            "qid": 3201374003000,
            "question": "who majored in economic activity but was also a musical director?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05mtrc4",
                    "entity_name": "Tom Kitt"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.musical_director",
                        "class": "theater.musical_director",
                        "friendly_name": "Musical Director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.02j62",
                        "class": "education.field_of_study",
                        "friendly_name": "economic activity",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "education.education.student",
                        "friendly_name": "Student"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "education.education.major_field_of_study",
                        "friendly_name": "Major/Field Of Study"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_director . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.02j62 } \n?x1 :education.education.student ?x0 . \n?x1 :education.education.major_field_of_study ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education"
            ],
            "s_expression": "(AND theater.musical_director (JOIN (R education.education.student) (JOIN education.education.major_field_of_study m.02j62)))"
        }
    },
    "971": {
        "generations": "which profession in music involves playing the euphonium??",
        "ori_data_item": {
            "qid": 2102065012000,
            "question": "to what musical profession do people who use the euphoniums belong?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02h66hs",
                    "entity_name": "Euphoniumist"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.musician_profession",
                        "class": "music.musician_profession",
                        "friendly_name": "Musician profession",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.02t89",
                        "class": "music.instrument",
                        "friendly_name": "euphoniums",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.musician_profession.instrument",
                        "friendly_name": "Instrument"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.musician_profession . \nVALUES ?x1 { :m.02t89 } \n?x0 :music.musician_profession.instrument ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.musician_profession (JOIN music.musician_profession.instrument m.02t89))"
        }
    },
    "972": {
        "generations": "which patent office has the earliest issue date for a US patent??",
        "ori_data_item": {
            "qid": 3205999003000,
            "question": "which patent office can i find a patent at with the smallest issue date?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01fzds",
                    "entity_name": "United States Patent and Trademark Office"
                }
            ],
            "function": "argmin",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.patent_office",
                        "class": "law.patent_office",
                        "friendly_name": "Patent office",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "law.us_patent",
                        "class": "law.us_patent",
                        "friendly_name": "Patent",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.patent_office.patents",
                        "friendly_name": "Patents"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "law.us_patent.issue_date",
                        "friendly_name": "Issue Date"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.patent_office . \n?x1 :type.object.type :law.us_patent . \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :law.patent_office . \n?y1 :type.object.type :law.us_patent . \n?y0 :law.patent_office.patents ?y1 . \n?y1 :law.us_patent.issue_date ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :law.patent_office.patents ?x1 . \n?x1 :law.us_patent.issue_date ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(ARGMIN law.patent_office (JOIN law.patent_office.patents law.us_patent.issue_date))"
        }
    },
    "973": {
        "generations": "what cancer center has indiana university school of medicine as its constituents??",
        "ori_data_item": {
            "qid": 2102656010000,
            "question": "indiana university school of medicine contains what cancer center?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04_7j7j",
                    "entity_name": "Indiana University Melvin and Bren Simon Cancer Center"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.cancer_center",
                        "class": "medicine.cancer_center",
                        "friendly_name": "Cancer Center",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03d4yf",
                        "class": "medicine.cancer_center_constituent",
                        "friendly_name": "Indiana University School of Medicine",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.cancer_center.constituents",
                        "friendly_name": "Constituents"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.cancer_center . \nVALUES ?x1 { :m.03d4yf } \n?x0 :medicine.cancer_center.constituents ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.cancer_center (JOIN medicine.cancer_center.constituents m.03d4yf))"
        }
    },
    "974": {
        "generations": "which organism has a height of less than 83.1 meters??",
        "ori_data_item": {
            "qid": 2105285002000,
            "question": "which organism is less than 83.1 tall?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01gljb",
                    "entity_name": "War Admiral"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yjhf",
                    "entity_name": "Smarty Jones"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03ym_ht",
                    "entity_name": "Big Brown"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05zm5p2",
                    "entity_name": "Rachel Alexandra"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09lzbv",
                    "entity_name": "Bart the Bear"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0khqlk_",
                    "entity_name": "Wittinger VDL"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0khqmqz",
                    "entity_name": "Hold Up Premier"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05pg6q",
                    "entity_name": "Trigger"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gv_l",
                    "entity_name": "Secretariat"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0htkz",
                    "entity_name": "Nijinsky"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01plbs",
                    "entity_name": "Man o' War"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hsph",
                    "entity_name": "Northern Dancer"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04lj8n4",
                    "entity_name": "Zenyatta"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.022q5kf",
                    "entity_name": "Crystal The Monkey"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdqswk",
                    "entity_name": "Summit Road Tree"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0zdsn74",
                    "entity_name": "Allen Russell"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01g14f",
                    "entity_name": "Seabiscuit"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.017gz0",
                    "entity_name": "Phar Lap"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.03whtjj",
                    "entity_name": "Denman"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0n3yhkg",
                    "entity_name": "Zeus"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0d518_",
                    "entity_name": "The Senator"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gg9w3z",
                    "entity_name": "Black Caviar"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027bn2x",
                    "entity_name": "Kauto Star"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0fqt55",
                    "entity_name": "Zarafa"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0_s3hj0",
                    "entity_name": "Eisenhower Tree"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05jbtg",
                    "entity_name": "Hogzilla"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.012g5153",
                    "entity_name": "Uno"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0sgf2wz",
                    "entity_name": "Big Tree"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05lfrs",
                    "entity_name": "Shamu"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0b770jy",
                    "entity_name": "Giant George"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0116dygh",
                    "entity_name": "George Harrison Tree"
                }
            ],
            "function": "<",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "biology.organism",
                        "class": "biology.organism",
                        "friendly_name": "Organism",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "83.1^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "83.1",
                        "question_node": 0,
                        "function": "<"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "biology.organism.height_meters",
                        "friendly_name": "Height"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :biology.organism . \nFILTER (?x1 < \"83.1\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :biology.organism.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "biology"
            ],
            "s_expression": "(AND biology.organism (lt biology.organism.height_meters 83.1^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "975": {
        "generations": "what geographical feature belongs to the category of explosion crater??",
        "ori_data_item": {
            "qid": 2100008015000,
            "question": "what physical characteristics make up the explosion crater category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04c9hg",
                    "entity_name": "Lochnagar mine"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0drw9ww",
                    "entity_name": "Cemetery Crater"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "geography.geographical_feature",
                        "class": "geography.geographical_feature",
                        "friendly_name": "Geographical Feature",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05pdd6b",
                        "class": "geography.geographical_feature_category",
                        "friendly_name": "Explosion crater",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "geography.geographical_feature.category",
                        "friendly_name": "Category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.geographical_feature . \nVALUES ?x1 { :m.05pdd6b } \n?x0 :geography.geographical_feature.category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "geography"
            ],
            "s_expression": "(AND geography.geographical_feature (JOIN geography.geographical_feature.category m.05pdd6b))"
        }
    },
    "976": {
        "generations": "what file format is extended to aiff??",
        "ori_data_item": {
            "qid": 2102280006000,
            "question": "what file format was extended by aiff?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0hm7l",
                    "entity_name": "Interchange File Format"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "computer.file_format",
                        "class": "computer.file_format",
                        "friendly_name": "File Format",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hm7z",
                        "class": "computer.file_format",
                        "friendly_name": "aiff",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "computer.file_format.extended_to",
                        "friendly_name": "Extended To"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.file_format . \nVALUES ?x1 { :m.0hm7z } \n?x0 :computer.file_format.extended_to ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "computer"
            ],
            "s_expression": "(AND computer.file_format (JOIN computer.file_format.extended_to m.0hm7z))"
        }
    },
    "977": {
        "generations": "which theater director got married in the north and has a spouse??",
        "ori_data_item": {
            "qid": 3200225004000,
            "question": "what is the name of the theater director that married in north?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0191y8",
                    "entity_name": "June Havoc"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "theater.theater_director",
                        "class": "theater.theater_director",
                        "friendly_name": "Theater Director",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "people.marriage",
                        "class": "people.marriage",
                        "friendly_name": "Marriage",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0kk5j",
                        "class": "location.hud_county_place",
                        "friendly_name": "north",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "people.marriage.spouse",
                        "friendly_name": "Spouse"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "people.marriage.location_of_ceremony",
                        "friendly_name": "Location of ceremony"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_director . \n?x1 :type.object.type :people.marriage . \nVALUES ?x2 { :m.0kk5j } \n?x1 :people.marriage.spouse ?x0 . \n?x1 :people.marriage.location_of_ceremony ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "people"
            ],
            "s_expression": "(AND theater.theater_director (JOIN (R people.marriage.spouse) (JOIN people.marriage.location_of_ceremony m.0kk5j)))"
        }
    },
    "978": {
        "generations": "what type of engine is used in the mercedes-benz 4.6l 8 cylinder 429hp 516ft-lbs turbo??",
        "ori_data_item": {
            "qid": 2100163011000,
            "question": "which type of engine used mercedes-benz 4.6l 8 cylinder 429hp 516ft-lbs turbo?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07zvq",
                    "entity_name": "V8 engine"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.engine_type",
                        "class": "automotive.engine_type",
                        "friendly_name": "Engine Type",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h2lk42",
                        "class": "automotive.engine",
                        "friendly_name": "Mercedes-Benz 4.6L 8 Cylinder 429hp 516ft-lbs Turbo",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.engine_type.used_in",
                        "friendly_name": "Used In"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.engine_type . \nVALUES ?x1 { :m.0h2lk42 } \n?x0 :automotive.engine_type.used_in ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.engine_type (JOIN automotive.engine_type.used_in m.0h2lk42))"
        }
    },
    "979": {
        "generations": "what model is the predecessor of audi type t??",
        "ori_data_item": {
            "qid": 2101951007000,
            "question": "who is the successor of the automobile model audi type t",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0h7qjy5",
                    "entity_name": "Audi Type R"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.model",
                        "class": "automotive.model",
                        "friendly_name": "Automobile Model",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0h7lbfl",
                        "class": "automotive.model",
                        "friendly_name": "Audi Type T",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.model.successor",
                        "friendly_name": "Successor"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.model . \nVALUES ?x1 { :m.0h7lbfl } \n?x0 :automotive.model.successor ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.model (JOIN automotive.model.successor m.0h7lbfl))"
        }
    },
    "980": {
        "generations": "what government service is provided by the north bristol nhs trust??",
        "ori_data_item": {
            "qid": 2100766014000,
            "question": "the north bristol nhs trust is maintained by what government service?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01mw2x",
                    "entity_name": "Health Care"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.government_service",
                        "class": "government.government_service",
                        "friendly_name": "Government Service",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0hht6sm",
                        "class": "government.government_agency",
                        "friendly_name": "North Bristol NHS Trust",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "government.government_service.providing_agency",
                        "friendly_name": "Providing agency"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_service . \nVALUES ?x1 { :m.0hht6sm } \n?x0 :government.government_service.providing_agency ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "government"
            ],
            "s_expression": "(AND government.government_service (JOIN government.government_service.providing_agency m.0hht6sm))"
        }
    },
    "981": {
        "generations": "what is the routed drug that contains avobenzone, octinoxate, octisalate, and oxybenzone in a lotion with concentrations of 0.015/0.075/0.05/0.06??",
        "ori_data_item": {
            "qid": 2101535014000,
            "question": "avobenzone, octinoxate, octisalate, oxybenzone 0.015/0.075/0.05/0.06 lotion is in which routed drug?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0z3ydj0",
                    "entity_name": "Avobenzone/Octinoxate/Octisalate/Oxybenzone Topical"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.routed_drug",
                        "class": "medicine.routed_drug",
                        "friendly_name": "Routed drug",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0jxr5mx",
                        "class": "medicine.drug_formulation",
                        "friendly_name": "Avobenzone, octinoxate, octisalate, oxybenzone 0.015/0.075/0.05/0.06 lotion",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.routed_drug.marketed_formulations",
                        "friendly_name": "Marketed formulations"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.routed_drug . \nVALUES ?x1 { :m.0jxr5mx } \n?x0 :medicine.routed_drug.marketed_formulations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.routed_drug (JOIN medicine.routed_drug.marketed_formulations m.0jxr5mx))"
        }
    },
    "982": {
        "generations": "which generation of cars is made by shelby??",
        "ori_data_item": {
            "qid": 2101680015000,
            "question": "what is shelby's automobile generation?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02lc0rk",
                    "entity_name": "1967-1970 Shelby GT500"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "automotive.generation",
                        "class": "automotive.generation",
                        "friendly_name": "Automobile generation",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.01x3fxq",
                        "class": "automotive.make",
                        "friendly_name": "Shelby",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "automotive.generation.make",
                        "friendly_name": "Make"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.generation . \nVALUES ?x1 { :m.01x3fxq } \n?x0 :automotive.generation.make ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "automotive"
            ],
            "s_expression": "(AND automotive.generation (JOIN automotive.generation.make m.01x3fxq))"
        }
    },
    "983": {
        "generations": "which star system body has the lowest declination among all celestial objects??",
        "ori_data_item": {
            "qid": 2104405001000,
            "question": "what is the star system body that has the least declination?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.04wv_",
                    "entity_name": "Moon"
                }
            ],
            "function": "argmin",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "astronomy.star_system_body",
                        "class": "astronomy.star_system_body",
                        "friendly_name": "Star system body",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.float",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmin"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "astronomy.celestial_object.decllnation",
                        "friendly_name": "Declination"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star_system_body . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.star_system_body . \n?y0 :astronomy.celestial_object.decllnation ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.celestial_object.decllnation ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "astronomy"
            ],
            "s_expression": "(ARGMIN astronomy.star_system_body astronomy.celestial_object.decllnation)"
        }
    },
    "984": {
        "generations": "which sports position is played by players on the CSKA Pomir Dushanbe team??",
        "ori_data_item": {
            "qid": 3204897007000,
            "question": "the players who play for cska pomir dushanbe play what positions?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02nzb8",
                    "entity_name": "Midfielder"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02sdk9v",
                    "entity_name": "Forward"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "sports.sports_position",
                        "class": "sports.sports_position",
                        "friendly_name": "Sports position",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "sports.sports_team_roster",
                        "class": "sports.sports_team_roster",
                        "friendly_name": "Sports team roster",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0g3g3f",
                        "class": "soccer.football_team",
                        "friendly_name": "CSKA Pomir Dushanbe",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "sports.sports_position.players",
                        "friendly_name": "Players"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "sports.sports_team_roster.team",
                        "friendly_name": "Team"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.sports_position . \n?x1 :type.object.type :sports.sports_team_roster . \nVALUES ?x2 { :m.0g3g3f } \n?x0 :sports.sports_position.players ?x1 . \n?x1 :sports.sports_team_roster.team ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "sports"
            ],
            "s_expression": "(AND sports.sports_position (JOIN sports.sports_position.players (JOIN sports.sports_team_roster.team m.0g3g3f)))"
        }
    },
    "985": {
        "generations": "what material is used to make roller coasters with more than 7 inversions??",
        "ori_data_item": {
            "qid": 3206390005000,
            "question": "what is the roller coaster with more than 7 inversions made from?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yjlh",
                    "entity_name": "Steel"
                }
            ],
            "function": ">",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster_material",
                        "class": "amusement_parks.roller_coaster_material",
                        "friendly_name": "Roller Coaster Material",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "amusement_parks.roller_coaster",
                        "class": "amusement_parks.roller_coaster",
                        "friendly_name": "Roller Coaster",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "literal",
                        "id": "7^^http://www.w3.org/2001/XMLSchema#integer",
                        "class": "type.int",
                        "friendly_name": "7",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "amusement_parks.roller_coaster_material.roller_coasters",
                        "friendly_name": "Roller Coasters"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "amusement_parks.ride.inversions",
                        "friendly_name": "Inversions"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.roller_coaster_material . \n?x1 :type.object.type :amusement_parks.roller_coaster . \nFILTER (?x2 > \"7\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :amusement_parks.roller_coaster_material.roller_coasters ?x1 . \n?x1 :amusement_parks.ride.inversions ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "amusement_parks"
            ],
            "s_expression": "(AND amusement_parks.roller_coaster_material (JOIN amusement_parks.roller_coaster_material.roller_coasters (gt amusement_parks.ride.inversions 7^^http://www.w3.org/2001/XMLSchema#integer)))"
        }
    },
    "986": {
        "generations": "what diagnostic test is a subcategory of neuropsychological test??",
        "ori_data_item": {
            "qid": 2101878002000,
            "question": "what test type is the parent diagnostic test for a neuropsychological test?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gsxnx",
                    "entity_name": "Continuous performance task"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "medicine.diagnostic_test",
                        "class": "medicine.diagnostic_test",
                        "friendly_name": "Diagnostic Test",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.022cfz",
                        "class": "medicine.diagnostic_test",
                        "friendly_name": "Neuropsychological test",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "medicine.diagnostic_test.parent_test",
                        "friendly_name": "Parent test"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.diagnostic_test . \nVALUES ?x1 { :m.022cfz } \n?x0 :medicine.diagnostic_test.parent_test ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "medicine"
            ],
            "s_expression": "(AND medicine.diagnostic_test (JOIN medicine.diagnostic_test.parent_test m.022cfz))"
        }
    },
    "987": {
        "generations": "which satellite began operating on december 24th, 1979??",
        "ori_data_item": {
            "qid": 2100397002000,
            "question": "what is the name of the satellite which begun its operation on 12/24/1979?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0w7l9l1",
                    "entity_name": "CAT-1"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "spaceflight.satellite",
                        "class": "spaceflight.satellite",
                        "friendly_name": "Satellite",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "1979-12-24^^http://www.w3.org/2001/XMLSchema#date",
                        "class": "type.datetime",
                        "friendly_name": "12/24/1979",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "spaceflight.satellite.began_operating",
                        "friendly_name": "Began operating"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.satellite . \nVALUES ?x1 { \"1979-12-24-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :spaceflight.satellite.began_operating ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "spaceflight"
            ],
            "s_expression": "(AND spaceflight.satellite (JOIN spaceflight.satellite.began_operating 1979-12-24^^http://www.w3.org/2001/XMLSchema#date))"
        }
    },
    "988": {
        "generations": "which US president graduated from columbia university school of law??",
        "ori_data_item": {
            "qid": 3203618001000,
            "question": "are there any presidents that graduated from columbia university school of law and if so can you list them?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02yy8",
                    "entity_name": "Franklin D. Roosevelt"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.07hyk",
                    "entity_name": "Theodore Roosevelt"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "government.us_president",
                        "class": "government.us_president",
                        "friendly_name": "US President",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "education.education",
                        "class": "education.education",
                        "friendly_name": "Education",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.01n951",
                        "class": "education.university",
                        "friendly_name": "columbia university school of law",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "people.person.education",
                        "friendly_name": "Education"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "education.educational_institution.students_graduates",
                        "friendly_name": "Students/Graduates"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.us_president . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.01n951 } \n?x0 :people.person.education ?x1 . \n?x2 :education.educational_institution.students_graduates ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "education",
                "people"
            ],
            "s_expression": "(AND government.us_president (JOIN people.person.education (JOIN (R education.educational_institution.students_graduates) m.01n951)))"
        }
    },
    "989": {
        "generations": "who colored the comic covers for detective comics #580??",
        "ori_data_item": {
            "qid": 2102267001000,
            "question": "which comic book colorist has its comic covers colored by detective comics #580?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05f9bzr",
                    "entity_name": "Jerry Bingham"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "comic_books.comic_book_colorist",
                        "class": "comic_books.comic_book_colorist",
                        "friendly_name": "Comic Book Colorist",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.03bx0cp",
                        "class": "comic_books.comic_book_issue",
                        "friendly_name": "Detective Comics #580",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "comic_books.comic_book_colorist.comic_covers_colored",
                        "friendly_name": "Comic Covers Colored"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_colorist . \nVALUES ?x1 { :m.03bx0cp } \n?x0 :comic_books.comic_book_colorist.comic_covers_colored ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "comic_books"
            ],
            "s_expression": "(AND comic_books.comic_book_colorist (JOIN comic_books.comic_book_colorist.comic_covers_colored m.03bx0cp))"
        }
    },
    "990": {
        "generations": "what subclass of material is related to steel in engineering??",
        "ori_data_item": {
            "qid": 3202704011000,
            "question": "steel and what other materials are in the same class?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.02w4cxr",
                    "entity_name": "Amalgam"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025rw19",
                    "entity_name": "Iron"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01brf",
                    "entity_name": "Bronze"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025rsfk",
                    "entity_name": "Copper"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.027vj2v",
                    "entity_name": "Aluminium"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.025sqz8",
                    "entity_name": "Zinc"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01504",
                    "entity_name": "brass"
                }
            ],
            "function": "none",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "engineering.material",
                        "class": "engineering.material",
                        "friendly_name": "Material",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "engineering.material",
                        "class": "engineering.material",
                        "friendly_name": "Material",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.06qqb",
                        "class": "engineering.material",
                        "friendly_name": "Steel",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "engineering.material.subclass",
                        "friendly_name": "Child material class"
                    },
                    {
                        "start": 2,
                        "end": 1,
                        "relation": "engineering.material.parent_material_class",
                        "friendly_name": "Parent material class"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.material . \n?x1 :type.object.type :engineering.material . \nVALUES ?x2 { :m.06qqb } \n?x1 :engineering.material.subclass ?x0 . \n?x2 :engineering.material.parent_material_class ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "engineering"
            ],
            "s_expression": "(AND engineering.material (JOIN (R engineering.material.subclass) (JOIN (R engineering.material.parent_material_class) m.06qqb)))"
        }
    },
    "991": {
        "generations": "what publishing company is the imprint of coughlan companies??",
        "ori_data_item": {
            "qid": 2101941015000,
            "question": "what publisher is an imprint coughlan companies?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0bmcgdt",
                    "entity_name": "Capstone Publishers"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.05v2c5y",
                    "entity_name": "Children's Library Resources"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "book.publishing_company",
                        "class": "book.publishing_company",
                        "friendly_name": "Publisher",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05v2c4t",
                        "class": "book.publishing_company",
                        "friendly_name": "Coughlan Companies",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "book.publishing_company.imprint_of",
                        "friendly_name": "Imprint of"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.publishing_company . \nVALUES ?x1 { :m.05v2c4t } \n?x0 :book.publishing_company.imprint_of ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "book"
            ],
            "s_expression": "(AND book.publishing_company (JOIN book.publishing_company.imprint_of m.05v2c4t))"
        }
    },
    "992": {
        "generations": "what music video genre does the perfect kiss belong to??",
        "ori_data_item": {
            "qid": 2100011009000,
            "question": "what genre is the perfect kiss?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0y3_8",
                    "entity_name": "Synthpop"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.music_video_genre",
                        "class": "music.music_video_genre",
                        "friendly_name": "Music video genre",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0bq9ymg",
                        "class": "music.music_video",
                        "friendly_name": "The Perfect Kiss",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "music.music_video_genre.music_videos_of_this_genre",
                        "friendly_name": "Music videos of this genre"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video_genre . \nVALUES ?x1 { :m.0bq9ymg } \n?x0 :music.music_video_genre.music_videos_of_this_genre ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(AND music.music_video_genre (JOIN music.music_video_genre.music_videos_of_this_genre m.0bq9ymg))"
        }
    },
    "993": {
        "generations": "what legal subject is involved in the case Constantin Medien AG v Bernie Ecclestone??",
        "ori_data_item": {
            "qid": 2100796003000,
            "question": "in constantin medien ag v bernie ecclestone, what were the legal subjects?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.01mq8p",
                    "entity_name": "Bribery"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.legal_subject",
                        "class": "law.legal_subject",
                        "friendly_name": "Legal subject",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.010f0rfd",
                        "class": "law.legal_case",
                        "friendly_name": "Constantin Medien AG v Bernie Ecclestone",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.legal_subject.legal_cases",
                        "friendly_name": "Legal cases"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.legal_subject . \nVALUES ?x1 { :m.010f0rfd } \n?x0 :law.legal_subject.legal_cases ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.legal_subject (JOIN law.legal_subject.legal_cases m.010f0rfd))"
        }
    },
    "994": {
        "generations": "what collection category does holiday ball barbie belong to??",
        "ori_data_item": {
            "qid": 2102088009000,
            "question": "holiday ball barbie falls under what category?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.015w6q",
                    "entity_name": "Barbie"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "interests.collection_category",
                        "class": "interests.collection_category",
                        "friendly_name": "Collection category",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.05hplyv",
                        "class": "interests.collectable_item",
                        "friendly_name": "Holiday Ball Barbie",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "interests.collection_category.items_in_this_category",
                        "friendly_name": "Items in this category"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :interests.collection_category . \nVALUES ?x1 { :m.05hplyv } \n?x0 :interests.collection_category.items_in_this_category ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "interests"
            ],
            "s_expression": "(AND interests.collection_category (JOIN interests.collection_category.items_in_this_category m.05hplyv))"
        }
    },
    "995": {
        "generations": "who proposed the constitutional amendment called \"amendment\"??",
        "ori_data_item": {
            "qid": 2102984001000,
            "question": "the amendment was proposed by which constitutional amendment proposer?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0424m",
                    "entity_name": "James Madison"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "law.constitutional_amendment_proposer",
                        "class": "law.constitutional_amendment_proposer",
                        "friendly_name": "Constitutional Amendment Proposer",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.07skl",
                        "class": "law.constitutional_amendment",
                        "friendly_name": "amendment",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "law.constitutional_amendment_proposer.constitutional_amendments_proposed",
                        "friendly_name": "Constitutional amendments proposed"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.constitutional_amendment_proposer . \nVALUES ?x1 { :m.07skl } \n?x0 :law.constitutional_amendment_proposer.constitutional_amendments_proposed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "law"
            ],
            "s_expression": "(AND law.constitutional_amendment_proposer (JOIN law.constitutional_amendment_proposer.constitutional_amendments_proposed m.07skl))"
        }
    },
    "996": {
        "generations": "which recipe takes more than 80 minutes to prepare??",
        "ori_data_item": {
            "qid": 2105336002000,
            "question": "what is the recipe whose preparation time is bigger than 80.0?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09jywss",
                    "entity_name": "Chocolate Covered Peanut Butter Balls"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.09rglfb",
                    "entity_name": "Braised Shortribs"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gwrpvt",
                    "entity_name": "Alex's Easy Ice Cream"
                }
            ],
            "function": ">",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "food.recipe",
                        "class": "food.recipe",
                        "friendly_name": "Recipe",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "80.0^^http://www.w3.org/2001/XMLSchema#float",
                        "class": "type.float",
                        "friendly_name": "80.0",
                        "question_node": 0,
                        "function": ">"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "food.recipe.preparation_time",
                        "friendly_name": "Preparation time"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe . \nFILTER (?x1 > \"80.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :food.recipe.preparation_time ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "food"
            ],
            "s_expression": "(AND food.recipe (gt food.recipe.preparation_time 80.0^^http://www.w3.org/2001/XMLSchema#float))"
        }
    },
    "997": {
        "generations": "which religion has an ancient temple as a type of place of worship??",
        "ori_data_item": {
            "qid": 2101924007000,
            "question": "ancient temple 's are used by which religion as places of worship?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0gvlg23",
                    "entity_name": "Maratreanism"
                }
            ],
            "function": "none",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "religion.religion",
                        "class": "religion.religion",
                        "friendly_name": "Religion",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "entity",
                        "id": "m.0cx45",
                        "class": "religion.type_of_place_of_worship",
                        "friendly_name": "ancient temple",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "religion.religion.types_of_places_of_worship",
                        "friendly_name": "Types of places of worship"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religion . \nVALUES ?x1 { :m.0cx45 } \n?x0 :religion.religion.types_of_places_of_worship ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "religion"
            ],
            "s_expression": "(AND religion.religion (JOIN religion.religion.types_of_places_of_worship m.0cx45))"
        }
    },
    "998": {
        "generations": "what film festival has the most recent date of final occurrence??",
        "ori_data_item": {
            "qid": 2104488005000,
            "question": "what film festival has the latest date of final occurrence?",
            "answer": [
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.010hhw4j",
                    "entity_name": "Asheville Film Festival"
                },
                {
                    "answer_type": "Entity",
                    "answer_argument": "m.0110pf1h",
                    "entity_name": "ANIRMAU - Animation Film Festival"
                }
            ],
            "function": "argmax",
            "num_node": 2,
            "num_edge": 1,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "film.film_festival",
                        "class": "film.film_festival",
                        "friendly_name": "Film festival",
                        "question_node": 1,
                        "function": "none"
                    },
                    {
                        "nid": 1,
                        "node_type": "literal",
                        "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                        "class": "type.datetime",
                        "friendly_name": "0",
                        "question_node": 0,
                        "function": "argmax"
                    }
                ],
                "edges": [
                    {
                        "start": 0,
                        "end": 1,
                        "relation": "time.recurring_event.date_of_final_occurance",
                        "friendly_name": "Date of final occurrence"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_festival . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :film.film_festival . \n?y0 :time.recurring_event.date_of_final_occurance ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :time.recurring_event.date_of_final_occurance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
            "domains": [
                "time"
            ],
            "s_expression": "(ARGMAX film.film_festival time.recurring_event.date_of_final_occurance)"
        }
    },
    "999": {
        "generations": "how many soundtracks belong to the gothic rock parent genre of music albums??",
        "ori_data_item": {
            "qid": 3202616012000,
            "question": "the albums of gothic rock musical genre include how many soundtracks?",
            "answer": [
                {
                    "answer_type": "Value",
                    "answer_argument": "5"
                }
            ],
            "function": "count",
            "num_node": 3,
            "num_edge": 2,
            "graph_query": {
                "nodes": [
                    {
                        "nid": 0,
                        "node_type": "class",
                        "id": "music.soundtrack",
                        "class": "music.soundtrack",
                        "friendly_name": "Soundtrack",
                        "question_node": 1,
                        "function": "count"
                    },
                    {
                        "nid": 1,
                        "node_type": "class",
                        "id": "music.genre",
                        "class": "music.genre",
                        "friendly_name": "Musical genre",
                        "question_node": 0,
                        "function": "none"
                    },
                    {
                        "nid": 2,
                        "node_type": "entity",
                        "id": "m.0xjl2",
                        "class": "music.genre",
                        "friendly_name": "Gothic rock",
                        "question_node": 0,
                        "function": "none"
                    }
                ],
                "edges": [
                    {
                        "start": 1,
                        "end": 0,
                        "relation": "music.genre.albums",
                        "friendly_name": "Albums"
                    },
                    {
                        "start": 1,
                        "end": 2,
                        "relation": "music.genre.parent_genre",
                        "friendly_name": "Parent genres"
                    }
                ]
            },
            "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.soundtrack . \n?x1 :type.object.type :music.genre . \nVALUES ?x2 { :m.0xjl2 } \n?x1 :music.genre.albums ?x0 . \n?x1 :music.genre.parent_genre ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
            "domains": [
                "music"
            ],
            "s_expression": "(COUNT (AND music.soundtrack (JOIN (R music.genre.albums) (JOIN music.genre.parent_genre m.0xjl2))))"
        }
    }
}