[
    {
        "qid": 3202686014000,
        "question": "who writes twilight zone?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pqzh",
                "entity_name": "Rod Serling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043jpsp",
                "entity_name": "Michael Cassutt"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_writer",
                    "class": "tv.tv_writer",
                    "friendly_name": "TV Writer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tv.tv_program_writer_relationship",
                    "class": "tv.tv_program_writer_relationship",
                    "friendly_name": "TV program-writer relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04x4gj",
                    "class": "tv.tv_program",
                    "friendly_name": "twilight zone",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_writer.tv_programs",
                    "friendly_name": "TV Programs (recurring writer)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tv.tv_program_writer_relationship.tv_program",
                    "friendly_name": "TV Program"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_writer . \n?x1 :type.object.type :tv.tv_program_writer_relationship . \nVALUES ?x2 { :m.04x4gj } \n?x0 :tv.tv_writer.tv_programs ?x1 . \n?x1 :tv.tv_program_writer_relationship.tv_program ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "tv"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tv.tv_writer (JOIN tv.tv_writer.tv_programs (JOIN tv.tv_program_writer_relationship.tv_program m.04x4gj)))"
    },
    {
        "qid": 2101534016000,
        "question": "find rocket engines that can thrust 1.90218e+06",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw0x",
                "entity_name": "RD-135"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.90218e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.90218e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.90218e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.90218e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100867002000,
        "question": "what radio program made it's broadcasting debut with the first episode on jan. the 17th, 2011?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0zyn",
                "entity_name": "Wit and Wisdom about Wine"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-01-17^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "Jan. the 17th, 2011",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-01-17-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-01-17^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2100442000000,
        "question": "which unit measures heat capacity in the international system of units measurement system?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj4xx",
                "entity_name": "Joule per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.heat_capacity_unit",
                    "class": "measurement_unit.heat_capacity_unit",
                    "friendly_name": "Unit of Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.heat_capacity_unit (JOIN measurement_unit.heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3206131005000,
        "question": "what is the shortest recording by samuel ramey?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.016qkh6",
                "entity_name": "L'Italiana in Algeri: Atto Secondo, Scena Ottava. \"E tu speri di togliere Isabella\""
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.021hm2",
                    "class": "music.artist",
                    "friendly_name": "Samuel Ramey",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.021hm2 } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.021hm2 } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.021hm2)) music.recording.length)"
    },
    {
        "qid": 2104863003000,
        "question": "which unit of acceleration has the smallest acceleration in meters per second squared?gal",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.030zvd",
                "entity_name": "Gal"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.acceleration_unit",
                    "class": "measurement_unit.acceleration_unit",
                    "friendly_name": "Unit of Acceleration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared",
                    "friendly_name": "Acceleration in meters per second squared"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.acceleration_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.acceleration_unit . \n?y0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.acceleration_unit measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared)"
    },
    {
        "qid": 2102141012000,
        "question": "which system of measurement includes gill as a unit of volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07y37",
                "entity_name": "US customary units"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.090ly2",
                    "class": "measurement_unit.volume_unit",
                    "friendly_name": "Gill",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.volume_units",
                    "friendly_name": "Volume Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.090ly2 } \n?x0 :measurement_unit.measurement_system.volume_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.volume_units m.090ly2))"
    },
    {
        "qid": 2100592021000,
        "question": "atsf 3450 class belongs to which locomotive class?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026y3y",
                "entity_name": "4-6-4"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0b1f27",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "ATSF 3450 class",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.0b1f27 } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.0b1f27))"
    },
    {
        "qid": 2102609004000,
        "question": "1000.0 kilograms per cubic meter is equal to which unit of density?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01027pfj",
                "entity_name": "Gram per cubic centimetre"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_density",
                    "class": "measurement_unit.unit_of_density",
                    "friendly_name": "Unit of Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1000.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1000.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_density.density_in_kg_per_cu_m",
                    "friendly_name": "Density in kilograms per cubic meter"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_density . \nVALUES ?x1 { \"1000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.unit_of_density.density_in_kg_per_cu_m ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_density (JOIN measurement_unit.unit_of_density.density_in_kg_per_cu_m 1000.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101534014000,
        "question": "which rocket engines can thrust 1.519e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlv09",
                "entity_name": "RD-224"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.519e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.519e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.519e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.519e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4300140008000,
        "question": "what is the name of the religion that is part of abrahamic faiths and has same practices with protestantism?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lp8",
                "entity_name": "Christianity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_gx",
                "entity_name": "Judaism"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "religion.religious_practice",
                    "class": "religion.religious_practice",
                    "friendly_name": "Religious Practice",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0f_h6",
                    "class": "religion.religion",
                    "friendly_name": "abrahamic faiths",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.05sfs",
                    "class": "religion.religion",
                    "friendly_name": "Protestantism",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "religion.religion.is_part_of",
                    "friendly_name": "Is Part Of"
                },
                {
                    "start": 3,
                    "end": 1,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religion . \n?x1 :type.object.type :religion.religious_practice . \nVALUES ?x2 { :m.0f_h6 } \nVALUES ?x3 { :m.05sfs } \n?x0 :religion.religion.practices ?x1 . \n?x0 :religion.religion.is_part_of ?x2 . \n?x3 :religion.religion.practices ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND religion.religion (AND (JOIN religion.religion.practices (JOIN (R religion.religion.practices) m.05sfs)) (JOIN religion.religion.is_part_of m.0f_h6)))"
    },
    {
        "qid": 2101534013000,
        "question": "what are the rocket engines that can thrust at 787920.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlty_",
                "entity_name": "RD-250"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltxc",
                "entity_name": "RD-250M"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlty5",
                "entity_name": "RD-250P"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "787920.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "787920.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"787920.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 787920.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4302999000000,
        "question": "which disney amusement park rides accomodate less than 2400 people in 60 minutes?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h96_t2",
                "entity_name": "Log Jammer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0zwdw",
                "entity_name": "The Plunge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65gcz",
                "entity_name": "niagara gara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l9hn",
                "entity_name": "Pirate's Plunge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r3c93",
                "entity_name": "White Water Landing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_jyxd",
                "entity_name": "Pirates of the Caribbean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.076y467",
                "entity_name": "Le Scoot Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yln2",
                "entity_name": "Log Flumes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kh3l",
                "entity_name": "Thunder Falls Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04ljk5f",
                "entity_name": "Dragon Falls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05086j",
                "entity_name": "Splash Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0413xkm",
                "entity_name": "Dudley Do-Right's Ripsaw Falls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027xqfd",
                "entity_name": "Log Chute"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krmpb",
                "entity_name": "Logger's Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025w613",
                "entity_name": "Coal Cracker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0285hqw",
                "entity_name": "Loggers Leap"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08qnzy",
                "entity_name": "Wild West Falls Adventure Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cp1jqh",
                "entity_name": "Shoot the Rapids"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fq1k8h",
                "entity_name": "Bermuda Triangle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g54ny2",
                "entity_name": "Splashdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_jjwl",
                "entity_name": "Splash Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_jybl",
                "entity_name": "Pirates of the Caribbean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_jynh",
                "entity_name": "Pirates of the Caribbean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hrckny",
                "entity_name": "Bugs' White Water Rapids"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ygrx",
                "entity_name": "Bamboo Chutes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yhvm",
                "entity_name": "Wonder Splash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yj97",
                "entity_name": "The Canyon River Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yjhd",
                "entity_name": "Wet & Wild"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yk85",
                "entity_name": "Anaconda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ynh3",
                "entity_name": "The Rugrats' Lost River"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z613",
                "entity_name": "Rocky River Falls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z72q",
                "entity_name": "Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j62_ns",
                "entity_name": "Log Jammer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8fdlc",
                "entity_name": "Wildwasserbahn I"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g0f7",
                "entity_name": "Jungle Log Jam"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gcg4",
                "entity_name": "Sissibo Sizzler Flume Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gcxw",
                "entity_name": "Mystery River Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gg_v",
                "entity_name": "Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gj72",
                "entity_name": "Big Splash Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gkg6",
                "entity_name": "Jungle River Falls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8k_tx",
                "entity_name": "Raging River Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kh_x",
                "entity_name": "Niagara Falls Flume Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kht6",
                "entity_name": "Double Splash Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l52_",
                "entity_name": "Wild River"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l9t3",
                "entity_name": "Roaring Creek Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lgk2",
                "entity_name": "Tidal Wave Log Flume"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8p0jt",
                "entity_name": "Pirate Falls"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k9g7l3",
                "entity_name": "Pitoune"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kg33tr",
                "entity_name": "El Aserradero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngn154",
                "entity_name": "Menhir Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nhjdnb",
                "entity_name": "Mill Race"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdd060",
                "entity_name": "Timber Mountain Log Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g58sbl",
                "entity_name": "Rocky Hollow Log Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krj66",
                "entity_name": "Logger's Revenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kj33",
                "entity_name": "LEGO Canoe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026h2nx",
                "entity_name": "The Funtastic World of Hanna-Barbera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fgnwv",
                "entity_name": "Space Shuttle America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026jrpd",
                "entity_name": "Body Wars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g4z",
                "entity_name": "turbo tour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02y_6sz",
                "entity_name": "Jimmy Neutron's Nicktoon Blast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07mst9",
                "entity_name": "Back to the Future: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078552",
                "entity_name": "Gundam the Ride: A Baoa Qu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gtw5_y",
                "entity_name": "Despicable Me: Minion Mayhem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gj9vkh",
                "entity_name": "Wild Arctic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0125w9s1",
                "entity_name": "Arthur, the 4D Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qsx54",
                "entity_name": "The Simpsons Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.041bqf",
                "entity_name": "Star Tours"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kk71",
                "entity_name": "Ride the Comix 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086g12",
                "entity_name": "Monster Planet of Godzilla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ypbk",
                "entity_name": "The Time Machine of Dreams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0125w9s8",
                "entity_name": "Dynamic Vienne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gj_b",
                "entity_name": "Scuderia Challenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kshhk",
                "entity_name": "Star Tours"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8khs_",
                "entity_name": "Astroliner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g4cv",
                "entity_name": "Soarin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0125w9sx",
                "entity_name": "The Little Prince"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j_6kbs",
                "entity_name": "StormRider"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ychs",
                "entity_name": "Aladdin's Magic Carpet Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kshjb",
                "entity_name": "Star Tours"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l5lq",
                "entity_name": "Cinemoci\u00f3n"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l6vb",
                "entity_name": "Mission: Space"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8fzsj",
                "entity_name": "TurboRide Theatre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011cc412",
                "entity_name": "Mr India - The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bwh682",
                "entity_name": "Indiana Jones Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qbkc0",
                "entity_name": "Transformers: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07sbx84",
                "entity_name": "Harry Potter and the Forbidden Journey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06222f",
                "entity_name": "Maelstrom"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gjc11r",
                "entity_name": "Ratatouille: L\u2019Aventure Totalement Toqu\u00e9e de R\u00e9my"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04bbv_",
                "entity_name": "The Great Movie Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l58g",
                "entity_name": "Ghost Blasters II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yh33",
                "entity_name": "Lost Kingdom Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g66",
                "entity_name": "puri mystery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g75",
                "entity_name": "Rama shita a legend of the future"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g84",
                "entity_name": "shoting galery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g9r",
                "entity_name": "balada kera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65gbc",
                "entity_name": "istana boneka"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65gcb",
                "entity_name": "perang bintang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hn4s",
                "entity_name": "Flying Dutchman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p79p",
                "entity_name": "Haunted Mansion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l8zw",
                "entity_name": "Test Track"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krxwp",
                "entity_name": "Peter Pan's Flight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gdzd",
                "entity_name": "Terror Castle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8p0b0",
                "entity_name": "Stillwalk Manor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mx_w5",
                "entity_name": "Phantom Theater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wbmz1",
                "entity_name": "The Cat in the Hat Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b73zrq",
                "entity_name": "Bubbleworks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wzvj63",
                "entity_name": "Wonder Mountain's Guardian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rbq_q",
                "entity_name": "Toyland Tours"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j1h2_0",
                "entity_name": "The Seas with Nemo & Friends"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025_zl4",
                "entity_name": "Dreamflight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkxpq4",
                "entity_name": "Ghost Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c60sv",
                "entity_name": "Snow White's Scary Adventures"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c8t3",
                "entity_name": "Delta Dreamflight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gvl4",
                "entity_name": "Monsters, Inc. Mike & Sulley to the Rescue!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8807",
                "entity_name": "Pinocchio's Daring Journey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hrg_l1",
                "entity_name": "Mystic Manor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05g79s",
                "entity_name": "Mr. Toad's Wild Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06tj9n",
                "entity_name": "Phantom Manor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.095rdp",
                "entity_name": "The Amazing Adventures of Spider-Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08h37j",
                "entity_name": "Pooh's Hunny Hunt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8ktb5",
                "entity_name": "Geisterschloss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qg5tx",
                "entity_name": "Gran Fiesta Tour Starring The Three Caballeros"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yntsn3",
                "entity_name": "Arthur \u2013 The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r60gj",
                "entity_name": "Around the World in 80 Days"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czb_8z",
                "entity_name": "Sesame Street Spaghetti Space Chase"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krqtm",
                "entity_name": "Mr. Toad's Wild Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bk3ry",
                "entity_name": "Roger Rabbit's Car Toon Spin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05xdqn",
                "entity_name": "World of Motion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026n_43",
                "entity_name": "E.T. Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0285gjb",
                "entity_name": "Men in Black: Alien Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krz4v",
                "entity_name": "E.T. Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_j9wl",
                "entity_name": "It's a Small World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09k5qk7",
                "entity_name": "The Curse of DarKastle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q6m85",
                "entity_name": "The Little Mermaid: Ariel's Undersea Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010xc_6f",
                "entity_name": "The 5th Dimension"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qsv6l",
                "entity_name": "Dante's Inferno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pn5fm",
                "entity_name": "Carnival Festival"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120qwfpk",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.11dykvvyt",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y6gpr8",
                "entity_name": "The Haunting"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.050ktx",
                "entity_name": "Spaceship Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.050kck",
                "entity_name": "Horizons"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hk7x",
                "entity_name": "Fata Morgana"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_hv07",
                "entity_name": "Haunted Mansion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ck7tz",
                "entity_name": "Radiator Springs Racers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w9hzd",
                "entity_name": "Valhalla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120lqcb5",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7xlh",
                "entity_name": "Reese's Xtreme Cup Challenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08rsbc",
                "entity_name": "Dinosaur"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5zd",
                "entity_name": "If You Had Wings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.058hb9",
                "entity_name": "Adventure Thru Inner Space"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bmc39p",
                "entity_name": "Monsters, Inc. Ride & Go Seek"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8p0k0",
                "entity_name": "Laser Raiders"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_hv1s",
                "entity_name": "Haunted Mansion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078jn_",
                "entity_name": "El Rio del Tiempo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0129g6r6",
                "entity_name": "Voyage to the Iron Reef"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026wwxd",
                "entity_name": "Alice in Wonderland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0125w9rh",
                "entity_name": "The Time Machine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y6ch1t",
                "entity_name": "Thor's Hammer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_9nq_",
                "entity_name": "Nemesis: Sub-Terra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kml_",
                "entity_name": "El Laberinto del Minotauro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b22hv",
                "entity_name": "The Many Adventures of Winnie the Pooh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kk30",
                "entity_name": "Tunnel of Terror"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8ktbf",
                "entity_name": "Piccolo Mondo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_j9t6",
                "entity_name": "It's a Small World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_j9y6",
                "entity_name": "It's a Small World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08959f",
                "entity_name": "Peter Pan's Flight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qsvk7",
                "entity_name": "Spook-a-Rama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzfz3",
                "entity_name": "Justice League: Alien Invasion 3D"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q_tfg",
                "entity_name": "Ghost Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011l70b5",
                "entity_name": "Snow White's Adventures"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0857zb",
                "entity_name": "Superstar Limo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_j9js",
                "entity_name": "It's a Small World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krz52",
                "entity_name": "E.T. Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kz35",
                "entity_name": "River Cave Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05grk4",
                "entity_name": "Journey into Imagination with Figment"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026tgk9",
                "entity_name": "Old Mill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027sf15",
                "entity_name": "Charlie and the Chocolate Factory: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vzl20",
                "entity_name": "Flight to Mars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028k8w",
                "entity_name": "It's a Small World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nh0txc",
                "entity_name": "Vurang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bz25d",
                "entity_name": "Kanonen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k8fz5",
                "entity_name": "Mega Zeph"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c36nc",
                "entity_name": "Big Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kg97p",
                "entity_name": "Cheetah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d6l__",
                "entity_name": "Boomerang: Coast to Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.076x3cp",
                "entity_name": "The Tidal Wave"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h6bfw",
                "entity_name": "Speed: No Limits"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026p_8c",
                "entity_name": "Indiana Jones et le Temple du P\u00e9ril"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09xypn",
                "entity_name": "Giant Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6_b9",
                "entity_name": "Colossus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dz3m9",
                "entity_name": "Soarin' Eagle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_jwst",
                "entity_name": "The Mind Eraser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0zp95",
                "entity_name": "Boomerang: Coast to Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08jksg",
                "entity_name": "Superman: Krypton Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04cxrv2",
                "entity_name": "T Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.097dxk",
                "entity_name": "Thunder Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l724",
                "entity_name": "Rat\u00f3n Loco"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2qq4",
                "entity_name": "Space Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04s4p6",
                "entity_name": "Big Thunder Mountain Railroad"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yh39",
                "entity_name": "Coastersaurus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.040fq5",
                "entity_name": "California Screamin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05p4gfs",
                "entity_name": "Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g1m2",
                "entity_name": "Venus GP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65g8s",
                "entity_name": "alap alap"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b65gcn",
                "entity_name": "halilintar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rn8lt",
                "entity_name": "Bird Rok"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0swnsyq",
                "entity_name": "Nitro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gjckzs",
                "entity_name": "Insane"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0405jkj",
                "entity_name": "Steel Lasso"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2qm1",
                "entity_name": "Space Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x5bpx",
                "entity_name": "Crush's Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122xwbnb",
                "entity_name": "Family Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gyx282",
                "entity_name": "The Monster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kk25",
                "entity_name": "Waly Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kk2f",
                "entity_name": "Anaconda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c42cx0",
                "entity_name": "Raptor Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063h66",
                "entity_name": "Magnum XL-200"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cwstm",
                "entity_name": "Batman: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_8z52",
                "entity_name": "Superman el \u00daltimo Escape"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_b6__",
                "entity_name": "Medusa Steel Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h_cxxj",
                "entity_name": "Boomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8fzrn",
                "entity_name": "Boomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8ksw2",
                "entity_name": "Golden Loop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f5fpr",
                "entity_name": "Megafobia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03b_n26",
                "entity_name": "Alpen Blitz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ddg_k2",
                "entity_name": "Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yg_l",
                "entity_name": "Hurricane Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07rzwt",
                "entity_name": "Timber Wolf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5mck",
                "entity_name": "Canyon Blaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055l0l",
                "entity_name": "Millennium Force"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c61g8",
                "entity_name": "Blue Streak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c6x0r",
                "entity_name": "Disaster Transport"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc5sw",
                "entity_name": "Gemini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djbgd",
                "entity_name": "WildCat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0glsnk",
                "entity_name": "Maverick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07m_2v",
                "entity_name": "Superman Escape"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0btnvm",
                "entity_name": "Steel Dragon 2000"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c2d39",
                "entity_name": "Goudurix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026cmmc",
                "entity_name": "Shock Wave"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.040f6g",
                "entity_name": "Kingda Ka"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0853p4",
                "entity_name": "El Toro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bm6x2",
                "entity_name": "Rolling Thunder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cgy5l",
                "entity_name": "Skull Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x2b7hw",
                "entity_name": "Loop the Loop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g930d",
                "entity_name": "The Ultimate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cnzz1w",
                "entity_name": "Zydeco Scream"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070jrq",
                "entity_name": "Revenge of the Mummy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc5wdd",
                "entity_name": "Revenge of the Mummy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fwh_q",
                "entity_name": "Flight of Fear"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g2jv",
                "entity_name": "Wild Lightnin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h1h_g",
                "entity_name": "Lisebergbanan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d06bj",
                "entity_name": "High Roller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k2k3yt",
                "entity_name": "Krake"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ddgk2m",
                "entity_name": "Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8j3j5",
                "entity_name": "Spinning Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8j3jf",
                "entity_name": "Fruit Worm Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gjhc",
                "entity_name": "Giant Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bx_z1c",
                "entity_name": "Texas Tornado"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0byxbj",
                "entity_name": "Twisted Colossus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l8pnxz",
                "entity_name": "Jet Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080n2f2",
                "entity_name": "Tree Topper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krrgh",
                "entity_name": "Wildcat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c01w_",
                "entity_name": "The Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k3j9vx",
                "entity_name": "Hair Raiser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02y_7lr",
                "entity_name": "Vampire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05sxyy",
                "entity_name": "Big One"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chp7l",
                "entity_name": "Balder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011f1gw9",
                "entity_name": "Thunderbird"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fs2xd",
                "entity_name": "Corkscrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dmh3g",
                "entity_name": "Blue Streak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wbdr8",
                "entity_name": "Tremors"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010wfhs3",
                "entity_name": "Vortex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025wt0_",
                "entity_name": "Excalibur"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0261h67",
                "entity_name": "Sierra Tonante"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0261sdh",
                "entity_name": "Colossus the Fire Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqrdr",
                "entity_name": "The Great White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r36gd",
                "entity_name": "Le Monstre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r4199",
                "entity_name": "Le Vampire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r484n",
                "entity_name": "Silver Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rjswn",
                "entity_name": "Canobie Corkscrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rnn37",
                "entity_name": "Black Mamba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z00sj",
                "entity_name": "Silver Comet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bxjyv",
                "entity_name": "Cobra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bxmlk",
                "entity_name": "Cobra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_b1w",
                "entity_name": "Dive Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cm07w",
                "entity_name": "Diving Machine G5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cn49y",
                "entity_name": "Insane Speed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cptts",
                "entity_name": "Batman: La Fuga"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cr4gp",
                "entity_name": "Diavlo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d3t50",
                "entity_name": "Shivering Timbers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gxhsz",
                "entity_name": "Bizarro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hfxml",
                "entity_name": "Vuoristorata"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nqcyb",
                "entity_name": "Rampage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0479ykz",
                "entity_name": "Sea Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047db14",
                "entity_name": "Manta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047m7py",
                "entity_name": "Mammut"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04h1hd",
                "entity_name": "Matterhorn Bobsleds"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kp0w2",
                "entity_name": "Grizzly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04krrdr",
                "entity_name": "Batman: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04ksnlc",
                "entity_name": "Volare"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lfwlk",
                "entity_name": "Python"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q1qvh",
                "entity_name": "Jubilee Odyssey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y8vtd",
                "entity_name": "Millennium Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yb_bz",
                "entity_name": "Cannon Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04z_ccr",
                "entity_name": "Boardwalk Bullet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fb847",
                "entity_name": "Mumbo Jumbo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mxn4",
                "entity_name": "Son of Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05twj1",
                "entity_name": "Batman: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zt_19",
                "entity_name": "Cannonball Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0640wlt",
                "entity_name": "Enigma"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06d9wx",
                "entity_name": "Mindbender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gwb8",
                "entity_name": "Dragon Khan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073khg",
                "entity_name": "The Riddler's Revenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.076xxwy",
                "entity_name": "White Cyclone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08hm2r",
                "entity_name": "Tonnerre de Zeus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08pm8w",
                "entity_name": "Zippin Pippin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09rv9_4",
                "entity_name": "Kumali"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bjssl",
                "entity_name": "Georgia Scorcher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bwj0sl",
                "entity_name": "Sea Viper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c110x",
                "entity_name": "D\u00e6monen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c28g9",
                "entity_name": "Kraken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c3wch8",
                "entity_name": "Thrillseeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc7qm5",
                "entity_name": "Swamp Fox"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cdlng",
                "entity_name": "American Eagle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch584m",
                "entity_name": "Turbo Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cl8c9",
                "entity_name": "Screamin' Eagle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cp1h6v",
                "entity_name": "Muskrat Scrambler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpk8v",
                "entity_name": "The Voyage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cyqkp",
                "entity_name": "Tornado"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d6l4d",
                "entity_name": "Mind Eraser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d9275",
                "entity_name": "Flight Deck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d9yn7",
                "entity_name": "Batman: The Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db_fp",
                "entity_name": "Outlaw"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dljntc",
                "entity_name": "The Bush Beast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dmgxl",
                "entity_name": "Thunder Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dsd84",
                "entity_name": "Rollo Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dtnj7",
                "entity_name": "Colossos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f3ltk",
                "entity_name": "Blue Tornado"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f48wz",
                "entity_name": "Magic Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f4h52",
                "entity_name": "Katun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f4shg",
                "entity_name": "Hydra the Revenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f9_ld",
                "entity_name": "The Jester"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fbvcl",
                "entity_name": "Goliath"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fdbsq",
                "entity_name": "Little Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffsny",
                "entity_name": "Vortex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fhp9t",
                "entity_name": "Exterminator"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flmt0",
                "entity_name": "Invertigo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fn6z9",
                "entity_name": "Bandit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fn7k0",
                "entity_name": "Dragon Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fnn5f",
                "entity_name": "Titan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fpjk9m",
                "entity_name": "Raptor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqpb6k",
                "entity_name": "Desert Storm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy8vv",
                "entity_name": "Boulder Dash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g1456",
                "entity_name": "Arkansas Twister"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g19gl",
                "entity_name": "Dragon's Fury"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g55pn",
                "entity_name": "Hell Cat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g9n2r",
                "entity_name": "Griffon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gj8wx1",
                "entity_name": "Space Shuttle Max"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gjbmmx",
                "entity_name": "Seven Dwarfs Mine Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkm9m",
                "entity_name": "Thunder Dolphin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gtyd9m",
                "entity_name": "Little Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3t6gd",
                "entity_name": "Leviathan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h4y7x",
                "entity_name": "Green Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h96k1y",
                "entity_name": "Polar X-plorer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ycxf",
                "entity_name": "Diving Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j440d_",
                "entity_name": "Shambhala: Expedici\u00f3n al Himalaya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j9kz03",
                "entity_name": "OzIris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdnzjt",
                "entity_name": "Sky Scrapper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbjk0n",
                "entity_name": "White Lightning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wr3scb",
                "entity_name": "Banshee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wyxkvd",
                "entity_name": "Goliath"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z88yk4",
                "entity_name": "Thunderbolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026vprk",
                "entity_name": "Corkscrew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ftck2",
                "entity_name": "Big Bad Wolf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05b12_k",
                "entity_name": "Blue Fire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06sr20",
                "entity_name": "Whizzer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fxytk",
                "entity_name": "Viking Voyage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy6wq",
                "entity_name": "Hades 360"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gwyjpf",
                "entity_name": "Steel Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j7nch9",
                "entity_name": "The Smiler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1txy",
                "entity_name": "Monta\u00f1a Rusa"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bz08x",
                "entity_name": "Euro-Mir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_qhg3c",
                "entity_name": "Dragon Wagon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7mpr6",
                "entity_name": "Karacho"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05xpvg",
                "entity_name": "GhostRider"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yf_q",
                "entity_name": "Dragon Flyer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db314",
                "entity_name": "WhirlWind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g9t8z1",
                "entity_name": "Untamed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x0wqq9",
                "entity_name": "Loop the Loop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ypfb",
                "entity_name": "Cyclone Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8klgv",
                "entity_name": "Wild Chipmunk Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0zwyn",
                "entity_name": "West Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zwml11",
                "entity_name": "Helix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026syw4",
                "entity_name": "Flyer Comet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cws2v",
                "entity_name": "Bat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dnhmt",
                "entity_name": "Flying Fish"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_n37",
                "entity_name": "Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hm8rv",
                "entity_name": "Cobra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wblgl",
                "entity_name": "Rage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2wg7",
                "entity_name": "Curse of Novgorod"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc551l",
                "entity_name": "Looping Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch2r_x",
                "entity_name": "Fiorano GT Challenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cn919",
                "entity_name": "Runaway Mine Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzsxs",
                "entity_name": "Toboggan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ggdmt",
                "entity_name": "Jetline"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx0jx9",
                "entity_name": "Comet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cx4q_",
                "entity_name": "SpongeBob SquarePants Rock Bottom Plunge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1239vcdj",
                "entity_name": "Stunt Fall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047d61z",
                "entity_name": "Ravine Flyer II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dddhn4",
                "entity_name": "Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g031q",
                "entity_name": "Cascabel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c2cyg",
                "entity_name": "Winjas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nr6gt",
                "entity_name": "Colorado Adventure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gy1x",
                "entity_name": "Thunderbolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b75jwh",
                "entity_name": "Wipeout"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch5w9s",
                "entity_name": "Dragon Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7nssy",
                "entity_name": "Knightmare"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pqw0m",
                "entity_name": "Steel Eel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g8glzs",
                "entity_name": "The Xtreme Racer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j115jt",
                "entity_name": "Wild Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2qmd",
                "entity_name": "Space Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpvkv",
                "entity_name": "The Raven"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzdp7",
                "entity_name": "Skyliner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wgjrrz",
                "entity_name": "Freisch\u00fctz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06xlnp",
                "entity_name": "Superman: Escape from Krypton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065_576",
                "entity_name": "iSpeed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kky7",
                "entity_name": "Sky Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kkyp",
                "entity_name": "Super Tornado"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g4yn",
                "entity_name": "Dragon Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g4yw",
                "entity_name": "Herky & Timmy's Racing Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g4z8",
                "entity_name": "Rolling-X Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gppsv",
                "entity_name": "Roller Soaker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch3qpb",
                "entity_name": "Ultra Twister"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pwh25",
                "entity_name": "Yankee Cannonball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0276cv3",
                "entity_name": "The Legend"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6_sx",
                "entity_name": "Stealth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b759jr",
                "entity_name": "Spider"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wbnmc",
                "entity_name": "Timber Terror"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z248x",
                "entity_name": "Behemoth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nr6hh",
                "entity_name": "Temple of the Night Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx0jtn",
                "entity_name": "Ravine Flyer III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j4454z",
                "entity_name": "Cliffhanger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g__f",
                "entity_name": "White Canyon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cfp4h",
                "entity_name": "Giant Inverted Boomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05g5ww",
                "entity_name": "Rock 'n' Roller Coaster Starring Aerosmith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzs2d",
                "entity_name": "Little Leaper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l8nkr7",
                "entity_name": "Jumbo Jet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fx60q",
                "entity_name": "Jack Rabbit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h45p5",
                "entity_name": "Wicked"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0408xb1",
                "entity_name": "Nickelodeon Streak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fgrn3",
                "entity_name": "Kentucky Rumbler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ct9ld",
                "entity_name": "Superman: La Atracci\u00f3n de Acero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g1gyd",
                "entity_name": "10 Inversion Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjcr",
                "entity_name": "Flying Horse Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjd5",
                "entity_name": "Half Pipe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8sl_d",
                "entity_name": "Rutsjebanen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d5kk7",
                "entity_name": "Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngkj9t",
                "entity_name": "FireWhip"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pg_kg",
                "entity_name": "Furius Baco"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ddgjx3",
                "entity_name": "Kvasten"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzc9n",
                "entity_name": "Kingdom Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zrv05h",
                "entity_name": "Runaway Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qfm8q",
                "entity_name": "Tsunami"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nqd8c",
                "entity_name": "Zoomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07b6_w",
                "entity_name": "Leap-The-Dips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy09_",
                "entity_name": "Thunderbird"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026ktj2",
                "entity_name": "Monte Makaya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x4031",
                "entity_name": "Batman The Escape"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2qnf",
                "entity_name": "Space Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yf41",
                "entity_name": "Star Flyer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z96lp",
                "entity_name": "Speed Monster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bytm4",
                "entity_name": "Expedition GeForce"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy8xk",
                "entity_name": "Wildcat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5t253",
                "entity_name": "Super Man\u00e8ge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z04jn",
                "entity_name": "Monta\u00f1a Infinitum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bry9r8",
                "entity_name": "Swamp Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gtwnq6",
                "entity_name": "Toboggan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yx_zb6",
                "entity_name": "Scorpion Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2qpt",
                "entity_name": "Space Mountain: Mission 2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dv7kl",
                "entity_name": "Rebel Yell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ypck",
                "entity_name": "Cobra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ypcr",
                "entity_name": "Flying Frog"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ypcy",
                "entity_name": "Stinger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g0t7",
                "entity_name": "Patriot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8khxb",
                "entity_name": "Bear Trax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gj7j",
                "entity_name": "Cyclone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122k5kwb",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngmzyd",
                "entity_name": "SOS Num\u00e9robis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngn15d",
                "entity_name": "La Trace du Hourra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzcfv",
                "entity_name": "Joust"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yl_r",
                "entity_name": "Timber Twister"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yl_y",
                "entity_name": "Quicksilver Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l33b",
                "entity_name": "Whirlwind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gj79",
                "entity_name": "Big Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjrm",
                "entity_name": "Spinning Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ylmx",
                "entity_name": "Goldrush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lfy5",
                "entity_name": "Corkscrew Roller Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y65929",
                "entity_name": "Velocity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yc_j",
                "entity_name": "Jozi Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yh1w",
                "entity_name": "Scenic Railway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yh27",
                "entity_name": "Silly Serpent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngkjj0",
                "entity_name": "Dum-Dum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kfwz",
                "entity_name": "Tom and Jerry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ycx6",
                "entity_name": "Mega-Lite"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ycxn",
                "entity_name": "LeLe'e Chariot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lb1n",
                "entity_name": "Spinning Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lb1w",
                "entity_name": "Mine Train Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c9pkn",
                "entity_name": "Dragon Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z5qx",
                "entity_name": "Superflight-Steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z5r2",
                "entity_name": "Kiddie Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kl10",
                "entity_name": "Family Flyer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ylrn",
                "entity_name": "The Runaway Train Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ylrv",
                "entity_name": "The Python"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ygrj",
                "entity_name": "Polar Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yj91",
                "entity_name": "The Hornet Rollercoaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z72j",
                "entity_name": "Big Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l117",
                "entity_name": "Lil' Dipper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjvt",
                "entity_name": "Monte Aurora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjw2",
                "entity_name": "Piu\u00ed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjwc",
                "entity_name": "Happy Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjwt",
                "entity_name": "Abissal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_s16x4",
                "entity_name": "Dynamo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1223qpc0",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0805rwy",
                "entity_name": "Formula Rossa"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bwgxjd",
                "entity_name": "Jet Rescue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8h002",
                "entity_name": "Loop Coaster MOMOnGA"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yk7_",
                "entity_name": "El Jaguar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0276dgd",
                "entity_name": "The Howler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gfgm_q",
                "entity_name": "Manta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc9n7g",
                "entity_name": "King Kong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z6hr",
                "entity_name": "Maximus Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r3s4fs",
                "entity_name": "Tornado"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch0zy8",
                "entity_name": "Surfrider"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yf_x",
                "entity_name": "Caterpillar Capers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gcy3",
                "entity_name": "The Silver Bullet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8km6q",
                "entity_name": "Caterpillar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjqy",
                "entity_name": "Rabalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ygl7",
                "entity_name": "Spin coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ygm3",
                "entity_name": "Worm Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ygvh",
                "entity_name": "Pipeline"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kv0c",
                "entity_name": "The Antelope Wooden Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0znx9",
                "entity_name": "Freeway Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1q6jgcr3x",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j115j_",
                "entity_name": "Timberhawk - Ride of Prey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z675",
                "entity_name": "Magnus Colossus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8km6g",
                "entity_name": "Ladybird"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0134phn7",
                "entity_name": "Eurosat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8hwnh",
                "entity_name": "Crazy Mine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8l5g3",
                "entity_name": "The Bullet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjrw",
                "entity_name": "Flying Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pdnl33",
                "entity_name": "Zyklon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy8x6",
                "entity_name": "Zoomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8hwp0",
                "entity_name": "Rasender Roland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gby2",
                "entity_name": "The Gauntlet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8fzrx",
                "entity_name": "Autosled"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g1m9",
                "entity_name": "Black Hole Scramble"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w13l8",
                "entity_name": "Stampida"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yf_2",
                "entity_name": "Coastersaurus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kkdb",
                "entity_name": "Jet Star II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yc_9",
                "entity_name": "Anaconda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8ksvw",
                "entity_name": "Tower of Terror"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8k2gc",
                "entity_name": "Ring of Fire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gndry",
                "entity_name": "Lost Coaster of Superstition Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gc3b",
                "entity_name": "Wacky Worm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yp6d",
                "entity_name": "Looping Thunder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8hwns",
                "entity_name": "Nessie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fy90p",
                "entity_name": "Kiddie Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8pq1k",
                "entity_name": "The Boomerang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lg7t",
                "entity_name": "Mighty Mini Mega"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gc9g",
                "entity_name": "Teeny Weeny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0zpfz",
                "entity_name": "Barnstormer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ynjm",
                "entity_name": "Hot Tamale"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z66_",
                "entity_name": "Tit\u00e1nide"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ynjq",
                "entity_name": "Pirates Hideaway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8lg82",
                "entity_name": "Kiddi Koasta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwjkgr",
                "entity_name": "Shamu Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0z619",
                "entity_name": "Ladybird Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04f3ym9",
                "entity_name": "Aftershock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g2k8",
                "entity_name": "Wacky Worm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0yf3m",
                "entity_name": "Zyklon Loop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x0qcvh",
                "entity_name": "Loop the Loop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kjpf",
                "entity_name": "Kuku"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8gcyg",
                "entity_name": "Wildcat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cc72mv",
                "entity_name": "Woody Woodpecker\u2019s Nuthouse Coaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j0ykdr",
                "entity_name": "Grover's Vapor Trail"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngkj8c",
                "entity_name": "Star Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8kv86",
                "entity_name": "Ring of Fire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8g1mr",
                "entity_name": "Zaturn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010rd01b",
                "entity_name": "Skyscraper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j8hwp8",
                "entity_name": "Die Schlange von Midgard"
            }
        ],
        "function": "<",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "amusement_parks.ride",
                    "class": "amusement_parks.ride",
                    "friendly_name": "Amusement Ride",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "amusement_parks.ride_type",
                    "class": "amusement_parks.ride_type",
                    "friendly_name": "Amusement Ride Type",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "amusement_parks.disney_ride",
                    "class": "amusement_parks.disney_ride",
                    "friendly_name": "Disney Ride",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "2400^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "2400",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "amusement_parks.ride_type.rides",
                    "friendly_name": "Rides"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "amusement_parks.ride_type.rides",
                    "friendly_name": "Rides"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "amusement_parks.ride.capacity",
                    "friendly_name": "Capacity (riders per hour)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.ride . \n?x1 :type.object.type :amusement_parks.ride_type . \n?x2 :type.object.type :amusement_parks.disney_ride . \nFILTER (?x3 < \"2400\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x1 :amusement_parks.ride_type.rides ?x0 . \n?x1 :amusement_parks.ride_type.rides ?x2 . \n?x2 :amusement_parks.ride.capacity ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "amusement_parks"
        ],
        "level": "compositional",
        "s_expression": "(AND amusement_parks.ride (JOIN (R amusement_parks.ride_type.rides) (JOIN amusement_parks.ride_type.rides (lt amusement_parks.ride.capacity 2400^^http://www.w3.org/2001/XMLSchema#integer))))"
    },
    {
        "qid": 3205368001000,
        "question": "which units of length are associated with the system where mass is measured in grains?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vb3",
                "entity_name": "Mile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01crvy",
                "entity_name": "Foot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03th6",
                "entity_name": "Inch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01464h",
                "entity_name": "Fathom"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mr9z",
                "entity_name": "Rod"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0355rq",
                "entity_name": "Chain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018cl3",
                "entity_name": "Cable length"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bl8",
                "entity_name": "Nautical mile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gwxt",
                "entity_name": "Link"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087tz",
                "entity_name": "Yard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031l7",
                "entity_name": "Furlong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.050f99",
                "entity_name": "League"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fhs97",
                "entity_name": "Thousandth of an inch"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.016sl1",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Grain",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.measurement_system.weight_units",
                    "friendly_name": "Mass Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \n?x1 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x2 { :m.016sl1 } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \n?x1 :measurement_unit.measurement_system.weight_units ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system (JOIN measurement_unit.measurement_system.weight_units m.016sl1)))"
    },
    {
        "qid": 2104101003000,
        "question": "what was the first musical soundtrack originally released?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bzn2f",
                "entity_name": "Snow White and the Seven Dwarfs"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.musical_soundtrack",
                    "class": "theater.musical_soundtrack",
                    "friendly_name": "Musical Soundtrack",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.musical_soundtrack . \n?y0 :music.album.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :music.album.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN theater.musical_soundtrack music.album.release_date)"
    },
    {
        "qid": 2101131003000,
        "question": "which ski run is served by sunnyside?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmk9",
                "entity_name": "Patsey Marley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmly",
                "entity_name": "Dipsy Doodle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmkn",
                "entity_name": "Blue Bell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmln",
                "entity_name": "Race Arena"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2kr",
                "entity_name": "Vail Ridge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2ky",
                "entity_name": "Crooked Mile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2l3",
                "entity_name": "Home Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmkz",
                "entity_name": "Sunnyside"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knml8",
                "entity_name": "Alf's/Cecret/Sugarloaf Access"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_run",
                    "class": "skiing.ski_run",
                    "friendly_name": "Ski Run",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04kk206",
                    "class": "skiing.ski_lift",
                    "friendly_name": "Sunnyside",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "skiing.ski_run.served_by",
                    "friendly_name": "Served By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_run . \nVALUES ?x1 { :m.04kk206 } \n?x0 :skiing.ski_run.served_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "skiing"
        ],
        "level": "compositional",
        "s_expression": "(AND skiing.ski_run (JOIN skiing.ski_run.served_by m.04kk206))"
    },
    {
        "qid": 3205323015000,
        "question": "what tulum valley wine is 17.0 percent alcohol by volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07704dt",
                "entity_name": "2007 Alma Mora Syrah (Finca las Moras)"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06_mk8d",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "Tulum Valley",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "17.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "17.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.06_mk8d } \nVALUES ?x2 { \"17.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.06_mk8d) (JOIN wine.wine.percentage_alcohol 17.0^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2100859005000,
        "question": "what unit does the centimetre\u2013gram\u2013second system of units use to measure magnetic flux density?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.038jg",
                "entity_name": "Gauss"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0csh0c",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Centimetre\u2013gram\u2013second system of units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \nVALUES ?x1 { :m.0csh0c } \n?x0 :measurement_unit.magnetic_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_density_unit (JOIN measurement_unit.magnetic_flux_density_unit.measurement_system m.0csh0c))"
    },
    {
        "qid": 3206131011000,
        "question": "which of joe lee carter recordings is shortest in length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nmjrwv",
                "entity_name": "As the Years Go Passing By"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0x8j4d8",
                    "class": "music.artist",
                    "friendly_name": "Joe Lee Carter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.0x8j4d8 } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0x8j4d8 } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.0x8j4d8)) music.recording.length)"
    },
    {
        "qid": 2102016011000,
        "question": "what is the video game engine that does proceed unreal engine 2?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b6h280",
                "entity_name": "Unreal Engine 3"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04sh_kc",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Unreal Engine 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_engine.predecessor_engine",
                    "friendly_name": "Predecessor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.04sh_kc } \n?x0 :cvg.computer_game_engine.predecessor_engine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_engine (JOIN cvg.computer_game_engine.predecessor_engine m.04sh_kc))"
    },
    {
        "qid": 3206131003000,
        "question": "what is the shortest carol welsman song?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5_xy2",
                "entity_name": "Angels on Your Pillow"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01nl_cx",
                    "class": "music.artist",
                    "friendly_name": "Carol Welsman",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.01nl_cx } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.01nl_cx } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.01nl_cx)) music.recording.length)"
    },
    {
        "qid": 4300898015000,
        "question": "which core text of judaism do male circumcision practitioners honor?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07gn9",
                "entity_name": "Tanakh"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03_gx",
                    "class": "religion.religion",
                    "friendly_name": "Judaism",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.01zky",
                    "class": "religion.religious_practice",
                    "friendly_name": "male circumcision",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.03_gx } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.01zky } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.03_gx) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.01zky))))"
    },
    {
        "qid": 2102649007000,
        "question": "what game was made prior to duke nukem: time to kill?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0977sd",
                "entity_name": "Duke Nukem: Land of the Babes"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.097711",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Duke Nukem: Time to Kill",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.prequel",
                    "friendly_name": "Previous in narrative"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.097711 } \n?x0 :cvg.computer_videogame.prequel ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.prequel m.097711))"
    },
    {
        "qid": 3202707001000,
        "question": "what is the name of the programming language paradigm that was first available not sooner than 1953?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m62t",
                "entity_name": "Array programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rnc7",
                "entity_name": "Database programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ykw",
                "entity_name": "Functional programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rjg",
                "entity_name": "Mathematics"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0138gg",
                "entity_name": "Combinatory logic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rtv0",
                "entity_name": "Modular programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w_b",
                "entity_name": "Structured programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kqn",
                "entity_name": "Operator"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c3bz",
                "entity_name": "Imperative programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrm35",
                "entity_name": "Reflective programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yd5",
                "entity_name": "Procedural programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012fcp",
                "entity_name": "Parallel computing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05prj",
                "entity_name": "Object-oriented programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qjrr",
                "entity_name": "Generic programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h1_2",
                "entity_name": "Comparison of multi-paradigm programming languages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gxhd",
                "entity_name": "Event-driven programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pn2b",
                "entity_name": "Type inference"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pygd",
                "entity_name": "Strong typing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01dxmk",
                "entity_name": "Declarative programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06891z",
                "entity_name": "Dependent type"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07phw8",
                "entity_name": "Concurrent computing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017hd4",
                "entity_name": "Compiled language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkc5",
                "entity_name": "Prototype-based programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mdmn",
                "entity_name": "Concatenative programming language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03p3g9",
                "entity_name": "Stack-oriented programming language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01j01f",
                "entity_name": "Dynamic programming language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07yf2",
                "entity_name": "Virtual machine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_nlv",
                "entity_name": "Write once, run anywhere"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02kdv_b",
                "entity_name": "Component-oriented programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m_l4",
                "entity_name": "Function-level programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0445gc",
                "entity_name": "Dataflow programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04k52",
                "entity_name": "Logic programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05gj6g",
                "entity_name": "Ajax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04m47",
                "entity_name": "Lazy evaluation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x10",
                "entity_name": "Interpreted language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jnsl",
                "entity_name": "Actor model"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08nj3g",
                "entity_name": "Data-driven programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09skf",
                "entity_name": "Design by contract"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hrsx",
                "entity_name": "Visual programming language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0273yv",
                "entity_name": "Educational programming language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzlnq",
                "entity_name": "Modular Programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wcqr",
                "entity_name": "Pipeline programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04s5c",
                "entity_name": "Markup language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kg1sq",
                "entity_name": "Encapsulation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dn3p3x",
                "entity_name": "Knowledge Representation Language"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0297y",
                "entity_name": "Distributed programming"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05z2qq7",
                "entity_name": "expression-based"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dg773l",
                "entity_name": "cell based"
            }
        ],
        "function": ">=",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.programming_language_paradigm",
                    "class": "computer.programming_language_paradigm",
                    "friendly_name": "Programming Language Paradigm",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.programming_language",
                    "class": "computer.programming_language",
                    "friendly_name": "Programming Language",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "1953^^http://www.w3.org/2001/XMLSchema#gYear",
                    "class": "type.datetime",
                    "friendly_name": "1953",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.programming_language.language_paradigms",
                    "friendly_name": "Language Paradigms"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "computer.programming_language.introduced",
                    "friendly_name": "Introduced"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.programming_language_paradigm . \n?x1 :type.object.type :computer.programming_language . \nFILTER (?x2 >= \"1953-08:00\"^^<http://www.w3.org/2001/XMLSchema#gYear>)\n?x1 :computer.programming_language.language_paradigms ?x0 . \n?x1 :computer.programming_language.introduced ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND computer.programming_language_paradigm (JOIN (R computer.programming_language.language_paradigms) (ge computer.programming_language.introduced 1953^^http://www.w3.org/2001/XMLSchema#gYear)))"
    },
    {
        "qid": 2104324004000,
        "question": "what is the unit of temperature that has the smallest zero point in kelvins?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 2102568016000,
        "question": "what is the name for the danish units of measurement of length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0392s",
                "entity_name": "Geographical mile"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07s8cg",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Danish units of measurement",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \nVALUES ?x1 { :m.07s8cg } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system m.07s8cg))"
    },
    {
        "qid": 2100777012000,
        "question": "\u8056\u5263\u4f1d\u8aac\uff12 original sound version are the soundtracks of which video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01km1hd",
                "entity_name": "Secret of Mana"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01km15y",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "\u8056\u5263\u4f1d\u8aac\uff12 Original Sound Version",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.soundtracks",
                    "friendly_name": "Soundtracks"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.01km15y } \n?x0 :cvg.computer_videogame.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.soundtracks m.01km15y))"
    },
    {
        "qid": 3204615015000,
        "question": "what private company limited by shares is the theater company that produced hitchcock blonde?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0y7xj76",
                    "class": "theater.theater_production",
                    "friendly_name": "Hitchcock Blonde",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0y7xj76 } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0y7xj76)))"
    },
    {
        "qid": 2101534005000,
        "question": "what rocket engines can thrust 88200.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvms",
                "entity_name": "RD-200"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "88200.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "88200.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"88200.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 88200.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100198015000,
        "question": "what video game supports a princess maker?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04nsf8",
                "entity_name": "Princess Maker 2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.12mky4mrh",
                "entity_name": "Princess Maker 4\u30ad\u30e3\u30b9\u30c8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04f_4td",
                "entity_name": "Princess Maker 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010pfskr",
                "entity_name": "Princess Maker"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03dj8g",
                    "class": "cvg.game_series",
                    "friendly_name": "Princess Maker",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.game_series",
                    "friendly_name": "Part of game series"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.03dj8g } \n?x0 :cvg.computer_videogame.game_series ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.game_series m.03dj8g))"
    },
    {
        "qid": 2100867006000,
        "question": "on 1943-05-25 which radio program was first broadcasted?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y88p7d",
                "entity_name": "Sorry, Wrong Number"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1943-05-25^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "1943-05-25",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"1943-05-25-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 1943-05-25^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2102568008000,
        "question": "what is the name for the atomic units of length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.017k78",
                "entity_name": "Bohr radius"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.017mm0",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Atomic units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \nVALUES ?x1 { :m.017mm0 } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system m.017mm0))"
    },
    {
        "qid": 2102600004000,
        "question": "a focal length of sraw 2 is attributed to what digital camera?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jjq_m",
                "entity_name": "Canon EOS 50D"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n7l7q",
                "entity_name": "Canon EOS 5D Mark II"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04ll8f9",
                    "class": "digicams.camera_uncompressed_format",
                    "friendly_name": "sRAW 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.uncompressed_formats",
                    "friendly_name": "Uncompressed Formats"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { :m.04ll8f9 } \n?x0 :digicams.digital_camera.uncompressed_formats ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.uncompressed_formats m.04ll8f9))"
    },
    {
        "qid": 3200500006000,
        "question": "what are the video game developer developed sonic gems collection game and version of aero elite: combat academy game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rzr9",
                "entity_name": "Sega AM2"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0kyrj2k",
                    "class": "cvg.game_version",
                    "friendly_name": "Aero Elite: Combat Academy",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "g.120x74jq",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sonic Gems Collection",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.0kyrj2k } \nVALUES ?x2 { :g.120x74jq } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.0kyrj2k) (JOIN cvg.cvg_developer.games_developed g.120x74jq)))"
    },
    {
        "qid": 4300337004000,
        "question": "john oliver la gorce was the editor on the editor for what journal?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01hddb",
                "entity_name": "National Geographic"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.journal",
                    "class": "book.journal",
                    "friendly_name": "Journal",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "book.editorial_tenure",
                    "class": "book.editorial_tenure",
                    "friendly_name": "Editorial tenure",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.012z2ncg",
                    "class": "book.periodical_editor",
                    "friendly_name": "John Oliver La Gorce",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.02h6676",
                    "class": "book.editor_title",
                    "friendly_name": "Editor",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.periodical.editorial_staff",
                    "friendly_name": "Editorial staff"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "book.editorial_tenure.editor",
                    "friendly_name": "Editor"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "book.editorial_tenure.title",
                    "friendly_name": "Title"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.journal . \n?x1 :type.object.type :book.editorial_tenure . \nVALUES ?x2 { :m.012z2ncg } \nVALUES ?x3 { :m.02h6676 } \n?x0 :book.periodical.editorial_staff ?x1 . \n?x1 :book.editorial_tenure.editor ?x2 . \n?x1 :book.editorial_tenure.title ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "book"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND book.journal (JOIN book.periodical.editorial_staff (AND (JOIN book.editorial_tenure.editor m.012z2ncg) (JOIN book.editorial_tenure.title m.02h6676))))"
    },
    {
        "qid": 3201942001000,
        "question": "which version of virtua tennis for the xbox 360 controller is marketed in the australia?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cmynjz",
                "entity_name": "Sonic & Sega All-Stars Racing with Banjo-Kazooie"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0chghy",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Australia",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05mzkx7",
                    "class": "computer.computer_peripheral",
                    "friendly_name": "Xbox 360 Controller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "computer.computer_peripheral.supporting_game_versions",
                    "friendly_name": "Supporting game versions"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { :m.0chghy } \nVALUES ?x2 { :m.05mzkx7 } \n?x0 :cvg.game_version.regions ?x1 . \n?x2 :computer.computer_peripheral.supporting_game_versions ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg",
            "computer"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (AND (JOIN cvg.game_version.regions m.0chghy) (JOIN (R computer.computer_peripheral.supporting_game_versions) m.05mzkx7)))"
    },
    {
        "qid": 2100924006000,
        "question": "consciously or unconsciously, every one of us does render some service or other. if we cultivate the habit of doing this service deliberately, our desire for service will steadily grow stronger, and will make, not only our own happiness, but that of the world at large. is a quote from what subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.018tkd",
                "entity_name": "Service"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048h7nw",
                    "class": "media_common.quotation",
                    "friendly_name": "Consciously or unconsciously, every one of us does render some service or other. If we cultivate the habit of doing this service deliberately, our desire for service will steadily grow stronger, and will make, not only our own happiness, but that of the world at large.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048h7nw } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048h7nw))"
    },
    {
        "qid": 2101958009000,
        "question": "is 4000 the iso settings of what kind of equipment?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkzs2f",
                "entity_name": "Panasonic Lumix DMC-GH2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0h27q8z",
                    "class": "digicams.camera_iso",
                    "friendly_name": "4000",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.iso_setting",
                    "friendly_name": "ISO settings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { :m.0h27q8z } \n?x0 :digicams.digital_camera.iso_setting ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.iso_setting m.0h27q8z))"
    },
    {
        "qid": 3203952001000,
        "question": "which cyclists speak a language that philip lynott speaks?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.027tm9b",
                "entity_name": "Geraint Thomas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gkhjq",
                "entity_name": "Peter Kennaugh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fxksg",
                "entity_name": "Tyler Farrar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x22b6",
                "entity_name": "Taylor Phinney"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066p_g",
                "entity_name": "Amber Neben"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06jpgd",
                "entity_name": "Chris Horner"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.cyclist",
                    "class": "sports.cyclist",
                    "friendly_name": "Cyclist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "language.human_language",
                    "class": "language.human_language",
                    "friendly_name": "Human Language",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01r6c92",
                    "class": "music.bassist",
                    "friendly_name": "philip lynott",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.languages",
                    "friendly_name": "Languages"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.languages",
                    "friendly_name": "Languages"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.cyclist . \n?x1 :type.object.type :language.human_language . \nVALUES ?x2 { :m.01r6c92 } \n?x0 :people.person.languages ?x1 . \n?x2 :people.person.languages ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND sports.cyclist (JOIN people.person.languages (JOIN (R people.person.languages) m.01r6c92)))"
    },
    {
        "qid": 2105370016000,
        "question": "which bipropellant rocket engine has a isp of at least 350.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.032blg",
                "entity_name": "Space Shuttle main engine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07kfw0m",
                "entity_name": "RD-0146"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlt61",
                "entity_name": "RD-550"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlt6v",
                "entity_name": "RD-512"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlt9t",
                "entity_name": "RD-502"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltbl",
                "entity_name": "RD-350"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltc9",
                "entity_name": "RD-303"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltd2",
                "entity_name": "RD-302"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltdw",
                "entity_name": "RD-301"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0351y6",
                "entity_name": "RL10"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlwcf",
                "entity_name": "RD-119"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026xrt0",
                "entity_name": "HM7B"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlwgn",
                "entity_name": "RD-115"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlwj8",
                "entity_name": "RD-113"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw1q",
                "entity_name": "RD-134"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xhkbz",
                "entity_name": "RD-0120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvwq",
                "entity_name": "RD-161"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlwbn",
                "entity_name": "RD-120"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03k0df1",
                "entity_name": "RD-169"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03k0h94",
                "entity_name": "RD-182"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03k0hk4",
                "entity_name": "RD-185"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043jfp",
                "entity_name": "RS-68"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltfn",
                "entity_name": "RD-280"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlv_b",
                "entity_name": "RD-141"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvy6",
                "entity_name": "RD-146"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvyz",
                "entity_name": "RD-143"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvzl",
                "entity_name": "RD-142"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw03",
                "entity_name": "RD-136"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw0x",
                "entity_name": "RD-135"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw2g",
                "entity_name": "RD-133"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw36",
                "entity_name": "RD-130"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw5d",
                "entity_name": "RD-127"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw63",
                "entity_name": "RD-126"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw6v",
                "entity_name": "RD-125"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03j_sgs",
                "entity_name": "RD-167"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026rhjc",
                "entity_name": "Vinci"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034_q7",
                "entity_name": "Rocketdyne J-2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dsjwd",
                "entity_name": "RS-83"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.bipropellant_rocket_engine",
                    "class": "spaceflight.bipropellant_rocket_engine",
                    "friendly_name": "Bipropellant rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "350.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "350.0",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.isp_vacuum",
                    "friendly_name": "Isp (vacuum)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.bipropellant_rocket_engine . \nFILTER (?x1 >= \"350.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :spaceflight.rocket_engine.isp_vacuum ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND spaceflight.bipropellant_rocket_engine (ge spaceflight.rocket_engine.isp_vacuum 350.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2105404003000,
        "question": "which film producer has the highest weight of 95.25kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d40",
                "entity_name": "Jackie Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018grr",
                "entity_name": "Will Ferrell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018p4y",
                "entity_name": "Pierce Brosnan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01kwsg",
                "entity_name": "Tommy Lee Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yrrh",
                "entity_name": "Earl Monroe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5ls",
                "entity_name": "Reggie Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0347db",
                "entity_name": "Neil Patrick Harris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.038rzr",
                "entity_name": "Gerard Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g4pf",
                "entity_name": "Vijay Amritraj"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07378r",
                "entity_name": "C\u00e9dric Klapisch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m8_v",
                "entity_name": "Jean-Claude Van Damme"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074kpr",
                "entity_name": "Pete Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cd5l",
                "entity_name": "Eric Cantona"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5msj",
                "entity_name": "Eli Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0330dc",
                "entity_name": "Chyna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014zfs",
                "entity_name": "Bill Cosby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pj3h",
                "entity_name": "Tom Selleck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vw8mh",
                "entity_name": "Snoop Dogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0382m4",
                "entity_name": "Michael C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3q09",
                "entity_name": "Anthony Wall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpjxx",
                "entity_name": "Ray Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8f54",
                "entity_name": "Kenny Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbkcxg",
                "entity_name": "Nolan McDonald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x2sc",
                "entity_name": "Alan Autry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08lrll",
                "entity_name": "Maurice Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5m7y",
                "entity_name": "Jeff Norton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjj7",
                "entity_name": "Dean Cain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_0qj",
                "entity_name": "Ellis Hobbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6pym",
                "entity_name": "Dave Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046gbn",
                "entity_name": "Bobby Valentine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080p9nh",
                "entity_name": "Adam White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_8dd",
                "entity_name": "Brad Gilbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c21k",
                "entity_name": "Francisco Garc\u00eda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037gjc",
                "entity_name": "Mark Harmon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg3z6",
                "entity_name": "Phil Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084w5b",
                "entity_name": "Randy Winn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07htfq",
                "entity_name": "Jeremy Borash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nc5v",
                "entity_name": "Jordan Babineaux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c4db1",
                "entity_name": "Don \"The Dragon\" Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h77qll",
                "entity_name": "Robert D Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qlff",
                "entity_name": "David Fariborz Davoodian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "95.25^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "95.25",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"95.25\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 95.25^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104726006000,
        "question": "the distance of at least 57.05 is attained by which star system?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.057xd",
                "entity_name": "Mira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013d4",
                "entity_name": "Antares"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06m67x",
                "entity_name": "CoKu Tau/4"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078wl",
                "entity_name": "Spica"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08sh06",
                "entity_name": "Alpha Equulei"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tqd8",
                "entity_name": "VV Cephei"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05s8k",
                "entity_name": "Polaris"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.star_system",
                    "class": "astronomy.star_system",
                    "friendly_name": "Star System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "57.05^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "57.05",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.cosmological_distance",
                    "friendly_name": "Distance"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star_system . \nFILTER (?x1 >= \"57.05\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :astronomy.celestial_object.cosmological_distance ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND astronomy.star_system (ge astronomy.celestial_object.cosmological_distance 57.05^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104632003000,
        "question": "how many tropical cyclone categories are there with the maximum wind speed (sustained) of 159.0?",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone_category",
                    "class": "meteorology.tropical_cyclone_category",
                    "friendly_name": "Tropical cyclone category",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "159.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "159.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone_category.max_wind_speed",
                    "friendly_name": "Maximum Wind Speed (sustained)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_category . \nVALUES ?x1 { \"159.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :meteorology.tropical_cyclone_category.max_wind_speed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "meteorology"
        ],
        "level": "i.i.d.",
        "s_expression": "(COUNT (AND meteorology.tropical_cyclone_category (JOIN meteorology.tropical_cyclone_category.max_wind_speed 159.0^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 3204817015000,
        "question": "ken is best known for designing the video game expansion of what popular video game series?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w1d3",
                "entity_name": "The Elder Scrolls"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_series",
                    "class": "cvg.game_series",
                    "friendly_name": "Video Game Series",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0gmm96",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "ken",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.game_series",
                    "friendly_name": "Part of game series"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_series . \n?x1 :type.object.type :cvg.computer_game_expansion . \nVALUES ?x2 { :m.0gmm96 } \n?x1 :cvg.computer_videogame.game_series ?x0 . \n?x1 :cvg.computer_videogame.designers ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_series (JOIN (R cvg.computer_videogame.game_series) (JOIN cvg.computer_videogame.designers m.0gmm96)))"
    },
    {
        "qid": 2101720008000,
        "question": "astronomical unit of mass is measured using what unit of mass?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02y_9nz",
                "entity_name": "Earth mass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wvjjb",
                "entity_name": "Jupiter mass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z1jf_",
                "entity_name": "Planetary mass"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0179r5",
                "entity_name": "Solar mass"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04g69_v",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Astronomical Unit of Mass",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \nVALUES ?x1 { :m.04g69_v } \n?x0 :measurement_unit.mass_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.mass_unit (JOIN measurement_unit.mass_unit.measurement_system m.04g69_v))"
    },
    {
        "qid": 4301766014000,
        "question": "what is the name of what was the most recent browser released by the creators of compilation error?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l0cqj",
                    "class": "computer.file_format",
                    "friendly_name": "Compilation Error",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l0cqj } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l0cqj } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l0cqj))) computer.software.first_released)"
    },
    {
        "qid": 2104324002000,
        "question": "what is the unit of temperature that has a smallest zero point in kelvins?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 3202704016000,
        "question": "which material is of the same class as cor-ten steel?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fvrsk",
                "entity_name": "Alloy steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06qqv",
                "entity_name": "Stainless steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yxm_",
                "entity_name": "Carbon steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065zbvt",
                "entity_name": "Deoxidized steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04wl9d",
                "entity_name": "Maraging steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qrct3",
                "entity_name": "Galvanized steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yxpg",
                "entity_name": "Tool steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010vv6qw",
                "entity_name": "MS Pipe, MS Tube"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "engineering.material",
                    "class": "engineering.material",
                    "friendly_name": "Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "engineering.material",
                    "class": "engineering.material",
                    "friendly_name": "Material",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08g_fq",
                    "class": "engineering.material",
                    "friendly_name": "cor-ten steel",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "engineering.material.subclass",
                    "friendly_name": "Child material class"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "engineering.material.parent_material_class",
                    "friendly_name": "Parent material class"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.material . \n?x1 :type.object.type :engineering.material . \nVALUES ?x2 { :m.08g_fq } \n?x1 :engineering.material.subclass ?x0 . \n?x2 :engineering.material.parent_material_class ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "engineering"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND engineering.material (JOIN (R engineering.material.subclass) (JOIN (R engineering.material.parent_material_class) m.08g_fq)))"
    },
    {
        "qid": 2105404008000,
        "question": "which film producer has the highest weight of 65.5kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "65.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "65.5",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"65.5\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 65.5^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2102422001000,
        "question": "the the standard school broadcast radio program has which subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f33ys",
                "entity_name": "Music appreciation"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_subject",
                    "class": "radio.radio_subject",
                    "friendly_name": "Radio subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05mzm59",
                    "class": "radio.radio_program",
                    "friendly_name": "The Standard School Broadcast",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_subject.programs_with_this_subject",
                    "friendly_name": "Programs with this subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_subject . \nVALUES ?x1 { :m.05mzm59 } \n?x0 :radio.radio_subject.programs_with_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_subject (JOIN radio.radio_subject.programs_with_this_subject m.05mzm59))"
    },
    {
        "qid": 2103869003000,
        "question": "which is the smallest unit of mass in terms of weightmass of kilograms?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 2103057011000,
        "question": "what is the number of movie casting directors from the s. africa?",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "5"
            }
        ],
        "function": "count",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.film_casting_director",
                    "class": "film.film_casting_director",
                    "friendly_name": "Film casting director",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0hzlz",
                    "class": "location.country",
                    "friendly_name": "s. africa",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.nationality",
                    "friendly_name": "Country of nationality"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.film_casting_director . \nVALUES ?x1 { :m.0hzlz } \n?x0 :people.person.nationality ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(COUNT (AND film.film_casting_director (JOIN people.person.nationality m.0hzlz)))"
    },
    {
        "qid": 2100600004000,
        "question": "what are the sponsors of sigkdd?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_qpts",
                "entity_name": "ACM SIGKDD"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "conferences.conference_sponsor",
                    "class": "conferences.conference_sponsor",
                    "friendly_name": "Conference sponsor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03sp4v9",
                    "class": "conferences.conference_series",
                    "friendly_name": "sigkdd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "conferences.conference_sponsor.conferences",
                    "friendly_name": "Conferences"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :conferences.conference_sponsor . \nVALUES ?x1 { :m.03sp4v9 } \n?x0 :conferences.conference_sponsor.conferences ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "conferences"
        ],
        "level": "zero-shot",
        "s_expression": "(AND conferences.conference_sponsor (JOIN conferences.conference_sponsor.conferences m.03sp4v9))"
    },
    {
        "qid": 3205583007000,
        "question": "total drama island shares a common cast with which tv program?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c3y8f1",
                "entity_name": "Total Drama"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tv.regular_tv_appearance",
                    "class": "tv.regular_tv_appearance",
                    "friendly_name": "TV Regular Performance",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02rm6xl",
                    "class": "tv.tv_series_season",
                    "friendly_name": "Total Drama Island",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_program.regular_cast",
                    "friendly_name": "Regular acting performances"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "tv.tv_series_season.regular_cast",
                    "friendly_name": "Regular cast"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_program . \n?x1 :type.object.type :tv.regular_tv_appearance . \nVALUES ?x2 { :m.02rm6xl } \n?x0 :tv.tv_program.regular_cast ?x1 . \n?x2 :tv.tv_series_season.regular_cast ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "tv"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tv.tv_program (JOIN tv.tv_program.regular_cast (JOIN (R tv.tv_series_season.regular_cast) m.02rm6xl)))"
    },
    {
        "qid": 3200435001000,
        "question": "what is the unit profile of the si base unit of joules?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "joules",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 3202666000000,
        "question": "which literary genre spawned the game genre which is the offspring of the genre speculative literature?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0134b1",
                "entity_name": "Contemporary fantasy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06www",
                "entity_name": "Steampunk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qpc",
                "entity_name": "Cyberpunk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057pyk",
                "entity_name": "Fantasy of manners"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ps83",
                "entity_name": "Sword and planet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kflf",
                "entity_name": "Vampire literature"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_w8",
                "entity_name": "Feminist science fiction"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03dw_3",
                "entity_name": "Heroic fantasy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03lrw",
                "entity_name": "Hard science fiction"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rvlb",
                "entity_name": "Science fantasy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070yc",
                "entity_name": "Space opera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dz8b",
                "entity_name": "Sword and sorcery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01smf2",
                "entity_name": "Military science fiction"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vzzv",
                "entity_name": "Urban fantasy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wtnw",
                "entity_name": "Cosy catastrophe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lw0y",
                "entity_name": "Post-holocaust"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06bm_y",
                "entity_name": "Edisonade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07h2td",
                "entity_name": "Lovecraftian horror"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070l2",
                "entity_name": "Soft science fiction"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bt0c",
                "entity_name": "Future history"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04chq5",
                "entity_name": "Planetary romance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02y6hh",
                "entity_name": "Splatterpunk"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.literary_genre",
                    "class": "media_common.literary_genre",
                    "friendly_name": "Literary Genre",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "games.game_genre",
                    "class": "games.game_genre",
                    "friendly_name": "Game genre",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.014dfn",
                    "class": "media_common.media_genre",
                    "friendly_name": "speculative literature",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.media_genre.parent_genre",
                    "friendly_name": "Parent genre"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "media_common.media_genre.parent_genre",
                    "friendly_name": "Parent genre"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.literary_genre . \n?x1 :type.object.type :games.game_genre . \nVALUES ?x2 { :m.014dfn } \n?x0 :media_common.media_genre.parent_genre ?x1 . \n?x1 :media_common.media_genre.parent_genre ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND media_common.literary_genre (JOIN media_common.media_genre.parent_genre (JOIN media_common.media_genre.parent_genre m.014dfn)))"
    },
    {
        "qid": 2101534017000,
        "question": "what rocket engines can thrust 6.7e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.034_44",
                "entity_name": "Rocketdyne F-1"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "6.7e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "6.7e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"6.7e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 6.7e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101534012000,
        "question": "what rocket engines are able to thrust 1.505e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b19_q",
                "entity_name": "NK-33"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.505e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.505e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.505e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.505e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100859000000,
        "question": "what unit does the international system of units use to measure magnetic flux density?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rhvb",
                "entity_name": "Tesla"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.magnetic_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_density_unit (JOIN measurement_unit.magnetic_flux_density_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2101266003000,
        "question": "in 3dtv, which conveys depth perception to the user, is compatible with which video games?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gml9jy",
                "entity_name": "Ratchet & Clank: All 4 One"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0284n2c",
                    "class": "computer.computer_peripheral_class",
                    "friendly_name": "3dtv",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.peripheral_classes_supported",
                    "friendly_name": "Peripheral classes supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { :m.0284n2c } \n?x0 :cvg.game_version.peripheral_classes_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.peripheral_classes_supported m.0284n2c))"
    },
    {
        "qid": 3204615010000,
        "question": "the village bike was produced by what theater private company limited by shares?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0y4ptvq",
                    "class": "theater.theater_production",
                    "friendly_name": "The Village Bike",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0y4ptvq } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0y4ptvq)))"
    },
    {
        "qid": 3202811002000,
        "question": "a part of the journeyman project was designed by which video game designer?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.11byb3sclx",
                "entity_name": "null"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0398zj",
                    "class": "cvg.game_series",
                    "friendly_name": "The Journeyman Project",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.computer_videogame.game_series",
                    "friendly_name": "Part of game series"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_designer . \n?x1 :type.object.type :cvg.computer_videogame . \nVALUES ?x2 { :m.0398zj } \n?x1 :cvg.computer_videogame.designers ?x0 . \n?x1 :cvg.computer_videogame.game_series ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_designer (JOIN (R cvg.computer_videogame.designers) (JOIN cvg.computer_videogame.game_series m.0398zj)))"
    },
    {
        "qid": 2104863000000,
        "question": "please identify the unit of acceleration that has the smallest acceleration when measured in meters per second squared.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.030zvd",
                "entity_name": "Gal"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.acceleration_unit",
                    "class": "measurement_unit.acceleration_unit",
                    "friendly_name": "Unit of Acceleration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared",
                    "friendly_name": "Acceleration in meters per second squared"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.acceleration_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.acceleration_unit . \n?y0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.acceleration_unit measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared)"
    },
    {
        "qid": 3206390009000,
        "question": "the roller coaster with more that 4 inversions in constructed out of what material?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yjlh",
                "entity_name": "Steel"
            }
        ],
        "function": ">",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "amusement_parks.roller_coaster_material",
                    "class": "amusement_parks.roller_coaster_material",
                    "friendly_name": "Roller Coaster Material",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "amusement_parks.roller_coaster",
                    "class": "amusement_parks.roller_coaster",
                    "friendly_name": "Roller Coaster",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "4^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "4",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "amusement_parks.roller_coaster_material.roller_coasters",
                    "friendly_name": "Roller Coasters"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "amusement_parks.ride.inversions",
                    "friendly_name": "Inversions"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.roller_coaster_material . \n?x1 :type.object.type :amusement_parks.roller_coaster . \nFILTER (?x2 > \"4\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x0 :amusement_parks.roller_coaster_material.roller_coasters ?x1 . \n?x1 :amusement_parks.ride.inversions ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "amusement_parks"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND amusement_parks.roller_coaster_material (JOIN amusement_parks.roller_coaster_material.roller_coasters (gt amusement_parks.ride.inversions 4^^http://www.w3.org/2001/XMLSchema#integer)))"
    },
    {
        "qid": 2103327001000,
        "question": "find the smallest possible unit of resistivity.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters",
                    "friendly_name": "Resistivity in ohm meters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_resistivity . \n?y0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.unit_of_resistivity measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters)"
    },
    {
        "qid": 2101534011000,
        "question": "what rocket engines can thrust 813400.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wts37",
                "entity_name": "RD-107"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "813400.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "813400.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"813400.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 813400.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103004004000,
        "question": "what is the class of ship that has a maximum speed of 32.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f3rpg",
                "entity_name": "Sovremenny-class destroyer"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship_class",
                    "class": "boats.ship_class",
                    "friendly_name": "Ship class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "32.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "32.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.ship_class.max_speed_knots",
                    "friendly_name": "Max speed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship_class . \nVALUES ?x1 { \"32.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :boats.ship_class.max_speed_knots ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "boats"
        ],
        "level": "compositional",
        "s_expression": "(AND boats.ship_class (JOIN boats.ship_class.max_speed_knots 32.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100924001000,
        "question": "the quotations of consciously or unconsciously, every one of us does render some service or other. if we cultivate the habit of doing this service deliberately, our desire for service will steadily grow stronger, and will make, not only our own happiness, but that of the world at large. is from which quotation subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.018tkd",
                "entity_name": "Service"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048h7nw",
                    "class": "media_common.quotation",
                    "friendly_name": "Consciously or unconsciously, every one of us does render some service or other. If we cultivate the habit of doing this service deliberately, our desire for service will steadily grow stronger, and will make, not only our own happiness, but that of the world at large.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048h7nw } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048h7nw))"
    },
    {
        "qid": 2101215005000,
        "question": "which measurement system has the volumetric flow rate units of cubic meters per second?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c13h",
                "entity_name": "International System of Units"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0gbw2l",
                    "class": "measurement_unit.unit_of_volumetric_flow_rate",
                    "friendly_name": "cubic meters per second",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.volumetric_flow_rate_units",
                    "friendly_name": "Volumetric Flow Rate Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.0gbw2l } \n?x0 :measurement_unit.measurement_system.volumetric_flow_rate_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.volumetric_flow_rate_units m.0gbw2l))"
    },
    {
        "qid": 2100563002000,
        "question": "what digital cameras have an lcd screen resolution of 921000.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h98xds",
                "entity_name": "Nikon D800"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03q2n14",
                "entity_name": "Sony DSC-G1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p_yy7",
                "entity_name": "Sony Cyber-shot DSC-G1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04wjm5l",
                "entity_name": "Sony Cyber-shot DSC-T700"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ddgxsy",
                "entity_name": "Nikon D7000"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "921000.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "921000.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.lcd_pixels",
                    "friendly_name": "LCD screen resolution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"921000.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.lcd_pixels ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.lcd_pixels 921000.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101410003000,
        "question": "which lake has the number of islands (approx.) of 1600 ?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.078_d_",
                "entity_name": "Rainy Lake"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.lake",
                    "class": "geography.lake",
                    "friendly_name": "Lake",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1600^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1600",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.lake.no_islands",
                    "friendly_name": "Number of islands (approx.)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \nVALUES ?x1 { \"1600\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :geography.lake.no_islands ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "geography"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND geography.lake (JOIN geography.lake.no_islands 1600^^http://www.w3.org/2001/XMLSchema#integer))"
    },
    {
        "qid": 3204366005000,
        "question": "which video game expansions exist on the ps1?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p3r2rm",
                "entity_name": "The Elder Scrolls V: Skyrim \u2013 Dragonborn"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_platform",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "Video Game Platform",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04d3gbs",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "PS1",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.platforms",
                    "friendly_name": "Platforms"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n?x1 :type.object.type :cvg.cvg_platform . \nVALUES ?x2 { :m.04d3gbs } \n?x0 :cvg.computer_videogame.platforms ?x1 . \n?x2 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_expansion (JOIN cvg.computer_videogame.platforms (JOIN (R cvg.cvg_platform_family.platforms) m.04d3gbs)))"
    },
    {
        "qid": 2103925005000,
        "question": "which theatrical composer is fatter than 52.0 kilograms?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f9x9",
                "entity_name": "Fats Waller"
            }
        ],
        "function": ">",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theatrical_composer",
                    "class": "theater.theatrical_composer",
                    "friendly_name": "Theatrical Composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "52.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "52.0",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \nFILTER (?x1 > \"52.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theatrical_composer (gt people.person.weight_kg 52.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100056000000,
        "question": "which unit is used for volumetric flow rate in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gbw2l",
                "entity_name": "Cubic metre per second"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_volumetric_flow_rate",
                    "class": "measurement_unit.unit_of_volumetric_flow_rate",
                    "friendly_name": "Unit of Volumetric Flow Rate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_volumetric_flow_rate.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_volumetric_flow_rate . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.unit_of_volumetric_flow_rate.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_volumetric_flow_rate (JOIN measurement_unit.unit_of_volumetric_flow_rate.measurement_system m.0c13h))"
    },
    {
        "qid": 3200500007000,
        "question": "the sega smash pack and action fighter game were developed by which developer?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06p8m",
                "entity_name": "Sega"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02hl4g4",
                    "class": "cvg.game_version",
                    "friendly_name": "Action Fighter",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kywnv6",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sega Smash Pack",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.02hl4g4 } \nVALUES ?x2 { :m.0kywnv6 } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.02hl4g4) (JOIN cvg.cvg_developer.games_developed m.0kywnv6)))"
    },
    {
        "qid": 3206131015000,
        "question": "what is the shortest recording by hannu lepisto?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zvqzj6",
                "entity_name": "I Think She'd Die for Me"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0zsj2sg",
                    "class": "music.artist",
                    "friendly_name": "Hannu Lepisto",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.0zsj2sg } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0zsj2sg } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.0zsj2sg)) music.recording.length)"
    },
    {
        "qid": 2100979000000,
        "question": "1.0 teu's is measured in what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x_ct_",
                "entity_name": "Twenty-foot equivalent unit"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_cargo_capacity",
                    "class": "measurement_unit.unit_of_cargo_capacity",
                    "friendly_name": "Unit of Cargo Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_cargo_capacity.capacity_in_teus",
                    "friendly_name": "Capacity in TEUs"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_cargo_capacity . \nVALUES ?x1 { \"1.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.unit_of_cargo_capacity.capacity_in_teus ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_cargo_capacity (JOIN measurement_unit.unit_of_cargo_capacity.capacity_in_teus 1.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103327002000,
        "question": "what is the name of the smallest possible unit of resistivity?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters",
                    "friendly_name": "Resistivity in ohm meters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_resistivity . \n?y0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.unit_of_resistivity measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters)"
    },
    {
        "qid": 2103869001000,
        "question": "what is the least unit of weightmass of kilograms?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 2103093004000,
        "question": "in terms of hertz, which is the largest unit of frequency?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 2101801001000,
        "question": "what does the international system of units use as a unit of illuminance?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.014fpz",
                "entity_name": "Lux"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.illuminance_unit",
                    "class": "measurement_unit.illuminance_unit",
                    "friendly_name": "Unit of Illuminance",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.illuminance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.illuminance_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.illuminance_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.illuminance_unit (JOIN measurement_unit.illuminance_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3205953005000,
        "question": "which red dwarf stars star has the lowest temperature?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09k6pqg",
                "entity_name": "GJ 1214"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.star",
                    "class": "astronomy.star",
                    "friendly_name": "Star",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fjvv",
                    "class": "astronomy.celestial_object_category",
                    "friendly_name": "red dwarf stars",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.category",
                    "friendly_name": "Category"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "astronomy.star.temperature_k",
                    "friendly_name": "Temperature"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nVALUES ?x1 { :m.0fjvv } \n{\nSELECT (MIN(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :astronomy.star . \nVALUES ?y1 { :m.0fjvv } \n?y0 :astronomy.celestial_object.category ?y1 . \n?y0 :astronomy.star.temperature_k ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x0 :astronomy.celestial_object.category ?x1 . \n?x0 :astronomy.star.temperature_k ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMIN (AND astronomy.star (JOIN astronomy.celestial_object.category m.0fjvv)) astronomy.star.temperature_k)"
    },
    {
        "qid": 2102456002000,
        "question": "molar heat capacity is measured by which unit in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj59n",
                "entity_name": "Joule per mole per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_heat_capacity_unit",
                    "class": "measurement_unit.molar_heat_capacity_unit",
                    "friendly_name": "Unit of Molar Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_heat_capacity_unit (JOIN measurement_unit.molar_heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2103996013000,
        "question": "what is the amount of medical treatments that are being tested by stage 2?",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.medical_treatment",
                    "class": "medicine.medical_treatment",
                    "friendly_name": "Medical Treatment",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05tyczg",
                    "class": "medicine.medical_trial",
                    "friendly_name": "stage 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.medical_trial.treatment_being_tested",
                    "friendly_name": "Treatment being tested"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_treatment . \nVALUES ?x1 { :m.05tyczg } \n?x1 :medicine.medical_trial.treatment_being_tested ?x0 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "i.i.d.",
        "s_expression": "(COUNT (AND medicine.medical_treatment (JOIN (R medicine.medical_trial.treatment_being_tested) m.05tyczg)))"
    },
    {
        "qid": 2100835001000,
        "question": "ps 3 platform is a part of which video game platform family?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d3gbs",
                "entity_name": "PS1"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r4_kmc",
                "entity_name": "PlayStation 4"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066kp",
                "entity_name": "PlayStation 2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_platform_family",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "Video Game Platform Family",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.067gh",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "ps 3",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_platform_family . \nVALUES ?x1 { :m.067gh } \n?x0 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_platform_family (JOIN cvg.cvg_platform_family.platforms m.067gh))"
    },
    {
        "qid": 3204615009000,
        "question": "what theater company produced hitchcock blonde and is a private company limited by shares?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0y7xj76",
                    "class": "theater.theater_production",
                    "friendly_name": "Hitchcock Blonde",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0y7xj76 } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0y7xj76)))"
    },
    {
        "qid": 3205323008000,
        "question": "what napa county wine is 13.9 percent alcohol by volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04305kg",
                "entity_name": "2005 Pine Ridge Rutherford Estate Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zhh9",
                "entity_name": "2003 Silver Oak Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.040vbhg",
                "entity_name": "2004 Winesmith \"Crucible\" Napa County Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042_lhf",
                "entity_name": "2003 Atlas Peak Winery Spring Mountain District Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ywjx2",
                "entity_name": "2005 Joseph Carr Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gcpwh",
                "entity_name": "2007 Artesa Los Carneros Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xzv93",
                "entity_name": "2005 Avalon Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yxxws",
                "entity_name": "2005 Big Ass Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045z10z",
                "entity_name": "2004 Burgess Napa Valley Estate Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045rkrr",
                "entity_name": "2005 Stags' Leap Winery Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xzs9d",
                "entity_name": "2005 Arnold Palmer Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yxy8w",
                "entity_name": "2004 Leaping Lizard \"Grand Lizard's Private Reserve\" Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042_lmm",
                "entity_name": "2004 Atlas Peak Winery Howell Mountain Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yx3lv",
                "entity_name": "2004 Charles Krug \"Lincoln Vineyard, Limited Release\" Napa Valley Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gpgt5",
                "entity_name": "2001 Fife \"Old Vines\" Napa Valley Zinfandel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g5qzc",
                "entity_name": "2006 Hendry \"HRW, Hendry Vineyard\" Napa Valley Estate Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yx3r2",
                "entity_name": "2004 Charles Krug \"Limited Release X, Clones\" Yountville Estate Cabernet Sauvignon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045rls_",
                "entity_name": "2004 Stag's Leap Wine Cellars \"Fay Vineyard\" Stags Leap District Estate Cabernet Sauvignon"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0l2l_",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "Napa County",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "13.9^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "13.9",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0l2l_ } \nVALUES ?x2 { \"13.9\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0l2l_) (JOIN wine.wine.percentage_alcohol 13.9^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2100867016000,
        "question": "on 2011-01-10, which radio program was broadcasted for the first time?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0zyk",
                "entity_name": "The International Space Station: A Space Age Cathedral"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-01-10^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "2011-01-10",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-01-10-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-01-10^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3204027001000,
        "question": "what is the unit of energy used in the same measurement system that uses the becquerels to measure radioactivity?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04570",
                "entity_name": "Joule"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.energy_unit",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "Unit of Energy",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.014fcr",
                    "class": "measurement_unit.radioactivity_unit",
                    "friendly_name": "becquerels",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.energy_unit.measurement_system",
                    "friendly_name": "Measurement System"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.measurement_system.radioactivity_units",
                    "friendly_name": "Radioactivity Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.energy_unit . \n?x1 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x2 { :m.014fcr } \n?x0 :measurement_unit.energy_unit.measurement_system ?x1 . \n?x1 :measurement_unit.measurement_system.radioactivity_units ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.energy_unit (JOIN measurement_unit.energy_unit.measurement_system (JOIN measurement_unit.measurement_system.radioactivity_units m.014fcr)))"
    },
    {
        "qid": 2101534009000,
        "question": "find rocket engines that can thrust 26460.0",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvlz",
                "entity_name": "RD-210"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "26460.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "26460.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"26460.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 26460.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103006006000,
        "question": "how does the international system of units measure magnetic flux?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0354xw",
                "entity_name": "Weber"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_unit",
                    "class": "measurement_unit.magnetic_flux_unit",
                    "friendly_name": "Unit of Magnetic Flux",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.magnetic_flux_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_unit (JOIN measurement_unit.magnetic_flux_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2100052004000,
        "question": "what subject is discussed in the conference \"dagstuhl seminar on information visualization 2010?\"",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gg9_n",
                "entity_name": "Information visualization"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "conferences.conference_subject",
                    "class": "conferences.conference_subject",
                    "friendly_name": "Conference subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dl2pj0",
                    "class": "conferences.conference",
                    "friendly_name": "Dagstuhl Seminar on Information Visualization 2010",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "conferences.conference_subject.specific_conferences_about_this",
                    "friendly_name": "Specific conferences about this"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :conferences.conference_subject . \nVALUES ?x1 { :m.0dl2pj0 } \n?x0 :conferences.conference_subject.specific_conferences_about_this ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "conferences"
        ],
        "level": "zero-shot",
        "s_expression": "(AND conferences.conference_subject (JOIN conferences.conference_subject.specific_conferences_about_this m.0dl2pj0))"
    },
    {
        "qid": 2103886004000,
        "question": "what is the unit of radioactivity with the highest radioactivity in becquerels?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.014fbb",
                "entity_name": "Curie"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.radioactivity_unit",
                    "class": "measurement_unit.radioactivity_unit",
                    "friendly_name": "Unit of Radioactivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.radioactivity_unit.radioactivity_in_becquerels",
                    "friendly_name": "Radioactivity in becquerels"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.radioactivity_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.radioactivity_unit . \n?y0 :measurement_unit.radioactivity_unit.radioactivity_in_becquerels ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.radioactivity_unit.radioactivity_in_becquerels ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.radioactivity_unit measurement_unit.radioactivity_unit.radioactivity_in_becquerels)"
    },
    {
        "qid": 2104746000000,
        "question": "which tropical cyclone has a speed of at least 125.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0256dvb",
                "entity_name": "Category 5 Severe Tropical Cyclone (BOM)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0256drc",
                "entity_name": "Category 3 Severe Tropical Cyclone (BOM)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0256dw9",
                "entity_name": "Category 2 Tropical Cyclone (BOM)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0256dv3",
                "entity_name": "Category 4 Severe Tropical Cyclone (BOM)"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.tropical_cyclone_category",
                    "class": "meteorology.tropical_cyclone_category",
                    "friendly_name": "Tropical cyclone category",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "125.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "125.0",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.tropical_cyclone_category.minimum_wind_speed_gust_km_h",
                    "friendly_name": "Minimum Wind Speed (gust)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.tropical_cyclone_category . \nFILTER (?x1 >= \"125.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :meteorology.tropical_cyclone_category.minimum_wind_speed_gust_km_h ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "meteorology"
        ],
        "level": "compositional",
        "s_expression": "(AND meteorology.tropical_cyclone_category (ge meteorology.tropical_cyclone_category.minimum_wind_speed_gust_km_h 125.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101812002000,
        "question": "what are the unit of frequency in measurement system year?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kfm_6x",
                "entity_name": "Biannual"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q68",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Year",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.measurement_system",
                    "friendly_name": "Measurement system"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \nVALUES ?x1 { :m.01q68 } \n?x0 :measurement_unit.unit_of_frequency.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_frequency (JOIN measurement_unit.unit_of_frequency.measurement_system m.01q68))"
    },
    {
        "qid": 2100371001000,
        "question": "name the unit of resistivity which is considered under the international system of units measurement system.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt4_",
                "entity_name": "Ohm meter"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.unit_of_resistivity.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_resistivity (JOIN measurement_unit.unit_of_resistivity.measurement_system m.0c13h))"
    },
    {
        "qid": 3205323013000,
        "question": "what monterey county wine is 14.2 percent alcohol by volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dcw43",
                "entity_name": "2006 Miner Family \"777, Rosella's Vineyard\" Santa Lucia Highlands Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dcv9b",
                "entity_name": "2006 Miner Family \"Rosella's Vineyard\" Santa Lucia Highlands Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04fw1lv",
                "entity_name": "2006 Hug \"Cedar Lane Vineyard\" Arroyo Seco Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dc1yh",
                "entity_name": "2006 Paraiso Santa Lucia Highlands Estate Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dgx39",
                "entity_name": "2006 Morgan \"Twelve Clones\" Santa Lucia Highlands Pinot Noir"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0l2lk",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "Monterey County",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "14.2^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "14.2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0l2lk } \nVALUES ?x2 { \"14.2\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0l2lk) (JOIN wine.wine.percentage_alcohol 14.2^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 3200382007000,
        "question": "which star system belongs to the category and which is the subcategories of brown dwarf star?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xcg",
                "entity_name": "Mizar and Alcor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hzld",
                "entity_name": "Alpha Andromedae"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nb16",
                "entity_name": "Alnitak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047l3c",
                "entity_name": "Alpha Ursae Majoris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.052xcw",
                "entity_name": "Epsilon Sagittarii"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057sfc",
                "entity_name": "Alpha Ophiuchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057sqs",
                "entity_name": "Alpha Coronae Borealis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057tht",
                "entity_name": "Gamma Leonis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062fsp",
                "entity_name": "Eta Virginis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06f2vb",
                "entity_name": "Epsilon Carinae"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06f3lp",
                "entity_name": "Kappa Scorpii"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_djd",
                "entity_name": "Delta Velorum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_dlj",
                "entity_name": "Kappa Velorum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tqd8",
                "entity_name": "VV Cephei"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01khk6",
                "entity_name": "Castor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05s8k",
                "entity_name": "Polaris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057s46",
                "entity_name": "Gamma Velorum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvwp",
                "entity_name": "Albireo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016nr5",
                "entity_name": "Alpha Crucis"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.star_system",
                    "class": "astronomy.star_system",
                    "friendly_name": "Star System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "astronomy.celestial_object_category",
                    "class": "astronomy.celestial_object_category",
                    "friendly_name": "Celestial object category",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c34w",
                    "class": "astronomy.celestial_object_category",
                    "friendly_name": "brown dwarf star",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.celestial_object.category",
                    "friendly_name": "Category"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "astronomy.celestial_object_category.subcategories",
                    "friendly_name": "Subcategories"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star_system . \n?x1 :type.object.type :astronomy.celestial_object_category . \nVALUES ?x2 { :m.0c34w } \n?x0 :astronomy.celestial_object.category ?x1 . \n?x1 :astronomy.celestial_object_category.subcategories ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND astronomy.star_system (JOIN astronomy.celestial_object.category (JOIN astronomy.celestial_object_category.subcategories m.0c34w)))"
    },
    {
        "qid": 2100924008000,
        "question": "all, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty. is part of what quote?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09cfyp",
                "entity_name": "Power"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048bzd6",
                    "class": "media_common.quotation",
                    "friendly_name": "All, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. Howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048bzd6 } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048bzd6))"
    },
    {
        "qid": 3200500009000,
        "question": "what video game developer developed the sonic gems collection game and version of dynamite duke game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rzr9",
                "entity_name": "Sega AM2"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.040l5j2",
                    "class": "cvg.game_version",
                    "friendly_name": "Dynamite Duke",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "g.120x74jq",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sonic Gems Collection",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.040l5j2 } \nVALUES ?x2 { :g.120x74jq } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.040l5j2) (JOIN cvg.cvg_developer.games_developed g.120x74jq)))"
    },
    {
        "qid": 4300909007000,
        "question": "what musical release component tracks recordings made by royal philarmonic orchestra and featured by mike townend?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0321m1f",
                "entity_name": "Rock Classics"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release_component",
                    "class": "music.release_component",
                    "friendly_name": "Musical Release Component",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.016frk",
                    "class": "music.orchestra",
                    "friendly_name": "royal philarmonic orchestra",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.03f6h9l",
                    "class": "music.featured_artist",
                    "friendly_name": "Mike Townend",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.release.track",
                    "friendly_name": "Tracks"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "music.artist.track",
                    "friendly_name": "Recordings"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "music.recording.featured_artists",
                    "friendly_name": "Featured artists"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release_component . \n?x1 :type.object.type :music.recording . \nVALUES ?x2 { :m.016frk } \nVALUES ?x3 { :m.03f6h9l } \n?x0 :music.release.track ?x1 . \n?x2 :music.artist.track ?x1 . \n?x1 :music.recording.featured_artists ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND music.release_component (JOIN music.release.track (AND (JOIN (R music.artist.track) m.016frk) (JOIN music.recording.featured_artists m.03f6h9l))))"
    },
    {
        "qid": 3200500005000,
        "question": "sonic gems collection game and version of dynamite duke game was developed by which video game developer.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rzr9",
                "entity_name": "Sega AM2"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.040l5j2",
                    "class": "cvg.game_version",
                    "friendly_name": "Dynamite Duke",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "g.120x74jq",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sonic Gems Collection",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.040l5j2 } \nVALUES ?x2 { :g.120x74jq } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.040l5j2) (JOIN cvg.cvg_developer.games_developed g.120x74jq)))"
    },
    {
        "qid": 2102557011000,
        "question": "panta rhei is the succeeding engine to what video game engine?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c6myz",
                "entity_name": "MT Framework"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0_1mfsp",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Panta Rhei",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_engine.successor_engine",
                    "friendly_name": "Successor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0_1mfsp } \n?x0 :cvg.computer_game_engine.successor_engine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_engine (JOIN cvg.computer_game_engine.successor_engine m.0_1mfsp))"
    },
    {
        "qid": 2104372003000,
        "question": "find stars whose average orbital speed is less than or equal to 225.0.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06m_p",
                "entity_name": "Sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d1rrm",
                "entity_name": "HD 41004"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.star",
                    "class": "astronomy.star",
                    "friendly_name": "Star",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "225.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "225.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.orbital_relationship.mean_orbital_speed",
                    "friendly_name": "Average Orbital Speed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nFILTER (?x1 <= \"225.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :astronomy.orbital_relationship.mean_orbital_speed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "compositional",
        "s_expression": "(AND astronomy.star (le astronomy.orbital_relationship.mean_orbital_speed 225.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2105327002000,
        "question": "what moon has the maximum inclination?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t0db",
                "entity_name": "Ymir"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.moon",
                    "class": "astronomy.moon",
                    "friendly_name": "Moon",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.orbital_relationship.inclination",
                    "friendly_name": "Inclination"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.moon . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :astronomy.moon . \n?y0 :astronomy.orbital_relationship.inclination ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :astronomy.orbital_relationship.inclination ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX astronomy.moon astronomy.orbital_relationship.inclination)"
    },
    {
        "qid": 2100647014000,
        "question": "what is the adapted work that has madame freedom been adopted from?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jvpfbr",
                "entity_name": "Madame Freedom"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.adapted_work",
                    "class": "media_common.adapted_work",
                    "friendly_name": "Adapted Work",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03hmv0r",
                    "class": "media_common.adaptation",
                    "friendly_name": "Madame Freedom",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.adapted_work.adaptations",
                    "friendly_name": "Adaptations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.adapted_work . \nVALUES ?x1 { :m.03hmv0r } \n?x0 :media_common.adapted_work.adaptations ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND media_common.adapted_work (JOIN media_common.adapted_work.adaptations m.03hmv0r))"
    },
    {
        "qid": 2103093003000,
        "question": "what is the largest unit of frequency in terms of hertz?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 2100814010000,
        "question": "p-47: the freedom fighter appear in what video games?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012tq3",
                "entity_name": "Republic P-47 Thunderbolt"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_subject",
                    "class": "cvg.computer_game_subject",
                    "friendly_name": "Video Game Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0clj1kb",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "P-47: The Freedom Fighter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_subject.games",
                    "friendly_name": "Games On This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_subject . \nVALUES ?x1 { :m.0clj1kb } \n?x0 :cvg.computer_game_subject.games ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_subject (JOIN cvg.computer_game_subject.games m.0clj1kb))"
    },
    {
        "qid": 4302314001000,
        "question": "which medical trial designed using cocaine effects in humans: physiology and behavior \u2013 1 has the lowest expected total enrollment?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zbgdy",
                "entity_name": "Treatment"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.medical_trial_design",
                    "class": "medicine.medical_trial_design",
                    "friendly_name": "Medical trial design",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "medicine.medical_trial",
                    "class": "medicine.medical_trial",
                    "friendly_name": "Medical trial",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03zbbw1",
                    "class": "medicine.medical_trial",
                    "friendly_name": "Cocaine Effects in Humans: Physiology and Behavior \u2013 1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.medical_trial.design",
                    "friendly_name": "Design"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "medicine.medical_trial_design.trials",
                    "friendly_name": "Trials"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "medicine.medical_trial.expected_total_enrollment",
                    "friendly_name": "Expected total enrollment"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial_design . \n?x1 :type.object.type :medicine.medical_trial . \nVALUES ?x2 { :m.03zbbw1 } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :medicine.medical_trial_design . \n?y1 :type.object.type :medicine.medical_trial . \nVALUES ?y2 { :m.03zbbw1 } \n?y1 :medicine.medical_trial.design ?y0 . \n?y0 :medicine.medical_trial_design.trials ?y2 . \n?y1 :medicine.medical_trial.expected_total_enrollment ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :medicine.medical_trial.design ?x0 . \n?x0 :medicine.medical_trial_design.trials ?x2 . \n?x1 :medicine.medical_trial.expected_total_enrollment ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND medicine.medical_trial_design (JOIN medicine.medical_trial_design.trials m.03zbbw1)) (JOIN (R medicine.medical_trial.design) medicine.medical_trial.expected_total_enrollment))"
    },
    {
        "qid": 2100600010000,
        "question": "who is the conference sponsor of the sigkdd?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_qpts",
                "entity_name": "ACM SIGKDD"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "conferences.conference_sponsor",
                    "class": "conferences.conference_sponsor",
                    "friendly_name": "Conference sponsor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03sp4v9",
                    "class": "conferences.conference_series",
                    "friendly_name": "sigkdd",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "conferences.conference_sponsor.conferences",
                    "friendly_name": "Conferences"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :conferences.conference_sponsor . \nVALUES ?x1 { :m.03sp4v9 } \n?x0 :conferences.conference_sponsor.conferences ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "conferences"
        ],
        "level": "zero-shot",
        "s_expression": "(AND conferences.conference_sponsor (JOIN conferences.conference_sponsor.conferences m.03sp4v9))"
    },
    {
        "qid": 4300898011000,
        "question": "what is the core text of mormon and honored by bible study practitioners?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.015j7",
                "entity_name": "The Bible"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.058x5",
                    "class": "religion.religion",
                    "friendly_name": "mormon",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.05gd62",
                    "class": "religion.religious_practice",
                    "friendly_name": "Bible study",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.058x5 } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.05gd62 } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.058x5) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.05gd62))))"
    },
    {
        "qid": 2104093006000,
        "question": "which aircraft model can fly more than or equal to 8200.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_39",
                "entity_name": "Airbus A330 MRTT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.032kfw",
                "entity_name": "Boeing KC-767"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j52_2d",
                "entity_name": "Airbus A310-300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h1y2m",
                "entity_name": "Boeing 747SP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018rl2",
                "entity_name": "Airbus A380"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lqj1",
                "entity_name": "Lockheed HC-130"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bhgz",
                "entity_name": "Boeing Sonic Cruiser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p2d2f",
                "entity_name": "Boeing VC-25"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02tmmv",
                "entity_name": "Boeing C-32"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ccddv",
                "entity_name": "Boeing CC-137"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j51kpj",
                "entity_name": "B-52D"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j54d13",
                "entity_name": "YB-29"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kl8pd",
                "entity_name": "Gulfstream G500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch58gy",
                "entity_name": "KQ-X"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53yx3",
                "entity_name": "RQ-4B Global Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.090tzw",
                "entity_name": "Boeing B-54"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pvth1",
                "entity_name": "Kawasaki C-2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyx3",
                "entity_name": "Boeing B-29 Superfortress"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021s1t",
                "entity_name": "McDonnell Douglas MD-11"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cyn7",
                "entity_name": "Convair XC-99"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fk99",
                "entity_name": "Boeing X-20 Dyna-Soar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wfqyg",
                "entity_name": "Gulfstream G650"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02h6nb",
                "entity_name": "Douglas DC-7"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02fvw2",
                "entity_name": "Junkers Ju 390"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wzdh",
                "entity_name": "Saunders-Roe Princess"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rfvc3",
                "entity_name": "Boeing E-767"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z3z",
                "entity_name": "Boeing C-17 Globemaster III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.039pcp",
                "entity_name": "Boeing XB-15"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wlnk",
                "entity_name": "Lockheed CP-140 Aurora"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j57cgz",
                "entity_name": "C-141A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j57ch5",
                "entity_name": "C-141B"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j547xd",
                "entity_name": "707-320C"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08xhtb",
                "entity_name": "Bombardier Global 5000"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j54d1p",
                "entity_name": "B-29A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0222cx",
                "entity_name": "Convair B-36 Peacemaker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrnzb",
                "entity_name": "Boeing 767-200"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrnzk",
                "entity_name": "Boeing 767-300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrnzs",
                "entity_name": "Boeing 767-400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vk6tn",
                "entity_name": "Gulfstream V"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mrmy",
                "entity_name": "Tupolev Tu-95"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0636bh",
                "entity_name": "Boeing Pelican"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53rmh",
                "entity_name": "Boeing 747-400ER"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jzpb3v",
                "entity_name": "Boeing VC-137C"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01dvt",
                "entity_name": "Northrop Grumman B-2 Spirit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qkm61",
                "entity_name": "EADS/Northrop Grumman KC-45"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d0ndp",
                "entity_name": "Embraer Lineage 1000"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.030scd",
                "entity_name": "Tupolev Tu-160"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrpb5",
                "entity_name": "Airbus A330-200"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06jbpm",
                "entity_name": "Dassault Falcon 7X"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53yr9",
                "entity_name": "Falcon 900LX"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vl8j7",
                "entity_name": "Beriev A-60"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024gh2",
                "entity_name": "Antonov An-225 Mriya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mbk5",
                "entity_name": "Antonov An-22"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j51l7t",
                "entity_name": "C-124C"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qnqx",
                "entity_name": "Northrop YB-49"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qznh",
                "entity_name": "Rutan Voyager"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrp5b",
                "entity_name": "Boeing 767-200ER"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qnpc",
                "entity_name": "Northrop YB-35"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cfk8",
                "entity_name": "Convair YB-60"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j537lg",
                "entity_name": "Airbus A330-300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zqsq",
                "entity_name": "Canadair CP-107 Argus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070jp8",
                "entity_name": "Short Belfast"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j51kns",
                "entity_name": "B-52H"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121j1_nq",
                "entity_name": "Airbus A340-500"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xry0v",
                "entity_name": "Boeing 787-8"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0270kwd",
                "entity_name": "Focke-Wulf Ta 400"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02nbvpj",
                "entity_name": "Boeing 787-9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02v50n",
                "entity_name": "Raytheon Sentinel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wfmt",
                "entity_name": "Airbus A310 MRTT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wfpp",
                "entity_name": "Airbus CC-150 Polaris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03lb92",
                "entity_name": "Bombardier Global Express"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07s0w2",
                "entity_name": "Lockheed R6V Constitution"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j51kpx",
                "entity_name": "B-52G"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j52035",
                "entity_name": "B-1B Lancer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j536jz",
                "entity_name": "Boeing KC-46A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j536k4",
                "entity_name": "Boeing KC-767J"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j536kb",
                "entity_name": "Boeing KC-767A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j537cz",
                "entity_name": "Airbus A340-300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j537db",
                "entity_name": "Airbus A340-600"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53rkx",
                "entity_name": "Boeing 787-10"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53rm9",
                "entity_name": "Boeing 747-400ERF"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53rmw",
                "entity_name": "Boeing 747-400F"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53t94",
                "entity_name": "777-300"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53t9b",
                "entity_name": "777 Freighter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53v3h",
                "entity_name": "Northrop Grumman E-11A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53wxt",
                "entity_name": "McDonnell Douglas DC-10-30"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53x1y",
                "entity_name": "McDonnell Douglas DC-10-40"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j546dx",
                "entity_name": "C-5M Super Galaxy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j546f2",
                "entity_name": "C-5A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j547qv",
                "entity_name": "An-124-210"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j547r6",
                "entity_name": "An-124-100M-150"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j547yb",
                "entity_name": "707-320B"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j547yj",
                "entity_name": "707-120B"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j56swy",
                "entity_name": "U-2S"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j59lr2",
                "entity_name": "Boeing E-3A"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j5bwtx",
                "entity_name": "McDonnell Douglas MD-11CF"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j5bwv8",
                "entity_name": "McDonnell Douglas MD-11C"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j51q4w",
                "entity_name": "Boeing 747-8 Intercontinental"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086lk9",
                "entity_name": "N-class blimp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j53tb8",
                "entity_name": "Boeing 777-200ER"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j5cfpw",
                "entity_name": "Convair B-36B"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "aviation.aircraft_model",
                    "class": "aviation.aircraft_model",
                    "friendly_name": "Aircraft model",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "8200.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "8200.0",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "aviation.aircraft_model.range",
                    "friendly_name": "Range"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :aviation.aircraft_model . \nFILTER (?x1 >= \"8200.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :aviation.aircraft_model.range ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "aviation"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND aviation.aircraft_model (ge aviation.aircraft_model.range 8200.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2105404010000,
        "question": "which film producer's weight is at most 112.5?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d40",
                "entity_name": "Jackie Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017rjs",
                "entity_name": "Jose Canseco"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018grr",
                "entity_name": "Will Ferrell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018p4y",
                "entity_name": "Pierce Brosnan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01kwsg",
                "entity_name": "Tommy Lee Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yrrh",
                "entity_name": "Earl Monroe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025n3p",
                "entity_name": "Vin Diesel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bf2s",
                "entity_name": "Jim Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5ls",
                "entity_name": "Reggie Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0347db",
                "entity_name": "Neil Patrick Harris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.038rzr",
                "entity_name": "Gerard Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g4pf",
                "entity_name": "Vijay Amritraj"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l26m",
                "entity_name": "Carmelo Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pjcc",
                "entity_name": "Michael Finley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vrv9",
                "entity_name": "Fred Williamson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049sb",
                "entity_name": "Kareem Abdul-Jabbar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h22h",
                "entity_name": "Mitch Richmond"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mbxl",
                "entity_name": "Bob McKeown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07378r",
                "entity_name": "C\u00e9dric Klapisch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09qvs",
                "entity_name": "Mike Tyson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m8_v",
                "entity_name": "Jean-Claude Van Damme"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pmhf",
                "entity_name": "Denzel Washington"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qgpm",
                "entity_name": "George Chuvalo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074kpr",
                "entity_name": "Pete Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cd5l",
                "entity_name": "Eric Cantona"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7z0",
                "entity_name": "Vince McMahon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5msj",
                "entity_name": "Eli Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0330dc",
                "entity_name": "Chyna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rrhc",
                "entity_name": "Diamond Dallas Page"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014zfs",
                "entity_name": "Bill Cosby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pj3h",
                "entity_name": "Tom Selleck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vvyc_",
                "entity_name": "50 Cent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vw8mh",
                "entity_name": "Snoop Dogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0382m4",
                "entity_name": "Michael C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nwwqf",
                "entity_name": "Jake Deckard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.095nx",
                "entity_name": "Magic Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2yrf",
                "entity_name": "Joakim Noah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3q09",
                "entity_name": "Anthony Wall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpjxx",
                "entity_name": "Ray Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8f54",
                "entity_name": "Kenny Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f0r85",
                "entity_name": "R\u00e9my Martin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbkcxg",
                "entity_name": "Nolan McDonald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bv1lt",
                "entity_name": "Tony Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x2sc",
                "entity_name": "Alan Autry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l7gl",
                "entity_name": "Alex Karras"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08lrll",
                "entity_name": "Maurice Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5m7y",
                "entity_name": "Jeff Norton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjj7",
                "entity_name": "Dean Cain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_0qj",
                "entity_name": "Ellis Hobbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6pym",
                "entity_name": "Dave Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z36s9",
                "entity_name": "Ed Cunningham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046gbn",
                "entity_name": "Bobby Valentine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080p9nh",
                "entity_name": "Adam White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_8dd",
                "entity_name": "Brad Gilbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c21k",
                "entity_name": "Francisco Garc\u00eda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037gjc",
                "entity_name": "Mark Harmon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_yh6",
                "entity_name": "Rick Fox"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg3z6",
                "entity_name": "Phil Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034fjj",
                "entity_name": "Jayson Williams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vvpr",
                "entity_name": "Dale Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zrys",
                "entity_name": "Baron Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06x2t1",
                "entity_name": "A. C. Green"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084w5b",
                "entity_name": "Randy Winn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dw5j",
                "entity_name": "Michael Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07htfq",
                "entity_name": "Jeremy Borash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z0yh7",
                "entity_name": "Craig Richards"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zl_0",
                "entity_name": "Jeff Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nc5v",
                "entity_name": "Jordan Babineaux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c4db1",
                "entity_name": "Don \"The Dragon\" Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx0q3w",
                "entity_name": "Billy Sorrentino"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h77qll",
                "entity_name": "Robert D Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qlff",
                "entity_name": "David Fariborz Davoodian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "112.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "112.5",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"112.5\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 112.5^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2105404013000,
        "question": "which film producer has the highest weight of 57.0kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "57.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "57.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"57.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 57.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3200273004000,
        "question": "what is the extension of seo?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j5ww_",
                "entity_name": "Online Advertising"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n7w78w",
                "entity_name": "SEO consultant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rn_rkd",
                "entity_name": "Marketing Specialist"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "type.type",
                    "class": "type.type",
                    "friendly_name": "Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "type.type",
                    "class": "type.type",
                    "friendly_name": "Type",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0j72ylp",
                    "class": "type.type",
                    "friendly_name": "SEO",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "type.type.extends",
                    "friendly_name": "Extends"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "type.type.extends",
                    "friendly_name": "Extends"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :type.type . \n?x1 :type.object.type :type.type . \nVALUES ?x2 { :m.0j72ylp } \n?x1 :type.type.extends ?x0 . \n?x1 :type.type.extends ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "type"
        ],
        "level": "compositional",
        "s_expression": "(AND type.type (JOIN (R type.type.extends) (JOIN type.type.extends m.0j72ylp)))"
    },
    {
        "qid": 2103604001000,
        "question": "what is the earliest composition on record?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.043rxjn",
                "entity_name": "Ce fut en mai"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.composition",
                    "class": "music.composition",
                    "friendly_name": "Composition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.composition.date_completed",
                    "friendly_name": "Date completed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.composition . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.composition . \n?y0 :music.composition.date_completed ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :music.composition.date_completed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN music.composition music.composition.date_completed)"
    },
    {
        "qid": 2100075019000,
        "question": "steel battalion controller supports what video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02s4bt",
                "entity_name": "Steel Battalion"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.06lfszf",
                    "class": "computer.computer_peripheral",
                    "friendly_name": "Steel Battalion controller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.peripherals_supported",
                    "friendly_name": "Peripherals supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.06lfszf } \n?x0 :cvg.computer_videogame.peripherals_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.peripherals_supported m.06lfszf))"
    },
    {
        "qid": 2102456000000,
        "question": "molar heat capacity has what unit in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj59n",
                "entity_name": "Joule per mole per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_heat_capacity_unit",
                    "class": "measurement_unit.molar_heat_capacity_unit",
                    "friendly_name": "Unit of Molar Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_heat_capacity_unit (JOIN measurement_unit.molar_heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3204366003000,
        "question": "what video game expansions exist on the play station 2?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p3r2rm",
                "entity_name": "The Elder Scrolls V: Skyrim \u2013 Dragonborn"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_platform",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "Video Game Platform",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.066kp",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "play station 2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.platforms",
                    "friendly_name": "Platforms"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n?x1 :type.object.type :cvg.cvg_platform . \nVALUES ?x2 { :m.066kp } \n?x0 :cvg.computer_videogame.platforms ?x1 . \n?x2 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_expansion (JOIN cvg.computer_videogame.platforms (JOIN (R cvg.cvg_platform_family.platforms) m.066kp)))"
    },
    {
        "qid": 3200500008000,
        "question": "what is the name of the video game developer who created the sega smash pack game and a version of the sonic the hedgehog game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06p8m",
                "entity_name": "Sega"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04m0xfk",
                    "class": "cvg.game_version",
                    "friendly_name": "Sonic the Hedgehog",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kywnv6",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sega Smash Pack",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.04m0xfk } \nVALUES ?x2 { :m.0kywnv6 } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.04m0xfk) (JOIN cvg.cvg_developer.games_developed m.0kywnv6)))"
    },
    {
        "qid": 2101083005000,
        "question": "what manufactured drugs have a diamond shape?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmwtc",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxcp51",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjfk3",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql03g",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm821",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp354",
                "entity_name": "Amlodipine besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp6l5",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx9g5j",
                "entity_name": "Tenex 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqktqm",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhf5v",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhsqz",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqzw4",
                "entity_name": "Dextroamphetamine Sulfate 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh7f3",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgrwx",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlh2t",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlc_0",
                "entity_name": "Azasan 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjy91",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkgb9",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr46g",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjn9k",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxh3x2",
                "entity_name": "Lamivudine 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjqyw",
                "entity_name": "Amlodipine 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk8bv",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqngqn",
                "entity_name": "Epivir 300 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnptb",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqpgv1",
                "entity_name": "Estazolam 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmwsf",
                "entity_name": "Norvasc 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnnhl",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqd83",
                "entity_name": "Midamor 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh1x5",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh6xg",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn_kj",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhdg2",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhkdn",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql5w7",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqq679",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr0ky",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr193",
                "entity_name": "Tagamet HB 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr4f5",
                "entity_name": "Norvasc 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgfwd",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh_vl",
                "entity_name": "Glucotrol 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjhw7",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmsgd",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp29j",
                "entity_name": "Epivir 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk1kb",
                "entity_name": "Abstral 400 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx8yqy",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqq2mj",
                "entity_name": "Inspra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhfqy",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqj31m",
                "entity_name": "Glucotrol 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqml10",
                "entity_name": "Amiloride Hydrocloride 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqpg97",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqjby",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqpm8",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhqpj",
                "entity_name": "Viagra Viagra - Professional Sample 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkkqz",
                "entity_name": "Estazolam 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkt06",
                "entity_name": "Eplerenone 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlgf1",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqphly",
                "entity_name": "Cortisone Acetate 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgxz3",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhcj_",
                "entity_name": "Eplerenone 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk089",
                "entity_name": "Amlodipine besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk0hw",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkc41",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm3j7",
                "entity_name": "Viagra Viagra - Professional Sample 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn4_2",
                "entity_name": "Cortisone Acetate 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk6ct",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxb54r",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxkd5z",
                "entity_name": "Tenex 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxtqtx",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql9fc",
                "entity_name": "Amiloride Hydrochloride 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp2wz",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqyry",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhxj0",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjfzb",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkrt3",
                "entity_name": "Doxazosin Mesylate 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnq42",
                "entity_name": "Inspra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp1jr",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn8vb",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlh44",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jvd75c",
                "entity_name": "Famotidine 40 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx87gb",
                "entity_name": "Glucotrol 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql2b9",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxtd_6",
                "entity_name": "Lamivudine 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh1zt",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnmr1",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk93v",
                "entity_name": "Inspra 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm8pd",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjgq4",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.manufactured_drug_form",
                    "class": "medicine.manufactured_drug_form",
                    "friendly_name": "Manufactured drug form",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04kf88x",
                    "class": "medicine.drug_form_shape",
                    "friendly_name": "Diamond",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.manufactured_drug_form.shape",
                    "friendly_name": "Shape"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.04kf88x } \n?x0 :medicine.manufactured_drug_form.shape ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "compositional",
        "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.shape m.04kf88x))"
    },
    {
        "qid": 2102549000000,
        "question": "what game supports motorola 68010?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.014qlj",
                "entity_name": "Marble Madness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09qynr",
                "entity_name": "RoadBlasters"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09pr6",
                    "class": "computer.computer_processor",
                    "friendly_name": "Motorola 68010",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.09pr6 } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.09pr6))"
    },
    {
        "qid": 2103629002000,
        "question": "the latest release date is what version of video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01114vzr",
                "entity_name": "Grand Theft Auto V"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cvg.game_version . \n?y0 :cvg.game_version.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX cvg.game_version cvg.game_version.release_date)"
    },
    {
        "qid": 3201311011000,
        "question": "which government agency is founded by the person who also founded the vigiles?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c1fm",
                "entity_name": "Praetorian Guard"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.government_agency",
                    "class": "government.government_agency",
                    "friendly_name": "Government Agency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "organization.organization_founder",
                    "class": "organization.organization_founder",
                    "friendly_name": "Organization founder",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04csxz",
                    "class": "military.armed_force",
                    "friendly_name": "Vigiles",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_agency . \n?x1 :type.object.type :organization.organization_founder . \nVALUES ?x2 { :m.04csxz } \n?x0 :organization.organization.founders ?x1 . \n?x2 :organization.organization.founders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND government.government_agency (JOIN organization.organization.founders (JOIN (R organization.organization.founders) m.04csxz)))"
    },
    {
        "qid": 2100527004000,
        "question": "what was the website material design initiated?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rdqc7",
                "entity_name": "Showcase"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fpss3",
                "entity_name": "Web template system"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x8m2rr",
                "entity_name": "Wordpress"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cghg",
                "entity_name": "Theme"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "internet.website",
                    "class": "internet.website",
                    "friendly_name": "Website",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.011jm7fw",
                    "class": "internet.website",
                    "friendly_name": "Material design",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "internet.website.parent_web_property",
                    "friendly_name": "Parent Website"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.website . \nVALUES ?x1 { :m.011jm7fw } \n?x0 :internet.website.parent_web_property ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "internet"
        ],
        "level": "compositional",
        "s_expression": "(AND internet.website (JOIN internet.website.parent_web_property m.011jm7fw))"
    },
    {
        "qid": 3202286001000,
        "question": "anselm feuerbach illustrated the series sacred band of stepsons in what book edition?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0by4xph",
                "entity_name": "The Sacred Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c01q8t",
                "entity_name": "The Sacred Band"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.book_edition",
                    "class": "book.book_edition",
                    "friendly_name": "Book Edition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0bv85n6",
                    "class": "book.book_edition_series",
                    "friendly_name": "sacred band of stepsons",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01qhlw",
                    "class": "book.illustrator",
                    "friendly_name": "Anselm Feuerbach",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "book.book_edition_series.editions_in_this_series",
                    "friendly_name": "Editions in this series"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "book.illustrator.book_editions_illustrated",
                    "friendly_name": "Book editions illustrated"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book_edition . \nVALUES ?x1 { :m.0bv85n6 } \nVALUES ?x2 { :m.01qhlw } \n?x1 :book.book_edition_series.editions_in_this_series ?x0 . \n?x2 :book.illustrator.book_editions_illustrated ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "book"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND book.book_edition (AND (JOIN (R book.book_edition_series.editions_in_this_series) m.0bv85n6) (JOIN (R book.illustrator.book_editions_illustrated) m.01qhlw)))"
    },
    {
        "qid": 2101534004000,
        "question": "what are the rocket engines that can thrust at 2.9e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.043jfp",
                "entity_name": "RS-68"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2.9e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "2.9e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"2.9e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 2.9e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3205791010000,
        "question": "what is the latest released computer emulator that was developed in x86 assembly language?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0512lm7",
                "entity_name": "The Spectrum Emulator"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.computer_emulator",
                    "class": "computer.computer_emulator",
                    "friendly_name": "Computer Emulator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01fgwp",
                    "class": "computer.programming_language",
                    "friendly_name": "x86 assembly language",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "computer.software.latest_release_date",
                    "friendly_name": "Latest Release Date"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "computer.software.languages_used",
                    "friendly_name": "Programming languages used"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_emulator . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :computer.computer_emulator . \nVALUES ?y2 { :m.01fgwp } \n?y0 :computer.software.latest_release_date ?y1 . \n?y0 :computer.software.languages_used ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.01fgwp } \n?x0 :computer.software.latest_release_date ?x1 . \n?x0 :computer.software.languages_used ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND computer.computer_emulator (JOIN computer.software.languages_used m.01fgwp)) computer.software.latest_release_date)"
    },
    {
        "qid": 2105404007000,
        "question": "what film producers weights 54.5 or less?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "54.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "54.5",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"54.5\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 54.5^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100814007000,
        "question": "minecraft 1.2 appeared in what video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.053rd",
                "entity_name": "Mining"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_subject",
                    "class": "cvg.computer_game_subject",
                    "friendly_name": "Video Game Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.09v6kpg",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "minecraft 1.2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_subject.games",
                    "friendly_name": "Games On This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_subject . \nVALUES ?x1 { :m.09v6kpg } \n?x0 :cvg.computer_game_subject.games ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_subject (JOIN cvg.computer_game_subject.games m.09v6kpg))"
    },
    {
        "qid": 3200339002000,
        "question": "there exists a judaism based holiday related to sukkot, what is it called?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.011sbztk",
                "entity_name": "Chol HaMoed Sukkot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011sbzv2",
                "entity_name": "First day of Sukkot"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "time.holiday",
                    "class": "time.holiday",
                    "friendly_name": "Holiday",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03_gx",
                    "class": "religion.religion",
                    "friendly_name": "Judaism",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.072qz",
                    "class": "time.holiday_period",
                    "friendly_name": "Sukkot",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.holidays",
                    "friendly_name": "Holidays"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "time.holiday_period.holidays",
                    "friendly_name": "Related Holidays"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.holiday . \nVALUES ?x1 { :m.03_gx } \nVALUES ?x2 { :m.072qz } \n?x1 :religion.religion.holidays ?x0 . \n?x2 :time.holiday_period.holidays ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "time",
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND time.holiday (AND (JOIN (R religion.religion.holidays) m.03_gx) (JOIN (R time.holiday_period.holidays) m.072qz)))"
    },
    {
        "qid": 2101131002000,
        "question": "name the ski run which is served by sunnyside.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmk9",
                "entity_name": "Patsey Marley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmly",
                "entity_name": "Dipsy Doodle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmkn",
                "entity_name": "Blue Bell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmln",
                "entity_name": "Race Arena"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2kr",
                "entity_name": "Vail Ridge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2ky",
                "entity_name": "Crooked Mile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2l3",
                "entity_name": "Home Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmkz",
                "entity_name": "Sunnyside"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knml8",
                "entity_name": "Alf's/Cecret/Sugarloaf Access"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_run",
                    "class": "skiing.ski_run",
                    "friendly_name": "Ski Run",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04kk206",
                    "class": "skiing.ski_lift",
                    "friendly_name": "Sunnyside",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "skiing.ski_run.served_by",
                    "friendly_name": "Served By"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_run . \nVALUES ?x1 { :m.04kk206 } \n?x0 :skiing.ski_run.served_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "skiing"
        ],
        "level": "compositional",
        "s_expression": "(AND skiing.ski_run (JOIN skiing.ski_run.served_by m.04kk206))"
    },
    {
        "qid": 2104324007000,
        "question": "what is the name of the unit of temperature that has a smallest zero point in kelvins?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 2102549009000,
        "question": "what game can support motorola 6809 integers?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dybkr",
                "entity_name": "Arlington Horse Racing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g51yc",
                "entity_name": "BattleCry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gfx16",
                "entity_name": "Beezer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02gs0m",
                "entity_name": "Contra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g96xf",
                "entity_name": "Juno First"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzf7y",
                "entity_name": "B-Wings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gg63j",
                "entity_name": "Ben Bero Beh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kbvg",
                "entity_name": "Bravoman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bg38h",
                "entity_name": "Blaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g4d70",
                "entity_name": "Battle Lane Vol. 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy08n",
                "entity_name": "A Jax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05yzqx",
                "entity_name": "Jackal"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.053b6",
                    "class": "computer.computer_processor",
                    "friendly_name": "Motorola 6809",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.053b6 } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.053b6))"
    },
    {
        "qid": 2100563001000,
        "question": "what digital camera has a lcd screen resolution of 307200.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xc2kh",
                "entity_name": "Nikon D300"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "307200.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "307200.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.lcd_pixels",
                    "friendly_name": "LCD screen resolution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"307200.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.lcd_pixels ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.lcd_pixels 307200.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101661019000,
        "question": "which meteorological service has forecast zones in lundy?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vbry",
                "entity_name": "Met Office"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "meteorology.meteorological_service",
                    "class": "meteorology.meteorological_service",
                    "friendly_name": "Meteorological service",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0725kgf",
                    "class": "meteorology.forecast_zone",
                    "friendly_name": "Lundy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "meteorology.meteorological_service.forecast_zones",
                    "friendly_name": "Forecast Zones"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :meteorology.meteorological_service . \nVALUES ?x1 { :m.0725kgf } \n?x0 :meteorology.meteorological_service.forecast_zones ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "meteorology"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND meteorology.meteorological_service (JOIN meteorology.meteorological_service.forecast_zones m.0725kgf))"
    },
    {
        "qid": 2104101004000,
        "question": "what musical soundtrack was released earliest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bzn2f",
                "entity_name": "Snow White and the Seven Dwarfs"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.musical_soundtrack",
                    "class": "theater.musical_soundtrack",
                    "friendly_name": "Musical Soundtrack",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.musical_soundtrack . \n?y0 :music.album.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :music.album.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN theater.musical_soundtrack music.album.release_date)"
    },
    {
        "qid": 2103369003000,
        "question": "which tv song was composed by walker?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vpm7yt",
                "entity_name": "Black Sheep"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_song",
                    "class": "tv.tv_song",
                    "friendly_name": "TV song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05l2y3",
                    "class": "music.songwriter",
                    "friendly_name": "walker",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.composition.composer",
                    "friendly_name": "Composer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_song . \nVALUES ?x1 { :m.05l2y3 } \n?x0 :music.composition.composer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(AND tv.tv_song (JOIN music.composition.composer m.05l2y3))"
    },
    {
        "qid": 3200500003000,
        "question": "what video game developer developed the sega smash pack game and version of sonic the hedgehog game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06p8m",
                "entity_name": "Sega"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04m0xfk",
                    "class": "cvg.game_version",
                    "friendly_name": "Sonic the Hedgehog",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kywnv6",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sega Smash Pack",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.04m0xfk } \nVALUES ?x2 { :m.0kywnv6 } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.04m0xfk) (JOIN cvg.cvg_developer.games_developed m.0kywnv6)))"
    },
    {
        "qid": 2100352001000,
        "question": "what video game company published sherwood?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.08d855x",
                "entity_name": "Ultrasoft"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_publisher",
                    "class": "cvg.cvg_publisher",
                    "friendly_name": "Video Game Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c6s1jg",
                    "class": "cvg.game_version",
                    "friendly_name": "Sherwood",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_publisher.game_versions_published",
                    "friendly_name": "Game Versions Published"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_publisher . \nVALUES ?x1 { :m.0c6s1jg } \n?x0 :cvg.cvg_publisher.game_versions_published ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_publisher (JOIN cvg.cvg_publisher.game_versions_published m.0c6s1jg))"
    },
    {
        "qid": 2102103014000,
        "question": "name the video game compilation which includes switchblade.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkd_k_",
                "entity_name": "ZX Spectrum: Gremlin Collection Vol. 2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_compilation",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Video Game Compilation",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "g.122vxhg5",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Switchblade",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_compilation.games_included",
                    "friendly_name": "Games Included"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_compilation . \nVALUES ?x1 { :g.122vxhg5 } \n?x0 :cvg.computer_game_compilation.games_included ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_compilation (JOIN cvg.computer_game_compilation.games_included g.122vxhg5))"
    },
    {
        "qid": 2103277007000,
        "question": "how many computing platforms support pma?",
        "answer": [
            {
                "answer_type": "Value",
                "answer_argument": "1"
            }
        ],
        "function": "count",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.computing_platform",
                    "class": "computer.computing_platform",
                    "friendly_name": "Computing Platform",
                    "question_node": 1,
                    "function": "count"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02l0hdh",
                    "class": "computer.file_format",
                    "friendly_name": "Pma",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "computer.computing_platform.file_formats_supported",
                    "friendly_name": "File Formats Supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (COUNT(?x0) AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computing_platform . \nVALUES ?x1 { :m.02l0hdh } \n?x0 :computer.computing_platform.file_formats_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(COUNT (AND computer.computing_platform (JOIN computer.computing_platform.file_formats_supported m.02l0hdh)))"
    },
    {
        "qid": 2103925000000,
        "question": "what theatrical composer is bigger than 52.0 kilograms?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f9x9",
                "entity_name": "Fats Waller"
            }
        ],
        "function": ">",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theatrical_composer",
                    "class": "theater.theatrical_composer",
                    "friendly_name": "Theatrical Composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "52.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "52.0",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \nFILTER (?x1 > \"52.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theatrical_composer (gt people.person.weight_kg 52.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3201649009000,
        "question": "who is the females chef of greek food cuisine?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r56y",
                "entity_name": "Cat Cora"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "dining.chef",
                    "class": "dining.chef",
                    "friendly_name": "Chef",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.038sf",
                    "class": "dining.cuisine",
                    "friendly_name": "Greek food",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02zsn",
                    "class": "people.gender",
                    "friendly_name": "females",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "dining.chef.cuisines",
                    "friendly_name": "Cuisines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "people.person.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :dining.chef . \nVALUES ?x1 { :m.038sf } \nVALUES ?x2 { :m.02zsn } \n?x0 :dining.chef.cuisines ?x1 . \n?x0 :people.person.gender ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "dining",
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND dining.chef (AND (JOIN dining.chef.cuisines m.038sf) (JOIN people.person.gender m.02zsn)))"
    },
    {
        "qid": 2100099001000,
        "question": "what uint to you use to express 0.001 unit of energy in joules per kilogram?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rtb9",
                "entity_name": "Joule per gram"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.specific_energy_unit",
                    "class": "measurement_unit.specific_energy_unit",
                    "friendly_name": "Unit of Specific Energy",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0.001^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "0.001",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.specific_energy_unit.energy_in_joules_per_kilogram",
                    "friendly_name": "Energy in joules per kilogram"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.specific_energy_unit . \nVALUES ?x1 { \"0.001\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.specific_energy_unit.energy_in_joules_per_kilogram ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.specific_energy_unit (JOIN measurement_unit.specific_energy_unit.energy_in_joules_per_kilogram 0.001^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103869004000,
        "question": "find the smallest unit of mass in terms of weightmass of kilograms",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 2104183002000,
        "question": "which exoplanet has an orbital period no more than 856.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gh69fs",
                "entity_name": "Kepler-11 b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wg6r8",
                "entity_name": "HAT-P-7b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jppn5",
                "entity_name": "HD 16175 b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09rthpd",
                "entity_name": "BD+20\u00b01790 b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f1471",
                "entity_name": "16 Cygni B b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pc8qt",
                "entity_name": "HD 11506 c"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026cfjt",
                "entity_name": "HD 69830 d"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q70xn",
                "entity_name": "42 Draconis b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wnycs",
                "entity_name": "HD 13189 b"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4nv7",
                "entity_name": "70 Virginis b"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.exoplanetology.exoplanet",
                    "class": "base.exoplanetology.exoplanet",
                    "friendly_name": "Exoplanet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "856.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "856.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.exoplanetology.exoplanet.orbital_period",
                    "friendly_name": "Orbital period"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.exoplanetology.exoplanet . \nFILTER (?x1 <= \"856.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :base.exoplanetology.exoplanet.orbital_period ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "base.exoplanetology"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND base.exoplanetology.exoplanet (le base.exoplanetology.exoplanet.orbital_period 856.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101534008000,
        "question": "which rocket engines can thrust 1.9208e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvr3",
                "entity_name": "RD-191"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.9208e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.9208e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.9208e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.9208e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100592013000,
        "question": "in the gwr 388 class, what were the specific locomotive classes?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026t5t",
                "entity_name": "0-6-0"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026zgb4",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "GWR 388 class",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.026zgb4 } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.026zgb4))"
    },
    {
        "qid": 2100260002000,
        "question": "which unit is angular frequency in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c90_b",
                "entity_name": "Radian per second"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.angular_velocity_unit",
                    "class": "measurement_unit.angular_velocity_unit",
                    "friendly_name": "Unit of Angular Frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.angular_velocity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.angular_velocity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.angular_velocity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.angular_velocity_unit (JOIN measurement_unit.angular_velocity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2103536019000,
        "question": "which lighthouse is shorter than 34.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ymvk",
                "entity_name": "Portland Head Light"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025x9wb",
                "entity_name": "Bathurst Lighthouse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z111d",
                "entity_name": "Pencarrow Head Lighthouse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gslr0",
                "entity_name": "The Graves Light"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n21lbb",
                "entity_name": "Scurdie Ness Lighthouse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dkfmjm",
                "entity_name": "Frailes del Sur"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "architecture.lighthouse",
                    "class": "architecture.lighthouse",
                    "friendly_name": "Lighthouse",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "34.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "34.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "architecture.lighthouse.focal_height_of_light",
                    "friendly_name": "Focal height of light"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.lighthouse . \nFILTER (?x1 <= \"34.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :architecture.lighthouse.focal_height_of_light ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "architecture"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND architecture.lighthouse (le architecture.lighthouse.focal_height_of_light 34.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103327005000,
        "question": "what is the smallest possible unit of resistivity?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters",
                    "friendly_name": "Resistivity in ohm meters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_resistivity . \n?y0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.unit_of_resistivity measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters)"
    },
    {
        "qid": 3204868015000,
        "question": "which comic book penciler is apart of a religion that uses makkah?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09mm4d",
                "entity_name": "Adi Granov"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_books.comic_book_penciler",
                    "class": "comic_books.comic_book_penciler",
                    "friendly_name": "Comic Book Penciler",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.058wp",
                    "class": "religion.place_of_worship",
                    "friendly_name": "makkah",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.religion",
                    "friendly_name": "Religion"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "religion.place_of_worship.religion",
                    "friendly_name": "Currently used by religion(s)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_books.comic_book_penciler . \n?x1 :type.object.type :religion.religion . \nVALUES ?x2 { :m.058wp } \n?x0 :people.person.religion ?x1 . \n?x2 :religion.place_of_worship.religion ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "religion",
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND comic_books.comic_book_penciler (JOIN people.person.religion (JOIN (R religion.place_of_worship.religion) m.058wp)))"
    },
    {
        "qid": 2102549014000,
        "question": "which game supports 200 mhz cpu?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g84f",
                "entity_name": "Battlezone II: Combat Commander"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0cb7vkz",
                    "class": "computer.computer_processor",
                    "friendly_name": "200 MHz CPU",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0cb7vkz } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.0cb7vkz))"
    },
    {
        "qid": 2101493015000,
        "question": "henry per metre is what kind of unit?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.038jzf",
                "entity_name": "Permeability"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.dimension",
                    "class": "measurement_unit.dimension",
                    "friendly_name": "Dimension",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02sj57c",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Henry per metre",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.dimension . \nVALUES ?x1 { :m.02sj57c } \n?x0 :measurement_unit.dimension.si_base_unit ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.dimension (JOIN measurement_unit.dimension.si_base_unit m.02sj57c))"
    },
    {
        "qid": 2101237005000,
        "question": "which video game is released in 1990-05-09?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04hw7yy",
                "entity_name": "Qix"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1990-05-09^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "1990-05-09",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { \"1990-05-09-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.release_date 1990-05-09^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2105322005000,
        "question": "which music video director weighs at least 71.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0644fx8",
                "entity_name": "Clint Crisher"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.music_video_director",
                    "class": "music.music_video_director",
                    "friendly_name": "Music video director",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "71.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "71.0",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video_director . \nFILTER (?x1 >= \"71.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND music.music_video_director (ge people.person.weight_kg 71.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100924011000,
        "question": "the quotations of all, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty. is from which quotation subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09cfyp",
                "entity_name": "Power"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048bzd6",
                    "class": "media_common.quotation",
                    "friendly_name": "All, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. Howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048bzd6 } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048bzd6))"
    },
    {
        "qid": 2101892007000,
        "question": "1.0 volts per meter is what type of measurement?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj52k",
                "entity_name": "Volt per metre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bnb_b",
                "entity_name": "Newtons per coulomb"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.electric_field_strength_unit",
                    "class": "measurement_unit.electric_field_strength_unit",
                    "friendly_name": "Unit of Electric Field Strength",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.electric_field_strength_unit.strength_in_volts_per_meter",
                    "friendly_name": "Strength in volts per meter"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.electric_field_strength_unit . \nVALUES ?x1 { \"1.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.electric_field_strength_unit.strength_in_volts_per_meter ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.electric_field_strength_unit (JOIN measurement_unit.electric_field_strength_unit.strength_in_volts_per_meter 1.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4301746002000,
        "question": "xbox is supported by which version released in japan?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cn1dzn",
                "entity_name": "Sonic Free Riders"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03_3d",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Japan",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "computer.computer_peripheral",
                    "class": "computer.computer_peripheral",
                    "friendly_name": "Computer Peripheral",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.02plp2",
                    "class": "business.brand",
                    "friendly_name": "xbox",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_game_region.versions_released_in_this_region",
                    "friendly_name": "Versions released in this region"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "computer.computer_peripheral.supporting_game_versions",
                    "friendly_name": "Supporting game versions"
                },
                {
                    "start": 3,
                    "end": 2,
                    "relation": "business.brand.products",
                    "friendly_name": "Products"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { :m.03_3d } \n?x2 :type.object.type :computer.computer_peripheral . \nVALUES ?x3 { :m.02plp2 } \n?x1 :cvg.computer_game_region.versions_released_in_this_region ?x0 . \n?x2 :computer.computer_peripheral.supporting_game_versions ?x0 . \n?x3 :business.brand.products ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "business",
            "cvg",
            "computer"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (AND (JOIN (R cvg.computer_game_region.versions_released_in_this_region) m.03_3d) (JOIN (R computer.computer_peripheral.supporting_game_versions) (JOIN (R business.brand.products) m.02plp2))))"
    },
    {
        "qid": 2102549010000,
        "question": "intel 8080 is supported by which game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f8628",
                "entity_name": "4-Player Bowling Alley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jvd8",
                "entity_name": "Space Invaders"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025x0mj",
                "entity_name": "Blasto"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026brd2",
                "entity_name": "Blockade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d_b2r",
                "entity_name": "Balloon Bomber"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b1ypq",
                "entity_name": "Navarone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cmtnz",
                "entity_name": "Adventures in the Stars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0brzb_",
                "entity_name": "The Amazing Maze Game"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7rb0",
                "entity_name": "Ozma Wars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g3xyz",
                "entity_name": "Barricade"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03wsm",
                    "class": "computer.computer_processor",
                    "friendly_name": "Intel 8080",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.03wsm } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.03wsm))"
    },
    {
        "qid": 3204451000000,
        "question": "richard buckminster fuller's gender is shared by which computer scientists?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.011lq3",
                "entity_name": "Alfred Aho"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015gkm",
                "entity_name": "Dana Scott"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017h4c",
                "entity_name": "Edwin Catmull"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01970",
                "entity_name": "Bill Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0199cb",
                "entity_name": "Don Norman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.019wd",
                "entity_name": "Brian Kernighan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bszb",
                "entity_name": "Leslie Lamport"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bzsq",
                "entity_name": "Gordon Moore"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01m5mk",
                "entity_name": "Kenneth E. Iverson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q5yp",
                "entity_name": "Allen Newell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qdr8",
                "entity_name": "Robert Metcalfe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qkx",
                "entity_name": "Claude Shannon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r_m_",
                "entity_name": "John Cocke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rk_p",
                "entity_name": "Michael O. Rabin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rq9l",
                "entity_name": "John Hopcroft"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rqt5",
                "entity_name": "Andrew Yao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ry6d",
                "entity_name": "James H. Wilkinson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ry7_",
                "entity_name": "Charles Bachman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s5lr",
                "entity_name": "William Kahan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01sqtx",
                "entity_name": "Richard E. Stearns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01svdr",
                "entity_name": "Manuel Blum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01svfj",
                "entity_name": "John McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01svgc",
                "entity_name": "Amir Pnueli"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01svh3",
                "entity_name": "Jim Gray"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021zh3",
                "entity_name": "Madhu Sudan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024169",
                "entity_name": "Leonid Levin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0273l9l",
                "entity_name": "Perry Kivolowitz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02791hq",
                "entity_name": "David Gries"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027m0k7",
                "entity_name": "Bernard Marshall Gordon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027npjj",
                "entity_name": "John Alan Robinson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0283x",
                "entity_name": "Donald Knuth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0284fc0",
                "entity_name": "Randal Bryant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cp3j",
                "entity_name": "Leonard Kleinrock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02dntw",
                "entity_name": "Maurice Wilkes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jndp",
                "entity_name": "Geoffrey Hinton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jx4f",
                "entity_name": "Gerard Salton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02l_s6",
                "entity_name": "Steve Furber"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mmtp",
                "entity_name": "David L. Mills"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pjpz7",
                "entity_name": "Michael Luby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pvxyl",
                "entity_name": "David Kuck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qn1",
                "entity_name": "Edsger W. Dijkstra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qxxjn",
                "entity_name": "Bill Dally"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh0t0",
                "entity_name": "Richard J. Lipton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z8bbr",
                "entity_name": "Kevin Lenzo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.030pk7c",
                "entity_name": "Rajeev Motwani"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.032rd0",
                "entity_name": "Carver Mead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.032s8",
                "entity_name": "Fred Brooks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.033w0f",
                "entity_name": "Judea Pearl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bss35",
                "entity_name": "Dawson Engler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ct_rd",
                "entity_name": "Alexander G. Fraser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cw8m6",
                "entity_name": "Robert R. Korfhage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d5jdj",
                "entity_name": "Mike Paterson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03xmp4",
                "entity_name": "Erik Demaine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0407y",
                "entity_name": "Jon Postel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0421f",
                "entity_name": "John von Neumann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048kc",
                "entity_name": "Ken Thompson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04h7c2",
                "entity_name": "Van Jacobson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mssq",
                "entity_name": "Wesley A. Clark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04pqjz",
                "entity_name": "Jon Kleinberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w169",
                "entity_name": "David C. Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y_z",
                "entity_name": "Marvin Minsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yby4",
                "entity_name": "Silvio Micali"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.056q4s",
                "entity_name": "Bernard M. Oliver"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0594h",
                "entity_name": "Michael Stonebraker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059s3f",
                "entity_name": "Ken Perlin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bkwt",
                "entity_name": "Brian Randell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fgl",
                "entity_name": "Niklaus Wirth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hbyx",
                "entity_name": "Robert Kowalski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qgrb",
                "entity_name": "John Henry Holland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05rs19",
                "entity_name": "Aravind Joshi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062sdp4",
                "entity_name": "Andrew Ng"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062xh4g",
                "entity_name": "Tim Roughgarden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06cg8w",
                "entity_name": "Robert L. Cook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06q835",
                "entity_name": "Jacob Ziv"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06t57l",
                "entity_name": "Josh Fisher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06xvm",
                "entity_name": "Seymour Papert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07476",
                "entity_name": "Stephen Cole Kleene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0751t3",
                "entity_name": "Raymond Reiter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07d5b",
                "entity_name": "Tim Berners-Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n4mb",
                "entity_name": "David D. Clark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07z23",
                "entity_name": "Vint Cerf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zl1",
                "entity_name": "Vernor Vinge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084hf7",
                "entity_name": "Allan Borodin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087m1c",
                "entity_name": "Simon S. Lam"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b6jh",
                "entity_name": "Jeffrey Vitter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c8zn",
                "entity_name": "Peter T. Kirstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09zrvk",
                "entity_name": "Brian Reid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bkh4",
                "entity_name": "John Ousterhout"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c3yyq",
                "entity_name": "Paul W. K. Rothemund"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chh8",
                "entity_name": "Robert Tarjan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cn5l0",
                "entity_name": "Steve Deering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dn2g",
                "entity_name": "Dave Cutler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dszs",
                "entity_name": "Stephen Wolfram"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dwsmg",
                "entity_name": "Seymour Ginsburg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy4s8",
                "entity_name": "Luis von Ahn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f3_wk",
                "entity_name": "Pat Hanrahan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f8kpk",
                "entity_name": "Donald Michie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fs_9m",
                "entity_name": "George Varghese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc0lb",
                "entity_name": "Avi Wigderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gck_j",
                "entity_name": "Ronald Fedkiw"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gh_hz",
                "entity_name": "Steven Salzberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7225",
                "entity_name": "Alfred Z. Spector"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0htyj",
                "entity_name": "Ronald Rivest"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jd8s",
                "entity_name": "John Backus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k7__",
                "entity_name": "Butler Lampson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kds3",
                "entity_name": "John Mauchly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kf33",
                "entity_name": "Ivan Sutherland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n69g",
                "entity_name": "Robin Milner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q0x",
                "entity_name": "Alan Kay"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0t_g2rg",
                "entity_name": "Thomas E. Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r7rh",
                "entity_name": "Christopher Strachey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dbj62",
                "entity_name": "Marc Levoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05j3kb",
                "entity_name": "Matt Curtin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07yy4d",
                "entity_name": "Friedrich L. Bauer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09g3bj",
                "entity_name": "Vasant Honavar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sxq2",
                "entity_name": "John G. Kemeny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cfyqy",
                "entity_name": "Craig Nevill-Manning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027sp83",
                "entity_name": "Lawrie Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07lryx",
                "entity_name": "Timothy M. Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03v3nk",
                "entity_name": "William Stallings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026f1l3",
                "entity_name": "Dan Hirschberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c_c9",
                "entity_name": "Tim Bray"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y84y",
                "entity_name": "Arthur Whitney"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jvqg",
                "entity_name": "Don Hopkins"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026d5pb",
                "entity_name": "Ian Sommerville"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0283pfg",
                "entity_name": "Douglas T. Ross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rxvtz",
                "entity_name": "Li Huatian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09g9h_",
                "entity_name": "Clifford Stein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q585",
                "entity_name": "Michael Garey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_lgh",
                "entity_name": "Ben Shneiderman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02f80r",
                "entity_name": "Nick Pippenger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03z9fl",
                "entity_name": "Mark Weiser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p1nt",
                "entity_name": "Mike Cowlishaw"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qm37",
                "entity_name": "Leonid Khachiyan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f0xjs",
                "entity_name": "D. Richard Hipp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z7p8",
                "entity_name": "Hans Reiser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pn8gj",
                "entity_name": "Michael K\u00f6lling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nqdg",
                "entity_name": "Cliff Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kqd1w",
                "entity_name": "Stefano Mazzocchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06d4lx",
                "entity_name": "Damian Conway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042qnv",
                "entity_name": "Robert Hyatt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2xg2",
                "entity_name": "Terence Parr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g_92x",
                "entity_name": "Eugene Myers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049dcr",
                "entity_name": "Stuart Feldman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b2jzx",
                "entity_name": "Jerre Noe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g0mng",
                "entity_name": "Jim Ellis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h30mj",
                "entity_name": "Gul Agha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ls5s",
                "entity_name": "Rudy Rucker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l2gy",
                "entity_name": "Roger Needham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08k43q",
                "entity_name": "Leslie Valiant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2cb",
                "entity_name": "Leonard Adleman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r_kf",
                "entity_name": "Robert W. Floyd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rmls",
                "entity_name": "Richard M. Karp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rtzp",
                "entity_name": "Alan Perlis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w5m3",
                "entity_name": "Andrew Viterbi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022pv1n",
                "entity_name": "Guy Steele"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026fhn7",
                "entity_name": "Michael L. Scott"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026l7p_",
                "entity_name": "Joseph F. Traub"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027s3_l",
                "entity_name": "Martin Dougiamas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027z_v9",
                "entity_name": "Maurice Herlihy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02933",
                "entity_name": "Dennis Ritchie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qqqsc",
                "entity_name": "David Peleg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sjdv",
                "entity_name": "David J. Farber"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031zww",
                "entity_name": "Donald Davies"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.039fkw",
                "entity_name": "Herman Goldstine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.039vmg",
                "entity_name": "Karl Sims"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03_2j2",
                "entity_name": "Andy Hopper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03dvjt",
                "entity_name": "David Patterson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gvrk1",
                "entity_name": "Jean-Marie Hullot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h3b7g",
                "entity_name": "Mihalis Yannakakis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vtwb",
                "entity_name": "Jack Dennis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.041s5r",
                "entity_name": "Bernard Chazelle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04tvmf",
                "entity_name": "Daniel Henry Holmes Ingalls, Jr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xf09",
                "entity_name": "Neil Immerman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fmy_",
                "entity_name": "Andrew B. Whinston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pmjd",
                "entity_name": "Jeffrey Ullman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zr78",
                "entity_name": "Steven Rudich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06y1l",
                "entity_name": "Steve Wozniak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n4_t",
                "entity_name": "Scott Shenker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07xd9t",
                "entity_name": "David Cheriton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09hdkk",
                "entity_name": "Christos Papadimitriou"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tcd",
                "entity_name": "Stephen Cook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tcw",
                "entity_name": "Tony Hoare"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bv3kw",
                "entity_name": "Jim Kajiya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cj_f1",
                "entity_name": "Ran Libeskind-Hadas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dtdnw",
                "entity_name": "Daniel Jurafsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0frrw",
                "entity_name": "Adi Shamir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwgh",
                "entity_name": "Peter Shor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n69y",
                "entity_name": "Edgar F. Codd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.019m2t",
                "entity_name": "Nicholas Negroponte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027ht28",
                "entity_name": "Christopher Bishop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0280ggb",
                "entity_name": "Carlisle Adams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.041_rx",
                "entity_name": "David Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nmsx",
                "entity_name": "Donald B. Gillies"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wkst",
                "entity_name": "Danny Hillis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020h0l",
                "entity_name": "David Parnas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nwzb",
                "entity_name": "Gerald Jay Sussman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fh4l",
                "entity_name": "Vaughan Pratt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zf4_",
                "entity_name": "Egon B\u00f6rger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0262386",
                "entity_name": "Andrew B. Lippman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h98kw",
                "entity_name": "Serafim Batzoglou"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqycl",
                "entity_name": "David E. Goldberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_np9",
                "entity_name": "Tim Howes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x33p1",
                "entity_name": "Clyde Kruskal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027b7w7",
                "entity_name": "Paco Nathan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d4tf",
                "entity_name": "Stephen R. Bourne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059vf_",
                "entity_name": "Jacques Vall\u00e9e"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09m672",
                "entity_name": "David A. Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fm22z",
                "entity_name": "Jeff Sutherland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f8g_h",
                "entity_name": "Ernst Dickmanns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m55f0",
                "entity_name": "Michael Kohlhase"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02f29j",
                "entity_name": "Charles Forgy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02nyc3z",
                "entity_name": "Max Rible Kaehn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088w9k",
                "entity_name": "Patrick Tufts"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087pv9",
                "entity_name": "John Pasta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09r694",
                "entity_name": "Gregory Dudek"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cdvrp",
                "entity_name": "Martin Odersky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.040bwc_",
                "entity_name": "David Fran\u00e7ois Huynh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g7p9",
                "entity_name": "Alan Burns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bw_tj",
                "entity_name": "David Harel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kt1br",
                "entity_name": "Wolfgang Nebel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cj3g",
                "entity_name": "Ralph Griswold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022qyds",
                "entity_name": "Ivan Herman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07p9pp",
                "entity_name": "Zhou Chaochen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wfqt5f",
                "entity_name": "Ian Munro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088s78",
                "entity_name": "Claude Cr\u00e9peau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c5t3y",
                "entity_name": "Gerry Morgan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026nrw5",
                "entity_name": "Surajit Chaudhuri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0281n68",
                "entity_name": "Jeffrey Naughton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_78y9",
                "entity_name": "Joseph S. Kennedy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hvcbz",
                "entity_name": "James Lau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r1hq",
                "entity_name": "Frank Soltis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q81g",
                "entity_name": "Grady Booch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h33h4",
                "entity_name": "Les Hatton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kryj6",
                "entity_name": "Bruce Shriver"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvb2j_",
                "entity_name": "Lu\u00eds Landeiro Ribeiro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01hj01",
                "entity_name": "Robert Tappan Morris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02866xv",
                "entity_name": "Eric Bach"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02kvqbj",
                "entity_name": "Ashar Aziz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02nvqql",
                "entity_name": "Vlad Shmunis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wq57",
                "entity_name": "Michael J. C. Gordon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d1cm8",
                "entity_name": "Jonathan S. Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nvwd",
                "entity_name": "Paul Horn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05jn_0",
                "entity_name": "Chu Bong-Foo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q3gh8",
                "entity_name": "Nico Habermann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h2k43",
                "entity_name": "Gregory Abowd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05dlvx",
                "entity_name": "Mordechai Ben-Ari"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jvt9t_",
                "entity_name": "Alejandro Zielinsky Gaglione"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062_6n7",
                "entity_name": "Felix-Johannes Jendrusch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bbfjfg",
                "entity_name": "Paolo Ciccarese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03q544t",
                "entity_name": "Michael Travers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064f4x",
                "entity_name": "Gary Drescher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tsb6",
                "entity_name": "David A. Bader"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04pxxc5",
                "entity_name": "Cesar Gonzalez-Perez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b501p",
                "entity_name": "Michael Gurstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07w4l7",
                "entity_name": "G\u00fcnter Hotz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05lzh2",
                "entity_name": "Lee Giles"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04bc19",
                "entity_name": "Chris Wallace"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kh9z",
                "entity_name": "Timothy J. Hickey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073x4j",
                "entity_name": "Gordon Agnew"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x6pl5",
                "entity_name": "Neil J. Gunther"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c9pg",
                "entity_name": "Ken Goldberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06k664",
                "entity_name": "Srinivasan Keshav"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0333x6",
                "entity_name": "Landon Curt Noll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h2mst",
                "entity_name": "Anind Dey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ysh0",
                "entity_name": "Rodney Brooks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08dy6w",
                "entity_name": "John Gage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021smp",
                "entity_name": "Hal Abelson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026ptp6",
                "entity_name": "Elliot Koffman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026v327",
                "entity_name": "David B. Fogel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y5k4",
                "entity_name": "Benjamin C. Pierce"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zmd2",
                "entity_name": "Charles E. Leiserson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zp52",
                "entity_name": "John C. Reynolds"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09rbw2",
                "entity_name": "Jon Bentley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bjkjm",
                "entity_name": "Thomas H. Cormen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w967",
                "entity_name": "Nick Jennings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3qh6v",
                "entity_name": "Panos Ipeirotis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027j8vr",
                "entity_name": "A. Richard Newton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027phv5",
                "entity_name": "Horst Zuse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01tlv4p",
                "entity_name": "Jaron Lanier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rkf6",
                "entity_name": "David A. Wagner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r1yr0",
                "entity_name": "George N. Farr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vz9n4",
                "entity_name": "John Maeda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0585rh",
                "entity_name": "F. Thomson Leighton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r6_tp",
                "entity_name": "Ben Fry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gr82h",
                "entity_name": "John Paul Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04131wv",
                "entity_name": "Cuthbert Hurd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01h05c",
                "entity_name": "Guido van Rossum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011xmf",
                "entity_name": "Ramanathan V. Guha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05t1v",
                "entity_name": "Paul Vixie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x772p",
                "entity_name": "George Klir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01tqdp",
                "entity_name": "Andy Bechtolsheim"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bccg",
                "entity_name": "Andy Hertzfeld"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026_4q",
                "entity_name": "David P. Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gbm3jq",
                "entity_name": "Andrew Hogue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jbkf",
                "entity_name": "Nicholas Metropolis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_fdg7",
                "entity_name": "Duc Pham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.030n1m",
                "entity_name": "Peter Landin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b2br9",
                "entity_name": "Brian Cantwell Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8m6",
                "entity_name": "James H. Clark"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026h07j",
                "entity_name": "Herbert Schildt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vzdbs",
                "entity_name": "Michael Barr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bkxmn",
                "entity_name": "Sam Ruby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02jnd9",
                "entity_name": "Scott Fahlman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hz6y",
                "entity_name": "Carl Hewitt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ny5h",
                "entity_name": "James Pustejovsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062scph",
                "entity_name": "Jeffrey Michael Heer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02623td",
                "entity_name": "Alex Pentland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037zb2",
                "entity_name": "Max Levchin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09k7_v",
                "entity_name": "Sebastian Thrun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ysrs",
                "entity_name": "Shimon Even"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yx4dw",
                "entity_name": "Steve Dekorte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042zz9z",
                "entity_name": "Franco Salvetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qw52h",
                "entity_name": "Werner Vogels"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b1nm5",
                "entity_name": "Paul Thagard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0271kh5",
                "entity_name": "Daniel G. Bobrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.052yf",
                "entity_name": "Martin Fowler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05x7mf2",
                "entity_name": "Richard Crandall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03f1dc0",
                "entity_name": "Bj\u00f6rn Hartmann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0czf67",
                "entity_name": "H\u00e9ctor Garc\u00eda-Molina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045nfby",
                "entity_name": "Stefan Sch\u00e4lle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ht10",
                "entity_name": "Gilles Brassard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h672hg",
                "entity_name": "Ed Chi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02990h",
                "entity_name": "Philip Greenspun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qrlz",
                "entity_name": "Peter Norvig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04fk0pv",
                "entity_name": "Mark Wilkinson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03br3",
                "entity_name": "Gary Kildall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d80x",
                "entity_name": "Terry Sejnowski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026zv3h",
                "entity_name": "John Zachman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06n8h1",
                "entity_name": "Andries van Dam"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hs5d",
                "entity_name": "Andrew Herbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vm4b",
                "entity_name": "David Gelernter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0867_",
                "entity_name": "Wau Holland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hhq8",
                "entity_name": "Xavier Leroy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fbpz",
                "entity_name": "James Cordy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zdql",
                "entity_name": "Ric Holt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.088l3",
                "entity_name": "Yukihiro Matsumoto"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qvd8t",
                "entity_name": "Orr Dunkelman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051rn9b",
                "entity_name": "Robert C. Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059w7x7",
                "entity_name": "Trung Dong Huynh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gh7vdc",
                "entity_name": "David Karger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pq50n",
                "entity_name": "Ori Allon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07mhtc",
                "entity_name": "Michael Martin Hammer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bq3td",
                "entity_name": "Abraham Silberschatz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cgyq11",
                "entity_name": "Zackary Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066vzt",
                "entity_name": "Joel Moses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9hhl",
                "entity_name": "William A. Martin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n00",
                "entity_name": "Alan Turing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07pq7s",
                "entity_name": "Philippe Kahn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m4ntj",
                "entity_name": "David S. H. Rosenthal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03md86",
                "entity_name": "Samson Abramsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0398gz",
                "entity_name": "Calvin Mooers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_9tw",
                "entity_name": "Gerald Weinberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09q82j",
                "entity_name": "Simon Peyton Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pp0qk",
                "entity_name": "Liang-Jie Zhang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013ps",
                "entity_name": "Andrew S. Tanenbaum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02739vg",
                "entity_name": "John Fairclough"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pw5cj",
                "entity_name": "Zhiming Liu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b534t",
                "entity_name": "B. J. Fogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bx8w",
                "entity_name": "Jean Ichbiah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08x3__",
                "entity_name": "Lawrence Paulson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bwxmq",
                "entity_name": "Peter Mosses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gbm307",
                "entity_name": "Daniel H. Harrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qs1gq",
                "entity_name": "Barak Michener"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0490n",
                "entity_name": "Konrad Zuse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.036jrw",
                "entity_name": "Charles Simonyi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pm6w",
                "entity_name": "Jef Raskin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0286sjc",
                "entity_name": "K. Mani Chandy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08dy30",
                "entity_name": "Timothy Budd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bcrf",
                "entity_name": "Terry Winograd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pj62f",
                "entity_name": "Gerhard Weikum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mxq5",
                "entity_name": "Ron Jeffries"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06n_qs",
                "entity_name": "Mark Dean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2sx_",
                "entity_name": "Daniel Murphy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gtyzc",
                "entity_name": "Bernard Galler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04812m",
                "entity_name": "Christopher Langton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dz1vr",
                "entity_name": "Daniel D. McCracken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjlnk",
                "entity_name": "Apostolos Gerasoulis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0668p8l",
                "entity_name": "Daniel Tunkelang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06_lh",
                "entity_name": "Stan Kelly-Bootle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qrqn",
                "entity_name": "Stuart J. Russell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04fk79k",
                "entity_name": "Hrafn Thorri Th\u00f3risson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clzjm",
                "entity_name": "Martin Kay"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042dc0",
                "entity_name": "Rollo Carpenter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rjpbj",
                "entity_name": "Gio Wiederhold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bx7p5",
                "entity_name": "Neil Shapiro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m64nb",
                "entity_name": "Cynbe ru Taren"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vtvm",
                "entity_name": "Jerry Saltzer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bx9tg",
                "entity_name": "Wang Xuan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02plc02",
                "entity_name": "Franco P. Preparata"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qvy_c",
                "entity_name": "Kristinn R. Th\u00f3risson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03kg10",
                "entity_name": "Richard P. Brent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ys83",
                "entity_name": "Mitchel Resnick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267xrq",
                "entity_name": "David Ungar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02kvwnm",
                "entity_name": "Daniel Peebles"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pzwts",
                "entity_name": "Xuejia Lai"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q140",
                "entity_name": "Ted Selker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026jr12",
                "entity_name": "Harry Mairson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026gbd3",
                "entity_name": "Andrew Colin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03by59h",
                "entity_name": "Juergen Pirner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pdrj",
                "entity_name": "Subhash Kak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0252h51",
                "entity_name": "Georgi Kobilarov"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0123n4",
                "entity_name": "Matthias Ettrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d4g97",
                "entity_name": "Michael Hinchey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01jq87",
                "entity_name": "David Chaum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cd74",
                "entity_name": "David Megginson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03n2xs",
                "entity_name": "Philippe Flajolet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vk32",
                "entity_name": "Bob Denny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vm1hr",
                "entity_name": "Alok R. Chaturvedi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044qlj",
                "entity_name": "David Moon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05lznn",
                "entity_name": "Steve Lawrence"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cvc51",
                "entity_name": "John Guttag"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026cg3s",
                "entity_name": "David Reilly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0287_s_",
                "entity_name": "Ken Kennedy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hm9k",
                "entity_name": "Wally Feurzeig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062xgh",
                "entity_name": "Shane Brooks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zn94",
                "entity_name": "Eric C. R. Hehner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09bmpd",
                "entity_name": "Oded Goldreich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0260hfy",
                "entity_name": "Eugene Charniak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027bn04",
                "entity_name": "William Cook"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qj8kl",
                "entity_name": "Miron Livny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rpphy",
                "entity_name": "Narayanan Shivakumar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hlkt",
                "entity_name": "Sartaj Sahni"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0469wx",
                "entity_name": "Mohamed Elmasry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05bnm_",
                "entity_name": "Selmer Bringsjord"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.083z55",
                "entity_name": "Yves Cochet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rfllm",
                "entity_name": "Michael H. Albert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vdd1",
                "entity_name": "Bill Griswold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb6yb3",
                "entity_name": "Krasimir Angelov"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gcxc9",
                "entity_name": "Andrew Donald Booth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026159k",
                "entity_name": "Terry Welch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d8h7h",
                "entity_name": "Hank Levy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x_kv8",
                "entity_name": "Carlos Castillo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ffdn",
                "entity_name": "Bud Tribble"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c761x",
                "entity_name": "Michael W. Shields"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dc7py",
                "entity_name": "Jack Lutz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020jb9",
                "entity_name": "Alain Colmerauer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025zj43",
                "entity_name": "Michael Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vtxr",
                "entity_name": "Robert M. Graham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x69r",
                "entity_name": "Andi Gutmans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zv81h",
                "entity_name": "Karl Levitt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05475g",
                "entity_name": "J Strother Moore"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.061pht",
                "entity_name": "Michael Dertouzos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08b46z",
                "entity_name": "Josef Kates"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qk37c",
                "entity_name": "Chris Welty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.062vkkn",
                "entity_name": "Krzysztof Gajos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0925zc",
                "entity_name": "Barry J. Mailloux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8p12",
                "entity_name": "Greg Stein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zgyb",
                "entity_name": "Bryan Cantrill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08yglh",
                "entity_name": "Michael Deering"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09spx7",
                "entity_name": "William Martens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03f05z",
                "entity_name": "J. Alan George"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01sqpc",
                "entity_name": "Henri Gouraud"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044m2c",
                "entity_name": "Daniel Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qv4yk",
                "entity_name": "Douglas Comer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rt9r",
                "entity_name": "L Peter Deutsch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024cpg",
                "entity_name": "Edward Fredkin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027m93b",
                "entity_name": "Eric Allender"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_g_s",
                "entity_name": "Jack Dongarra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ps208",
                "entity_name": "Daniel Gottesman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09q1nk",
                "entity_name": "Abdul Waheed Khan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bkm0h",
                "entity_name": "Ross Overbeek"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f73dg",
                "entity_name": "J. Anthony Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263l5w",
                "entity_name": "Stephen Warshall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02px41_",
                "entity_name": "Souradyuti Paul"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q3gpt",
                "entity_name": "Moni Naor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qqg3f",
                "entity_name": "Martyn Amos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cfv8l",
                "entity_name": "Michael Wellman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03v_j1",
                "entity_name": "Bill Hibbard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vz0k",
                "entity_name": "Michael Heath"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09m66d",
                "entity_name": "Julian Lombardi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcf72",
                "entity_name": "Paul Larson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0clxy0",
                "entity_name": "Jeffrey P. Buzen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tkjg5n",
                "entity_name": "George Michael"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026lcn8",
                "entity_name": "Patrick Juola"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_6lqk",
                "entity_name": "In Sik Rhee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pq3kh",
                "entity_name": "Alexander Tetelbaum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qr5",
                "entity_name": "He Jifeng"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fs1xy",
                "entity_name": "Lennart Johnsson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1233fppy",
                "entity_name": "Nikolaus Joachim Lehmann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026r997",
                "entity_name": "George Cogar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0296xv",
                "entity_name": "Wolfgang Wahlster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_2tqp",
                "entity_name": "Dileep Panjwani"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.065zlr3",
                "entity_name": "J. Roger Hindley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01116gbb",
                "entity_name": "Tim Bell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g_z9",
                "entity_name": "Roger Moore"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047c0l",
                "entity_name": "Christopher Blizzard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y3grd",
                "entity_name": "Rodnay Zaks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084mks",
                "entity_name": "Donald T. Sannella"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026jsv7",
                "entity_name": "Zvi Galil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q4s6p",
                "entity_name": "Steven Ericsson-Zenith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04w66l",
                "entity_name": "Arnold Sch\u00f6nhage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026v38f",
                "entity_name": "Lawrence J. Fogel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011x0psj",
                "entity_name": "Gabriel Wolosin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qvzy1",
                "entity_name": "Alan Dix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g833w",
                "entity_name": "Paul Dourish"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02638wj",
                "entity_name": "Michael D. Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mbn9z",
                "entity_name": "Bernard Greenberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jztv",
                "entity_name": "Michael A. Arbib"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057947",
                "entity_name": "Klaus Knopper"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wx5_",
                "entity_name": "Gordon Plotkin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b9rbv",
                "entity_name": "Victor Shoup"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dmg2s",
                "entity_name": "Tom Maibaum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f9_jb",
                "entity_name": "John McCutchan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cpbn",
                "entity_name": "Raphael Finkel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rvw8",
                "entity_name": "Fred Cohen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h567",
                "entity_name": "Anu Garg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cb9n2",
                "entity_name": "Ronald Baecker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vfzg",
                "entity_name": "Charles H. Moore"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027bw3",
                "entity_name": "Matthew Dillon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cv3b",
                "entity_name": "Rasmus Lerdorf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rkvdx",
                "entity_name": "Doug Stinson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c2r8d",
                "entity_name": "S\u00e9bastien Paquet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05xpff",
                "entity_name": "Noel Sharkey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0874yg",
                "entity_name": "Ian Watson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08np25",
                "entity_name": "Anil Nerode"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dj17",
                "entity_name": "Andrei Broder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09v_1s",
                "entity_name": "Richard J. Bird"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bcncl",
                "entity_name": "David Eppstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qqf6p",
                "entity_name": "Ian Lewis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vtx0",
                "entity_name": "Peter J. Denning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ytg0",
                "entity_name": "Kurt Bollacker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0csxs2",
                "entity_name": "Jawed Siddiqi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mpg0",
                "entity_name": "Austin Tate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027q7wj",
                "entity_name": "Klaus Sutner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02872x5",
                "entity_name": "Michael Loren Mauldin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_wxjp",
                "entity_name": "Conny K\u00fchne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04crywh",
                "entity_name": "Jock D. Mackinlay"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07zv69",
                "entity_name": "Rolf Pfeifer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08g4xn",
                "entity_name": "Jeff Trinkle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ck07m",
                "entity_name": "Leon Sterling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gxtsj",
                "entity_name": "Vijay P. Bhatkar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fjy6",
                "entity_name": "Michael A. Jackson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r3ly",
                "entity_name": "Carl Sassenrath"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bhzx4",
                "entity_name": "Marc Thomas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026ky_j",
                "entity_name": "Mike Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02nvhjd",
                "entity_name": "Barney Pell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pn3zw",
                "entity_name": "Edward Earl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02v_0d9",
                "entity_name": "John E. Laird"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vq1g1",
                "entity_name": "Godfried Toussaint"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06_5zk",
                "entity_name": "Steve Omohundro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07p0n1",
                "entity_name": "Sankar Kumar Pal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01j6hn",
                "entity_name": "Robert Sedgewick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01z0f3",
                "entity_name": "Eli Biham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p4cn",
                "entity_name": "Thomas E. Kurtz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gzwnq",
                "entity_name": "Bernhard Nebel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0924ws",
                "entity_name": "John E. L. Peck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098qn1",
                "entity_name": "G\u00e9rard Berry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gsgpw",
                "entity_name": "Lawrence L. Larmore"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026fpzv",
                "entity_name": "Li Wei"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031sb7",
                "entity_name": "Marshall Kirk McKusick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.059hff4",
                "entity_name": "Denys Babenko"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07xdsc",
                "entity_name": "Bob Braden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yhj2",
                "entity_name": "Lance James"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dv4cr",
                "entity_name": "Ted Lewis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026cv_k",
                "entity_name": "Erol Gelenbe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.058ycf",
                "entity_name": "Bart Selman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x65_9",
                "entity_name": "Daniel Kottke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7dn5",
                "entity_name": "Li Sanli"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027gsz5",
                "entity_name": "Mark Steedman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027pxjy",
                "entity_name": "Rod Burstall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_7b5r",
                "entity_name": "Mark Micheli"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0411fc3",
                "entity_name": "Christopher Uriarte"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0835zb",
                "entity_name": "Gerard J. Holzmann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01zn_p",
                "entity_name": "Barry Boehm"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026_1gq",
                "entity_name": "James Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m53k4",
                "entity_name": "Alan Jay Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m8k5",
                "entity_name": "Ehud Shapiro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07z712",
                "entity_name": "John Rushby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b1l0w",
                "entity_name": "Matthew Hennessy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g4dp7",
                "entity_name": "Donald Shell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ktf20",
                "entity_name": "John Makepeace Bennett"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cr8cl",
                "entity_name": "Kirk Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03dhl1",
                "entity_name": "Bert Bos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bwxv8",
                "entity_name": "David Watt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cml12",
                "entity_name": "Mark S. Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dh5bz",
                "entity_name": "Michael Fourman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026px8s",
                "entity_name": "Earl B. Hunt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xks84",
                "entity_name": "Chris A. Cole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.036459",
                "entity_name": "Harold H. Seward"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.070x90",
                "entity_name": "Melvin Conway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09g3v7",
                "entity_name": "Leonard Uhr"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027w2w_",
                "entity_name": "Ernest Wiseman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d77n",
                "entity_name": "John Barnes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06r17n",
                "entity_name": "Neeraj Kayal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08qslx",
                "entity_name": "George Sadowsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01k05j",
                "entity_name": "Avie Tevanian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qz_w",
                "entity_name": "Avinash Kak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qh17f",
                "entity_name": "Edward Reingold"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hpd",
                "entity_name": "Harald Tveit Alvestrand"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ljsw",
                "entity_name": "Robert Hecht-Nielsen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08syff",
                "entity_name": "Phil Moorby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026w7nn",
                "entity_name": "Patrick Cousot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5807",
                "entity_name": "Jean-Marc J\u00e9z\u00e9quel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07dfkr",
                "entity_name": "Jean-Raymond Abrial"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04m360",
                "entity_name": "Lee Felsenstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_yj_",
                "entity_name": "Zoltan Somogyi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q3ch",
                "entity_name": "Olivier Danvy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dhrxd",
                "entity_name": "Carlo Kopp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lkch",
                "entity_name": "Roedy Green"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025x7tn",
                "entity_name": "Sukumar Nandi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026k48r",
                "entity_name": "William A. Stein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0271bvz",
                "entity_name": "Mark Bender Gerstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r466f",
                "entity_name": "Kevin McCurley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d0kl3",
                "entity_name": "James R. Goodman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hgtx",
                "entity_name": "Jochen Liedtke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066hdr",
                "entity_name": "Abraham Lempel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrvy",
                "entity_name": "S. Rao Kosaraju"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dhrmg",
                "entity_name": "Gordon McCalla"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02853tn",
                "entity_name": "Murray Campbell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xdsq",
                "entity_name": "Peter J. Weinberger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cljq7",
                "entity_name": "Gordon Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0470z3",
                "entity_name": "Steve Gibson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xcl8",
                "entity_name": "Francis Y. L. Chin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05hcd1",
                "entity_name": "Dick Hustvedt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c26d1",
                "entity_name": "Joseph Brant Arseneau"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rh228",
                "entity_name": "Christof Ebert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08t3ng",
                "entity_name": "Damien Doligez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015_gz",
                "entity_name": "Eric Allman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024xhx",
                "entity_name": "Daniel Lewin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04pfmk",
                "entity_name": "Bill Roscoe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07fhk3",
                "entity_name": "Inman Harvey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ytc4",
                "entity_name": "Calvin Gotlieb"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08hfh9",
                "entity_name": "Paris Kanellakis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bs5px",
                "entity_name": "Oren Patashnik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g1wrz",
                "entity_name": "Tim Finin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025y12_",
                "entity_name": "Dan Boneh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w9s4p",
                "entity_name": "Ronald Kaplan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.040vh3",
                "entity_name": "Peter Chen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x6b3",
                "entity_name": "Zeev Suraski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dv560",
                "entity_name": "Alan M. Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026fg7x",
                "entity_name": "John Yen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027r23j",
                "entity_name": "Amar Gupta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03n2bk",
                "entity_name": "Gregor Kiczales"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06qk72",
                "entity_name": "Gustave Solomon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dtyyh",
                "entity_name": "Harold Thimbleby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ggl6n",
                "entity_name": "Mark N. Wegman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3cgv",
                "entity_name": "Nick Montfort"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k7tc",
                "entity_name": "Jeff Rulifson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010ghgyq",
                "entity_name": "Russell Ryan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026fm08",
                "entity_name": "Binhai Zhu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03w063",
                "entity_name": "Gene Spafford"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08yq81",
                "entity_name": "Jeff Bonwick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09rncg",
                "entity_name": "Mark Grand"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vsc5",
                "entity_name": "J. Storrs Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07k11s",
                "entity_name": "Edmund Berkeley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bxbvs",
                "entity_name": "Jeffrey Lagarias"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gx7ly",
                "entity_name": "Nii Quaynor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06kz5h",
                "entity_name": "Tao Yang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g8myl",
                "entity_name": "Michael Schroeder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064_szw",
                "entity_name": "Andrei Makhanov"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03lhv5",
                "entity_name": "Martin Newell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0633z_",
                "entity_name": "William Jolitz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02339y",
                "entity_name": "Frieder Nake"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026g8jl",
                "entity_name": "Eric Paulos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q75qv",
                "entity_name": "Colin Christianson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qqh1c",
                "entity_name": "Alexander Strehl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2b_",
                "entity_name": "William A. Pailes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.030pl4d",
                "entity_name": "Matt Bishop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.085fhy",
                "entity_name": "Philip Wadler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08jfmq",
                "entity_name": "Alex Fraser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08jzst",
                "entity_name": "Shlomi Dolev"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g43h",
                "entity_name": "Manindra Agrawal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f3y02",
                "entity_name": "Cris Kobryn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0573h5",
                "entity_name": "Michael I. Jordan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y65c",
                "entity_name": "Ken Musgrave"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06rtzy",
                "entity_name": "George Marsaglia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084hrz",
                "entity_name": "Boris Trakhtenbrot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08_xv2",
                "entity_name": "Bruce Bastian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dbkmh",
                "entity_name": "Jeff V. Merkey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djshl",
                "entity_name": "Carlo H. S\u00e9quin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2vfg",
                "entity_name": "Nate Edwards"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ch94m",
                "entity_name": "Doug Lea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027fxg_",
                "entity_name": "Rafail Ostrovsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02g9q7",
                "entity_name": "Spencer Kimball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mbrr",
                "entity_name": "David Wheeler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0285kf1",
                "entity_name": "T. V. Raman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fgh2",
                "entity_name": "Ian Goldberg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xhn7",
                "entity_name": "Carl Herbert Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dn1_",
                "entity_name": "James Gosling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rpk7d",
                "entity_name": "Michael Spivey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06t0xd",
                "entity_name": "Jonathan Bowen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.083sw6",
                "entity_name": "Nathaniel Borenstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021w09",
                "entity_name": "Peter G. Neumann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044h4j",
                "entity_name": "Markus Kuhn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rs96",
                "entity_name": "Edward Tsang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063qjs",
                "entity_name": "Stuart Card"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0945m7",
                "entity_name": "Alain Fournier"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7bh",
                "entity_name": "Eldon C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025yph1",
                "entity_name": "Sepandar Kamvar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x82qc",
                "entity_name": "George Morrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y675",
                "entity_name": "Robert Swirsky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gt8j",
                "entity_name": "Carl Adam Petri"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w4h7",
                "entity_name": "Rudolf Bayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0267662",
                "entity_name": "John V. Tucker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02dxwx",
                "entity_name": "Udi Manber"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d5z0b",
                "entity_name": "Benjamin Nichols"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03dpt6",
                "entity_name": "Kai Krause"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rrt4",
                "entity_name": "Jack Elton Bresenham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.081vzl",
                "entity_name": "Christof Teuscher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084tdh",
                "entity_name": "Jim Woodcock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3b7w",
                "entity_name": "Peter G. Gyarmati"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dlkt8",
                "entity_name": "Newton Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg_1_",
                "entity_name": "Drew McDermott"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vwmg7",
                "entity_name": "Ed Seidel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gzj98",
                "entity_name": "Michael E. Auer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064cg5",
                "entity_name": "Joseph Goguen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bs291",
                "entity_name": "Charles Rosen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yt4mbf",
                "entity_name": "Greg Bryant"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028_7k",
                "entity_name": "Edward Felten"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vnj0n",
                "entity_name": "Patrick J. Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cp79s",
                "entity_name": "Bhushan Dewan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.054j07",
                "entity_name": "Charles Molnar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mcr3",
                "entity_name": "Owen Holland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z2zxk",
                "entity_name": "Randy Pausch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012vxnsy",
                "entity_name": "Meng Weng Wong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012x0j",
                "entity_name": "Andrew D. Gordon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01m1nc",
                "entity_name": "Alexander Dewdney"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0266v8x",
                "entity_name": "Faron Moller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027xtqz",
                "entity_name": "Peter Robinson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qv7gm",
                "entity_name": "James H. Davenport"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z7hc7",
                "entity_name": "Trevor Pearcey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c7fmp",
                "entity_name": "Gilles Kahn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0469l5t",
                "entity_name": "Colin Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06bgm3",
                "entity_name": "Bruce Webster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bbdg_",
                "entity_name": "Jeff Eppinger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0252pxv",
                "entity_name": "Dave Beckett"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hlb3t",
                "entity_name": "Micha Sharir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jftw0",
                "entity_name": "Joseph M. Hellerstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x7ft",
                "entity_name": "Bernhard Sch\u00f6lkopf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071w7y",
                "entity_name": "Nitin Saxena"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09qzs_",
                "entity_name": "Stefan Brands"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b8tgh",
                "entity_name": "Phil Bernstein"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r9_2",
                "entity_name": "Lov Grover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0265y8x",
                "entity_name": "Karl Steinbuch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05w64g",
                "entity_name": "Wayne Rosing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06h7w",
                "entity_name": "Rob Pike"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07py_s",
                "entity_name": "Shawn Carpenter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07wqm0",
                "entity_name": "David May"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08brds",
                "entity_name": "Warren Lyford DeLano"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012yj6",
                "entity_name": "John Koza"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027mx2q",
                "entity_name": "Gunnar Brinkmann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08jc2p",
                "entity_name": "Marek Karpinski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cd6jp",
                "entity_name": "Robert Iannucci"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pq__m",
                "entity_name": "Tom Truscott"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06ftzw",
                "entity_name": "Stephen Downes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1chs",
                "entity_name": "Marcus Hutter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gw2vg",
                "entity_name": "Wayne Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hsym9",
                "entity_name": "Justin Boyan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vx_5f",
                "entity_name": "Jonathan Dursi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04t_dd",
                "entity_name": "Dietmar Saupe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05xxk4l",
                "entity_name": "Christopher Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07t847",
                "entity_name": "Pat Hayes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0btj6t",
                "entity_name": "Richard Bornat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gsgfx",
                "entity_name": "Willy Susilo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0105_6ys",
                "entity_name": "Markus Lanthaler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qy1xm",
                "entity_name": "Stephen J. Mellor"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r5d8b",
                "entity_name": "John D. Roush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.036dpv",
                "entity_name": "Walter F. Tichy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h23r_",
                "entity_name": "Michael Genesereth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07nv53",
                "entity_name": "Joe Stoy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0265frp",
                "entity_name": "John Lansdown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pntys",
                "entity_name": "Paul van Oorschot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r6bj6",
                "entity_name": "Nicholas J. Belkin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ympq",
                "entity_name": "Jonathan Schaeffer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02gpr",
                "entity_name": "David A. Huffman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09xj0t",
                "entity_name": "Tom Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05lgc7",
                "entity_name": "Robby Garner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ghk7",
                "entity_name": "Ravi Sethi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028290r",
                "entity_name": "Don R. Swanson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pk4y2",
                "entity_name": "Joel McCormack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cykr",
                "entity_name": "Craig Larman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084lm7",
                "entity_name": "John Fitzgerald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g7r9j",
                "entity_name": "Rudi Studer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014pl6",
                "entity_name": "Daniel Sleator"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027_44",
                "entity_name": "Nick Palmer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rfp25",
                "entity_name": "Mahinda pathegama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031_j6",
                "entity_name": "Peter H. Salus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hk8bv",
                "entity_name": "Adam Leventhal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dv4xm",
                "entity_name": "Carl Chang"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09ghkn",
                "entity_name": "Alan Ashton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_7kq",
                "entity_name": "James Hendler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05z9bf",
                "entity_name": "Ron Kimmel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qkmn",
                "entity_name": "Nigel Shadbolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mr38l",
                "entity_name": "Daniel A. Keim"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06lnrv",
                "entity_name": "Isaac Nassi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07f4q0",
                "entity_name": "Ken Schwaber"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07z5xt",
                "entity_name": "Jim Horning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084l9h",
                "entity_name": "G. Mike Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08ccsc",
                "entity_name": "David A. Thomas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09_gr_",
                "entity_name": "Woody Bledsoe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0btx49",
                "entity_name": "Steven Muchnick"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021q56",
                "entity_name": "Clifford Berry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d15zr",
                "entity_name": "Norman E. Gibbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03f5lp",
                "entity_name": "Jeffrey Shallit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09mmrt",
                "entity_name": "Somenath Biswas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b59y9",
                "entity_name": "Brendan McKay"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.computer_scientist",
                    "class": "computer.computer_scientist",
                    "friendly_name": "Computer Scientist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "people.gender",
                    "class": "people.gender",
                    "friendly_name": "Gender",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.019rd",
                    "class": "automotive.designer",
                    "friendly_name": "richard buckminster fuller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.gender",
                    "friendly_name": "Gender"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.gender",
                    "friendly_name": "Gender"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_scientist . \n?x1 :type.object.type :people.gender . \nVALUES ?x2 { :m.019rd } \n?x0 :people.person.gender ?x1 . \n?x2 :people.person.gender ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND computer.computer_scientist (JOIN people.person.gender (JOIN (R people.person.gender) m.019rd)))"
    },
    {
        "qid": 3200435002000,
        "question": "what is the name of the unit profile that is the si base unit of j?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "j",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 2100915000000,
        "question": "what is the unit of electric charge density in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj53t",
                "entity_name": "Coulomb per cubic metre"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.electric_charge_density_unit",
                    "class": "measurement_unit.electric_charge_density_unit",
                    "friendly_name": "Unit of Electric Charge Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.electric_charge_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.electric_charge_density_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.electric_charge_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.electric_charge_density_unit (JOIN measurement_unit.electric_charge_density_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3203478009000,
        "question": "name the basketball player who majors in marketing.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05k1d_",
                "entity_name": "John Calipari"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "basketball.basketball_player",
                    "class": "basketball.basketball_player",
                    "friendly_name": "Basketball Player",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "education.education",
                    "class": "education.education",
                    "friendly_name": "Education",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0g4gr",
                    "class": "education.field_of_study",
                    "friendly_name": "Marketing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.education.student",
                    "friendly_name": "Student"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "education.field_of_study.students_majoring",
                    "friendly_name": "Students majoring in this field"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :basketball.basketball_player . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.0g4gr } \n?x1 :education.education.student ?x0 . \n?x2 :education.field_of_study.students_majoring ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "education"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND basketball.basketball_player (JOIN (R education.education.student) (JOIN (R education.field_of_study.students_majoring) m.0g4gr)))"
    },
    {
        "qid": 2100777000000,
        "question": "which video games have the same soundtrack as tales of symphonia?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03kd6v",
                "entity_name": "Tales of Symphonia"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01ld48c",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "Tales of Symphonia",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.soundtracks",
                    "friendly_name": "Soundtracks"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.01ld48c } \n?x0 :cvg.computer_videogame.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.soundtracks m.01ld48c))"
    },
    {
        "qid": 3206131013000,
        "question": "name the type of shortest recording by jade williams?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qjw34r",
                "entity_name": "High & Low"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0cm8knm",
                    "class": "music.artist",
                    "friendly_name": "Jade Williams",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.0cm8knm } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0cm8knm } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.0cm8knm)) music.recording.length)"
    },
    {
        "qid": 2102071002000,
        "question": "the absorbed dose rate is what unit in the international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj5d4",
                "entity_name": "Gray per second"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.absorbed_dose_rate_unit",
                    "class": "measurement_unit.absorbed_dose_rate_unit",
                    "friendly_name": "Unit of Absorbed Dose Rate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.absorbed_dose_rate_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.absorbed_dose_rate_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.absorbed_dose_rate_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.absorbed_dose_rate_unit (JOIN measurement_unit.absorbed_dose_rate_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 4301654010000,
        "question": "the private citizen, beset by partisan appeals for the loan of his public opinion, will soon see, perhaps, that these appeals are not a compliment to his intelligence, but an imposition on his good nature and an insult to his sense of evidence. is related to which inventor?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c_hh",
                "entity_name": "Samuel Johnson"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.inventor",
                    "class": "law.inventor",
                    "friendly_name": "Inventor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "media_common.quotation",
                    "class": "media_common.quotation",
                    "friendly_name": "Quotation",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.048gdjk",
                    "class": "media_common.quotation",
                    "friendly_name": "The private citizen, beset by partisan appeals for the loan of his Public Opinion, will soon see, perhaps, that these appeals are not a compliment to his intelligence, but an imposition on his good nature and an insult to his sense of evidence.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "media_common.quotation.author",
                    "friendly_name": "Author"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "media_common.quotation.subjects",
                    "friendly_name": "Subjects"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.inventor . \n?x1 :type.object.type :media_common.quotation . \n?x2 :type.object.type :media_common.quotation_subject . \nVALUES ?x3 { :m.048gdjk } \n?x1 :media_common.quotation.author ?x0 . \n?x1 :media_common.quotation.subjects ?x2 . \n?x2 :media_common.quotation_subject.quotations_about_this_subject ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND law.inventor (JOIN (R media_common.quotation.author) (JOIN media_common.quotation.subjects (JOIN media_common.quotation_subject.quotations_about_this_subject m.048gdjk))))"
    },
    {
        "qid": 2100256006000,
        "question": "in international system of units, the unit of molar energy is what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.1q6j429zy",
                "entity_name": "Kilojoule per mole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jdpc",
                "entity_name": "Joule per mole"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_energy_unit",
                    "class": "measurement_unit.molar_energy_unit",
                    "friendly_name": "Unit of Molar Energy",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_energy_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_energy_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_energy_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_energy_unit (JOIN measurement_unit.molar_energy_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3204660011000,
        "question": "melvin van peebles was the same ethnicity of which astronaut ?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026yqy",
                "entity_name": "Robert Henry Lawrence, Jr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0304rd",
                "entity_name": "Winston E. Scott"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02j2mf",
                "entity_name": "Charles Bolden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ftr66",
                "entity_name": "Leland D. Melvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vqrg",
                "entity_name": "Bernard A. Harris, Jr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01835d",
                "entity_name": "Michael P. Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026yht",
                "entity_name": "Guion Bluford"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0183qt",
                "entity_name": "Ronald McNair"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cmn5",
                "entity_name": "Mae Jemison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0731dh",
                "entity_name": "Stephanie Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02k83s",
                "entity_name": "Robert Curbeam"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g20js",
                "entity_name": "Yvonne Cagle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gxc8m",
                "entity_name": "Robert Satcher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02v1vc",
                "entity_name": "Frederick D. Gregory"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b5zb6",
                "entity_name": "Joan Higginbotham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gxd82",
                "entity_name": "Alvin Drew"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.astronaut",
                    "class": "spaceflight.astronaut",
                    "friendly_name": "Astronaut",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "people.ethnicity",
                    "class": "people.ethnicity",
                    "friendly_name": "Ethnicity",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01z0lb",
                    "class": "tv.tv_director",
                    "friendly_name": "Melvin Van Peebles",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.astronaut . \n?x1 :type.object.type :people.ethnicity . \nVALUES ?x2 { :m.01z0lb } \n?x0 :people.person.ethnicity ?x1 . \n?x2 :people.person.ethnicity ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.astronaut (JOIN people.person.ethnicity (JOIN (R people.person.ethnicity) m.01z0lb)))"
    },
    {
        "qid": 3206131002000,
        "question": "which of carol welsman recordings is shortest in length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5_xy2",
                "entity_name": "Angels on Your Pillow"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01nl_cx",
                    "class": "music.artist",
                    "friendly_name": "Carol Welsman",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.01nl_cx } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.01nl_cx } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.01nl_cx)) music.recording.length)"
    },
    {
        "qid": 2101534007000,
        "question": "what are the rocket engines that can thrust at 1.1025e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw7j",
                "entity_name": "RD-124"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.1025e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.1025e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.1025e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.1025e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100075014000,
        "question": "what video game does beatmania controller support?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01j35l",
                "entity_name": "Beatmania"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.047csb9",
                    "class": "computer.computer_peripheral",
                    "friendly_name": "Beatmania Controller",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.peripherals_supported",
                    "friendly_name": "Peripherals supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.047csb9 } \n?x0 :cvg.computer_videogame.peripherals_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.peripherals_supported m.047csb9))"
    },
    {
        "qid": 2101534010000,
        "question": "what rocket engines are able to thrust 754600.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlwrn",
                "entity_name": "RD-107MM"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "754600.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "754600.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"754600.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 754600.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103120006000,
        "question": "which bassist has the height of at least 1.91?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.017g21",
                "entity_name": "Roger Waters"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w8n89",
                "entity_name": "Buckethead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqsdc",
                "entity_name": "Gabe Saporta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02h82xn",
                "entity_name": "Matt Laurence"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.bassist",
                    "class": "music.bassist",
                    "friendly_name": "Bassist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.91^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.91",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.height_meters",
                    "friendly_name": "Height"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.bassist . \nFILTER (?x1 >= \"1.91\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND music.bassist (ge people.person.height_meters 1.91^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104372000000,
        "question": "search for stars with the average orbital speed of 145.0 or less.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d1rrm",
                "entity_name": "HD 41004"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.star",
                    "class": "astronomy.star",
                    "friendly_name": "Star",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "145.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "145.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.orbital_relationship.mean_orbital_speed",
                    "friendly_name": "Average Orbital Speed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.star . \nFILTER (?x1 <= \"145.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :astronomy.orbital_relationship.mean_orbital_speed ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "compositional",
        "s_expression": "(AND astronomy.star (le astronomy.orbital_relationship.mean_orbital_speed 145.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3203081002000,
        "question": "what type of education does birmingham provide?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xv3k",
                "entity_name": "Rodolfo Neri Vela"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.astronaut",
                    "class": "spaceflight.astronaut",
                    "friendly_name": "Astronaut",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "education.education",
                    "class": "education.education",
                    "friendly_name": "Education",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01dthg",
                    "class": "education.university",
                    "friendly_name": "birmingham",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.education",
                    "friendly_name": "Education"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "education.education.institution",
                    "friendly_name": "Institution"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.astronaut . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.01dthg } \n?x0 :people.person.education ?x1 . \n?x1 :education.education.institution ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "education",
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.astronaut (JOIN people.person.education (JOIN education.education.institution m.01dthg)))"
    },
    {
        "qid": 2102287002000,
        "question": "may the 11st, 2010 is an effective resolution of what digital cameras?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cp1pcv",
                "entity_name": "Sony NEX-5"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2010-05-11^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "May the 11st, 2010",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.released",
                    "friendly_name": "Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"2010-05-11-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :digicams.digital_camera.released ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.released 2010-05-11^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2103015005000,
        "question": "on 4 which tennis player went pro?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.059rpy",
                "entity_name": "Taylor Dent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g2ycr",
                "entity_name": "Murphy Jensen"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_player",
                    "class": "tennis.tennis_player",
                    "friendly_name": "Tennis Player",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "4^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "4",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_player.number_of_tennis_titles",
                    "friendly_name": "Number Of Tennis Titles"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_player . \nVALUES ?x1 { \"4\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tennis.tennis_player.number_of_tennis_titles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "tennis"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tennis.tennis_player (JOIN tennis.tennis_player.number_of_tennis_titles 4^^http://www.w3.org/2001/XMLSchema#integer))"
    },
    {
        "qid": 2103869002000,
        "question": "in weightmass of kilograms what is the smallest unit of mass?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 3200435005000,
        "question": "which unit profile is the si base unit of joules?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "joules",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 2101083001000,
        "question": "what manufactured drugs have a tear shape shape?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhvnf",
                "entity_name": "Zebeta 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqqtd",
                "entity_name": "Zebeta 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx9jdl",
                "entity_name": "Losartan Potassium 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx92gz",
                "entity_name": "Cozaar 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgzb9",
                "entity_name": "Cozaar 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqmdr",
                "entity_name": "Uloric 80 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql241",
                "entity_name": "Cozaar 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqxsh",
                "entity_name": "Losartan Potassium 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh2cv",
                "entity_name": "Cozaar 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk1wx",
                "entity_name": "Losartan Potassium and Hydrochlorothiazide 100/25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqj4sb",
                "entity_name": "Cozaar 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn2gs",
                "entity_name": "Losartan Potassium 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnn1m",
                "entity_name": "Uloric 80 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxdc0y",
                "entity_name": "Losartan Potassium and Hydrochlorothiazide 25/100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmqm3",
                "entity_name": "Cozaar 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlrqw",
                "entity_name": "Cozaar 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxbp8l",
                "entity_name": "Losartan Potassium and Hydrochlorothiazide 12.5/50 film coated tablet"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.manufactured_drug_form",
                    "class": "medicine.manufactured_drug_form",
                    "friendly_name": "Manufactured drug form",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04kf8m3",
                    "class": "medicine.drug_form_shape",
                    "friendly_name": "Tear Shape",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.manufactured_drug_form.shape",
                    "friendly_name": "Shape"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.04kf8m3 } \n?x0 :medicine.manufactured_drug_form.shape ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "compositional",
        "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.shape m.04kf8m3))"
    },
    {
        "qid": 2102071000000,
        "question": "according to the international system of units, what unit is used to represent absorbed dose rate?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj5d4",
                "entity_name": "Gray per second"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.absorbed_dose_rate_unit",
                    "class": "measurement_unit.absorbed_dose_rate_unit",
                    "friendly_name": "Unit of Absorbed Dose Rate",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.absorbed_dose_rate_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.absorbed_dose_rate_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.absorbed_dose_rate_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.absorbed_dose_rate_unit (JOIN measurement_unit.absorbed_dose_rate_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 4300898005000,
        "question": "the core text of christanity that is honored by sealing practitioners is called what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.015j7",
                "entity_name": "The Bible"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01lp8",
                    "class": "religion.religion",
                    "friendly_name": "christanity",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.021skj",
                    "class": "religion.religious_practice",
                    "friendly_name": "Sealing",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.01lp8 } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.021skj } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.01lp8) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.021skj))))"
    },
    {
        "qid": 3204005004000,
        "question": "what is the unit of a measurement system whose volumetric heat capacity units is joule per cubic metre per kelvin?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sx5b",
                "entity_name": "Picometre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jmrm",
                "entity_name": "Millimeter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db_d",
                "entity_name": "Kilometer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04sf9",
                "entity_name": "Meter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.024_6",
                "entity_name": "Centimeter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qs2d",
                "entity_name": "Hectometre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055v9",
                "entity_name": "Micrometer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p5ld",
                "entity_name": "Decimetre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01p6gt",
                "entity_name": "Decametre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mvqx",
                "entity_name": "Megametre"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p0rth",
                "entity_name": "Nanometre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02t6r4z",
                    "class": "measurement_unit.volumetric_heat_capacity_unit",
                    "friendly_name": "Joule per cubic metre per kelvin",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.measurement_system.volumetric_heat_capacity_units",
                    "friendly_name": "Volumetric Heat Capacity Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \n?x1 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x2 { :m.02t6r4z } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \n?x1 :measurement_unit.measurement_system.volumetric_heat_capacity_units ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system (JOIN measurement_unit.measurement_system.volumetric_heat_capacity_units m.02t6r4z)))"
    },
    {
        "qid": 2100716004000,
        "question": "the paul and the legacies of paul was a part of which conference proceedings?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.012c9n3w",
                "entity_name": "Paul and the legacies of Paul"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "conferences.conference_proceedings",
                    "class": "conferences.conference_proceedings",
                    "friendly_name": "Conference proceedings",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.012c9n4j",
                    "class": "conferences.conference",
                    "friendly_name": "Paul and the Legacies of Paul",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "conferences.conference_proceedings.conference",
                    "friendly_name": "Conference"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :conferences.conference_proceedings . \nVALUES ?x1 { :m.012c9n4j } \n?x0 :conferences.conference_proceedings.conference ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "conferences"
        ],
        "level": "zero-shot",
        "s_expression": "(AND conferences.conference_proceedings (JOIN conferences.conference_proceedings.conference m.012c9n4j))"
    },
    {
        "qid": 2102568019000,
        "question": "how does atomic units measure length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.017k78",
                "entity_name": "Bohr radius"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.017mm0",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Atomic units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \nVALUES ?x1 { :m.017mm0 } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system m.017mm0))"
    },
    {
        "qid": 4300898010000,
        "question": "what text serves as the core of jehovah's witness and is honored by family home evening practitioners?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.015j7",
                "entity_name": "The Bible"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0dtdq",
                    "class": "religion.religion",
                    "friendly_name": "jehovah's witness",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04v6dq",
                    "class": "religion.religious_practice",
                    "friendly_name": "Family Home Evening",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.0dtdq } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.04v6dq } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.0dtdq) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.04v6dq))))"
    },
    {
        "qid": 2101534002000,
        "question": "which rocket engines can thrust 742252.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvcq",
                "entity_name": "RD-215M"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "742252.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "742252.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"742252.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 742252.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103093001000,
        "question": "what is the name of the largest unit of frequency in terms of hertz?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 2100332013000,
        "question": "which tv episode has an episode number of 1825?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05dj99w",
                "entity_name": "LAUREN GRAHAM, STEVE HARVEY,DASHBOARD CONFESSIONAL"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_series_episode",
                    "class": "tv.tv_series_episode",
                    "friendly_name": "TV Episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1825^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1825",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_series_episode.episode_number",
                    "friendly_name": "Episode number"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_series_episode . \nVALUES ?x1 { \"1825\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tv.tv_series_episode.episode_number ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "tv"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tv.tv_series_episode (JOIN tv.tv_series_episode.episode_number 1825^^http://www.w3.org/2001/XMLSchema#integer))"
    },
    {
        "qid": 2100777011000,
        "question": "which video games have the same soundtrack as soul nomad & the world eaters?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gwhht",
                "entity_name": "Soul Nomad & the World Eaters"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0ftp40m",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "Soul Nomad & the World Eaters",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.soundtracks",
                    "friendly_name": "Soundtracks"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0ftp40m } \n?x0 :cvg.computer_videogame.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.soundtracks m.0ftp40m))"
    },
    {
        "qid": 2105096003000,
        "question": "what is the book that is first published?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l952",
                "entity_name": "Metamorphoses"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025_1lx",
                "entity_name": "Fasti"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.book",
                    "class": "book.book",
                    "friendly_name": "Book",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.written_work.date_of_first_publication",
                    "friendly_name": "Date of first publication"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.book . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :book.book . \n?y0 :book.written_work.date_of_first_publication ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :book.written_work.date_of_first_publication ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "book"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMIN book.book book.written_work.date_of_first_publication)"
    },
    {
        "qid": 2100924015000,
        "question": "all, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty. is a quote from what subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09cfyp",
                "entity_name": "Power"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048bzd6",
                    "class": "media_common.quotation",
                    "friendly_name": "All, or the greatest part of men that have aspired to riches or power, have attained thereunto either by force or fraud, and what they have by craft or cruelty gained, to cover the foulness of their fact, they call purchase, as a name more honest. Howsoever, he that for want of will or wit useth not those means, must rest in servitude and poverty.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048bzd6 } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048bzd6))"
    },
    {
        "qid": 3205323001000,
        "question": "which monterey county wine has 14.2 percent alcohol?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dcw43",
                "entity_name": "2006 Miner Family \"777, Rosella's Vineyard\" Santa Lucia Highlands Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dcv9b",
                "entity_name": "2006 Miner Family \"Rosella's Vineyard\" Santa Lucia Highlands Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04fw1lv",
                "entity_name": "2006 Hug \"Cedar Lane Vineyard\" Arroyo Seco Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dc1yh",
                "entity_name": "2006 Paraiso Santa Lucia Highlands Estate Pinot Noir"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04dgx39",
                "entity_name": "2006 Morgan \"Twelve Clones\" Santa Lucia Highlands Pinot Noir"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0l2lk",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "Monterey County",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "14.2^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "14.2",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0l2lk } \nVALUES ?x2 { \"14.2\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0l2lk) (JOIN wine.wine.percentage_alcohol 14.2^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2103015002000,
        "question": "on 75, which tennis player turned pro?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01my95",
                "entity_name": "Roger Federer"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tennis.tennis_player",
                    "class": "tennis.tennis_player",
                    "friendly_name": "Tennis Player",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "75^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "75",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tennis.tennis_player.number_of_tennis_titles",
                    "friendly_name": "Number Of Tennis Titles"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tennis.tennis_player . \nVALUES ?x1 { \"75\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :tennis.tennis_player.number_of_tennis_titles ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "tennis"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tennis.tennis_player (JOIN tennis.tennis_player.number_of_tennis_titles 75^^http://www.w3.org/2001/XMLSchema#integer))"
    },
    {
        "qid": 3205791000000,
        "question": "what c++ language computer emulator was released latest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cgr44m",
                "entity_name": "Unreal Speccy Portable"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.computer_emulator",
                    "class": "computer.computer_emulator",
                    "friendly_name": "Computer Emulator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0jgqg",
                    "class": "computer.programming_language",
                    "friendly_name": "c++ language",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "computer.software.latest_release_date",
                    "friendly_name": "Latest Release Date"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "computer.software.languages_used",
                    "friendly_name": "Programming languages used"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_emulator . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :computer.computer_emulator . \nVALUES ?y2 { :m.0jgqg } \n?y0 :computer.software.latest_release_date ?y1 . \n?y0 :computer.software.languages_used ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0jgqg } \n?x0 :computer.software.latest_release_date ?x1 . \n?x0 :computer.software.languages_used ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND computer.computer_emulator (JOIN computer.software.languages_used m.0jgqg)) computer.software.latest_release_date)"
    },
    {
        "qid": 2103093002000,
        "question": "which is the largest unit of frequency that is in terms of hertz?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 2105503001000,
        "question": "what is the unit of magnetic flux density that represents the maximum density in teslas?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rhvb",
                "entity_name": "Tesla"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.density_in_teslas",
                    "friendly_name": "Density in teslas"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n?y0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.magnetic_flux_density_unit measurement_unit.magnetic_flux_density_unit.density_in_teslas)"
    },
    {
        "qid": 2103327000000,
        "question": "which is the smallest possible unit of resistivity?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters",
                    "friendly_name": "Resistivity in ohm meters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_resistivity . \n?y0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.unit_of_resistivity measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters)"
    },
    {
        "qid": 3200648015000,
        "question": "what court is inferior to the caribbean court of justice and was founded first?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.08059cj",
                "entity_name": "Supreme Court of Judicature"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.court",
                    "class": "law.court",
                    "friendly_name": "Court",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05vm39",
                    "class": "law.court",
                    "friendly_name": "Caribbean Court of Justice",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.court.founded",
                    "friendly_name": "Founded"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "law.court.inferior_courts",
                    "friendly_name": "Inferior courts"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.court . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :law.court . \nVALUES ?y2 { :m.05vm39 } \n?y0 :law.court.founded ?y1 . \n?y2 :law.court.inferior_courts ?y0 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.05vm39 } \n?x0 :law.court.founded ?x1 . \n?x2 :law.court.inferior_courts ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "law"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMIN (AND law.court (JOIN (R law.court.inferior_courts) m.05vm39)) law.court.founded)"
    },
    {
        "qid": 2102677002000,
        "question": "what is the unit of volumetric heat capacity in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t6r4z",
                "entity_name": "Joule per cubic metre per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.volumetric_heat_capacity_unit",
                    "class": "measurement_unit.volumetric_heat_capacity_unit",
                    "friendly_name": "Unit of Volumetric Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.volumetric_heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.volumetric_heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.volumetric_heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.volumetric_heat_capacity_unit (JOIN measurement_unit.volumetric_heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 4301766004000,
        "question": "the creators of pst's most recently released browser was called what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l09y1",
                    "class": "computer.file_format",
                    "friendly_name": "Pst",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l09y1 } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l09y1 } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l09y1))) computer.software.first_released)"
    },
    {
        "qid": 2104324003000,
        "question": "what unit of temperature has a smallest zero point in kelvins?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 2100592007000,
        "question": "bristol and exeter railway 4-2-2 locomotives is what class of locomotive?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rc82",
                "entity_name": "4-2-2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.026gbyn",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "Bristol and Exeter Railway 4-2-2 locomotives",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.026gbyn } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.026gbyn))"
    },
    {
        "qid": 2101237009000,
        "question": "what video game is released in 2007-01-08?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hltj3",
                "entity_name": "Dungeon Explorer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hm70p",
                "entity_name": "Gradius"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2007-01-08^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "2007-01-08",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { \"2007-01-08-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.release_date 2007-01-08^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2105404002000,
        "question": "which film producer has a weight of at most 73.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "73.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "73.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"73.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 73.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104101001000,
        "question": "which musical soundtrack was initially released the earliest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bzn2f",
                "entity_name": "Snow White and the Seven Dwarfs"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.musical_soundtrack",
                    "class": "theater.musical_soundtrack",
                    "friendly_name": "Musical Soundtrack",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.musical_soundtrack . \n?y0 :music.album.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :music.album.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN theater.musical_soundtrack music.album.release_date)"
    },
    {
        "qid": 3201457004000,
        "question": "which exhibition has the same exhibition curator with shift?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w031yl",
                "entity_name": "Y Lle Celf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w0321r",
                "entity_name": "Whatever They Say I Am, That\u2019s What I\u2019m Not"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "exhibitions.exhibition",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Exhibition",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "exhibitions.exhibition_curator",
                    "class": "exhibitions.exhibition_curator",
                    "friendly_name": "Exhibition curator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0w031v3",
                    "class": "exhibitions.exhibition",
                    "friendly_name": "Shift",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "exhibitions.exhibition_curator.exhibitions_curated",
                    "friendly_name": "Exhibitions curated"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "exhibitions.exhibition_curator.exhibitions_curated",
                    "friendly_name": "Exhibitions curated"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :exhibitions.exhibition . \n?x1 :type.object.type :exhibitions.exhibition_curator . \nVALUES ?x2 { :m.0w031v3 } \n?x1 :exhibitions.exhibition_curator.exhibitions_curated ?x0 . \n?x1 :exhibitions.exhibition_curator.exhibitions_curated ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "exhibitions"
        ],
        "level": "compositional",
        "s_expression": "(AND exhibitions.exhibition (JOIN (R exhibitions.exhibition_curator.exhibitions_curated) (JOIN exhibitions.exhibition_curator.exhibitions_curated m.0w031v3)))"
    },
    {
        "qid": 3201613011000,
        "question": "which month has the first 3 days of the year?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xx5",
                "entity_name": "February"
            }
        ],
        "function": "<",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "time.month",
                    "class": "time.month",
                    "friendly_name": "Month",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "time.day_of_year",
                    "class": "time.day_of_year",
                    "friendly_name": "Day Of Year",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "3^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "3",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "time.day_of_year.month",
                    "friendly_name": "Month"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "time.day_of_year.day",
                    "friendly_name": "Day"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.month . \n?x1 :type.object.type :time.day_of_year . \nFILTER (?x2 < \"3\"^^<http://www.w3.org/2001/XMLSchema#integer>)\n?x1 :time.day_of_year.month ?x0 . \n?x1 :time.day_of_year.day ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "time"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND time.month (JOIN (R time.day_of_year.month) (lt time.day_of_year.day 3^^http://www.w3.org/2001/XMLSchema#integer)))"
    },
    {
        "qid": 3206131004000,
        "question": "what is the shortest track by the esperanza?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyt4c6",
                "entity_name": "Evaporaci\u00f3n"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04fd4yp",
                    "class": "music.artist",
                    "friendly_name": "The Esperanza",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.04fd4yp } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.04fd4yp } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.04fd4yp)) music.recording.length)"
    },
    {
        "qid": 2103093000000,
        "question": "what is the greatest unit of frequency in relation to hertz?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 2104914003000,
        "question": "which video game expansion has the latest initial release date?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvv8pp",
                "entity_name": "StarCraft II: Legacy of the Void"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cvg.computer_game_expansion . \n?y0 :cvg.computer_videogame.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :cvg.computer_videogame.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX cvg.computer_game_expansion cvg.computer_videogame.release_date)"
    },
    {
        "qid": 2100867013000,
        "question": "on apr. the 4th, 2011 which radio program was first broadcasted?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0zzp",
                "entity_name": "The Cosmic Chemistry of Cosmetics"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-04-04^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "Apr. the 4th, 2011",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-04-04-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-04-04^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3204366001000,
        "question": "the playstation has what video game expansions?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p3r2rm",
                "entity_name": "The Elder Scrolls V: Skyrim \u2013 Dragonborn"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_platform",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "Video Game Platform",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.066kp",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "playstation",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.platforms",
                    "friendly_name": "Platforms"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n?x1 :type.object.type :cvg.cvg_platform . \nVALUES ?x2 { :m.066kp } \n?x0 :cvg.computer_videogame.platforms ?x1 . \n?x2 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_expansion (JOIN cvg.computer_videogame.platforms (JOIN (R cvg.cvg_platform_family.platforms) m.066kp)))"
    },
    {
        "qid": 2102557009000,
        "question": "panta rhei is the successor engine to what video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c6myz",
                "entity_name": "MT Framework"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_engine",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Video Game Engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0_1mfsp",
                    "class": "cvg.computer_game_engine",
                    "friendly_name": "Panta Rhei",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_engine.successor_engine",
                    "friendly_name": "Successor Engine"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_engine . \nVALUES ?x1 { :m.0_1mfsp } \n?x0 :cvg.computer_game_engine.successor_engine ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_engine (JOIN cvg.computer_game_engine.successor_engine m.0_1mfsp))"
    },
    {
        "qid": 2102549013000,
        "question": "which game supports zilog z80?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0285tdy",
                "entity_name": "Mutation Nation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.063lf4",
                "entity_name": "Super Punch-Out!!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0168jb",
                "entity_name": "Pole Position"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fjwsp",
                "entity_name": "TT Racer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d582r",
                "entity_name": "Alpine Ski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx2bw",
                "entity_name": "Birdie King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx2f_",
                "entity_name": "Birdie King 2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx2hq",
                "entity_name": "Birdie King 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy1y_",
                "entity_name": "All American Football"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy225",
                "entity_name": "Alley Master"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy6x_",
                "entity_name": "American Horseshoes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy92x",
                "entity_name": "Appoooh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6mbt",
                "entity_name": "Baseball The Season II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gd4dp",
                "entity_name": "Beach Festival World Championship 1997"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gg7wp",
                "entity_name": "Big Event Golf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06kqbk",
                "entity_name": "Amidar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyn7v",
                "entity_name": "Asura Blade: Sword of Dynasty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dycky",
                "entity_name": "Ashura Blaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zzhf",
                "entity_name": "Bosconian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy8t5",
                "entity_name": "Angel Kids"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvy7n",
                "entity_name": "Arabian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0402bq",
                "entity_name": "Operation Wolf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b66wkh",
                "entity_name": "Retaliot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g918s",
                "entity_name": "Cadash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08dch8k",
                "entity_name": "Tetris 2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d6v_",
                "entity_name": "Zaxxon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b66wks",
                "entity_name": "Moskow 2024"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04ypcw",
                "entity_name": "Hang-On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027t8_1",
                "entity_name": "Stinger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02n5f6",
                "entity_name": "Balloon Fight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dynbl",
                "entity_name": "Asylum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022k5g",
                "entity_name": "Frogger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b68313",
                "entity_name": "Babaliba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b68324",
                "entity_name": "Saimazoom"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g47r5",
                "entity_name": "Battle Cruiser M-12"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx2tr",
                "entity_name": "Black Tiger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027v0t6",
                "entity_name": "Exerion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy9jw",
                "entity_name": "Ark Area"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nfhf",
                "entity_name": "Lady Bug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0390x2",
                "entity_name": "Popeye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ygwg",
                "entity_name": "Bank Panic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy1gb",
                "entity_name": "Ali Baba and 40 Thieves"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022r6f",
                "entity_name": "Berzerk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07vzm8",
                "entity_name": "Vulgus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g96xf",
                "entity_name": "Juno First"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d_9wd",
                "entity_name": "Bagman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02cq8d",
                "entity_name": "Scramble"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f8734",
                "entity_name": "A.D. 2083"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026brln",
                "entity_name": "Blocken"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fk7h9",
                "entity_name": "The Amazing Adventures of Mr. F. Lea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy90c",
                "entity_name": "Apache 3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kyl9",
                "entity_name": "Mario Bros."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01djqy",
                "entity_name": "The New Zealand Story"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071qpp",
                "entity_name": "Rastan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyb7p",
                "entity_name": "Arkanoid: Revenge of Doh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dynqc",
                "entity_name": "Avengers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qqzr",
                "entity_name": "Radar Scope"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g289q",
                "entity_name": "Baluba-Louk No Densetsu"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvwp_",
                "entity_name": "005"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ggf0m",
                "entity_name": "Bijokko Yume Monogatari"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy1vj",
                "entity_name": "Alien 3: The Gun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120jfddl",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f20w7",
                "entity_name": "Magician Lord"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027z_9t",
                "entity_name": "Super Mouse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx_hz",
                "entity_name": "Air Buster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07j694",
                "entity_name": "Legendary Wings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyngc",
                "entity_name": "Atomic Robo-Kid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fl6gl",
                "entity_name": "Armored Car"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dlmx21",
                "entity_name": "F-1 Grand Prix"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f714j",
                "entity_name": "Battle Bakraid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027tcsq",
                "entity_name": "The Glob"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fkv2w",
                "entity_name": "Apparel Night"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120vt2sc",
                "entity_name": "Super Volleyball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f4w1j",
                "entity_name": "SubRoc-3D"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025x12_",
                "entity_name": "BlaZeon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.121tbxmc",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fl54q",
                "entity_name": "Argus"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05364_",
                "entity_name": "Kangaroo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dlmms7",
                "entity_name": "F-1 Grand Prix Part II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyn_d",
                "entity_name": "Azurian Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027xzh_",
                "entity_name": "Devil Fish"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g51q8",
                "entity_name": "The Battle-Road"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gq0mj",
                "entity_name": "Black Hole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026b120",
                "entity_name": "Block Gal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ggftf",
                "entity_name": "Bio-Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gg7sl",
                "entity_name": "Big Bucks Trivia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.079w9qv",
                "entity_name": "Abu Simbel Profanation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g47m1",
                "entity_name": "Battle Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026b0sr",
                "entity_name": "Block Block"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034h8n",
                "entity_name": "X-Men vs. Street Fighter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02dd1v",
                "entity_name": "1942"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122vl340",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03sqms",
                "entity_name": "Tron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ggdwt",
                "entity_name": "Bijokko Gakuen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy9b_",
                "entity_name": "Arabian Fight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m9p8",
                "entity_name": "Jungle Hunt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.035sdm",
                "entity_name": "Twin Cobra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy08n",
                "entity_name": "A Jax"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05q7ld5",
                "entity_name": "Check Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dyn27",
                "entity_name": "Asuka & Asuka"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gd4t3",
                "entity_name": "Beam Invader"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvxwr",
                "entity_name": "Anteater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy03g",
                "entity_name": "Air Gallet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gg6wm",
                "entity_name": "Bermuda Triangle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy6_j",
                "entity_name": "American Speedway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d_pqs",
                "entity_name": "Balloon Brothers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02yqx6",
                "entity_name": "Battle Garegga"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bkms5",
                "entity_name": "Astro Blaster"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx7zt",
                "entity_name": "4-D Warriors"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gxzx95",
                "entity_name": "Tail to Nose"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122161q1",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027zc5x",
                "entity_name": "Stratovox"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g4l7n",
                "entity_name": "Battle of Atlantis"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0898v",
                    "class": "computer.computer_processor",
                    "friendly_name": "Zilog Z80",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0898v } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.0898v))"
    },
    {
        "qid": 2102549012000,
        "question": "what game supports 200 mhz cpu?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g84f",
                "entity_name": "Battlezone II: Combat Commander"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0cb7vkz",
                    "class": "computer.computer_processor",
                    "friendly_name": "200 MHz CPU",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0cb7vkz } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.0cb7vkz))"
    },
    {
        "qid": 2102456001000,
        "question": "what is the unit of molar heat capacity in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj59n",
                "entity_name": "Joule per mole per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_heat_capacity_unit",
                    "class": "measurement_unit.molar_heat_capacity_unit",
                    "friendly_name": "Unit of Molar Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_heat_capacity_unit (JOIN measurement_unit.molar_heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2105404004000,
        "question": "which film producer has a weight of at most 57.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "57.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "57.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"57.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 57.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103886000000,
        "question": "the unit of radioactivity with the largest radioactivity in becquerels is what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.014fbb",
                "entity_name": "Curie"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.radioactivity_unit",
                    "class": "measurement_unit.radioactivity_unit",
                    "friendly_name": "Unit of Radioactivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.radioactivity_unit.radioactivity_in_becquerels",
                    "friendly_name": "Radioactivity in becquerels"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.radioactivity_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.radioactivity_unit . \n?y0 :measurement_unit.radioactivity_unit.radioactivity_in_becquerels ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.radioactivity_unit.radioactivity_in_becquerels ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.radioactivity_unit measurement_unit.radioactivity_unit.radioactivity_in_becquerels)"
    },
    {
        "qid": 3201315010000,
        "question": "which roller coasters have a capacity of 1900 and lasts less than 205.8",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hn4s",
                "entity_name": "Flying Dutchman"
            }
        ],
        "function": "<=",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "amusement_parks.roller_coaster",
                    "class": "amusement_parks.roller_coaster",
                    "friendly_name": "Roller Coaster",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "205.8^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "205.8",
                    "question_node": 0,
                    "function": "<="
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "1900^^http://www.w3.org/2001/XMLSchema#integer",
                    "class": "type.int",
                    "friendly_name": "1900",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "amusement_parks.ride.duration",
                    "friendly_name": "Duration"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "amusement_parks.ride.capacity",
                    "friendly_name": "Capacity (riders per hour)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :amusement_parks.roller_coaster . \nFILTER (?x1 <= \"205.8\"^^<http://www.w3.org/2001/XMLSchema#float>)\nVALUES ?x2 { \"1900\"^^<http://www.w3.org/2001/XMLSchema#integer> } \n?x0 :amusement_parks.ride.duration ?x1 . \n?x0 :amusement_parks.ride.capacity ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "amusement_parks"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND amusement_parks.roller_coaster (AND (le amusement_parks.ride.duration 205.8^^http://www.w3.org/2001/XMLSchema#float) (JOIN amusement_parks.ride.capacity 1900^^http://www.w3.org/2001/XMLSchema#integer)))"
    },
    {
        "qid": 2101534015000,
        "question": "what rocket engines are able to thrust 1.1025e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw7j",
                "entity_name": "RD-124"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.1025e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.1025e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.1025e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.1025e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104324000000,
        "question": "name the unit of temperature with the smallest zero point in kelvins",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 4301766013000,
        "question": "the creators of wma's most recently released browser was called what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.086t0",
                    "class": "computer.file_format",
                    "friendly_name": "wma",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.086t0 } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.086t0 } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.086t0))) computer.software.first_released)"
    },
    {
        "qid": 2102798003000,
        "question": "the international system of units has what unit for electric flux density.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj550",
                "entity_name": "Coulomb per square metre"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.electric_flux_density_unit",
                    "class": "measurement_unit.electric_flux_density_unit",
                    "friendly_name": "Unit of Electric Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.electric_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.electric_flux_density_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.electric_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.electric_flux_density_unit (JOIN measurement_unit.electric_flux_density_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2102583009000,
        "question": "06/05/1980 is the date on which what construction project broke ground?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x05g9x",
                "entity_name": "Design and construction of the Sir Leo Hielscher Bridges"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "projects.project",
                    "class": "projects.project",
                    "friendly_name": "Project",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1980-06-05^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "06/05/1980",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "projects.project.start_date",
                    "friendly_name": "Start date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :projects.project . \nVALUES ?x1 { \"1980-06-05-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :projects.project.start_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "projects"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND projects.project (JOIN projects.project.start_date 1980-06-05^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3205737009000,
        "question": "the latest released date of the musical release that has engineers including mathieu soucy is what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j3124b",
                "entity_name": "Cold Wind (demo)"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.release",
                    "class": "music.release",
                    "friendly_name": "Musical Release",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05sprd3",
                    "class": "music.engineer",
                    "friendly_name": "Mathieu Soucy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.release.release_date",
                    "friendly_name": "Release Date"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.release.engineers",
                    "friendly_name": "Engineers"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.release . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.release . \nVALUES ?y2 { :m.05sprd3 } \n?y0 :music.release.release_date ?y1 . \n?y0 :music.release.engineers ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.05sprd3 } \n?x0 :music.release.release_date ?x1 . \n?x0 :music.release.engineers ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND music.release (JOIN music.release.engineers m.05sprd3)) music.release.release_date)"
    },
    {
        "qid": 3204293015000,
        "question": "what are silas and v's jobs?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wszft",
                "entity_name": "Assassin"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_occupation",
                    "class": "fictional_universe.character_occupation",
                    "friendly_name": "Character Occupation",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "g.11x1nz095",
                    "class": "book.book_character",
                    "friendly_name": "Silas",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0c8k7j",
                    "class": "comic_strips.comic_strip_character",
                    "friendly_name": "V",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "fictional_universe.fictional_character.occupation",
                    "friendly_name": "Occupation"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "fictional_universe.fictional_character.occupation",
                    "friendly_name": "Occupation"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_occupation . \nVALUES ?x1 { :g.11x1nz095 } \nVALUES ?x2 { :m.0c8k7j } \n?x1 :fictional_universe.fictional_character.occupation ?x0 . \n?x2 :fictional_universe.fictional_character.occupation ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "fictional_universe"
        ],
        "level": "compositional",
        "s_expression": "(AND fictional_universe.character_occupation (AND (JOIN (R fictional_universe.fictional_character.occupation) g.11x1nz095) (JOIN (R fictional_universe.fictional_character.occupation) m.0c8k7j)))"
    },
    {
        "qid": 3200500004000,
        "question": "sega smash pack game and version of sonic the hedgehog game was developed by which video game developer.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06p8m",
                "entity_name": "Sega"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04m0xfk",
                    "class": "cvg.game_version",
                    "friendly_name": "Sonic the Hedgehog",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kywnv6",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Sega Smash Pack",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.04m0xfk } \nVALUES ?x2 { :m.0kywnv6 } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.04m0xfk) (JOIN cvg.cvg_developer.games_developed m.0kywnv6)))"
    },
    {
        "qid": 2100859004000,
        "question": "what unit is used to measure magnetic flux density in international system of units measurement system?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rhvb",
                "entity_name": "Tesla"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.magnetic_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_density_unit (JOIN measurement_unit.magnetic_flux_density_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3204615001000,
        "question": "let the right one in was produced by what theater private company limited by shares?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0wflnf3",
                    "class": "theater.theater_production",
                    "friendly_name": "Let the Right One In",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0wflnf3 } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0wflnf3)))"
    },
    {
        "qid": 2102549006000,
        "question": "which game supports mc6800?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.1235qlbl",
                "entity_name": "null"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05325",
                    "class": "computer.computer_processor",
                    "friendly_name": "mc6800",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.05325 } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.05325))"
    },
    {
        "qid": 2105404006000,
        "question": "which film producer has the highest weight of 89.0kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d40",
                "entity_name": "Jackie Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018grr",
                "entity_name": "Will Ferrell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018p4y",
                "entity_name": "Pierce Brosnan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yrrh",
                "entity_name": "Earl Monroe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5ls",
                "entity_name": "Reggie Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0347db",
                "entity_name": "Neil Patrick Harris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.038rzr",
                "entity_name": "Gerard Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g4pf",
                "entity_name": "Vijay Amritraj"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m8_v",
                "entity_name": "Jean-Claude Van Damme"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074kpr",
                "entity_name": "Pete Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cd5l",
                "entity_name": "Eric Cantona"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5msj",
                "entity_name": "Eli Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0330dc",
                "entity_name": "Chyna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014zfs",
                "entity_name": "Bill Cosby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pj3h",
                "entity_name": "Tom Selleck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vw8mh",
                "entity_name": "Snoop Dogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0382m4",
                "entity_name": "Michael C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3q09",
                "entity_name": "Anthony Wall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpjxx",
                "entity_name": "Ray Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8f54",
                "entity_name": "Kenny Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbkcxg",
                "entity_name": "Nolan McDonald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjj7",
                "entity_name": "Dean Cain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_0qj",
                "entity_name": "Ellis Hobbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046gbn",
                "entity_name": "Bobby Valentine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080p9nh",
                "entity_name": "Adam White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_8dd",
                "entity_name": "Brad Gilbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c21k",
                "entity_name": "Francisco Garc\u00eda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037gjc",
                "entity_name": "Mark Harmon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg3z6",
                "entity_name": "Phil Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084w5b",
                "entity_name": "Randy Winn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07htfq",
                "entity_name": "Jeremy Borash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c4db1",
                "entity_name": "Don \"The Dragon\" Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h77qll",
                "entity_name": "Robert D Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qlff",
                "entity_name": "David Fariborz Davoodian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "89.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "89.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"89.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 89.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101690005000,
        "question": "in the international system of units, what is the unit for absorbed dose?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01q5dt",
                "entity_name": "Gray"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.absorbed_dose_unit",
                    "class": "measurement_unit.absorbed_dose_unit",
                    "friendly_name": "Unit of Absorbed Dose",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.absorbed_dose_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.absorbed_dose_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.absorbed_dose_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.absorbed_dose_unit (JOIN measurement_unit.absorbed_dose_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3204660003000,
        "question": "which astronaut is from the same ethnic group as winkler?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c05z",
                "entity_name": "Boris Volynov"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.astronaut",
                    "class": "spaceflight.astronaut",
                    "friendly_name": "Astronaut",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "people.ethnicity",
                    "class": "people.ethnicity",
                    "friendly_name": "Ethnicity",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.024jwt",
                    "class": "tv.tv_director",
                    "friendly_name": "winkler",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.astronaut . \n?x1 :type.object.type :people.ethnicity . \nVALUES ?x2 { :m.024jwt } \n?x0 :people.person.ethnicity ?x1 . \n?x2 :people.person.ethnicity ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.astronaut (JOIN people.person.ethnicity (JOIN (R people.person.ethnicity) m.024jwt)))"
    },
    {
        "qid": 3204471013000,
        "question": "what live album shares the album content type of beauty and the beast?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fkfkh",
                "entity_name": "Music as a Weapon II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fsyhl",
                "entity_name": "Freddie Mercury Tribute"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kggsy",
                "entity_name": "Selena Live 2010"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.live_album",
                    "class": "music.live_album",
                    "friendly_name": "Live Album",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "music.album_content_type",
                    "class": "music.album_content_type",
                    "friendly_name": "Album content type",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02q9sqs",
                    "class": "theater.musical_soundtrack",
                    "friendly_name": "Beauty and the Beast",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album.album_content_type",
                    "friendly_name": "Album content type"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "music.album.album_content_type",
                    "friendly_name": "Album content type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.live_album . \n?x1 :type.object.type :music.album_content_type . \nVALUES ?x2 { :m.02q9sqs } \n?x0 :music.album.album_content_type ?x1 . \n?x2 :music.album.album_content_type ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND music.live_album (JOIN music.album.album_content_type (JOIN (R music.album.album_content_type) m.02q9sqs)))"
    },
    {
        "qid": 2100592008000,
        "question": "what locomotive classes are a part of gwr prince class?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rc93",
                "entity_name": "2-2-2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04y54x",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "GWR Prince Class",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.04y54x } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.04y54x))"
    },
    {
        "qid": 2103327004000,
        "question": "what unit of resistivity is the smallest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters",
                    "friendly_name": "Resistivity in ohm meters"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_resistivity . \n?y0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.unit_of_resistivity measurement_unit.unit_of_resistivity.resistivity_in_ohm_meters)"
    },
    {
        "qid": 4302427001000,
        "question": "which ship builder built the ship with draft less than 7.5 and length 115.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m97n",
                "entity_name": "Vickers-Armstrongs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db2pf",
                "entity_name": "Scotts Shipbuilding and Engineering Company"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0558xg",
                "entity_name": "Fairfield Shipbuilding and Engineering Company"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ly1b",
                "entity_name": "Swan Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db297",
                "entity_name": "William Denny and Brothers"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07yg73",
                "entity_name": "Chantiers de l'Atlantique"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.11byb4h2c8",
                "entity_name": "null"
            }
        ],
        "function": "<",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship_builder",
                    "class": "boats.ship_builder",
                    "friendly_name": "Ship Builder",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "boats.ship",
                    "class": "boats.ship",
                    "friendly_name": "Ship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "115.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "115.0",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "7.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "7.5",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "boats.ship.ship_builder",
                    "friendly_name": "Ship builder"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "boats.ship.length_overall",
                    "friendly_name": "Length overall"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "boats.ship.draught",
                    "friendly_name": "Draught"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship_builder . \n?x1 :type.object.type :boats.ship . \nVALUES ?x2 { \"115.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \nFILTER (?x3 < \"7.5\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x1 :boats.ship.ship_builder ?x0 . \n?x1 :boats.ship.length_overall ?x2 . \n?x1 :boats.ship.draught ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "boats"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND boats.ship_builder (JOIN (R boats.ship.ship_builder) (AND (JOIN boats.ship.length_overall 115.0^^http://www.w3.org/2001/XMLSchema#float) (lt boats.ship.draught 7.5^^http://www.w3.org/2001/XMLSchema#float))))"
    },
    {
        "qid": 2103004008000,
        "question": "what class of ship has a maximum speed of 11.5?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c4xv",
                "entity_name": "Liberty ship"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "boats.ship_class",
                    "class": "boats.ship_class",
                    "friendly_name": "Ship class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "11.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "11.5",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "boats.ship_class.max_speed_knots",
                    "friendly_name": "Max speed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :boats.ship_class . \nVALUES ?x1 { \"11.5\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :boats.ship_class.max_speed_knots ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "boats"
        ],
        "level": "compositional",
        "s_expression": "(AND boats.ship_class (JOIN boats.ship_class.max_speed_knots 11.5^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100773010000,
        "question": "3.97 is the mass of which exoplanet?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f58pv",
                "entity_name": "Upsilon Andromedae b"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "base.exoplanetology.exoplanet",
                    "class": "base.exoplanetology.exoplanet",
                    "friendly_name": "Exoplanet",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "3.97^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "3.97",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "base.exoplanetology.exoplanet.mass_jupiter",
                    "friendly_name": "Mass (jupiter)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :base.exoplanetology.exoplanet . \nVALUES ?x1 { \"3.97\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :base.exoplanetology.exoplanet.mass_jupiter ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "base.exoplanetology"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND base.exoplanetology.exoplanet (JOIN base.exoplanetology.exoplanet.mass_jupiter 3.97^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103925003000,
        "question": "what theatrical composer is heavier than 52.0 kilograms?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f9x9",
                "entity_name": "Fats Waller"
            }
        ],
        "function": ">",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theatrical_composer",
                    "class": "theater.theatrical_composer",
                    "friendly_name": "Theatrical Composer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "52.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "52.0",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theatrical_composer . \nFILTER (?x1 > \"52.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theatrical_composer (gt people.person.weight_kg 52.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104930004000,
        "question": "what class of locomotive was the first ever introduced?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mwcr2",
                "entity_name": "LDE \u2013 Pegasus"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.locomotive_class",
                    "class": "rail.locomotive_class",
                    "friendly_name": "Locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.locomotive_class.introduced",
                    "friendly_name": "Introduced"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.locomotive_class . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :rail.locomotive_class . \n?y0 :rail.locomotive_class.introduced ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :rail.locomotive_class.introduced ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN rail.locomotive_class rail.locomotive_class.introduced)"
    },
    {
        "qid": 2100371004000,
        "question": "which unit of resistivity is under the international system of units measurement system?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt5j",
                "entity_name": "Ohm centimeter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075rt4_",
                "entity_name": "Ohm meter"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_resistivity",
                    "class": "measurement_unit.unit_of_resistivity",
                    "friendly_name": "Unit of Resistivity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_resistivity.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_resistivity . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.unit_of_resistivity.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_resistivity (JOIN measurement_unit.unit_of_resistivity.measurement_system m.0c13h))"
    },
    {
        "qid": 2104324001000,
        "question": "what unit of temperature in kelvins has the smallest zero point?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.047f7",
                "entity_name": "Kelvin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06j0f",
                "entity_name": "Degree Rankine"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.temperature_unit",
                    "class": "measurement_unit.temperature_unit",
                    "friendly_name": "Unit of Temperature",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.temperature_unit.kelvins_offset",
                    "friendly_name": "Zero point in kelvins"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.temperature_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.temperature_unit . \n?y0 :measurement_unit.temperature_unit.kelvins_offset ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.temperature_unit.kelvins_offset ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.temperature_unit measurement_unit.temperature_unit.kelvins_offset)"
    },
    {
        "qid": 3202531006000,
        "question": "what tv subject is associated with a tv program whose filming locations include canada?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l13q",
                "entity_name": "Alien invasion"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_subject",
                    "class": "tv.tv_subject",
                    "friendly_name": "TV subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "tv.tv_program",
                    "class": "tv.tv_program",
                    "friendly_name": "TV Program",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0h7h6",
                    "class": "tv.tv_location",
                    "friendly_name": "canada",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "tv.tv_subject.tv_programs",
                    "friendly_name": "TV programs"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "tv.tv_program.filming_locations",
                    "friendly_name": "Filming locations"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_subject . \n?x1 :type.object.type :tv.tv_program . \nVALUES ?x2 { :m.0h7h6 } \n?x0 :tv.tv_subject.tv_programs ?x1 . \n?x1 :tv.tv_program.filming_locations ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "tv"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND tv.tv_subject (JOIN tv.tv_subject.tv_programs (JOIN tv.tv_program.filming_locations m.0h7h6)))"
    },
    {
        "qid": 2100256003000,
        "question": "what is the unit of molar energy in international system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.1q6j429zy",
                "entity_name": "Kilojoule per mole"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jdpc",
                "entity_name": "Joule per mole"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_energy_unit",
                    "class": "measurement_unit.molar_energy_unit",
                    "friendly_name": "Unit of Molar Energy",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_energy_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_energy_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_energy_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_energy_unit (JOIN measurement_unit.molar_energy_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 2100592018000,
        "question": "british rail class 04 belongs to which locomotive class?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026t5t",
                "entity_name": "0-6-0"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02rh__",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "British Rail Class 04",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.02rh__ } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.02rh__))"
    },
    {
        "qid": 3202811006000,
        "question": "what video game designer designed video game which is part of the journeyman project?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.11byb3sclx",
                "entity_name": "null"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_designer",
                    "class": "cvg.cvg_designer",
                    "friendly_name": "Video Game Designer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0398zj",
                    "class": "cvg.game_series",
                    "friendly_name": "The Journeyman Project",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "cvg.computer_videogame.designers",
                    "friendly_name": "Designers"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.computer_videogame.game_series",
                    "friendly_name": "Part of game series"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_designer . \n?x1 :type.object.type :cvg.computer_videogame . \nVALUES ?x2 { :m.0398zj } \n?x1 :cvg.computer_videogame.designers ?x0 . \n?x1 :cvg.computer_videogame.game_series ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_designer (JOIN (R cvg.computer_videogame.designers) (JOIN cvg.computer_videogame.game_series m.0398zj)))"
    },
    {
        "qid": 2100867011000,
        "question": "what radio program made it's broadcasting debut with the first episode on 1943-05-25?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y88p7d",
                "entity_name": "Sorry, Wrong Number"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1943-05-25^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "1943-05-25",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"1943-05-25-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 1943-05-25^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 4301069004000,
        "question": "after apr. the 2nd, 2009, which song was added to rb.?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ln7j8",
                "entity_name": "Last Resort"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075pws_",
                "entity_name": "All The Things That Go To Make Heaven And Earth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xb8f5",
                "entity_name": "Cowboy Song (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2wr",
                "entity_name": "The Righteous & The Wicked"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mggqj",
                "entity_name": "Rude Mood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hx6b",
                "entity_name": "Synchronicity II"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027lx7m",
                "entity_name": "Aesthetics of Hate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n96xb",
                "entity_name": "Rebel Girl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r14hc",
                "entity_name": "3's & 7's"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027943m",
                "entity_name": "Dead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q85gd",
                "entity_name": "Pump It Up"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x4kw6",
                "entity_name": "The Hellion / Electric Eye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074fzm",
                "entity_name": "One Way or Another"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yp9ft",
                "entity_name": "Times Like This"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015sdzg",
                "entity_name": "Critical Acclaim"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fgfj6q",
                "entity_name": "Hanging on the Telephone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06ptt9",
                "entity_name": "Give It Away"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7ck2",
                "entity_name": "Moneytalks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z9bvc",
                "entity_name": "Jailbreak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.085g50",
                "entity_name": "Behind Blue Eyes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0263041",
                "entity_name": "Excuse Me Mr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_1046",
                "entity_name": "Just a Girl (106 BPM Pop Rock)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0chxm9",
                "entity_name": "It Hurts"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01dw53l",
                "entity_name": "Typical"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ns3_q",
                "entity_name": "That's What You Get"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042b_g",
                "entity_name": "Battery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09d_xs",
                "entity_name": "American Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lwvtj",
                "entity_name": "Eminence Front"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07b9771",
                "entity_name": "Rescue Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n5hd",
                "entity_name": "All the Small Things"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02760qj",
                "entity_name": "Can't Stand Losing You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7crn",
                "entity_name": "Dirty Deeds Done Dirt Cheap"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyk4t",
                "entity_name": "Christmas Is the Time to Say \"I Love You\""
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075vqmj",
                "entity_name": "Ashes to Fire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h0h7h",
                "entity_name": "Brass in Pocket"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0187z4j",
                "entity_name": "Red Tandy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029qvg",
                "entity_name": "You Oughta Know"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0thtjy",
                "entity_name": "Here Comes Your Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.019skz4",
                "entity_name": "Creepin Up the Backstairs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2vw",
                "entity_name": "Funky Monks"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075sgkx",
                "entity_name": "A Clean Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mbg18",
                "entity_name": "Closer to the Heart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0744vt",
                "entity_name": "All I Want"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0959hf",
                "entity_name": "Bad to the Bone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hkyk6",
                "entity_name": "Casey Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0_2x",
                "entity_name": "Last Child"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rkhx0",
                "entity_name": "Under the Bridge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ymlhh",
                "entity_name": "Gouge Away"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y_w3j",
                "entity_name": "Baba O\u2019Riley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0t89rm",
                "entity_name": "Cold Rain & Snow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d6tn5",
                "entity_name": "Our Truth"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05s03q",
                "entity_name": "B.Y.O.B."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bb4dch",
                "entity_name": "Blackened"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075x_37",
                "entity_name": "Down At The Whiskey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f34k7",
                "entity_name": "My Curse"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpdrq",
                "entity_name": "Believe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xt2sn",
                "entity_name": "Good Mourning / Black Friday (Randy Burns mix)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ypd1",
                "entity_name": "Aqualung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m45n1",
                "entity_name": "Mr. Grieves"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010prmm",
                "entity_name": "Feed the Tree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016nyzq",
                "entity_name": "Hands Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gy913",
                "entity_name": "Hit Me with Your Best Shot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mm44w",
                "entity_name": "Take the Money and Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05sdt1",
                "entity_name": "Tom Sawyer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0268rzk",
                "entity_name": "Happenin' All Over Again"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011cnl5",
                "entity_name": "Rattlesnake Shake"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01twcs",
                "entity_name": "Anarchy in the U.K."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04jgddn",
                "entity_name": "Bad Reputation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2xv",
                "entity_name": "Apache Rose Peacock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r41vt",
                "entity_name": "Bloodstone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012gppv",
                "entity_name": "Panic Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0775x99",
                "entity_name": "Runnin' Wild"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n991w",
                "entity_name": "Stay Away"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rwyy2",
                "entity_name": "My Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p8qnt",
                "entity_name": "Something About You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9mf",
                "entity_name": "She Goes Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1r77",
                "entity_name": "Pain and Pleasure"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02801mt",
                "entity_name": "Get Up (I Feel Like Being a) Sex Machine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fckq_",
                "entity_name": "Heartbreaker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06z8wm",
                "entity_name": "Debaser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w66t",
                "entity_name": "Caprici di Diablo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015r_nb",
                "entity_name": "Just What I Need"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pg2r5",
                "entity_name": "Sin Wagon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b576x",
                "entity_name": "Ex-Girlfriend"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07jy_9",
                "entity_name": "Mr. Brightside"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xt2rb",
                "entity_name": "Bad Omen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2xm",
                "entity_name": "Naked in the Rain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l1bwm",
                "entity_name": "Carry On Wayward Son"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhz0d",
                "entity_name": "Through Being Cool"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08p9hj",
                "entity_name": "Dammit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z9bt1",
                "entity_name": "Shoot To Thrill"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02q7dwz",
                "entity_name": "PDA"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nfxb3",
                "entity_name": "Cheeseburger in Paradise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05f9lb5",
                "entity_name": "Master Exploder!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n95sq",
                "entity_name": "New Kid in School"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w639",
                "entity_name": "Don't Tell Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p053c",
                "entity_name": "Girl U Want"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn4z",
                "entity_name": "See You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g68d0",
                "entity_name": "Shooting Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01drs3m",
                "entity_name": "Attack"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zymps",
                "entity_name": "Burn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d98sw",
                "entity_name": "Henrietta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0797njz",
                "entity_name": "Prequel to the Sequel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075x_6w",
                "entity_name": "The Greatest Man that Ever Lived"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l1bwv",
                "entity_name": "You're All I've Got Tonight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013xqjm",
                "entity_name": "Don't Ease Me In"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02nt_tg",
                "entity_name": "Capital G"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06hb7x",
                "entity_name": "Call Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qn5_r",
                "entity_name": "Hitch a Ride"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w_ww",
                "entity_name": "Chiron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0838c_",
                "entity_name": "Hey Baby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l1f7f",
                "entity_name": "Zero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qs554",
                "entity_name": "The Way That It Shows"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05nbm2t",
                "entity_name": "Souls of Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y5fxf",
                "entity_name": "Feel the Pain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n95yj",
                "entity_name": "Night Lies"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01g127",
                "entity_name": "Jumpin' Jack Flash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vwk17",
                "entity_name": "(New Wave) Polly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0464_68",
                "entity_name": "Perfect Insanity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0md1n_",
                "entity_name": "Deep"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0797h32",
                "entity_name": "Real World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m7btl",
                "entity_name": "Dune Buggy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d_j9k",
                "entity_name": "Time Is Running Out"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xkph",
                "entity_name": "Hotel California"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.054qd9",
                "entity_name": "Love Spreads"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crcbz",
                "entity_name": "Round and Round"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b7v8x",
                "entity_name": "Action"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pqmdt",
                "entity_name": "Hong Kong Garden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010cpmv",
                "entity_name": "Same Ol' Situation (S.O.S.)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7crf",
                "entity_name": "Hells Bells"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026mlj3",
                "entity_name": "Are You Gonna Go My Way"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9mn",
                "entity_name": "Don't Go Anyway Mad (Just Go Away)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0psk40",
                "entity_name": "Lounge Act"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cbrdm",
                "entity_name": "Melatonin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0s6plq",
                "entity_name": "My Poor Brain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.090kp1",
                "entity_name": "\"Heroes\""
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dm7wh",
                "entity_name": "Blood Sugar Sex Magik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n399w",
                "entity_name": "Leaving Here"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tkg59",
                "entity_name": "I'm in Touch With Your World"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2wj",
                "entity_name": "Mellowship Slinky in B Major"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lllkt",
                "entity_name": "Interstate Love Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldkcv",
                "entity_name": "We Care a Lot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qm9vy",
                "entity_name": "Underneath It All"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012j09r",
                "entity_name": "Toxicity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sjzz",
                "entity_name": "The Trees"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lfk2f",
                "entity_name": "Fortunate Son"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pgcpr",
                "entity_name": "Mountain Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9kx",
                "entity_name": "Dr. Feelgood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0667ys",
                "entity_name": "Man in the Box"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n38w",
                "entity_name": "Lump"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qp4q",
                "entity_name": "Good Times"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0167_85",
                "entity_name": "E-Pro"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bt7cf",
                "entity_name": "Psycho Killer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lmhk9",
                "entity_name": "Smokin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d90k",
                "entity_name": "Rio"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lwvmm",
                "entity_name": "Sea and Sand"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r6nlx",
                "entity_name": "D.O.A."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07tk58",
                "entity_name": "My Immortal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vq7_2",
                "entity_name": "Well Thought Out Twinkles"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xb8fd",
                "entity_name": "The Boys Are Back in Town (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013bjld",
                "entity_name": "My Best Friend's Girl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03w5tq",
                "entity_name": "You Really Got Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n97v0",
                "entity_name": "Welcome to the Neighborhood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7bhm",
                "entity_name": "Hell Ain't a Bad Place to Be (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lmyy7",
                "entity_name": "Moving in Stereo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rwyx6",
                "entity_name": "Hey, Johnny Park!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n976x",
                "entity_name": "Shoulder to the Plow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y5g70",
                "entity_name": "Claudette"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014w88w",
                "entity_name": "Cream and Bastards Rise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075wsgz",
                "entity_name": "Don't Make Me Wait"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lz4m1",
                "entity_name": "Jeremy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rrj0t",
                "entity_name": "So What'cha Want"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y7tgc",
                "entity_name": "More Human Than Human"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05v597b",
                "entity_name": "Red Lottery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q43m_",
                "entity_name": "Juke Box Hero"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0y4b",
                "entity_name": "Famous Last Words"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0md1p6",
                "entity_name": "Release"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f1m",
                "entity_name": "Don't Speak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z56_k",
                "entity_name": "Almost Easy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nb__p",
                "entity_name": "Bye Bye Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d98md",
                "entity_name": "Flathead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n97dx",
                "entity_name": "Supreme Girl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.068vy3",
                "entity_name": "Teen Age Riot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n97rl",
                "entity_name": "Uncontrollable Urge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n97s9",
                "entity_name": "Visions"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kcbd1",
                "entity_name": "Bodhisattva"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.033c1m",
                "entity_name": "Chop Suey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.051qmx",
                "entity_name": "Eye of the Tiger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09c6kb",
                "entity_name": "Livin' on a Prayer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b91p6",
                "entity_name": "Hungry Like the Wolf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09zv67",
                "entity_name": "Ramblin' Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09gglj",
                "entity_name": "Go Your Own Way"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09h0sf",
                "entity_name": "White Wedding"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027hn5t",
                "entity_name": "We Got the Beat"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07vbys",
                "entity_name": "The Middle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cvfc2",
                "entity_name": "Testify"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04mtsz",
                "entity_name": "Tangled Up in Blue"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qngt",
                "entity_name": "Spirit in the Sky"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04263m",
                "entity_name": "Spoonman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098bqv",
                "entity_name": "Any Way You Want It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.098mbt",
                "entity_name": "Down with the Sickness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0715g7",
                "entity_name": "Everlong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01y4j_",
                "entity_name": "Girl's Not Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x8f",
                "entity_name": "I Was Wrong"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d56ws",
                "entity_name": "Let There Be Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.078mcc",
                "entity_name": "One Step Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02p19vl",
                "entity_name": "Peace Sells"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06cl3l",
                "entity_name": "Pinball Wizard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g1_bf",
                "entity_name": "Shackler's Revenge"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2m_k",
                "entity_name": "Where'd You Go?"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n92hz",
                "entity_name": "A Jagged Gorgeous Winter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n92qn",
                "entity_name": "Alabama Getaway"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05t08db",
                "entity_name": "Alex Chilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05qnjk",
                "entity_name": "Alive"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n94tf",
                "entity_name": "Conventional Lover"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9584",
                "entity_name": "Hello There"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073vsy",
                "entity_name": "Cool for Cats"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n94y7",
                "entity_name": "De-Luxe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n0cfd",
                "entity_name": "Get Clean"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025tmps",
                "entity_name": "Kids in America"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03gqjn2",
                "entity_name": "Nine in the Afternoon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047cjyt",
                "entity_name": "Pretend We're Dead"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017p595",
                "entity_name": "All Right Now"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mgh_6",
                "entity_name": "(Take These) Chains"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g27kd",
                "entity_name": "...And Justice for All"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hfzxj",
                "entity_name": "Afterlife"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lmyyg",
                "entity_name": "All Mixed Up"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.064r7sp",
                "entity_name": "Amazing Journey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z8jl2",
                "entity_name": "Bandages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dv24b",
                "entity_name": "Get It On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018pjvt",
                "entity_name": "Are You Dead Yet?"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ddpqs",
                "entity_name": "Back in Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qxwl",
                "entity_name": "Beetlebum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06kg91",
                "entity_name": "Black"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c7xw8",
                "entity_name": "Black Sunshine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lccwf",
                "entity_name": "Blinded By Fear"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0132r1g",
                "entity_name": "Breaking the Girl"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0psk2y",
                "entity_name": "Breed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05fh61",
                "entity_name": "Buddy Holly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx_n76",
                "entity_name": "C'Mon C'Mon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h61r1",
                "entity_name": "Calling Dr. Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_l0k",
                "entity_name": "Can't Let Go"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pfv52",
                "entity_name": "Cherry Bomb"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02r0fml",
                "entity_name": "China Cat Sunflower"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l0x_6",
                "entity_name": "Closer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gfhj0",
                "entity_name": "Do Ya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d027v",
                "entity_name": "Colony of Birchmen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012rkd5",
                "entity_name": "Come Out and Play"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.092h3b",
                "entity_name": "Complete Control"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0s6jrv",
                "entity_name": "Brother"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01271gr",
                "entity_name": "Constant Motion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n7v68",
                "entity_name": "Countdown to Insanity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025v45y",
                "entity_name": "Crackity Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_6r0w",
                "entity_name": "Database Corrupted"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qhm11",
                "entity_name": "Date With the Night"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0llym2",
                "entity_name": "Devil's Child"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mlc2y",
                "entity_name": "Devil\u2019s Island"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dl0qt",
                "entity_name": "Die, All Right!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09rs__",
                "entity_name": "Dirty Little Secret"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lqmd9",
                "entity_name": "Dirty Pool"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nzbfm",
                "entity_name": "Doin' That Rag"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn3f",
                "entity_name": "Doll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m665r",
                "entity_name": "Don't Cha Stop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n64g",
                "entity_name": "Don't Look Back in Anger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lftjc",
                "entity_name": "El Scorcho"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn55",
                "entity_name": "Enough Space"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.087bht",
                "entity_name": "Even Flow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn5d",
                "entity_name": "February Stars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06lf26",
                "entity_name": "Octopus's Garden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yc77y",
                "entity_name": "Girls On Film"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rm4mp",
                "entity_name": "Goin' Mobile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l19r9",
                "entity_name": "Monkey Gone to Heaven"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013srq3",
                "entity_name": "Gone Away"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075sgfg",
                "entity_name": "3 Dimes Down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075vqph",
                "entity_name": "Blue Christmas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075vpyp",
                "entity_name": "Body I Occupy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075smfb",
                "entity_name": "Bounce"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w633",
                "entity_name": "Break My Heart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075smp4",
                "entity_name": "Bullets and Guns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w65l",
                "entity_name": "Burn you down"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w695",
                "entity_name": "Charlene (I'm Right Behind You)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075w610",
                "entity_name": "Crazy Tuesday"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03b_hdy",
                "entity_name": "crushcrushcrush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075wscz",
                "entity_name": "Damnation Game"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075wsg5",
                "entity_name": "Desperate Times, Desperate Measures"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075wsgf",
                "entity_name": "Devour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01386nd",
                "entity_name": "DOA"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lyz37",
                "entity_name": "Don't Stop Believin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m1d6v",
                "entity_name": "Ever Fallen In Love (With Someone You Shouldn\u2019t\u2019ve)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01072fy",
                "entity_name": "Feather Pluckn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z9bv4",
                "entity_name": "Fire Your Guns"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xffn6",
                "entity_name": "Float On"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q_3ys",
                "entity_name": "Franklin's Tower"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f4h60",
                "entity_name": "Free and Easy (Down the Road I Go)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf158",
                "entity_name": "Freedom Train"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q6nfv",
                "entity_name": "Funk #49"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010x7g2",
                "entity_name": "Gimme Three Steps"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vy75_",
                "entity_name": "Girls Who Play Guitars"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011vm79",
                "entity_name": "Give It All"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c7j7h",
                "entity_name": "Good Times Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z5345",
                "entity_name": "Hanukkah Blessings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7cqs",
                "entity_name": "Heatseeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013cz4q",
                "entity_name": "Hell in a Bucket"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lx4bp",
                "entity_name": "Hella Good"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgqjl",
                "entity_name": "Hey You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vc5dm",
                "entity_name": "Hier kommt Alex"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7cy_",
                "entity_name": "High Voltage"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xx86t",
                "entity_name": "Highway to Hell (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bhc9h3",
                "entity_name": "Hillbilly Deluxe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qccf",
                "entity_name": "Holiday in Cambodia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pc8cz",
                "entity_name": "Hymn 43"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z44v0",
                "entity_name": "I Bleed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2w9",
                "entity_name": "I Could Have Lied"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_9tk5",
                "entity_name": "I Fought the Law"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lldjn",
                "entity_name": "I Need A Miracle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pps5z",
                "entity_name": "I Stand Alone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mggr5",
                "entity_name": "I'm Cryin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lnt9g",
                "entity_name": "In Dreams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rcmvf",
                "entity_name": "Jesus Christ Pose"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pq819",
                "entity_name": "Joker & the Thief"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0sw_qx",
                "entity_name": "Kiss Them for Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9lk",
                "entity_name": "Kickstart My Heart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldf4n",
                "entity_name": "Kool Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z3hbq",
                "entity_name": "Laid to Rest"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0177d9m",
                "entity_name": "La La Love You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kdx3",
                "entity_name": "Paperback Writer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bm4cg",
                "entity_name": "Lazy Eye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mggrd",
                "entity_name": "Lenny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf151",
                "entity_name": "Let Love Rule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7bk4",
                "entity_name": "Let There Be Rock"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m7gf9",
                "entity_name": "Fire on the Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04csrvd",
                "entity_name": "Hard to Handle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nszvz",
                "entity_name": "Hay poco Rock & Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r8q6w",
                "entity_name": "Hysteria"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0xt2rk",
                "entity_name": "I Ain\u2019t Superstitious"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r_5k3",
                "entity_name": "If You Have To Ask (Radio Edit)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03qjr_3",
                "entity_name": "Inside the Fire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075xd0_",
                "entity_name": "It's My Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w9_7g",
                "entity_name": "Limelight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010p6mc",
                "entity_name": "Little Sister"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lncs_",
                "entity_name": "Live Forever"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rz2ks",
                "entity_name": "Losing My Religion"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lpnsj",
                "entity_name": "Love Struck Baby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pm4dj",
                "entity_name": "Lucky Denver Mint"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0v0qms",
                "entity_name": "Manu Chao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y6lj4",
                "entity_name": "March of the Pigs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lvy19",
                "entity_name": "Margaritaville"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lqg3f",
                "entity_name": "Mary Had a Little Lamb"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0110_06",
                "entity_name": "Mean Woman Blues"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c5mq1",
                "entity_name": "Message in a Bottle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01b3q18",
                "entity_name": "Mica"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07147m",
                "entity_name": "Monkey Wrench"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02vq9wl",
                "entity_name": "Monsoon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0np8sh",
                "entity_name": "Moonage Daydream"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048cbj",
                "entity_name": "More Than a Feeling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0142135",
                "entity_name": "Move Along"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0r1p0l",
                "entity_name": "Mud on the Tyres"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m_bxd",
                "entity_name": "My Generation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0t2003",
                "entity_name": "My Iron Lung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_pyg",
                "entity_name": "My Own Worst Enemy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lfg_q",
                "entity_name": "N.I.B."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lfpdg",
                "entity_name": "Nearly Lost You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026q2v5",
                "entity_name": "New"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ngh1y",
                "entity_name": "New Wave"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn61",
                "entity_name": "New Way Home"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011d41t7",
                "entity_name": "Mambo No. 5"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q7hy6",
                "entity_name": "Oceans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ws8f6",
                "entity_name": "Oh Pretty Woman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lgcq1",
                "entity_name": "On a Plain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0md1m0",
                "entity_name": "Once"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4kxh",
                "entity_name": "Ooby Dooby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ln16x",
                "entity_name": "Pain Killer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dzqwn_",
                "entity_name": "Dreamin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01drs3v",
                "entity_name": "A Beautiful Lie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7csj",
                "entity_name": "T.N.T."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7cpx",
                "entity_name": "Thunderstruck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wtcww",
                "entity_name": "Whole Lotta Rosie (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01f7cs2",
                "entity_name": "You Shook Me All Night Long"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03wp0bk",
                "entity_name": "Stop"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011kfcf",
                "entity_name": "Shining Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c0_g9",
                "entity_name": "This Calling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015bxpr",
                "entity_name": "Pick Up The Pieces"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m3l4v",
                "entity_name": "Sorrow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bmk_n",
                "entity_name": "Sweet Leaf"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nlw9g",
                "entity_name": "Peace of Mind"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ql41",
                "entity_name": "I Love Rock 'n' Roll"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014jj63",
                "entity_name": "Ten Speed (of God's Blood & Burial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lrmlr",
                "entity_name": "Space Truckin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04y375",
                "entity_name": "Police Truck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0rv03c",
                "entity_name": "Super-Spr\u00f8de"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04hh2h",
                "entity_name": "Can't Buy Me Love"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026lncs",
                "entity_name": "This Ain't a Scene, It's an Arms Race"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0s6pm4",
                "entity_name": "Up in Arms"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lhn49",
                "entity_name": "Wind Up"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ldd1f",
                "entity_name": "Uncle John's Band"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01df8z6",
                "entity_name": "Tutto \u00e8 possibile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04f43fp",
                "entity_name": "Use Me"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09jnm5",
                "entity_name": "All the Young Dudes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075zcnv",
                "entity_name": "Still Alive"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lygt3",
                "entity_name": "Volcano"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p36_t",
                "entity_name": "Sweetness"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.013bshm",
                "entity_name": "Skullcrusher Mountain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vtnkk",
                "entity_name": "Screaming for Vengeance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dxcmt",
                "entity_name": "You've Got Another Thing Comin'"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d2t4h",
                "entity_name": "Perfekte Welle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm5h7",
                "entity_name": "Shoot the Runner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fzbyj",
                "entity_name": "Every Little Thing She Does Is Magic"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cwb0d",
                "entity_name": "Ride the Lightning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_k62v",
                "entity_name": "(That's When I Reach for My) Revolver"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c98v2",
                "entity_name": "Saints of Los Angeles"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9m6",
                "entity_name": "Sticky Sweet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9mw",
                "entity_name": "Time for Change"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.010v81m",
                "entity_name": "The Collector"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qbjgv",
                "entity_name": "Cat Scratch Fever"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011cnlm",
                "entity_name": "Without You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yf_8b",
                "entity_name": "Simple Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dxm362",
                "entity_name": "That's How I Escaped My Certain Fate"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122y5frt",
                "entity_name": "Wonderwall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m79qt",
                "entity_name": "The Perfect Drug"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0psk4p",
                "entity_name": "Something in the Way"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0psk3l",
                "entity_name": "Territorial Pissings"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yr5nb",
                "entity_name": "Running"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yr5ns",
                "entity_name": "Simple Kind of Life"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025sd6q",
                "entity_name": "Sunday Morning"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q7hyf",
                "entity_name": "Porch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0md1mp",
                "entity_name": "Why Go"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0797kwd",
                "entity_name": "No Regrets"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0797q51",
                "entity_name": "Shockwave"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9251",
                "entity_name": "Rockaway Beach"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012rkfq",
                "entity_name": "The Kids Aren't Alright"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf9nr",
                "entity_name": "Pride and Joy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014rnzb",
                "entity_name": "Texas Flood"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.016by9r",
                "entity_name": "Wasted Again"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mf8g5",
                "entity_name": "Precious"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m4vrk",
                "entity_name": "Space Cowboy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0djhxs",
                "entity_name": "The Joker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n4wv",
                "entity_name": "Dancing in the Street"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nbl5t",
                "entity_name": "You Got It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tvq4f",
                "entity_name": "Tempted"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lzmn9",
                "entity_name": "The Camera Eye"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0w7ll5",
                "entity_name": "Pretty Noose"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03s04r",
                "entity_name": "Misirlou"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y__8j",
                "entity_name": "Smile Like You Mean It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.019xs5r",
                "entity_name": "Pretty In Pink"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tqshc",
                "entity_name": "The Killing Jar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mp4sr",
                "entity_name": "Push It"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2yh",
                "entity_name": "Sir Psycho Sexy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06slcm",
                "entity_name": "Suck My Kiss"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2y1",
                "entity_name": "The Greeting Song"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2v6",
                "entity_name": "The Power of Equality"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lf2yq",
                "entity_name": "They're Red Hot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mw1t9",
                "entity_name": "Red Barchetta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lgnl6",
                "entity_name": "(She Sells) Sanctuary"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lzmnr",
                "entity_name": "Vital Signs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lzmnj",
                "entity_name": "Witch Hunt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0_nkv3",
                "entity_name": "You're No Rock 'n' Roll Fun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08n14j",
                "entity_name": "YYZ"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.019v1d1",
                "entity_name": "Real Good Looking Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04cvv5",
                "entity_name": "Summertime Blues"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0z9r2c",
                "entity_name": "Who Are You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tsx30",
                "entity_name": "Young Man Blues"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bch8q",
                "entity_name": "Snow (Hey Oh)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01d0vs8",
                "entity_name": "Tell Me Baby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ly6xp",
                "entity_name": "Working Man"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0lrx58",
                "entity_name": "Truth Hits Everybody"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04rpmd",
                "entity_name": "Paranoid"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vgp44",
                "entity_name": "Train in Vain (Stand by Me)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026p0xj",
                "entity_name": "Roam"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.048cw1",
                "entity_name": "Roxanne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g75kfj",
                "entity_name": "Siva"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cj6hh",
                "entity_name": "Song With A Mission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04l9g7",
                "entity_name": "Come Out and Play"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0q0bk1",
                "entity_name": "Rock 'n' Roll Star"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.071df7",
                "entity_name": "Learn to Fly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g4_t8",
                "entity_name": "Bathwater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yy9qj",
                "entity_name": "Slice of Your Pie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017tb7f",
                "entity_name": "For Those About to Rock (We Salute You) (live)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025t7rk",
                "entity_name": "Sex Type Thing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0myfjs",
                "entity_name": "Mr. Cab Driver"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ljr08",
                "entity_name": "Sugar Magnolia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0176yvr",
                "entity_name": "Futures"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05n9701",
                "entity_name": "Rob the Prez-O-Dent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04htkv",
                "entity_name": "Drain You"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0vrvxd",
                "entity_name": "Electric Crown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.075vptj",
                "entity_name": "Beethoven's Cunt"
            }
        ],
        "function": "<=",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.musical_game_song",
                    "class": "cvg.musical_game_song",
                    "friendly_name": "Musical Game Song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game_song_relationship",
                    "class": "cvg.musical_game_song_relationship",
                    "friendly_name": "Musical game/song relationship",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kbkd1",
                    "class": "cvg.musical_game",
                    "friendly_name": "rb.",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "2009-04-02^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "Apr. the 2nd, 2009",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.musical_game_song.games",
                    "friendly_name": "Games"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "cvg.musical_game_song_relationship.game",
                    "friendly_name": "Game"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "cvg.musical_game_song_relationship.release_date",
                    "friendly_name": "Release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.musical_game_song . \n?x1 :type.object.type :cvg.musical_game_song_relationship . \nVALUES ?x2 { :m.04kbkd1 } \nFILTER (?x3 <= \"2009-04-02-08:00\"^^<http://www.w3.org/2001/XMLSchema#date>)\n?x0 :cvg.musical_game_song.games ?x1 . \n?x1 :cvg.musical_game_song_relationship.game ?x2 . \n?x1 :cvg.musical_game_song_relationship.release_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.musical_game_song (JOIN cvg.musical_game_song.games (AND (JOIN cvg.musical_game_song_relationship.game m.04kbkd1) (le cvg.musical_game_song_relationship.release_date 2009-04-02^^http://www.w3.org/2001/XMLSchema#date))))"
    },
    {
        "qid": 2100979002000,
        "question": "what measures 1.0 in teus?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x_ct_",
                "entity_name": "Twenty-foot equivalent unit"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_cargo_capacity",
                    "class": "measurement_unit.unit_of_cargo_capacity",
                    "friendly_name": "Unit of Cargo Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_cargo_capacity.capacity_in_teus",
                    "friendly_name": "Capacity in TEUs"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_cargo_capacity . \nVALUES ?x1 { \"1.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.unit_of_cargo_capacity.capacity_in_teus ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_cargo_capacity (JOIN measurement_unit.unit_of_cargo_capacity.capacity_in_teus 1.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4300898001000,
        "question": "what is the core text of protestantism and honored by evensong practitioners?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.015j7",
                "entity_name": "The Bible"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05crg",
                "entity_name": "New Testament"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05ld9",
                "entity_name": "Old Testament"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05sfs",
                    "class": "religion.religion",
                    "friendly_name": "Protestantism",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.04xcw5",
                    "class": "religion.religious_practice",
                    "friendly_name": "evensong",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.05sfs } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.04xcw5 } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.05sfs) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.04xcw5))))"
    },
    {
        "qid": 2101237010000,
        "question": "which video game is released in 2007-01-19?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04hhrjc",
                "entity_name": "Kono Aozora ni Yakusoku wo"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2007-01-19^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "2007-01-19",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { \"2007-01-19-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.release_date 2007-01-19^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2102568003000,
        "question": "what is the unit of length in astronomical units of length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0db_d",
                "entity_name": "Kilometer"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012q8k",
                "entity_name": "Earth radius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wpm_",
                "entity_name": "Light-year"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03yvsyr",
                "entity_name": "Jupiter radius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03m_vg",
                "entity_name": "Lunar distance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05td3",
                "entity_name": "Parsec"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02lwfn",
                "entity_name": "Solar radius"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n0_",
                "entity_name": "Astronomical unit"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.distance_unit",
                    "class": "measurement_unit.distance_unit",
                    "friendly_name": "Unit of Length",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02djp9",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Astronomical units of length",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.distance_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.distance_unit . \nVALUES ?x1 { :m.02djp9 } \n?x0 :measurement_unit.distance_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.distance_unit (JOIN measurement_unit.distance_unit.measurement_system m.02djp9))"
    },
    {
        "qid": 2101534000000,
        "question": "what rocket engines can thrust 1.1025e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlw7j",
                "entity_name": "RD-124"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.1025e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.1025e+06",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"1.1025e+06\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 1.1025e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3201311015000,
        "question": "the person who founded the vigiles also founded what government agency?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c1fm",
                "entity_name": "Praetorian Guard"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.government_agency",
                    "class": "government.government_agency",
                    "friendly_name": "Government Agency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "organization.organization_founder",
                    "class": "organization.organization_founder",
                    "friendly_name": "Organization founder",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04csxz",
                    "class": "military.armed_force",
                    "friendly_name": "Vigiles",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_agency . \n?x1 :type.object.type :organization.organization_founder . \nVALUES ?x2 { :m.04csxz } \n?x0 :organization.organization.founders ?x1 . \n?x2 :organization.organization.founders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND government.government_agency (JOIN organization.organization.founders (JOIN (R organization.organization.founders) m.04csxz)))"
    },
    {
        "qid": 3204660009000,
        "question": "michael gordon has the same ethnicity as which astronaut?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01c05z",
                "entity_name": "Boris Volynov"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.astronaut",
                    "class": "spaceflight.astronaut",
                    "friendly_name": "Astronaut",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "people.ethnicity",
                    "class": "people.ethnicity",
                    "friendly_name": "Ethnicity",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05crnbr",
                    "class": "tv.tv_director",
                    "friendly_name": "Michael Gordon",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.ethnicity",
                    "friendly_name": "Ethnicity"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.astronaut . \n?x1 :type.object.type :people.ethnicity . \nVALUES ?x2 { :m.05crnbr } \n?x0 :people.person.ethnicity ?x1 . \n?x2 :people.person.ethnicity ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.astronaut (JOIN people.person.ethnicity (JOIN (R people.person.ethnicity) m.05crnbr)))"
    },
    {
        "qid": 3206131009000,
        "question": "name the type of shortest recording by joe lee carter?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0nmjrwv",
                "entity_name": "As the Years Go Passing By"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0x8j4d8",
                    "class": "music.artist",
                    "friendly_name": "Joe Lee Carter",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.0x8j4d8 } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.0x8j4d8 } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.0x8j4d8)) music.recording.length)"
    },
    {
        "qid": 2103629003000,
        "question": "what version of the video game was released most recently?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01114vzr",
                "entity_name": "Grand Theft Auto V"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cvg.game_version . \n?y0 :cvg.game_version.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX cvg.game_version cvg.game_version.release_date)"
    },
    {
        "qid": 4302507012000,
        "question": "the first student practitioner of jkd is named what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            }
        ],
        "function": "argmin",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "martial_arts.martial_artist",
                    "class": "martial_arts.martial_artist",
                    "friendly_name": "Martial Artist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0fdb3",
                    "class": "martial_arts.martial_art",
                    "friendly_name": "jkd",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "education.education",
                    "class": "education.education",
                    "friendly_name": "Education",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "martial_arts.martial_art.well_known_practitioner",
                    "friendly_name": "Practitioner"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "people.person.education",
                    "friendly_name": "Education"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "education.education.end_date",
                    "friendly_name": "End Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :martial_arts.martial_artist . \nVALUES ?x1 { :m.0fdb3 } \n?x2 :type.object.type :education.education . \n{\nSELECT (MIN(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :martial_arts.martial_artist . \nVALUES ?y1 { :m.0fdb3 } \n?y2 :type.object.type :education.education . \n?y1 :martial_arts.martial_art.well_known_practitioner ?y0 . \n?y0 :people.person.education ?y2 . \n?y2 :education.education.end_date ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :martial_arts.martial_art.well_known_practitioner ?x0 . \n?x0 :people.person.education ?x2 . \n?x2 :education.education.end_date ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "martial_arts",
            "education",
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMIN (AND martial_arts.martial_artist (JOIN (R martial_arts.martial_art.well_known_practitioner) m.0fdb3)) (JOIN people.person.education education.education.end_date))"
    },
    {
        "qid": 3203952000000,
        "question": "which cyclists share the same language as wilson?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.027tm9b",
                "entity_name": "Geraint Thomas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gkhjq",
                "entity_name": "Peter Kennaugh"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fxksg",
                "entity_name": "Tyler Farrar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x22b6",
                "entity_name": "Taylor Phinney"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066p_g",
                "entity_name": "Amber Neben"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06jpgd",
                "entity_name": "Chris Horner"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.cyclist",
                    "class": "sports.cyclist",
                    "friendly_name": "Cyclist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "language.human_language",
                    "class": "language.human_language",
                    "friendly_name": "Human Language",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0kzy0",
                    "class": "music.bassist",
                    "friendly_name": "wilson",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.languages",
                    "friendly_name": "Languages"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "people.person.languages",
                    "friendly_name": "Languages"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.cyclist . \n?x1 :type.object.type :language.human_language . \nVALUES ?x2 { :m.0kzy0 } \n?x0 :people.person.languages ?x1 . \n?x2 :people.person.languages ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND sports.cyclist (JOIN people.person.languages (JOIN (R people.person.languages) m.0kzy0)))"
    },
    {
        "qid": 2101237011000,
        "question": "in 1995-07-17, which video game was released?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hlxc0",
                "entity_name": "Flashback: The Quest for Identity"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hm90x",
                "entity_name": "Another World"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1995-07-17^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "1995-07-17",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.release_date",
                    "friendly_name": "Release Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { \"1995-07-17-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :cvg.game_version.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.release_date 1995-07-17^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3200648016000,
        "question": "among the courts that are inferior to supreme court of british columbia, which one is founded first?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.09g2kn",
                "entity_name": "Provincial Court of British Columbia"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "law.court",
                    "class": "law.court",
                    "friendly_name": "Court",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05sbhb",
                    "class": "law.court",
                    "friendly_name": "Supreme Court of British Columbia",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "law.court.founded",
                    "friendly_name": "Founded"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "law.court.inferior_courts",
                    "friendly_name": "Inferior courts"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :law.court . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :law.court . \nVALUES ?y2 { :m.05sbhb } \n?y0 :law.court.founded ?y1 . \n?y2 :law.court.inferior_courts ?y0 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.05sbhb } \n?x0 :law.court.founded ?x1 . \n?x2 :law.court.inferior_courts ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "law"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMIN (AND law.court (JOIN (R law.court.inferior_courts) m.05sbhb)) law.court.founded)"
    },
    {
        "qid": 2104863001000,
        "question": "name the unit of acceleration that had the smallest acceleration in meters per second squared.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.030zvd",
                "entity_name": "Gal"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.acceleration_unit",
                    "class": "measurement_unit.acceleration_unit",
                    "friendly_name": "Unit of Acceleration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared",
                    "friendly_name": "Acceleration in meters per second squared"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.acceleration_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.acceleration_unit . \n?y0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.acceleration_unit measurement_unit.acceleration_unit.acceleration_in_meters_per_second_squared)"
    },
    {
        "qid": 2105503004000,
        "question": "which unit of magnetic flux density represents the maximum density in teslas?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rhvb",
                "entity_name": "Tesla"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.density_in_teslas",
                    "friendly_name": "Density in teslas"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n?y0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.magnetic_flux_density_unit measurement_unit.magnetic_flux_density_unit.density_in_teslas)"
    },
    {
        "qid": 2101534001000,
        "question": "find rocket engines that can thrust 88200.0",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvms",
                "entity_name": "RD-200"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "88200.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "88200.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"88200.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 88200.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101812000000,
        "question": "what is the unit of frequency in measurement system year?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kfm_6x",
                "entity_name": "Biannual"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01q68",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Year",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.measurement_system",
                    "friendly_name": "Measurement system"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \nVALUES ?x1 { :m.01q68 } \n?x0 :measurement_unit.unit_of_frequency.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_frequency (JOIN measurement_unit.unit_of_frequency.measurement_system m.01q68))"
    },
    {
        "qid": 2104245000000,
        "question": "the shortest film producer is whom?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02h0wp",
                "entity_name": "Warwick Davis"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.height_meters",
                    "friendly_name": "Height"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :film.producer . \n?y0 :people.person.height_meters ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN film.producer people.person.height_meters)"
    },
    {
        "qid": 2101177004000,
        "question": "what was rogue influential on?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04stdrr",
                "entity_name": "SteamBand"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.015jbf",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Rogue",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.influenced_by",
                    "friendly_name": "Influenced by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.015jbf } \n?x0 :cvg.computer_videogame.influenced_by ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.influenced_by m.015jbf))"
    },
    {
        "qid": 2100063004000,
        "question": "which rail gauges correspond with british rail class 50 class?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.075hw",
                "entity_name": "Standard gauge"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.rail_gauge",
                    "class": "rail.rail_gauge",
                    "friendly_name": "Rail gauge",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.052dz1",
                    "class": "rail.locomotive_class",
                    "friendly_name": "British Rail Class 50",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.rail_gauge.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.rail_gauge . \nVALUES ?x1 { :m.052dz1 } \n?x0 :rail.rail_gauge.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.rail_gauge (JOIN rail.rail_gauge.locomotive_classes m.052dz1))"
    },
    {
        "qid": 2100197001000,
        "question": "which measurement system has the conductance units of siemens ?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c13h",
                "entity_name": "International System of Units"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01cn2d",
                    "class": "measurement_unit.conductance_unit",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.conductance_units",
                    "friendly_name": "Conductance Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.01cn2d } \n?x0 :measurement_unit.measurement_system.conductance_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.conductance_units m.01cn2d))"
    },
    {
        "qid": 2105503003000,
        "question": "what unit of magnetic flux density represents the maximum density in teslas?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rhvb",
                "entity_name": "Tesla"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.density_in_teslas",
                    "friendly_name": "Density in teslas"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \n?y0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.magnetic_flux_density_unit.density_in_teslas ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.magnetic_flux_density_unit measurement_unit.magnetic_flux_density_unit.density_in_teslas)"
    },
    {
        "qid": 2100592006000,
        "question": "gwr 1101 class is what class of locomotive?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.026t0w",
                "entity_name": "0-4-0"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02qj6k9",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "GWR 1101 Class",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.02qj6k9 } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.02qj6k9))"
    },
    {
        "qid": 3201720000000,
        "question": "the sunnyside lift serves which beginner ski run?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmk9",
                "entity_name": "Patsey Marley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmly",
                "entity_name": "Dipsy Doodle"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2ky",
                "entity_name": "Crooked Mile"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04kk2l3",
                "entity_name": "Home Run"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knmkz",
                "entity_name": "Sunnyside"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04knml8",
                "entity_name": "Alf's/Cecret/Sugarloaf Access"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "skiing.ski_run",
                    "class": "skiing.ski_run",
                    "friendly_name": "Ski Run",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04knmgf",
                    "class": "skiing.run_rating",
                    "friendly_name": "Beginner",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04kk206",
                    "class": "skiing.ski_lift",
                    "friendly_name": "Sunnyside",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "skiing.run_rating.ski_runs",
                    "friendly_name": "Ski runs"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "skiing.ski_lift.runs_served",
                    "friendly_name": "Runs served"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :skiing.ski_run . \nVALUES ?x1 { :m.04knmgf } \nVALUES ?x2 { :m.04kk206 } \n?x1 :skiing.run_rating.ski_runs ?x0 . \n?x2 :skiing.ski_lift.runs_served ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "skiing"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND skiing.ski_run (AND (JOIN (R skiing.run_rating.ski_runs) m.04knmgf) (JOIN (R skiing.ski_lift.runs_served) m.04kk206)))"
    },
    {
        "qid": 3205477014000,
        "question": "what attractions for tourists are located in the same place as where harding academy was founded?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l6t9",
                "entity_name": "Graceland"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qs9k6",
                "entity_name": "Memphis Brooks Museum of Art"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "architecture.museum",
                    "class": "architecture.museum",
                    "friendly_name": "Museum",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "travel.travel_destination",
                    "class": "travel.travel_destination",
                    "friendly_name": "Travel destination",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0d6386",
                    "class": "education.school",
                    "friendly_name": "Harding Academy",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "travel.travel_destination.tourist_attractions",
                    "friendly_name": "Tourist attractions"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "organization.organization.place_founded",
                    "friendly_name": "Place founded"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :architecture.museum . \n?x1 :type.object.type :travel.travel_destination . \nVALUES ?x2 { :m.0d6386 } \n?x1 :travel.travel_destination.tourist_attractions ?x0 . \n?x2 :organization.organization.place_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "travel",
            "organization"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND architecture.museum (JOIN (R travel.travel_destination.tourist_attractions) (JOIN (R organization.organization.place_founded) m.0d6386)))"
    },
    {
        "qid": 3205323004000,
        "question": "which santa barbara wine has 15.5 percent alcohol?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j4057",
                "entity_name": "2005 Row Eleven Santa Maria Valley Pinot Noir"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0l2wt",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "santa barbara",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "15.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "15.5",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0l2wt } \nVALUES ?x2 { \"15.5\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0l2wt) (JOIN wine.wine.percentage_alcohol 15.5^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 3205323000000,
        "question": "what amador county wine is 14.7 percent alcohol by volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hqt5b",
                "entity_name": "2004 Z52 \"Old Vines, Clockspring Vineyard\" California Shenendoah Valley Zinfandel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03hr2nt",
                "entity_name": "2004 C.G. di Arie \"Southern Exposure\" California Shenendoah Valley Zinfandel"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0kp_v",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "Amador County",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "14.7^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "14.7",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0kp_v } \nVALUES ?x2 { \"14.7\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0kp_v) (JOIN wine.wine.percentage_alcohol 14.7^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2103369008000,
        "question": "what is the name of the tv song that was composed by steve?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crrmn",
                "entity_name": "Rock of Ages"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h3dtn",
                "entity_name": "Photograph"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "tv.tv_song",
                    "class": "tv.tv_song",
                    "friendly_name": "TV song",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05205l",
                    "class": "music.songwriter",
                    "friendly_name": "steve",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.composition.composer",
                    "friendly_name": "Composer"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :tv.tv_song . \nVALUES ?x1 { :m.05205l } \n?x0 :music.composition.composer ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(AND tv.tv_song (JOIN music.composition.composer m.05205l))"
    },
    {
        "qid": 2103120005000,
        "question": "which of the bassists has a height of at least 1.94?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fqsdc",
                "entity_name": "Gabe Saporta"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02h82xn",
                "entity_name": "Matt Laurence"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.bassist",
                    "class": "music.bassist",
                    "friendly_name": "Bassist",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.94^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.94",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.height_meters",
                    "friendly_name": "Height"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.bassist . \nFILTER (?x1 >= \"1.94\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.height_meters ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND music.bassist (ge people.person.height_meters 1.94^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100735004000,
        "question": "1980-03-03 is that date on which what warship v1.1 was struck?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01tckg",
                "entity_name": "USS Nautilus (SSN-571)"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "user.patrick.default_domain.warship_v1_1",
                    "class": "user.patrick.default_domain.warship_v1_1",
                    "friendly_name": "Warship v1.1",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1980-03-03^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "1980-03-03",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "user.patrick.default_domain.warship_v1_1.struck",
                    "friendly_name": "Struck"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :user.patrick.default_domain.warship_v1_1 . \nVALUES ?x1 { \"1980-03-03-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :user.patrick.default_domain.warship_v1_1.struck ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "user.patrick.default_domain"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND user.patrick.default_domain.warship_v1_1 (JOIN user.patrick.default_domain.warship_v1_1.struck 1980-03-03^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3205500003000,
        "question": "buffy the vampire slayer belongs to which species in babylon 5?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dgw9r",
                "entity_name": "Homo sapiens"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.character_species",
                    "class": "fictional_universe.character_species",
                    "friendly_name": "Character Species",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.05k7mr6",
                    "class": "fictional_universe.fictional_universe",
                    "friendly_name": "Babylon 5",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0b41h",
                    "class": "cvg.game_character",
                    "friendly_name": "buffy the vampire slayer",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "fictional_universe.character_species.found_in_fictional_universe",
                    "friendly_name": "Found in fictional universe"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "fictional_universe.character_species.characters_of_this_species",
                    "friendly_name": "Characters of This Species"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.character_species . \nVALUES ?x1 { :m.05k7mr6 } \nVALUES ?x2 { :m.0b41h } \n?x0 :fictional_universe.character_species.found_in_fictional_universe ?x1 . \n?x0 :fictional_universe.character_species.characters_of_this_species ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "fictional_universe"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND fictional_universe.character_species (AND (JOIN fictional_universe.character_species.found_in_fictional_universe m.05k7mr6) (JOIN fictional_universe.character_species.characters_of_this_species m.0b41h)))"
    },
    {
        "qid": 2100220005000,
        "question": "what is unit does imperial system of units use to measure volume?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p52c",
                "entity_name": "Peck (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07n1g",
                "entity_name": "Tablespoon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01hwhq",
                "entity_name": "Cubic foot"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x336r",
                "entity_name": "Fluid ounce (imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05v689d",
                "entity_name": "Bushel (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x3357",
                "entity_name": "Gallon (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05v66jz",
                "entity_name": "Cup (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x338z",
                "entity_name": "Quart (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01x337p",
                "entity_name": "Pint (Imperial)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05v67h6",
                "entity_name": "Gill (Imperial)"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.volume_unit",
                    "class": "measurement_unit.volume_unit",
                    "friendly_name": "Unit Of Volume",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03zt2",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "imperial system of units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.volume_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.volume_unit . \nVALUES ?x1 { :m.03zt2 } \n?x0 :measurement_unit.volume_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.volume_unit (JOIN measurement_unit.volume_unit.measurement_system m.03zt2))"
    },
    {
        "qid": 3203229000000,
        "question": "which channel access method shares a child method of a channel access method with a parent method of packet mode multiple access?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b5vf",
                "entity_name": "Carrier sense multiple access with collision detection"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h0fwx",
                "entity_name": "Token ring"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026lnjl",
                "entity_name": "Multiple Access with Collision Avoidance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sd4s",
                "entity_name": "Multiple Access with Collision Avoidance for Wireless"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8lbc",
                "entity_name": "Aloha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8lbs",
                "entity_name": "Slotted Aloha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mzm4",
                "entity_name": "CSMA/CARP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b5ty",
                "entity_name": "Carrier sense multiple access with collision avoidance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cp5f",
                "entity_name": "Carrier sense multiple access"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012vrj",
                "entity_name": "Token bus network"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d5x9w",
                "entity_name": "Reservation ALOHA"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8_rk",
                "entity_name": "Dynamic time division multiple access"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8_rw",
                "entity_name": "Packet reservation multiple access"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "engineering.channel_access_method",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Channel access method",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "engineering.channel_access_method",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Channel access method",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05y8dl3",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Packet mode multiple access",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "engineering.channel_access_method.child_method",
                    "friendly_name": "Child method"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "engineering.channel_access_method.parent_method",
                    "friendly_name": "Parent method"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.channel_access_method . \n?x1 :type.object.type :engineering.channel_access_method . \nVALUES ?x2 { :m.05y8dl3 } \n?x1 :engineering.channel_access_method.child_method ?x0 . \n?x1 :engineering.channel_access_method.parent_method ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "engineering"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND engineering.channel_access_method (JOIN (R engineering.channel_access_method.child_method) (JOIN engineering.channel_access_method.parent_method m.05y8dl3)))"
    },
    {
        "qid": 2100777005000,
        "question": "shadow hearts ii soundtracks are in which video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.064rq4",
                "entity_name": "Shadow Hearts: Covenant"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03fynw8",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "Shadow Hearts II",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.soundtracks",
                    "friendly_name": "Soundtracks"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.03fynw8 } \n?x0 :cvg.computer_videogame.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.soundtracks m.03fynw8))"
    },
    {
        "qid": 2101493012000,
        "question": "can you tell me the unit of siemens?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gj_9",
                "entity_name": "Electrical conductance"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.dimension",
                    "class": "measurement_unit.dimension",
                    "friendly_name": "Dimension",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01cn2d",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Siemens",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.dimension . \nVALUES ?x1 { :m.01cn2d } \n?x0 :measurement_unit.dimension.si_base_unit ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.dimension (JOIN measurement_unit.dimension.si_base_unit m.01cn2d))"
    },
    {
        "qid": 3205968021000,
        "question": "what recipe using the cast iron cookware has the longest preparation time?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.07vljqx",
                "entity_name": "Braised Brussels Sprouts with Bacon"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "food.recipe",
                    "class": "food.recipe",
                    "friendly_name": "Recipe",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08zvsh",
                    "class": "food.culinary_tool",
                    "friendly_name": "cast iron cookware",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "food.recipe.preparation_time",
                    "friendly_name": "Preparation time"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "food.culinary_tool.used_in_recipes",
                    "friendly_name": "Used in recipes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :food.recipe . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :food.recipe . \nVALUES ?y2 { :m.08zvsh } \n?y0 :food.recipe.preparation_time ?y1 . \n?y2 :food.culinary_tool.used_in_recipes ?y0 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.08zvsh } \n?x0 :food.recipe.preparation_time ?x1 . \n?x2 :food.culinary_tool.used_in_recipes ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "food"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND food.recipe (JOIN (R food.culinary_tool.used_in_recipes) m.08zvsh)) food.recipe.preparation_time)"
    },
    {
        "qid": 2101205001000,
        "question": "candela is the volumetric flow rate unit for which system of measurement?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c13h",
                "entity_name": "International System of Units"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01n0v",
                    "class": "measurement_unit.luminous_intensity_unit",
                    "friendly_name": "Candela",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.luminous_intensity_units",
                    "friendly_name": "Luminous Intensity Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.01n0v } \n?x0 :measurement_unit.measurement_system.luminous_intensity_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.luminous_intensity_units m.01n0v))"
    },
    {
        "qid": 2105404015000,
        "question": "which film producer has the highest weight of 79.0kg?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "79.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "79.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"79.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 79.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4301766011000,
        "question": "the creators of glb's most recently released browser was called what?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l0bw5",
                    "class": "computer.file_format",
                    "friendly_name": "Glb",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l0bw5 } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l0bw5 } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l0bw5))) computer.software.first_released)"
    },
    {
        "qid": 2102549011000,
        "question": "what game supports 6502 microprocessor?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.08ztrg",
                "entity_name": "U.S. Championship V'Ball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bt986",
                "entity_name": "Basketball"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gg94g",
                "entity_name": "The Big Pro Wrestling!"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02skvl",
                "entity_name": "Mouse Trap"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08zbt2",
                "entity_name": "Blasteroids"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvz0s",
                "entity_name": "Astro Fighter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0284v5n",
                "entity_name": "Red Alert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fllw5",
                "entity_name": "Astro Chase"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02n5f6",
                "entity_name": "Balloon Fight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6mq7",
                "entity_name": "Batman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07xfm3",
                "entity_name": "Black Widow"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01kf7w",
                "entity_name": "Missile Command"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t4n5",
                "entity_name": "Battlezone"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pkhm",
                "entity_name": "Millipede"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d2v7m",
                "entity_name": "Captain Silver"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dx8n3",
                "entity_name": "Acrobatic Dog-Fight"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120l333f",
                "entity_name": "null"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dvyp_",
                "entity_name": "Space Duel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0flmr_",
                "entity_name": "Astro Fantasia"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fj8gm",
                "entity_name": "Xybots"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gfw91",
                "entity_name": "Beat Head"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g1_cl",
                "entity_name": "Avalanche"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0530y",
                    "class": "computer.computer_processor",
                    "friendly_name": "6502 microprocessor",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.processors_supported",
                    "friendly_name": "Processors supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0530y } \n?x0 :cvg.computer_videogame.processors_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.processors_supported m.0530y))"
    },
    {
        "qid": 2105404012000,
        "question": "what film producers weights 118.0 or less?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d40",
                "entity_name": "Jackie Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017rjs",
                "entity_name": "Jose Canseco"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018grr",
                "entity_name": "Will Ferrell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018p4y",
                "entity_name": "Pierce Brosnan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fmdk",
                "entity_name": "Amar'e Stoudemire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01jz6d",
                "entity_name": "LeBron James"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01kwsg",
                "entity_name": "Tommy Lee Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yrrh",
                "entity_name": "Earl Monroe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025n3p",
                "entity_name": "Vin Diesel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bf2s",
                "entity_name": "Jim Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5ls",
                "entity_name": "Reggie Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0347db",
                "entity_name": "Neil Patrick Harris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.038rzr",
                "entity_name": "Gerard Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g4pf",
                "entity_name": "Vijay Amritraj"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h_fk5",
                "entity_name": "Johnny Cash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l26m",
                "entity_name": "Carmelo Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pjcc",
                "entity_name": "Michael Finley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vrv9",
                "entity_name": "Fred Williamson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049sb",
                "entity_name": "Kareem Abdul-Jabbar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h22h",
                "entity_name": "Mitch Richmond"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mbxl",
                "entity_name": "Bob McKeown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06d8z0",
                "entity_name": "Terrell Suggs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07378r",
                "entity_name": "C\u00e9dric Klapisch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09qvs",
                "entity_name": "Mike Tyson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m8_v",
                "entity_name": "Jean-Claude Van Damme"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pmhf",
                "entity_name": "Denzel Washington"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tc7",
                "entity_name": "Arnold Schwarzenegger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qgpm",
                "entity_name": "George Chuvalo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074kpr",
                "entity_name": "Pete Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cd5l",
                "entity_name": "Eric Cantona"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7z0",
                "entity_name": "Vince McMahon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01zx8c",
                "entity_name": "Stone Cold Steve Austin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5msj",
                "entity_name": "Eli Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0330dc",
                "entity_name": "Chyna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rrhc",
                "entity_name": "Diamond Dallas Page"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014zfs",
                "entity_name": "Bill Cosby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pj3h",
                "entity_name": "Tom Selleck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vvyc_",
                "entity_name": "50 Cent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vw8mh",
                "entity_name": "Snoop Dogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0382m4",
                "entity_name": "Michael C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2bw",
                "entity_name": "Elton Brand"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nwwqf",
                "entity_name": "Jake Deckard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.095nx",
                "entity_name": "Magic Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2yrf",
                "entity_name": "Joakim Noah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3q09",
                "entity_name": "Anthony Wall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpjxx",
                "entity_name": "Ray Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8f54",
                "entity_name": "Kenny Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f0r85",
                "entity_name": "R\u00e9my Martin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbkcxg",
                "entity_name": "Nolan McDonald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bv1lt",
                "entity_name": "Tony Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x2sc",
                "entity_name": "Alan Autry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l7gl",
                "entity_name": "Alex Karras"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08lrll",
                "entity_name": "Maurice Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5m7y",
                "entity_name": "Jeff Norton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjj7",
                "entity_name": "Dean Cain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_0qj",
                "entity_name": "Ellis Hobbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6pym",
                "entity_name": "Dave Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z36s9",
                "entity_name": "Ed Cunningham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046gbn",
                "entity_name": "Bobby Valentine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080p9nh",
                "entity_name": "Adam White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_8dd",
                "entity_name": "Brad Gilbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c21k",
                "entity_name": "Francisco Garc\u00eda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037gjc",
                "entity_name": "Mark Harmon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_yh6",
                "entity_name": "Rick Fox"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg3z6",
                "entity_name": "Phil Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034fjj",
                "entity_name": "Jayson Williams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vvpr",
                "entity_name": "Dale Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zrys",
                "entity_name": "Baron Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06x2t1",
                "entity_name": "A. C. Green"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084w5b",
                "entity_name": "Randy Winn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dw5j",
                "entity_name": "Michael Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07htfq",
                "entity_name": "Jeremy Borash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z0yh7",
                "entity_name": "Craig Richards"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zl_0",
                "entity_name": "Jeff Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nc5v",
                "entity_name": "Jordan Babineaux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cwhpj",
                "entity_name": "Victor Hobson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c4db1",
                "entity_name": "Don \"The Dragon\" Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx0q3w",
                "entity_name": "Billy Sorrentino"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h77qll",
                "entity_name": "Robert D Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qlff",
                "entity_name": "David Fariborz Davoodian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "118.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "118.0",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"118.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 118.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3200435007000,
        "question": "the si base unit of joules uses which unit profile?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "joules",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 4301766008000,
        "question": "which was the most recent browser released by the creators of pst?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l09y1",
                    "class": "computer.file_format",
                    "friendly_name": "Pst",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l09y1 } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l09y1 } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l09y1))) computer.software.first_released)"
    },
    {
        "qid": 2103869005000,
        "question": "in terms of weightmass of kilograms, what is the smallest unit of mass?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 2105322003000,
        "question": "which music video director weighs at least 90.7?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0644fx8",
                "entity_name": "Clint Crisher"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.music_video_director",
                    "class": "music.music_video_director",
                    "friendly_name": "Music video director",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "90.7^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "90.7",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.music_video_director . \nFILTER (?x1 >= \"90.7\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND music.music_video_director (ge people.person.weight_kg 90.7^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100867008000,
        "question": "on 02/14/2011, which radio program was broadcasted for the first time?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0zz0",
                "entity_name": "Matters of the Heart"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-02-14^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "02/14/2011",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-02-14-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-02-14^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 2100352011000,
        "question": "what publisher of video games published the sherwood versions?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.08d855x",
                "entity_name": "Ultrasoft"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_publisher",
                    "class": "cvg.cvg_publisher",
                    "friendly_name": "Video Game Publisher",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c6s1jg",
                    "class": "cvg.game_version",
                    "friendly_name": "Sherwood",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_publisher.game_versions_published",
                    "friendly_name": "Game Versions Published"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_publisher . \nVALUES ?x1 { :m.0c6s1jg } \n?x0 :cvg.cvg_publisher.game_versions_published ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_publisher (JOIN cvg.cvg_publisher.game_versions_published m.0c6s1jg))"
    },
    {
        "qid": 3200435004000,
        "question": "what is the unit profile of the si base unit of a j?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "j",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 2101205005000,
        "question": "which measurement system uses candela as the unit of volumetric flow rate?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c13h",
                "entity_name": "International System of Units"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01n0v",
                    "class": "measurement_unit.luminous_intensity_unit",
                    "friendly_name": "Candela",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.luminous_intensity_units",
                    "friendly_name": "Luminous Intensity Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.01n0v } \n?x0 :measurement_unit.measurement_system.luminous_intensity_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.luminous_intensity_units m.01n0v))"
    },
    {
        "qid": 2100214000000,
        "question": "what is the image that was created on 2007-08-11t15:48:45-08:00?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0glk3_0",
                "entity_name": "null"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "common.image",
                    "class": "common.image",
                    "friendly_name": "Image",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2007-08-11T15:48:45-08:00^^http://www.w3.org/2001/XMLSchema#dateTime",
                    "class": "type.datetime",
                    "friendly_name": "2007-08-11T15:48:45-08:00",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "common.image.creation_date",
                    "friendly_name": "Creation Date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :common.image . \nVALUES ?x1 { \"2007-08-11T15:48:45-08:00\"^^<http://www.w3.org/2001/XMLSchema#dateTime> } \n?x0 :common.image.creation_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "common"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND common.image (JOIN common.image.creation_date 2007-08-11T15:48:45-08:00^^http://www.w3.org/2001/XMLSchema#dateTime))"
    },
    {
        "qid": 3200339015000,
        "question": "what holiday is related to christmas and is a holiday of christian religion?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p557",
                "entity_name": "Gaudete Sunday"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "time.holiday",
                    "class": "time.holiday",
                    "friendly_name": "Holiday",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01lp8",
                    "class": "religion.religion",
                    "friendly_name": "christian religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0lc4_",
                    "class": "time.holiday_period",
                    "friendly_name": "christmas",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.holidays",
                    "friendly_name": "Holidays"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "time.holiday_period.holidays",
                    "friendly_name": "Related Holidays"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :time.holiday . \nVALUES ?x1 { :m.01lp8 } \nVALUES ?x2 { :m.0lc4_ } \n?x1 :religion.religion.holidays ?x0 . \n?x2 :time.holiday_period.holidays ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "time",
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND time.holiday (AND (JOIN (R religion.religion.holidays) m.01lp8) (JOIN (R time.holiday_period.holidays) m.0lc4_)))"
    },
    {
        "qid": 2104914005000,
        "question": "which video game expansion has the most recent initial release date?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gvv8pp",
                "entity_name": "StarCraft II: Legacy of the Void"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :cvg.computer_game_expansion . \n?y0 :cvg.computer_videogame.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :cvg.computer_videogame.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX cvg.computer_game_expansion cvg.computer_videogame.release_date)"
    },
    {
        "qid": 2105404014000,
        "question": "which film producer has a weight of at most 65.7708?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "65.7708^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "65.7708",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"65.7708\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 65.7708^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101266002000,
        "question": "in game controllers, which conveys depth perception to the user, is compatible with which video games?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0yd_pc8",
                "entity_name": "F1 2012"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0q56v",
                    "class": "computer.computer_peripheral_class",
                    "friendly_name": "game controllers",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.peripheral_classes_supported",
                    "friendly_name": "Peripheral classes supported"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { :m.0q56v } \n?x0 :cvg.game_version.peripheral_classes_supported ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.peripheral_classes_supported m.0q56v))"
    },
    {
        "qid": 3206131007000,
        "question": "which of kongar-ol ondar and paul \"earthquake\" pena recordings is shortest in length?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dr7vcj",
                "entity_name": "Kaldak Hamar (The Other Side of the Mountain)"
            }
        ],
        "function": "argmin",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.recording",
                    "class": "music.recording",
                    "friendly_name": "Musical Recording",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.01tlrxl",
                    "class": "music.artist",
                    "friendly_name": "Kongar-ol Ondar and Paul \"Earthquake\" Pena",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.recording.length",
                    "friendly_name": "Length"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.recording.artist",
                    "friendly_name": "Recorded by"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.recording . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :music.recording . \nVALUES ?y2 { :m.01tlrxl } \n?y0 :music.recording.length ?y1 . \n?y0 :music.recording.artist ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.01tlrxl } \n?x0 :music.recording.length ?x1 . \n?x0 :music.recording.artist ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN (AND music.recording (JOIN music.recording.artist m.01tlrxl)) music.recording.length)"
    },
    {
        "qid": 3206497014000,
        "question": "who was the producer of greatest hits and let's lynch the landlord?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01n_v5",
                "entity_name": "Butch Vig"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "music.producer",
                    "class": "music.producer",
                    "friendly_name": "Record Producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0328krq",
                    "class": "music.release",
                    "friendly_name": "Greatest Hits",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0vv30w",
                    "class": "music.recording",
                    "friendly_name": "Let's Lynch the Landlord",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "music.release.producers",
                    "friendly_name": "Producers"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "music.producer.tracks_produced",
                    "friendly_name": "Recordings produced"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :music.producer . \nVALUES ?x1 { :m.0328krq } \nVALUES ?x2 { :m.0vv30w } \n?x1 :music.release.producers ?x0 . \n?x0 :music.producer.tracks_produced ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND music.producer (AND (JOIN (R music.release.producers) m.0328krq) (JOIN music.producer.tracks_produced m.0vv30w)))"
    },
    {
        "qid": 2101733006000,
        "question": "regina, saskatchewan builds what type of locomotive?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03c91sv",
                "entity_name": "China Railways CRH1"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.locomotive_class",
                    "class": "rail.locomotive_class",
                    "friendly_name": "Locomotive class",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.03mb5k5",
                    "class": "rail.locomotive_class",
                    "friendly_name": "regina, saskatchewan",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.locomotive_class.parent_class",
                    "friendly_name": "Parent class"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.locomotive_class . \nVALUES ?x1 { :m.03mb5k5 } \n?x0 :rail.locomotive_class.parent_class ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.locomotive_class (JOIN rail.locomotive_class.parent_class m.03mb5k5))"
    },
    {
        "qid": 2102649003000,
        "question": "what game was made prior to sonic adventure?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xkpd",
                "entity_name": "Sonic Adventure 2"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01d7jb",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Sonic Adventure",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.prequel",
                    "friendly_name": "Previous in narrative"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.01d7jb } \n?x0 :cvg.computer_videogame.prequel ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.prequel m.01d7jb))"
    },
    {
        "qid": 3204615005000,
        "question": "presence was produced by what theater private company limited by shares?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0y8d9z_",
                    "class": "theater.theater_production",
                    "friendly_name": "Presence",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0y8d9z_ } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0y8d9z_)))"
    },
    {
        "qid": 2100592010000,
        "question": "in the midland railway 156 class, what were the specific locomotive classes?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0639sr",
                "entity_name": "2-4-0"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "rail.steam_locomotive_wheel_configuration",
                    "class": "rail.steam_locomotive_wheel_configuration",
                    "friendly_name": "Steam locomotive wheel configuration",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08bhgt",
                    "class": "rail.steam_locomotive_class",
                    "friendly_name": "Midland Railway 156 Class",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "rail.steam_locomotive_wheel_configuration.locomotive_classes",
                    "friendly_name": "Locomotive classes"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :rail.steam_locomotive_wheel_configuration . \nVALUES ?x1 { :m.08bhgt } \n?x0 :rail.steam_locomotive_wheel_configuration.locomotive_classes ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "rail"
        ],
        "level": "zero-shot",
        "s_expression": "(AND rail.steam_locomotive_wheel_configuration (JOIN rail.steam_locomotive_wheel_configuration.locomotive_classes m.08bhgt))"
    },
    {
        "qid": 2103093005000,
        "question": "which is the largest unit of frequency in terms of hertz?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.121lm_nv",
                "entity_name": "Gigahertz"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_frequency",
                    "class": "measurement_unit.unit_of_frequency",
                    "friendly_name": "Unit of frequency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_frequency.frequency_in_hertz",
                    "friendly_name": "Frequency in hertz"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_frequency . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.unit_of_frequency . \n?y0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.unit_of_frequency.frequency_in_hertz ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMAX measurement_unit.unit_of_frequency measurement_unit.unit_of_frequency.frequency_in_hertz)"
    },
    {
        "qid": 3205857000000,
        "question": "what image ratio does the camera with more than 6.2 digital zoom have?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0220vcp",
                "entity_name": "3:2"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0220vcv",
                "entity_name": "4:3"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022qdb2",
                "entity_name": "16:9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04p7ch2",
                "entity_name": "1:1"
            }
        ],
        "function": ">",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.camera_image_ratio",
                    "class": "digicams.camera_image_ratio",
                    "friendly_name": "Camera Image Ratio",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "6.2^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "6.2",
                    "question_node": 0,
                    "function": ">"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "digicams.digital_camera.image_ratio",
                    "friendly_name": "Image ratio (W:H)"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "digicams.digital_camera.digital_zoom",
                    "friendly_name": "Digital zoom"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_image_ratio . \n?x1 :type.object.type :digicams.digital_camera . \nFILTER (?x2 > \"6.2\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x1 :digicams.digital_camera.image_ratio ?x0 . \n?x1 :digicams.digital_camera.digital_zoom ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "compositional",
        "s_expression": "(AND digicams.camera_image_ratio (JOIN (R digicams.digital_camera.image_ratio) (gt digicams.digital_camera.digital_zoom 6.2^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2100921018000,
        "question": "which video games versions were released in asia?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b_q7lr",
                "entity_name": "Dekaron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm9f6s",
                "entity_name": "Virtua Tennis 4"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gm9fj3",
                "entity_name": "Virtua Tennis 4"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.game_version",
                    "class": "cvg.game_version",
                    "friendly_name": "Video Game Version",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04ldyr",
                    "class": "cvg.computer_game_region",
                    "friendly_name": "Asia",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.game_version.regions",
                    "friendly_name": "Regions"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.game_version . \nVALUES ?x1 { :m.04ldyr } \n?x0 :cvg.game_version.regions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.game_version (JOIN cvg.game_version.regions m.04ldyr))"
    },
    {
        "qid": 2101083006000,
        "question": "what manufactured drug have a diamond shape?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmwtc",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxcp51",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjfk3",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql03g",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm821",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp354",
                "entity_name": "Amlodipine besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp6l5",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx9g5j",
                "entity_name": "Tenex 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqktqm",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhf5v",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhsqz",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqzw4",
                "entity_name": "Dextroamphetamine Sulfate 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh7f3",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgrwx",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlh2t",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlc_0",
                "entity_name": "Azasan 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjy91",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkgb9",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr46g",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjn9k",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxh3x2",
                "entity_name": "Lamivudine 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjqyw",
                "entity_name": "Amlodipine 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk8bv",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqngqn",
                "entity_name": "Epivir 300 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnptb",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqpgv1",
                "entity_name": "Estazolam 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmwsf",
                "entity_name": "Norvasc 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnnhl",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqd83",
                "entity_name": "Midamor 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh1x5",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh6xg",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn_kj",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhdg2",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhkdn",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql5w7",
                "entity_name": "Lamotrigine 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqq679",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr0ky",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr193",
                "entity_name": "Tagamet HB 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqr4f5",
                "entity_name": "Norvasc 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgfwd",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh_vl",
                "entity_name": "Glucotrol 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjhw7",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqmsgd",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp29j",
                "entity_name": "Epivir 150 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk1kb",
                "entity_name": "Abstral 400 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx8yqy",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqq2mj",
                "entity_name": "Inspra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhfqy",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqj31m",
                "entity_name": "Glucotrol 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqml10",
                "entity_name": "Amiloride Hydrocloride 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqpg97",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqjby",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqpm8",
                "entity_name": "Lamotrigine 100 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhqpj",
                "entity_name": "Viagra Viagra - Professional Sample 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkkqz",
                "entity_name": "Estazolam 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkt06",
                "entity_name": "Eplerenone 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlgf1",
                "entity_name": "Estazolam 2 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqphly",
                "entity_name": "Cortisone Acetate 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqgxz3",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhcj_",
                "entity_name": "Eplerenone 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk089",
                "entity_name": "Amlodipine besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk0hw",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkc41",
                "entity_name": "Viagra 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm3j7",
                "entity_name": "Viagra Viagra - Professional Sample 50 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn4_2",
                "entity_name": "Cortisone Acetate 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk6ct",
                "entity_name": "Viagra 100 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxb54r",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxkd5z",
                "entity_name": "Tenex 1 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxtqtx",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql9fc",
                "entity_name": "Amiloride Hydrochloride 5 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp2wz",
                "entity_name": "Viagra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqqyry",
                "entity_name": "Epivir 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqhxj0",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjfzb",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqkrt3",
                "entity_name": "Doxazosin Mesylate 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnq42",
                "entity_name": "Inspra 25 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqp1jr",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqn8vb",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqlh44",
                "entity_name": "Doxazosin 4 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jvd75c",
                "entity_name": "Famotidine 40 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jx87gb",
                "entity_name": "Glucotrol 10 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hql2b9",
                "entity_name": "Lamotrigine 200 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jxtd_6",
                "entity_name": "Lamivudine 300 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqh1zt",
                "entity_name": "Mercaptopurine 50 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqnmr1",
                "entity_name": "Lamotrigine 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqk93v",
                "entity_name": "Inspra 25 tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqm8pd",
                "entity_name": "Epivir 150 film coated tablet"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hqjgq4",
                "entity_name": "Amlodipine Besylate 2.5 tablet"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.manufactured_drug_form",
                    "class": "medicine.manufactured_drug_form",
                    "friendly_name": "Manufactured drug form",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.04kf88x",
                    "class": "medicine.drug_form_shape",
                    "friendly_name": "Diamond",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "medicine.manufactured_drug_form.shape",
                    "friendly_name": "Shape"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.manufactured_drug_form . \nVALUES ?x1 { :m.04kf88x } \n?x0 :medicine.manufactured_drug_form.shape ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "compositional",
        "s_expression": "(AND medicine.manufactured_drug_form (JOIN medicine.manufactured_drug_form.shape m.04kf88x))"
    },
    {
        "qid": 2104398004000,
        "question": "which boxer is the heaviest?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02969m",
                "entity_name": "Eric Esch"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "sports.boxer",
                    "class": "sports.boxer",
                    "friendly_name": "Boxer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :sports.boxer . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :sports.boxer . \n?y0 :people.person.weight_kg ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX sports.boxer people.person.weight_kg)"
    },
    {
        "qid": 2100564009000,
        "question": "which video game has the version of master of orion ii: battle at antares?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06l8gd",
                "entity_name": "Master of Orion II: Battle at Antares"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0kynw9z",
                    "class": "cvg.game_version",
                    "friendly_name": "Master of Orion II: Battle at Antares",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.versions",
                    "friendly_name": "Versions"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.0kynw9z } \n?x0 :cvg.computer_videogame.versions ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.versions m.0kynw9z))"
    },
    {
        "qid": 2105404009000,
        "question": "which film producer's weight is at most 77.55?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "77.55^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "77.55",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"77.55\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 77.55^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2103869000000,
        "question": "find the smallest unit of mass in terms of kilograms.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.weightmass_in_kilograms",
                    "friendly_name": "Weightmass In Kilograms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :measurement_unit.mass_unit . \n?y0 :measurement_unit.mass_unit.weightmass_in_kilograms ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :measurement_unit.mass_unit.weightmass_in_kilograms ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(ARGMIN measurement_unit.mass_unit measurement_unit.mass_unit.weightmass_in_kilograms)"
    },
    {
        "qid": 2100867000000,
        "question": "on 07/18/2011 which radio program was first broadcasted?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0z_j",
                "entity_name": "NASA and Nichelle Nichols"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-07-18^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "07/18/2011",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-07-18-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-07-18^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 4301766009000,
        "question": "what was the most recent browser released by the creators of wke?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l0b9y",
                    "class": "computer.file_format",
                    "friendly_name": "Wke",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l0b9y } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l0b9y } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l0b9y))) computer.software.first_released)"
    },
    {
        "qid": 4300898004000,
        "question": "which core text of catholic religion do sacraments practitioners honor?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.015j7",
                "entity_name": "The Bible"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "religion.religious_text",
                    "class": "religion.religious_text",
                    "friendly_name": "Religious Text",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c8wxp",
                    "class": "religion.religion",
                    "friendly_name": "catholic religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "religion.religion",
                    "class": "religion.religion",
                    "friendly_name": "Religion",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.06xq6",
                    "class": "religion.religious_practice",
                    "friendly_name": "sacraments",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "religion.religion.texts",
                    "friendly_name": "Texts"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "religion.religion.practices",
                    "friendly_name": "Practices"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :religion.religious_text . \nVALUES ?x1 { :m.0c8wxp } \n?x2 :type.object.type :religion.religion . \nVALUES ?x3 { :m.06xq6 } \n?x1 :religion.religion.texts ?x0 . \n?x2 :religion.religion.texts ?x0 . \n?x2 :religion.religion.practices ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "religion"
        ],
        "level": "compositional",
        "s_expression": "(AND religion.religious_text (AND (JOIN (R religion.religion.texts) m.0c8wxp) (JOIN (R religion.religion.texts) (JOIN religion.religion.practices m.06xq6))))"
    },
    {
        "qid": 2101310007000,
        "question": "what is the international system of units measurement of surface density?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.11b66gjcd6",
                "entity_name": "Kilogram per square metre"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_surface_density",
                    "class": "measurement_unit.unit_of_surface_density",
                    "friendly_name": "Unit of Surface Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_surface_density.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_surface_density . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.unit_of_surface_density.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_surface_density (JOIN measurement_unit.unit_of_surface_density.measurement_system m.0c13h))"
    },
    {
        "qid": 2100924014000,
        "question": "the quotations of what, then, is the true gospel of consistency? change. who is the really consistent man? the man who changes. since change is the law of his being, he cannot be consistent if he stick in a rut. is from which quotation subject?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.048krv1",
                "entity_name": "Consistency"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation_subject",
                    "class": "media_common.quotation_subject",
                    "friendly_name": "Quotation Subject",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.048fk_r",
                    "class": "media_common.quotation",
                    "friendly_name": "What, then, is the true Gospel of consistency? Change. Who is the really consistent man? The man who changes. Since change is the law of his being, he cannot be consistent if he stick in a rut.",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation_subject.quotations_about_this_subject",
                    "friendly_name": "Quotations About This Subject"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation_subject . \nVALUES ?x1 { :m.048fk_r } \n?x0 :media_common.quotation_subject.quotations_about_this_subject ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "compositional",
        "s_expression": "(AND media_common.quotation_subject (JOIN media_common.quotation_subject.quotations_about_this_subject m.048fk_r))"
    },
    {
        "qid": 2101705014000,
        "question": "video games with the rating of 7 can be found where?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zv_3",
                "entity_name": "Pan European Game Information"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_rating_system",
                    "class": "cvg.computer_game_rating_system",
                    "friendly_name": "Video Game Rating System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07vqd2x",
                    "class": "cvg.computer_game_rating",
                    "friendly_name": "7",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_rating_system.ratings",
                    "friendly_name": "Ratings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_rating_system . \nVALUES ?x1 { :m.07vqd2x } \n?x0 :cvg.computer_game_rating_system.ratings ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_rating_system (JOIN cvg.computer_game_rating_system.ratings m.07vqd2x))"
    },
    {
        "qid": 3203229001000,
        "question": "what channel access method has a child method of a channel access method with a parent method of packet mode multiple access?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b5vf",
                "entity_name": "Carrier sense multiple access with collision detection"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h0fwx",
                "entity_name": "Token ring"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026lnjl",
                "entity_name": "Multiple Access with Collision Avoidance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026sd4s",
                "entity_name": "Multiple Access with Collision Avoidance for Wireless"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8lbc",
                "entity_name": "Aloha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8lbs",
                "entity_name": "Slotted Aloha"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mzm4",
                "entity_name": "CSMA/CARP"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0b5ty",
                "entity_name": "Carrier sense multiple access with collision avoidance"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cp5f",
                "entity_name": "Carrier sense multiple access"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012vrj",
                "entity_name": "Token bus network"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d5x9w",
                "entity_name": "Reservation ALOHA"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8_rk",
                "entity_name": "Dynamic time division multiple access"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y8_rw",
                "entity_name": "Packet reservation multiple access"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "engineering.channel_access_method",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Channel access method",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "engineering.channel_access_method",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Channel access method",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05y8dl3",
                    "class": "engineering.channel_access_method",
                    "friendly_name": "Packet mode multiple access",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "engineering.channel_access_method.child_method",
                    "friendly_name": "Child method"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "engineering.channel_access_method.parent_method",
                    "friendly_name": "Parent method"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :engineering.channel_access_method . \n?x1 :type.object.type :engineering.channel_access_method . \nVALUES ?x2 { :m.05y8dl3 } \n?x1 :engineering.channel_access_method.child_method ?x0 . \n?x1 :engineering.channel_access_method.parent_method ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "engineering"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND engineering.channel_access_method (JOIN (R engineering.channel_access_method.child_method) (JOIN engineering.channel_access_method.parent_method m.05y8dl3)))"
    },
    {
        "qid": 2100867004000,
        "question": "on oct. the 10th, 1982, which radio program was broadcasted for the first time?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06vx2d0",
                "entity_name": "From Africa to Ragtime"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1982-10-10^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "Oct. the 10th, 1982",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"1982-10-10-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 1982-10-10^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 4301766002000,
        "question": "which browser was most recently released by the creators of esl?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04b32v",
                "entity_name": "Internet Explorer for Mac"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.web_browser",
                    "class": "computer.web_browser",
                    "friendly_name": "Web browser",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "computer.software_developer",
                    "class": "computer.software_developer",
                    "friendly_name": "Software Developer",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.02l0lkl",
                    "class": "computer.file_format",
                    "friendly_name": "Esl",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "computer.software_developer.software",
                    "friendly_name": "Software"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "computer.file_format.format_creator",
                    "friendly_name": "Format Creator"
                },
                {
                    "start": 0,
                    "end": 3,
                    "relation": "computer.software.first_released",
                    "friendly_name": "First Released"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.web_browser . \n?x1 :type.object.type :computer.software_developer . \nVALUES ?x2 { :m.02l0lkl } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :computer.web_browser . \n?y1 :type.object.type :computer.software_developer . \nVALUES ?y2 { :m.02l0lkl } \n?y1 :computer.software_developer.software ?y0 . \n?y2 :computer.file_format.format_creator ?y1 . \n?y0 :computer.software.first_released ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :computer.software_developer.software ?x0 . \n?x2 :computer.file_format.format_creator ?x1 . \n?x0 :computer.software.first_released ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND computer.web_browser (JOIN (R computer.software_developer.software) (JOIN (R computer.file_format.format_creator) m.02l0lkl))) computer.software.first_released)"
    },
    {
        "qid": 3204132005000,
        "question": "omniscient narrator and self are addressee's in which of the following quotes?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qhr1tp",
                "entity_name": "\"Sometimes the cost of winning for all the right reasons is so great that spirits die and hearts grow cold.\""
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qhrjy6",
                "entity_name": "Sometimes the cost of winning for all the right reasons is so great that spirits die and hearts grow cold."
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "media_common.quotation",
                    "class": "media_common.quotation",
                    "friendly_name": "Quotation",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c6ppxz",
                    "class": "media_common.quotation_addressee",
                    "friendly_name": "Omniscient narrator",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0mz3gj1",
                    "class": "media_common.quotation_addressee",
                    "friendly_name": "Self",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "media_common.quotation.addressee",
                    "friendly_name": "Addressee"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "media_common.quotation.addressee",
                    "friendly_name": "Addressee"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :media_common.quotation . \nVALUES ?x1 { :m.0c6ppxz } \nVALUES ?x2 { :m.0mz3gj1 } \n?x0 :media_common.quotation.addressee ?x1 . \n?x0 :media_common.quotation.addressee ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "media_common"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND media_common.quotation (AND (JOIN media_common.quotation.addressee m.0c6ppxz) (JOIN media_common.quotation.addressee m.0mz3gj1)))"
    },
    {
        "qid": 3204665010000,
        "question": "what automobile make has the parent company founded by raymond mays?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0x2x2dj",
                "entity_name": "ERA"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "automotive.make",
                    "class": "automotive.make",
                    "friendly_name": "Automobile Make",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "automotive.company",
                    "class": "automotive.company",
                    "friendly_name": "Automobile Company",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.08wnbp",
                    "class": "organization.organization_founder",
                    "friendly_name": "Raymond Mays",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "automotive.make.parent_company",
                    "friendly_name": "Parent Company"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "organization.organization_founder.organizations_founded",
                    "friendly_name": "Organizations founded"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :automotive.make . \n?x1 :type.object.type :automotive.company . \nVALUES ?x2 { :m.08wnbp } \n?x0 :automotive.make.parent_company ?x1 . \n?x2 :organization.organization_founder.organizations_founded ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "automotive",
            "organization"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND automotive.make (JOIN automotive.make.parent_company (JOIN (R organization.organization_founder.organizations_founded) m.08wnbp)))"
    },
    {
        "qid": 2104865001000,
        "question": "who has the largest height out of the comic strip characters?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.06ys2",
                "entity_name": "Peter Parker"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "comic_strips.comic_strip_character",
                    "class": "comic_strips.comic_strip_character",
                    "friendly_name": "Comic Strip Character",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "fictional_universe.fictional_character.height",
                    "friendly_name": "Height"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :comic_strips.comic_strip_character . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :comic_strips.comic_strip_character . \n?y0 :fictional_universe.fictional_character.height ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :fictional_universe.fictional_character.height ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "fictional_universe"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX comic_strips.comic_strip_character fictional_universe.fictional_character.height)"
    },
    {
        "qid": 2101720007000,
        "question": "in atomic units, what unit is used to measure mass?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xk7qw",
                "entity_name": "Electron rest mass"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.mass_unit",
                    "class": "measurement_unit.mass_unit",
                    "friendly_name": "Unit of Mass",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.017mm0",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Atomic units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.mass_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.mass_unit . \nVALUES ?x1 { :m.017mm0 } \n?x0 :measurement_unit.mass_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.mass_unit (JOIN measurement_unit.mass_unit.measurement_system m.017mm0))"
    },
    {
        "qid": 3205832002000,
        "question": "which bipropellant rocket engine has the largest chamber pressure and is fueled by ammonia?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltc9",
                "entity_name": "RD-303"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltd2",
                "entity_name": "RD-302"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xltdw",
                "entity_name": "RD-301"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.bipropellant_rocket_engine",
                    "class": "spaceflight.bipropellant_rocket_engine",
                    "friendly_name": "Bipropellant rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0p6_",
                    "class": "spaceflight.rocket_engine_fuel",
                    "friendly_name": "Ammonia",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "spaceflight.rocket_engine_fuel.rocket_engines",
                    "friendly_name": "Rocket engines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "spaceflight.bipropellant_rocket_engine.chamber_pressure",
                    "friendly_name": "Chamber pressure"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.bipropellant_rocket_engine . \nVALUES ?x1 { :m.0p6_ } \n{\nSELECT (MAX(?y2) AS ?x2)  WHERE { \n?y0 :type.object.type :spaceflight.bipropellant_rocket_engine . \nVALUES ?y1 { :m.0p6_ } \n?y1 :spaceflight.rocket_engine_fuel.rocket_engines ?y0 . \n?y0 :spaceflight.bipropellant_rocket_engine.chamber_pressure ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\n?x1 :spaceflight.rocket_engine_fuel.rocket_engines ?x0 . \n?x0 :spaceflight.bipropellant_rocket_engine.chamber_pressure ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND spaceflight.bipropellant_rocket_engine (JOIN (R spaceflight.rocket_engine_fuel.rocket_engines) m.0p6_)) spaceflight.bipropellant_rocket_engine.chamber_pressure)"
    },
    {
        "qid": 3205791001000,
        "question": "what is the latest released computer emulator developed in java language?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bc1ph9",
                "entity_name": "JSpeccy"
            }
        ],
        "function": "argmax",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "computer.computer_emulator",
                    "class": "computer.computer_emulator",
                    "friendly_name": "Computer Emulator",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.07sbkfb",
                    "class": "computer.programming_language",
                    "friendly_name": "java language",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "computer.software.latest_release_date",
                    "friendly_name": "Latest Release Date"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "computer.software.languages_used",
                    "friendly_name": "Programming languages used"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :computer.computer_emulator . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :computer.computer_emulator . \nVALUES ?y2 { :m.07sbkfb } \n?y0 :computer.software.latest_release_date ?y1 . \n?y0 :computer.software.languages_used ?y2 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y1 != ?y2  )\n}\n}\nVALUES ?x2 { :m.07sbkfb } \n?x0 :computer.software.latest_release_date ?x1 . \n?x0 :computer.software.languages_used ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "computer"
        ],
        "level": "i.i.d.",
        "s_expression": "(ARGMAX (AND computer.computer_emulator (JOIN computer.software.languages_used m.07sbkfb)) computer.software.latest_release_date)"
    },
    {
        "qid": 2101873002000,
        "question": "what is the non-si units mentioned in the si unit of plane angle?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gc58",
                "entity_name": "Degree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zgv",
                "entity_name": "Minute of arc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05rs31",
                "entity_name": "Angular mil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120rrqkm",
                "entity_name": "Second of arc"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.angle_unit",
                    "class": "measurement_unit.angle_unit",
                    "friendly_name": "Unit of Plane Angle",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f70z",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Non-SI units mentioned in the SI",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.angle_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.angle_unit . \nVALUES ?x1 { :m.08f70z } \n?x0 :measurement_unit.angle_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.angle_unit (JOIN measurement_unit.angle_unit.measurement_system m.08f70z))"
    },
    {
        "qid": 3201311010000,
        "question": "someone who founded oss also founded what government agency?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh30",
                "entity_name": "Tennessee Valley Authority"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d6qjf",
                "entity_name": "Central Intelligence Agency (CIA)"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02tl57",
                "entity_name": "Farm Security Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027nj9",
                "entity_name": "Federal Writers' Project"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xmb",
                "entity_name": "Federal Reserve System"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh58",
                "entity_name": "Works Progress Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0j97p",
                "entity_name": "National Archives and Records Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pzkcj",
                "entity_name": "Fair Employment Practices Commission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fbr4",
                "entity_name": "U.S. Securities and Exchange Commission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fhhg",
                "entity_name": "Office of Price Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06yl8j",
                "entity_name": "Resettlement Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01gl16",
                "entity_name": "National Labor Relations Board"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07rtsm",
                "entity_name": "Office of Censorship"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.057ybl",
                "entity_name": "United States Office of War Information"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05vyk5",
                "entity_name": "War Production Board"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06p4jm",
                "entity_name": "Office of the Coordinator of Inter-American Affairs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01g4lh",
                "entity_name": "Social Security Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027w1yq",
                "entity_name": "Federal Security Agency"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh2p",
                "entity_name": "Public Works Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09sn6x",
                "entity_name": "National Youth Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh45",
                "entity_name": "Civil Works Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dxztf",
                "entity_name": "Office of Civilian Defense"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031qt9",
                "entity_name": "Export-Import Bank of the United States"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pn7zc",
                "entity_name": "Office of the Coordinator of Information"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06ppmg",
                "entity_name": "War Manpower Commission"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh4j",
                "entity_name": "Agricultural Adjustment Act"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cjjxg",
                "entity_name": "Office of War Mobilization"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0260s",
                "entity_name": "Civilian Conservation Corps"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fh3h",
                "entity_name": "Home Owners' Loan Corporation"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02kbll",
                "entity_name": "Federal Emergency Relief Administration"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.011hv9",
                "entity_name": "Rural Utilities Service"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05zq3ws",
                "entity_name": "Federal Works Agency"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fhb1",
                "entity_name": "Federal Housing Administration"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.government_agency",
                    "class": "government.government_agency",
                    "friendly_name": "Government Agency",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "organization.organization_founder",
                    "class": "organization.organization_founder",
                    "friendly_name": "Organization founder",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05p50",
                    "class": "military.armed_force",
                    "friendly_name": "oss",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "organization.organization.founders",
                    "friendly_name": "Founders"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.government_agency . \n?x1 :type.object.type :organization.organization_founder . \nVALUES ?x2 { :m.05p50 } \n?x0 :organization.organization.founders ?x1 . \n?x2 :organization.organization.founders ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND government.government_agency (JOIN organization.organization.founders (JOIN (R organization.organization.founders) m.05p50)))"
    },
    {
        "qid": 2104101000000,
        "question": "what musical soundtrack had the earliest initial release?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bzn2f",
                "entity_name": "Snow White and the Seven Dwarfs"
            }
        ],
        "function": "argmin",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.musical_soundtrack",
                    "class": "theater.musical_soundtrack",
                    "friendly_name": "Musical Soundtrack",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.datetime",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmin"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "music.album.release_date",
                    "friendly_name": "Initial release date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.musical_soundtrack . \n{\nSELECT (MIN(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :theater.musical_soundtrack . \n?y0 :music.album.release_date ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :music.album.release_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "music"
        ],
        "level": "compositional",
        "s_expression": "(ARGMIN theater.musical_soundtrack music.album.release_date)"
    },
    {
        "qid": 2101933014000,
        "question": "what poem has a doha verse form?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qz9bhm",
                "entity_name": "Gorakh-bani"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qz9bk8",
                "entity_name": "Mahapurana"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0qz9bh2",
                "entity_name": "Paumachariu and Harivamshapurana"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "book.poem",
                    "class": "book.poem",
                    "friendly_name": "Poem",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0qfr7tc",
                    "class": "book.poetic_verse_form",
                    "friendly_name": "Doha",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "book.poem.verse_form",
                    "friendly_name": "Verse Form"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :book.poem . \nVALUES ?x1 { :m.0qfr7tc } \n?x0 :book.poem.verse_form ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "book"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND book.poem (JOIN book.poem.verse_form m.0qfr7tc))"
    },
    {
        "qid": 3204366002000,
        "question": "what expansions exist on the playstation 4 for video games?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p3r2rm",
                "entity_name": "The Elder Scrolls V: Skyrim \u2013 Dragonborn"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_platform",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "Video Game Platform",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0r4_kmc",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "PlayStation 4",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.platforms",
                    "friendly_name": "Platforms"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n?x1 :type.object.type :cvg.cvg_platform . \nVALUES ?x2 { :m.0r4_kmc } \n?x0 :cvg.computer_videogame.platforms ?x1 . \n?x2 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_expansion (JOIN cvg.computer_videogame.platforms (JOIN (R cvg.cvg_platform_family.platforms) m.0r4_kmc)))"
    },
    {
        "qid": 2101999006000,
        "question": "where can i locate a digital camera with the specific 21.0 sensor?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0n4bxy4",
                "entity_name": "Samsung Galaxy Camera"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "21.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "21.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "digicams.digital_camera.optical_zoom",
                    "friendly_name": "Optical Zoom"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.digital_camera . \nVALUES ?x1 { \"21.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :digicams.digital_camera.optical_zoom ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.digital_camera (JOIN digicams.digital_camera.optical_zoom 21.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100777009000,
        "question": "\u8056\u5263\u4f1d\u8aac\uff12 original sound version is the soundtrack of what video game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01km1hd",
                "entity_name": "Secret of Mana"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_videogame",
                    "class": "cvg.computer_videogame",
                    "friendly_name": "Video game",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01km15y",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "\u8056\u5263\u4f1d\u8aac\uff12 Original Sound Version",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.soundtracks",
                    "friendly_name": "Soundtracks"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_videogame . \nVALUES ?x1 { :m.01km15y } \n?x0 :cvg.computer_videogame.soundtracks ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_videogame (JOIN cvg.computer_videogame.soundtracks m.01km15y))"
    },
    {
        "qid": 2104958009000,
        "question": "find all film editor with weight over 95.3",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nwwqf",
                "entity_name": "Jake Deckard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047ccs3",
                "entity_name": "Russell White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z0yh7",
                "entity_name": "Craig Richards"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04j41f",
                "entity_name": "Randy Couture"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07tq_m",
                "entity_name": "Miguel P\u00e9rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q4f4",
                "entity_name": "Kevin Willis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027nzt8",
                "entity_name": "Irakli Chkhikvadze"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0332_f",
                "entity_name": "Terry Funk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07dcjd",
                "entity_name": "Mike Shaw"
            }
        ],
        "function": ">=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.editor",
                    "class": "film.editor",
                    "friendly_name": "Film editor",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "95.3^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "95.3",
                    "question_node": 0,
                    "function": ">="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.editor . \nFILTER (?x1 >= \"95.3\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND film.editor (ge people.person.weight_kg 95.3^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2104639003000,
        "question": "what is the lake that has the largest catchment area?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mlk",
                "entity_name": "Caspian Sea"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.lake",
                    "class": "geography.lake",
                    "friendly_name": "Lake",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.lake.catchment_area",
                    "friendly_name": "Catchment area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :geography.lake . \n?y0 :geography.lake.catchment_area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :geography.lake.catchment_area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "geography"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX geography.lake geography.lake.catchment_area)"
    },
    {
        "qid": 3204002000000,
        "question": "what politician has a favorite freebase topic of portsmouth maritime folk festival?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrwvx",
                "entity_name": "Chris Maden"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.politician",
                    "class": "government.politician",
                    "friendly_name": "Politician",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "freebase.user_profile",
                    "class": "freebase.user_profile",
                    "friendly_name": "User Profile",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.075ghg3",
                    "class": "common.topic",
                    "friendly_name": "Portsmouth Maritime Folk Festival",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "freebase.user_profile.person",
                    "friendly_name": "Person-Topic About Me"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "freebase.user_profile.favorite_topics",
                    "friendly_name": "Favorite Freebase Topics"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.politician . \n?x1 :type.object.type :freebase.user_profile . \nVALUES ?x2 { :m.075ghg3 } \n?x1 :freebase.user_profile.person ?x0 . \n?x1 :freebase.user_profile.favorite_topics ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "freebase"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND government.politician (JOIN (R freebase.user_profile.person) (JOIN freebase.user_profile.favorite_topics m.075ghg3)))"
    },
    {
        "qid": 2101354014000,
        "question": "which profession has the corresponding type basketball player?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02h664x",
                "entity_name": "Basketball player"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "people.profession",
                    "class": "people.profession",
                    "friendly_name": "Profession",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.01xrrch",
                    "class": "type.type",
                    "friendly_name": "Basketball Player",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.profession.corresponding_type",
                    "friendly_name": "Corresponding type"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :people.profession . \nVALUES ?x1 { :m.01xrrch } \n?x0 :people.profession.corresponding_type ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND people.profession (JOIN people.profession.corresponding_type m.01xrrch))"
    },
    {
        "qid": 3205323010000,
        "question": "which san joaquin county wine has 15.5 percent alcohol?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03brx1y",
                "entity_name": "2004 Abundance \"Old Vine, Mencarini Vineyards\" Lodi Zinfandel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03brx4k",
                "entity_name": "2005 Abundance \"Abundantly Rich Red, Mencarini Vineyards\" Lodi Zinfandel"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "wine.wine",
                    "class": "wine.wine",
                    "friendly_name": "Wine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0l2sr",
                    "class": "wine.wine_sub_region",
                    "friendly_name": "San Joaquin County",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "literal",
                    "id": "15.5^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "15.5",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "wine.wine_sub_region.wines",
                    "friendly_name": "Wines"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "wine.wine.percentage_alcohol",
                    "friendly_name": "Percentage alcohol"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :wine.wine . \nVALUES ?x1 { :m.0l2sr } \nVALUES ?x2 { \"15.5\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x1 :wine.wine_sub_region.wines ?x0 . \n?x0 :wine.wine.percentage_alcohol ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "wine"
        ],
        "level": "compositional",
        "s_expression": "(AND wine.wine (AND (JOIN (R wine.wine_sub_region.wines) m.0l2sr) (JOIN wine.wine.percentage_alcohol 15.5^^http://www.w3.org/2001/XMLSchema#float)))"
    },
    {
        "qid": 2100867007000,
        "question": "2012-02-26 was the initial broadcast date for which radio program?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0_1k",
                "entity_name": "A Conversation with Morgan Freeman"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2012-02-26^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "2012-02-26",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2012-02-26-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2012-02-26^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3204366004000,
        "question": "when it comes to the game system ps1 what video game expansions exist?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0p3r2rm",
                "entity_name": "The Elder Scrolls V: Skyrim \u2013 Dragonborn"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_expansion",
                    "class": "cvg.computer_game_expansion",
                    "friendly_name": "Video Game Expansion",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.cvg_platform",
                    "class": "cvg.cvg_platform",
                    "friendly_name": "Video Game Platform",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04d3gbs",
                    "class": "cvg.cvg_platform_family",
                    "friendly_name": "PS1",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_videogame.platforms",
                    "friendly_name": "Platforms"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.cvg_platform_family.platforms",
                    "friendly_name": "Platforms"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_expansion . \n?x1 :type.object.type :cvg.cvg_platform . \nVALUES ?x2 { :m.04d3gbs } \n?x0 :cvg.computer_videogame.platforms ?x1 . \n?x2 :cvg.cvg_platform_family.platforms ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_expansion (JOIN cvg.computer_videogame.platforms (JOIN (R cvg.cvg_platform_family.platforms) m.04d3gbs)))"
    },
    {
        "qid": 4302121010000,
        "question": "the parent organization of pharoah 90 was founded by whom?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d4lb3t",
                "entity_name": "Professor Tomoe"
            }
        ],
        "function": "none",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_organization_founder",
                    "class": "fictional_universe.fictional_organization_founder",
                    "friendly_name": "Fictional Organization Founder",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_organization",
                    "class": "fictional_universe.fictional_organization",
                    "friendly_name": "Organization in fiction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "class",
                    "id": "fictional_universe.fictional_organization",
                    "class": "fictional_universe.fictional_organization",
                    "friendly_name": "Organization in fiction",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "entity",
                    "id": "m.0d4l6sp",
                    "class": "fictional_universe.fictional_organization_founder",
                    "friendly_name": "Pharoah 90",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "fictional_universe.fictional_organization_founder.fictional_organizations_founded",
                    "friendly_name": "Fictional Organizations founded"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "fictional_universe.fictional_organization.sub_organization_in_fiction",
                    "friendly_name": "Sub-organization in fiction"
                },
                {
                    "start": 2,
                    "end": 3,
                    "relation": "fictional_universe.fictional_organization.fictional_organization_founder",
                    "friendly_name": "Fictional Organization Founder"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :fictional_universe.fictional_organization_founder . \n?x1 :type.object.type :fictional_universe.fictional_organization . \n?x2 :type.object.type :fictional_universe.fictional_organization . \nVALUES ?x3 { :m.0d4l6sp } \n?x0 :fictional_universe.fictional_organization_founder.fictional_organizations_founded ?x1 . \n?x2 :fictional_universe.fictional_organization.sub_organization_in_fiction ?x1 . \n?x2 :fictional_universe.fictional_organization.fictional_organization_founder ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "fictional_universe"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND fictional_universe.fictional_organization_founder (JOIN fictional_universe.fictional_organization_founder.fictional_organizations_founded (JOIN (R fictional_universe.fictional_organization.sub_organization_in_fiction) (JOIN fictional_universe.fictional_organization.fictional_organization_founder m.0d4l6sp))))"
    },
    {
        "qid": 3203411021000,
        "question": "what tld registry registered registry?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.051dgm",
                "entity_name": "Afilias"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "internet.top_level_domain_registry",
                    "class": "internet.top_level_domain_registry",
                    "friendly_name": "Top Level Domain Registry",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "internet.top_level_domain",
                    "class": "internet.top_level_domain",
                    "friendly_name": "Top Level Domain",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.022clc",
                    "class": "internet.top_level_domain_registry",
                    "friendly_name": "registry",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "internet.top_level_domain_registry.domains",
                    "friendly_name": "Domains Registered"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "internet.top_level_domain.registry",
                    "friendly_name": "Registry"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :internet.top_level_domain_registry . \n?x1 :type.object.type :internet.top_level_domain . \nVALUES ?x2 { :m.022clc } \n?x0 :internet.top_level_domain_registry.domains ?x1 . \n?x1 :internet.top_level_domain.registry ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "internet"
        ],
        "level": "compositional",
        "s_expression": "(AND internet.top_level_domain_registry (JOIN internet.top_level_domain_registry.domains (JOIN internet.top_level_domain.registry m.022clc)))"
    },
    {
        "qid": 2102456003000,
        "question": "what unit does the international system of units use to measure molar heat capacity?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02sj59n",
                "entity_name": "Joule per mole per kelvin"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.molar_heat_capacity_unit",
                    "class": "measurement_unit.molar_heat_capacity_unit",
                    "friendly_name": "Unit of Molar Heat Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0c13h",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "International System of Units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.molar_heat_capacity_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.molar_heat_capacity_unit . \nVALUES ?x1 { :m.0c13h } \n?x0 :measurement_unit.molar_heat_capacity_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.molar_heat_capacity_unit (JOIN measurement_unit.molar_heat_capacity_unit.measurement_system m.0c13h))"
    },
    {
        "qid": 3200686008000,
        "question": "the digital camera of mpeg4 has what camera sensor type?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d17kj",
                "entity_name": "CMOS sensor"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "digicams.camera_sensor_type",
                    "class": "digicams.camera_sensor_type",
                    "friendly_name": "Camera Sensor Type",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "digicams.digital_camera",
                    "class": "digicams.digital_camera",
                    "friendly_name": "Digital Camera",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.05182",
                    "class": "digicams.camera_compressed_format",
                    "friendly_name": "mpeg4",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "digicams.digital_camera.sensor_type",
                    "friendly_name": "Sensor type"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "digicams.camera_compressed_format.cameras",
                    "friendly_name": "Cameras"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :digicams.camera_sensor_type . \n?x1 :type.object.type :digicams.digital_camera . \nVALUES ?x2 { :m.05182 } \n?x1 :digicams.digital_camera.sensor_type ?x0 . \n?x2 :digicams.camera_compressed_format.cameras ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "digicams"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND digicams.camera_sensor_type (JOIN (R digicams.digital_camera.sensor_type) (JOIN (R digicams.camera_compressed_format.cameras) m.05182)))"
    },
    {
        "qid": 2104716004000,
        "question": "what trans-neptunian object has a orbital period less than 4.16385e+06?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02ln4f",
                "entity_name": "90377 Sedna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08m_wd",
                "entity_name": "Nix"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "astronomy.trans_neptunian_object",
                    "class": "astronomy.trans_neptunian_object",
                    "friendly_name": "Trans-Neptunian Object",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "4.16385e+06^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "4.16385e+06",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "astronomy.orbital_relationship.orbital_period",
                    "friendly_name": "Orbital Period"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :astronomy.trans_neptunian_object . \nFILTER (?x1 <= \"4.16385e+06\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :astronomy.orbital_relationship.orbital_period ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "astronomy"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND astronomy.trans_neptunian_object (le astronomy.orbital_relationship.orbital_period 4.16385e+06^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 4302314015000,
        "question": "using pharmacological modulation of cocaine effects \u2013 1 which medical trial has the least number of expect total enrollment?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zbgdy",
                "entity_name": "Treatment"
            }
        ],
        "function": "argmax",
        "num_node": 4,
        "num_edge": 3,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "medicine.medical_trial_design",
                    "class": "medicine.medical_trial_design",
                    "friendly_name": "Medical trial design",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "medicine.medical_trial",
                    "class": "medicine.medical_trial",
                    "friendly_name": "Medical trial",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.03zbbvr",
                    "class": "medicine.medical_trial",
                    "friendly_name": "Pharmacological Modulation of Cocaine Effects \u2013 1",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 3,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.int",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "medicine.medical_trial.design",
                    "friendly_name": "Design"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "medicine.medical_trial_design.trials",
                    "friendly_name": "Trials"
                },
                {
                    "start": 1,
                    "end": 3,
                    "relation": "medicine.medical_trial.expected_total_enrollment",
                    "friendly_name": "Expected total enrollment"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :medicine.medical_trial_design . \n?x1 :type.object.type :medicine.medical_trial . \nVALUES ?x2 { :m.03zbbvr } \n{\nSELECT (MAX(?y3) AS ?x3)  WHERE { \n?y0 :type.object.type :medicine.medical_trial_design . \n?y1 :type.object.type :medicine.medical_trial . \nVALUES ?y2 { :m.03zbbvr } \n?y1 :medicine.medical_trial.design ?y0 . \n?y0 :medicine.medical_trial_design.trials ?y2 . \n?y1 :medicine.medical_trial.expected_total_enrollment ?y3 . \nFILTER ( ?y0 != ?y1 && ?y0 != ?y2 && ?y0 != ?y3 && ?y1 != ?y2 && ?y1 != ?y3 && ?y2 != ?y3  )\n}\n}\n?x1 :medicine.medical_trial.design ?x0 . \n?x0 :medicine.medical_trial_design.trials ?x2 . \n?x1 :medicine.medical_trial.expected_total_enrollment ?x3 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x0 != ?x3 && ?x1 != ?x2 && ?x1 != ?x3 && ?x2 != ?x3  )\n}\n}",
        "domains": [
            "medicine"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX (AND medicine.medical_trial_design (JOIN medicine.medical_trial_design.trials m.03zbbvr)) (JOIN (R medicine.medical_trial.design) medicine.medical_trial.expected_total_enrollment))"
    },
    {
        "qid": 2100979004000,
        "question": "list what measures 1.0 in teus?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x_ct_",
                "entity_name": "Twenty-foot equivalent unit"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.unit_of_cargo_capacity",
                    "class": "measurement_unit.unit_of_cargo_capacity",
                    "friendly_name": "Unit of Cargo Capacity",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "1.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "1.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.unit_of_cargo_capacity.capacity_in_teus",
                    "friendly_name": "Capacity in TEUs"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.unit_of_cargo_capacity . \nVALUES ?x1 { \"1.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :measurement_unit.unit_of_cargo_capacity.capacity_in_teus ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.unit_of_cargo_capacity (JOIN measurement_unit.unit_of_cargo_capacity.capacity_in_teus 1.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2100867012000,
        "question": "2011-01-31 was the initial broadcast date for which radio program?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ng0zyv",
                "entity_name": "The Physics of Football"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "radio.radio_program_episode",
                    "class": "radio.radio_program_episode",
                    "friendly_name": "Radio program episode",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "2011-01-31^^http://www.w3.org/2001/XMLSchema#date",
                    "class": "type.datetime",
                    "friendly_name": "2011-01-31",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "radio.radio_program_episode.air_date",
                    "friendly_name": "Air date"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :radio.radio_program_episode . \nVALUES ?x1 { \"2011-01-31-08:00\"^^<http://www.w3.org/2001/XMLSchema#date> } \n?x0 :radio.radio_program_episode.air_date ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "radio"
        ],
        "level": "zero-shot",
        "s_expression": "(AND radio.radio_program_episode (JOIN radio.radio_program_episode.air_date 2011-01-31^^http://www.w3.org/2001/XMLSchema#date))"
    },
    {
        "qid": 3204615012000,
        "question": "what private company limited by shares is the theater company that produced that face?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0y4ydgy",
                "entity_name": "Royal Court Theatre"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "theater.theater_company",
                    "class": "theater.theater_company",
                    "friendly_name": "Theater Company",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0262dl9",
                    "class": "business.company_type",
                    "friendly_name": "Private company limited by shares",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0y60bt7",
                    "class": "theater.theater_production",
                    "friendly_name": "That Face",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "organization.organization.legal_structure",
                    "friendly_name": "Legal structure"
                },
                {
                    "start": 2,
                    "end": 0,
                    "relation": "theater.theater_production.producing_company",
                    "friendly_name": "Producing Company"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :theater.theater_company . \nVALUES ?x1 { :m.0262dl9 } \nVALUES ?x2 { :m.0y60bt7 } \n?x0 :organization.organization.legal_structure ?x1 . \n?x2 :theater.theater_production.producing_company ?x0 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "theater",
            "organization"
        ],
        "level": "compositional",
        "s_expression": "(AND theater.theater_company (AND (JOIN organization.organization.legal_structure m.0262dl9) (JOIN (R theater.theater_production.producing_company) m.0y60bt7)))"
    },
    {
        "qid": 2102705005000,
        "question": "the square degree in which measurement system is the unit of the solid angle ?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.08f70z",
                "entity_name": "Non-SI units mentioned in the SI"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.measurement_system",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Measurement System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07q4vj",
                    "class": "measurement_unit.solid_angle_unit",
                    "friendly_name": "Square degree",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.measurement_system.solid_angle_units",
                    "friendly_name": "Solid Angle Units"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.measurement_system . \nVALUES ?x1 { :m.07q4vj } \n?x0 :measurement_unit.measurement_system.solid_angle_units ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.measurement_system (JOIN measurement_unit.measurement_system.solid_angle_units m.07q4vj))"
    },
    {
        "qid": 2101705015000,
        "question": "video games with a rating of 7 are found where?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zv_3",
                "entity_name": "Pan European Game Information"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.computer_game_rating_system",
                    "class": "cvg.computer_game_rating_system",
                    "friendly_name": "Video Game Rating System",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.07vqd2x",
                    "class": "cvg.computer_game_rating",
                    "friendly_name": "7",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.computer_game_rating_system.ratings",
                    "friendly_name": "Ratings"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.computer_game_rating_system . \nVALUES ?x1 { :m.07vqd2x } \n?x0 :cvg.computer_game_rating_system.ratings ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.computer_game_rating_system (JOIN cvg.computer_game_rating_system.ratings m.07vqd2x))"
    },
    {
        "qid": 2100859003000,
        "question": "what is the unit of magnetic flux density in measurement system centimetre\u2013gram\u2013second system of units?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.038jg",
                "entity_name": "Gauss"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0csh0c",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Centimetre\u2013gram\u2013second system of units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \nVALUES ?x1 { :m.0csh0c } \n?x0 :measurement_unit.magnetic_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_density_unit (JOIN measurement_unit.magnetic_flux_density_unit.measurement_system m.0csh0c))"
    },
    {
        "qid": 2104639002000,
        "question": "which lake has the largest catchment area?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.01mlk",
                "entity_name": "Caspian Sea"
            }
        ],
        "function": "argmax",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "geography.lake",
                    "class": "geography.lake",
                    "friendly_name": "Lake",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "0^^http://www.w3.org/2001/XMLSchema#int",
                    "class": "type.float",
                    "friendly_name": "0",
                    "question_node": 0,
                    "function": "argmax"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "geography.lake.catchment_area",
                    "friendly_name": "Catchment area"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :geography.lake . \n{\nSELECT (MAX(?y1) AS ?x1)  WHERE { \n?y0 :type.object.type :geography.lake . \n?y0 :geography.lake.catchment_area ?y1 . \nFILTER ( ?y0 != ?y1  )\n}\n}\n?x0 :geography.lake.catchment_area ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "geography"
        ],
        "level": "compositional",
        "s_expression": "(ARGMAX geography.lake geography.lake.catchment_area)"
    },
    {
        "qid": 2100859001000,
        "question": "name the unit of magnetic flux density in measurement system centimetre\u2013gram\u2013second system of units.",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.038jg",
                "entity_name": "Gauss"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.magnetic_flux_density_unit",
                    "class": "measurement_unit.magnetic_flux_density_unit",
                    "friendly_name": "Unit of Magnetic Flux Density",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.0csh0c",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Centimetre\u2013gram\u2013second system of units",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.magnetic_flux_density_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.magnetic_flux_density_unit . \nVALUES ?x1 { :m.0csh0c } \n?x0 :measurement_unit.magnetic_flux_density_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.magnetic_flux_density_unit (JOIN measurement_unit.magnetic_flux_density_unit.measurement_system m.0csh0c))"
    },
    {
        "qid": 3200435003000,
        "question": "what unit profile is the si base unit of joules?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "g.120hhsxf",
                "entity_name": "Kiloton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.1224btsg",
                "entity_name": "Kilojoule"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.122jqjdq",
                "entity_name": "Megaton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017mjn",
                "entity_name": "Hartree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018lqb",
                "entity_name": "Kilowatt hour"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fr3",
                "entity_name": "British thermal unit"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wv2",
                "entity_name": "Calorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02m68",
                "entity_name": "Electronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02phk",
                "entity_name": "Erg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qdq0",
                "entity_name": "Barrel of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03r93c",
                "entity_name": "Tonne of oil equivalent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04g9275",
                "entity_name": "Kilocalorie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04n4r_n",
                "entity_name": "Cubic mile of oil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cdmtb",
                "entity_name": "Ton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvgm",
                "entity_name": "Milliton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cpvh4",
                "entity_name": "Microton of TNT"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05pxqc7",
                "entity_name": "Megaelectronvolt"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cz9j60",
                "entity_name": "Kilogram oil equivalent"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "freebase.unit_profile",
                    "class": "freebase.unit_profile",
                    "friendly_name": "Unit Profile",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "measurement_unit.common_dimension",
                    "class": "measurement_unit.common_dimension",
                    "friendly_name": "Common Dimension",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.04570",
                    "class": "measurement_unit.energy_unit",
                    "friendly_name": "joules",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "measurement_unit.dimension.units",
                    "friendly_name": "Units"
                },
                {
                    "start": 1,
                    "end": 2,
                    "relation": "measurement_unit.dimension.si_base_unit",
                    "friendly_name": "SI Base Unit"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :freebase.unit_profile . \n?x1 :type.object.type :measurement_unit.common_dimension . \nVALUES ?x2 { :m.04570 } \n?x1 :measurement_unit.dimension.units ?x0 . \n?x1 :measurement_unit.dimension.si_base_unit ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND freebase.unit_profile (JOIN (R measurement_unit.dimension.units) (JOIN measurement_unit.dimension.si_base_unit m.04570)))"
    },
    {
        "qid": 2104980012000,
        "question": "find politicians who weigh less than 93.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.013rhn",
                "entity_name": "Kevin Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0256hg",
                "entity_name": "Sebastian Coe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02mjmr",
                "entity_name": "Barack Obama"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wxxw",
                "entity_name": "Gianni Rivera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03fcx8",
                "entity_name": "Lynn Swann"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04r3y_",
                "entity_name": "Dave Bing"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09b6zr",
                "entity_name": "George W. Bush"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d5jhb",
                "entity_name": "Jerzy Kulej"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ktpg",
                "entity_name": "Alexis Arg\u00fcello"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zprp0t",
                "entity_name": "Mikael D\u00fai Bolinder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.066rzr",
                "entity_name": "John Alexander"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026_c2",
                "entity_name": "George Hees"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04xfb",
                "entity_name": "Mahatma Gandhi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xyq6",
                "entity_name": "Steve Largent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.021f_p",
                "entity_name": "Dawn Fraser"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028rk",
                "entity_name": "Dwight D. Eisenhower"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w_tj",
                "entity_name": "George Weah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nyjy",
                "entity_name": "Svetlana Khorkina"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09z54n",
                "entity_name": "Don Lash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01xrwvx",
                "entity_name": "Chris Maden"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01ym46",
                "entity_name": "Charlie Hennigan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0200r_",
                "entity_name": "Frank Mahovlich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027xmzp",
                "entity_name": "Ben Couch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qlzkj",
                "entity_name": "Puti Tipene Watene"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02wb15",
                "entity_name": "Chris Laidlaw"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0444x",
                "entity_name": "Jack Kemp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.045tj3",
                "entity_name": "Tony Steel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0580ws",
                "entity_name": "Grzegorz Lato"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05y_q3",
                "entity_name": "Thomas Steen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07h3f2",
                "entity_name": "William Grenfell, 1st Baron Desborough"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03bjsk",
                "entity_name": "Jean Borotra"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03ltlb",
                "entity_name": "Vladislav Tretiak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0476r9",
                "entity_name": "Tu Wyllie"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049hzp",
                "entity_name": "Damian Drum"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05334d",
                "entity_name": "Moe Mantha, Sr."
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05c1cnn",
                "entity_name": "Gustav-Adolf Schur"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06ygtj",
                "entity_name": "Reiner Klimke"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.083v6g",
                "entity_name": "Heike Drechsler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08lg2n",
                "entity_name": "Nigel Smart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09jlgc",
                "entity_name": "Chris Kibermanis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gkxpr5",
                "entity_name": "Russell Jeffrey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.027fpc7",
                "entity_name": "LaVern Dilweg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029vj1",
                "entity_name": "Guy Drut"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02hhf8q",
                "entity_name": "Christian Kauter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x5n87",
                "entity_name": "Hugh Delahunty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03462w",
                "entity_name": "Peter \u0160\u0165astn\u00fd"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nz8y",
                "entity_name": "Hamza Yerlikaya"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0467jj",
                "entity_name": "Lionel Conacher"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06zq4ln",
                "entity_name": "Rudolf G\u00f6tz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0crg42f",
                "entity_name": "Damon Dunn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dy5sh",
                "entity_name": "Patrick Ortlieb"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cwlk7",
                "entity_name": "James A. Murphy III"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cm689",
                "entity_name": "Gabriela P\u00e9rez del Solar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05lpfd",
                "entity_name": "Robert Jaworski"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dqs6j",
                "entity_name": "Terry Dehere"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h20p3",
                "entity_name": "Gerald Calabrese"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01g36r",
                "entity_name": "James Brendan Connolly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01hzjj",
                "entity_name": "Don Getty"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.031ypk",
                "entity_name": "Pietro Mennea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320q8",
                "entity_name": "Lasse Vir\u00e9n"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cpqq8",
                "entity_name": "John Devine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03mh11_",
                "entity_name": "Cecilia Tait"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rzd2",
                "entity_name": "Alina Kabaeva"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vh_s",
                "entity_name": "David Cecil, 6th Marquess of Exeter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043hdc",
                "entity_name": "Syl Apps"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04yfyx",
                "entity_name": "Marc Wilmots"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0277k2m",
                "entity_name": "Stefano Tacconi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0405yf6",
                "entity_name": "Klaus K\u00f6ste"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042gv2",
                "entity_name": "Yordan Letchkov"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04cwdws",
                "entity_name": "Leyla Chihu\u00e1n"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08j5_r",
                "entity_name": "Tyrone Howe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03x0tj",
                "entity_name": "Red Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mp",
                "entity_name": "Joseph Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vd5d",
                "entity_name": "Howie Meeker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047cw5r",
                "entity_name": "Kadiyam Srihari"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026_lls",
                "entity_name": "Grahame Thorne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r6z8",
                "entity_name": "Jeb Stuart Magruder"
            }
        ],
        "function": "<",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "government.politician",
                    "class": "government.politician",
                    "friendly_name": "Politician",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "93.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "93.0",
                    "question_node": 0,
                    "function": "<"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :government.politician . \nFILTER (?x1 < \"93.0\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND government.politician (lt people.person.weight_kg 93.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 2101873001000,
        "question": "what measure for unit of plane angle is a non-si units mentioned in the si?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.04gc58",
                "entity_name": "Degree"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zgv",
                "entity_name": "Minute of arc"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05rs31",
                "entity_name": "Angular mil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "g.120rrqkm",
                "entity_name": "Second of arc"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "measurement_unit.angle_unit",
                    "class": "measurement_unit.angle_unit",
                    "friendly_name": "Unit of Plane Angle",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.08f70z",
                    "class": "measurement_unit.measurement_system",
                    "friendly_name": "Non-SI units mentioned in the SI",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "measurement_unit.angle_unit.measurement_system",
                    "friendly_name": "Measurement System"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :measurement_unit.angle_unit . \nVALUES ?x1 { :m.08f70z } \n?x0 :measurement_unit.angle_unit.measurement_system ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "measurement_unit"
        ],
        "level": "zero-shot",
        "s_expression": "(AND measurement_unit.angle_unit (JOIN measurement_unit.angle_unit.measurement_system m.08f70z))"
    },
    {
        "qid": 3202083009000,
        "question": "exercise physiology was the major of which chef?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r56y",
                "entity_name": "Cat Cora"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "dining.chef",
                    "class": "dining.chef",
                    "friendly_name": "Chef",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "education.education",
                    "class": "education.education",
                    "friendly_name": "Education",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0237kg",
                    "class": "education.field_of_study",
                    "friendly_name": "Exercise physiology",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 1,
                    "end": 0,
                    "relation": "education.education.student",
                    "friendly_name": "Student"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "education.field_of_study.students_majoring",
                    "friendly_name": "Students majoring in this field"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :dining.chef . \n?x1 :type.object.type :education.education . \nVALUES ?x2 { :m.0237kg } \n?x1 :education.education.student ?x0 . \n?x2 :education.field_of_study.students_majoring ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "education"
        ],
        "level": "i.i.d.",
        "s_expression": "(AND dining.chef (JOIN (R education.education.student) (JOIN (R education.field_of_study.students_majoring) m.0237kg)))"
    },
    {
        "qid": 2101534003000,
        "question": "what rocket engines are able to thrust 548800.0?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xlvl3",
                "entity_name": "RD-211"
            }
        ],
        "function": "none",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "spaceflight.rocket_engine",
                    "class": "spaceflight.rocket_engine",
                    "friendly_name": "Rocket engine",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "548800.0^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "548800.0",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "spaceflight.rocket_engine.thrust_sea_level",
                    "friendly_name": "Thrust (sea level)"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :spaceflight.rocket_engine . \nVALUES ?x1 { \"548800.0\"^^<http://www.w3.org/2001/XMLSchema#float> } \n?x0 :spaceflight.rocket_engine.thrust_sea_level ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "spaceflight"
        ],
        "level": "compositional",
        "s_expression": "(AND spaceflight.rocket_engine (JOIN spaceflight.rocket_engine.thrust_sea_level 548800.0^^http://www.w3.org/2001/XMLSchema#float))"
    },
    {
        "qid": 3204804000000,
        "question": "what is the input method for the musical game with guitar hero iii - set 1 - starting out small?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_xfg7",
                "entity_name": "Guitar Hero Guitar"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.input_method",
                    "class": "cvg.input_method",
                    "friendly_name": "Input Method",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "class",
                    "id": "cvg.musical_game",
                    "class": "cvg.musical_game",
                    "friendly_name": "Musical Game",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0dp7bmr",
                    "class": "cvg.video_game_soundtrack",
                    "friendly_name": "Guitar Hero III - Set 1 - Starting Out Small",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.input_method.games_using_this",
                    "friendly_name": "Games Using This"
                },
                {
                    "start": 2,
                    "end": 1,
                    "relation": "cvg.video_game_soundtrack.video_game",
                    "friendly_name": "Video game"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.input_method . \n?x1 :type.object.type :cvg.musical_game . \nVALUES ?x2 { :m.0dp7bmr } \n?x0 :cvg.input_method.games_using_this ?x1 . \n?x2 :cvg.video_game_soundtrack.video_game ?x1 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.input_method (JOIN cvg.input_method.games_using_this (JOIN (R cvg.video_game_soundtrack.video_game) m.0dp7bmr)))"
    },
    {
        "qid": 3200500002000,
        "question": "what are the video game developer developed midway arcade treasures deluxe edition game and version of tna impact! game?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.027lf1",
                "entity_name": "Midway Games"
            }
        ],
        "function": "none",
        "num_node": 3,
        "num_edge": 2,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "cvg.cvg_developer",
                    "class": "cvg.cvg_developer",
                    "friendly_name": "Video Game Developer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "entity",
                    "id": "m.02hlrsg",
                    "class": "cvg.game_version",
                    "friendly_name": "TNA iMPACT!",
                    "question_node": 0,
                    "function": "none"
                },
                {
                    "nid": 2,
                    "node_type": "entity",
                    "id": "m.0bkhc4",
                    "class": "cvg.computer_game_compilation",
                    "friendly_name": "Midway Arcade Treasures Deluxe Edition",
                    "question_node": 0,
                    "function": "none"
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "cvg.cvg_developer.game_versions_developed",
                    "friendly_name": "Game Versions Developed"
                },
                {
                    "start": 0,
                    "end": 2,
                    "relation": "cvg.cvg_developer.games_developed",
                    "friendly_name": "Games Developed"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :cvg.cvg_developer . \nVALUES ?x1 { :m.02hlrsg } \nVALUES ?x2 { :m.0bkhc4 } \n?x0 :cvg.cvg_developer.game_versions_developed ?x1 . \n?x0 :cvg.cvg_developer.games_developed ?x2 . \nFILTER ( ?x0 != ?x1 && ?x0 != ?x2 && ?x1 != ?x2  )\n}\n}",
        "domains": [
            "cvg"
        ],
        "level": "zero-shot",
        "s_expression": "(AND cvg.cvg_developer (AND (JOIN cvg.cvg_developer.game_versions_developed m.02hlrsg) (JOIN cvg.cvg_developer.games_developed m.0bkhc4)))"
    },
    {
        "qid": 2105404005000,
        "question": "what film producers weights 145.15 or less?",
        "answer": [
            {
                "answer_type": "Entity",
                "answer_argument": "m.0127s7",
                "entity_name": "Christina Aguilera"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.012d40",
                "entity_name": "Jackie Chan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0133yt",
                "entity_name": "Johan Paulik"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014g_s",
                "entity_name": "Dwayne Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015f7",
                "entity_name": "Britney Spears"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.015lhm",
                "entity_name": "Chuck Norris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.017rjs",
                "entity_name": "Jose Canseco"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018fyy",
                "entity_name": "Traci Lords"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018grr",
                "entity_name": "Will Ferrell"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.018p4y",
                "entity_name": "Pierce Brosnan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fmdk",
                "entity_name": "Amar'e Stoudemire"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01fwk3",
                "entity_name": "Geena Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01jz6d",
                "entity_name": "LeBron James"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01kwsg",
                "entity_name": "Tommy Lee Jones"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l2fn",
                "entity_name": "Keira Knightley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01l9p",
                "entity_name": "Charlize Theron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01lszsz",
                "entity_name": "Lil Romeo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01t6lp",
                "entity_name": "Hideaki Anno"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vs_v8",
                "entity_name": "Madonna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vsgrn",
                "entity_name": "Eminem"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01wj18h",
                "entity_name": "Shakira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yrrh",
                "entity_name": "Earl Monroe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.025n3p",
                "entity_name": "Vin Diesel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.026c6lr",
                "entity_name": "Sasha Grey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.028nb1",
                "entity_name": "Kelly Slater"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02bf2s",
                "entity_name": "Jim Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02c5ls",
                "entity_name": "Reggie Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02w5q6",
                "entity_name": "Mario Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0336mc",
                "entity_name": "Diane Kruger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0347db",
                "entity_name": "Neil Patrick Harris"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.038rzr",
                "entity_name": "Gerard Butler"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03g4pf",
                "entity_name": "Vijay Amritraj"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03h_fk5",
                "entity_name": "Johnny Cash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l26m",
                "entity_name": "Carmelo Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nx4_0",
                "entity_name": "Steve Cruz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pjcc",
                "entity_name": "Michael Finley"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03vrv9",
                "entity_name": "Fred Williamson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.042xh",
                "entity_name": "J. K. Rowling"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.044mvs",
                "entity_name": "Ian Somerhalder"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.049sb",
                "entity_name": "Kareem Abdul-Jabbar"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04c1xv",
                "entity_name": "Stella Stevens"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04lywf",
                "entity_name": "Simeon Rice"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04q5yv",
                "entity_name": "India Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04shbh",
                "entity_name": "Daniel Craig"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.055c8",
                "entity_name": "Morgan Freeman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05h22h",
                "entity_name": "Mitch Richmond"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05mbxl",
                "entity_name": "Bob McKeown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05r5w",
                "entity_name": "Pamela Anderson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05tkm",
                "entity_name": "Paul Allen"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05wty0",
                "entity_name": "Sof\u00eda Vergara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067g_",
                "entity_name": "Pel\u00e9"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06d8z0",
                "entity_name": "Terrell Suggs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07378r",
                "entity_name": "C\u00e9dric Klapisch"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07ss8_",
                "entity_name": "Chris Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.086qd",
                "entity_name": "Whitney Houston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09l3p",
                "entity_name": "Natalie Portman"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09qvs",
                "entity_name": "Mike Tyson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09yrh",
                "entity_name": "Jennifer Aniston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffl5q",
                "entity_name": "Michael Brandon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h64f0w",
                "entity_name": "Gabby Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jfx1",
                "entity_name": "Johnny Depp"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwtj",
                "entity_name": "Jenna Jameson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0k_rwq",
                "entity_name": "Jung Woo-sung"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kjgl",
                "entity_name": "Michael Douglas"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0m8_v",
                "entity_name": "Jean-Claude Van Damme"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0pmhf",
                "entity_name": "Denzel Washington"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0tc7",
                "entity_name": "Arnold Schwarzenegger"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01qgpm",
                "entity_name": "George Chuvalo"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0mv97",
                "entity_name": "Ray Mancini"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.074kpr",
                "entity_name": "Pete Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01cd5l",
                "entity_name": "Eric Cantona"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01rzxl",
                "entity_name": "Hulk Hogan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01s7z0",
                "entity_name": "Vince McMahon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01zx8c",
                "entity_name": "Stone Cold Steve Austin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.022wsn",
                "entity_name": "Bethany Hamilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02t_99",
                "entity_name": "Jenny McCarthy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z5msj",
                "entity_name": "Eli Cross"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0330dc",
                "entity_name": "Chyna"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03rrhc",
                "entity_name": "Diamond Dallas Page"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.060z3p",
                "entity_name": "Jillian Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0hwfl",
                "entity_name": "Anna Nicole Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.014zfs",
                "entity_name": "Bill Cosby"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01bx6q",
                "entity_name": "Zara Phillips"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01pj3h",
                "entity_name": "Tom Selleck"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vvyc_",
                "entity_name": "50 Cent"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01vw8mh",
                "entity_name": "Snoop Dogg"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01yf85",
                "entity_name": "Jessica Alba"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02114t",
                "entity_name": "Scarlett Johansson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0227vl",
                "entity_name": "Paris Hilton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0382m4",
                "entity_name": "Michael C. Hall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03cyv3r",
                "entity_name": "Ku Hye-sun"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2bw",
                "entity_name": "Elton Brand"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03d2zk",
                "entity_name": "Shannon Tweed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03nwwqf",
                "entity_name": "Jake Deckard"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03pmbb",
                "entity_name": "Manny Pacquiao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03y82t6",
                "entity_name": "Katy Perry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03zz8b",
                "entity_name": "Amanda Seyfried"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043gj",
                "entity_name": "John Wayne"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043zg",
                "entity_name": "Jennifer Lopez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0451j",
                "entity_name": "Jet Li"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04x2sr",
                "entity_name": "Eric Koston"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05l99lg",
                "entity_name": "Owen Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06gyd",
                "entity_name": "Ray Kurzweil"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06mr6",
                "entity_name": "Sean Connery"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06wm0z",
                "entity_name": "Zac Efron"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.073tjg",
                "entity_name": "Christina Ferguson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07cm6_",
                "entity_name": "Sean Paul Lockhart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07r1h",
                "entity_name": "Tom Cruise"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.095nx",
                "entity_name": "Magic Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.099d4",
                "entity_name": "Bruce Lee"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c2yrf",
                "entity_name": "Joakim Noah"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0d3q09",
                "entity_name": "Anthony Wall"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0dpjxx",
                "entity_name": "Ray Dragon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0ffgh",
                "entity_name": "R. Kelly"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0l_s0",
                "entity_name": "Tony Hawk"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0svt5",
                "entity_name": "Billie Jean King"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c8f54",
                "entity_name": "Kenny Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.029zrv",
                "entity_name": "Wojciech Fibak"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02pb1n",
                "entity_name": "Al-Saadi Gaddafi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f0r85",
                "entity_name": "R\u00e9my Martin"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gdgrp",
                "entity_name": "Tatum Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0wbkcxg",
                "entity_name": "Nolan McDonald"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047nbl6",
                "entity_name": "Scott L. Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h2zdq4",
                "entity_name": "Matthew Fahey"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bv1lt",
                "entity_name": "Tony Anthony"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01r4_t",
                "entity_name": "Veronica Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02x2sc",
                "entity_name": "Alan Autry"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.03l7gl",
                "entity_name": "Alex Karras"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08lrll",
                "entity_name": "Maurice Smith"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0fcmm8",
                "entity_name": "Ruddy Rodr\u00edguez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g5m7y",
                "entity_name": "Jeff Norton"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0jwzy5h",
                "entity_name": "Garrett McNamara"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0bw2vq",
                "entity_name": "Rick Fuller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.020hh3",
                "entity_name": "Lars Ulrich"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02qjj7",
                "entity_name": "Dean Cain"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07_0qj",
                "entity_name": "Ellis Hobbs"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034hyc",
                "entity_name": "Jason Statham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09kpxx",
                "entity_name": "Archie Kao"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0f6pym",
                "entity_name": "Dave Hunter"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z36s9",
                "entity_name": "Ed Cunningham"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034984",
                "entity_name": "Paola Su\u00e1rez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.046gbn",
                "entity_name": "Bobby Valentine"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.047c3h2",
                "entity_name": "Jack Reddish"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0553bb",
                "entity_name": "T. T. Boy"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06qns1",
                "entity_name": "Jonathan Babineaux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.080p9nh",
                "entity_name": "Adam White"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c1271",
                "entity_name": "Jason Brown"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0kd5ctn",
                "entity_name": "Sara Oliveira"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05_8dd",
                "entity_name": "Brad Gilbert"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.067sqt",
                "entity_name": "Jennifer Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09tpw5",
                "entity_name": "Lucas Till"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07c21k",
                "entity_name": "Francisco Garc\u00eda"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0320jz",
                "entity_name": "Jessica Biel"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.037gjc",
                "entity_name": "Mark Harmon"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zz22",
                "entity_name": "Amanda Righetti"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g35x3",
                "entity_name": "Naoko Watanabe"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02_yh6",
                "entity_name": "Rick Fox"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02rg3z6",
                "entity_name": "Phil Walker"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.034fjj",
                "entity_name": "Jayson Williams"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04qt410",
                "entity_name": "Jack Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04vvpr",
                "entity_name": "Dale Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zrys",
                "entity_name": "Baron Davis"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06x2t1",
                "entity_name": "A. C. Green"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.084w5b",
                "entity_name": "Randy Winn"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09dw5j",
                "entity_name": "Michael Turner"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.07htfq",
                "entity_name": "Jeremy Borash"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.08z0yh7",
                "entity_name": "Craig Richards"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01w9ph_",
                "entity_name": "Jim Morrison"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04zl_0",
                "entity_name": "Jeff Reed"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0g98zyw",
                "entity_name": "Stuart Brennan"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02732z0",
                "entity_name": "Mehr Jesia Rampal"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02xbllm",
                "entity_name": "Shaun Miller"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05cmzk",
                "entity_name": "Vince Spadea"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.06w2nm",
                "entity_name": "Anna Falchi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.09nc5v",
                "entity_name": "Jordan Babineaux"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cwhpj",
                "entity_name": "Victor Hobson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.01v5wt",
                "entity_name": "Chick Evans"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0c4db1",
                "entity_name": "Don \"The Dragon\" Wilson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gx0q3w",
                "entity_name": "Billy Sorrentino"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gb_g6w",
                "entity_name": "Mimi Lesseos"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0cpxdn",
                "entity_name": "Johan Volny"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0zcxn31",
                "entity_name": "Tim Wade"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h77qll",
                "entity_name": "Robert D Schwartz"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc4h37",
                "entity_name": "Kim Marie Johnson"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0gc3ppr",
                "entity_name": "Angelyna Martinez"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.04d_j7s",
                "entity_name": "Kazuo Hayashi"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.0h7r047",
                "entity_name": "Susan Hart"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.043qlff",
                "entity_name": "David Fariborz Davoodian"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.05kxvc",
                "entity_name": "Dean Karnazes"
            },
            {
                "answer_type": "Entity",
                "answer_argument": "m.02z888b",
                "entity_name": "Susannah Mills"
            }
        ],
        "function": "<=",
        "num_node": 2,
        "num_edge": 1,
        "graph_query": {
            "nodes": [
                {
                    "nid": 0,
                    "node_type": "class",
                    "id": "film.producer",
                    "class": "film.producer",
                    "friendly_name": "Film producer",
                    "question_node": 1,
                    "function": "none"
                },
                {
                    "nid": 1,
                    "node_type": "literal",
                    "id": "145.15^^http://www.w3.org/2001/XMLSchema#float",
                    "class": "type.float",
                    "friendly_name": "145.15",
                    "question_node": 0,
                    "function": "<="
                }
            ],
            "edges": [
                {
                    "start": 0,
                    "end": 1,
                    "relation": "people.person.weight_kg",
                    "friendly_name": "Weight"
                }
            ]
        },
        "sparql_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX : <http://rdf.freebase.com/ns/> \nSELECT (?x0 AS ?value) WHERE {\nSELECT DISTINCT ?x0  WHERE { \n?x0 :type.object.type :film.producer . \nFILTER (?x1 <= \"145.15\"^^<http://www.w3.org/2001/XMLSchema#float>)\n?x0 :people.person.weight_kg ?x1 . \nFILTER ( ?x0 != ?x1  )\n}\n}",
        "domains": [
            "people"
        ],
        "level": "compositional",
        "s_expression": "(AND film.producer (le people.person.weight_kg 145.15^^http://www.w3.org/2001/XMLSchema#float))"
    }
]